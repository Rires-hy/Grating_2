
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  08008fac  08008fac  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fac  08008fac  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08008fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  2000019c  08009150  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e1c  08009150  00021e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d01a  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396e  00000000  00000000  0003d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00040b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  00041ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002976e  00000000  00000000  00043110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e9f  00000000  00000000  0006c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f29e2  00000000  00000000  0008371d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001760ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005110  00000000  00000000  00176154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000019c 	.word	0x2000019c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f0c 	.word	0x08008f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a0 	.word	0x200001a0
 80001c4:	08008f0c 	.word	0x08008f0c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe89 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f8d0 	bl	8000374 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 faa6 	bl	8000724 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f954 	bl	8000484 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f9a4 	bl	8000528 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001e0:	f007 ffe2 	bl	80081a8 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001e4:	f000 fa48 	bl	8000678 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001e8:	f000 f9ec 	bl	80005c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM5->CNT=750000;
 80001ec:	4b51      	ldr	r3, [pc, #324]	; (8000334 <main+0x16c>)
 80001ee:	4a52      	ldr	r2, [pc, #328]	; (8000338 <main+0x170>)
 80001f0:	625a      	str	r2, [r3, #36]	; 0x24


  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001f2:	213c      	movs	r1, #60	; 0x3c
 80001f4:	4851      	ldr	r0, [pc, #324]	; (800033c <main+0x174>)
 80001f6:	f004 f887 	bl	8004308 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2104      	movs	r1, #4
 80001fe:	4850      	ldr	r0, [pc, #320]	; (8000340 <main+0x178>)
 8000200:	f001 f9dc 	bl	80015bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020a:	484e      	ldr	r0, [pc, #312]	; (8000344 <main+0x17c>)
 800020c:	f001 f9d6 	bl	80015bc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000210:	484d      	ldr	r0, [pc, #308]	; (8000348 <main+0x180>)
 8000212:	f003 fe05 	bl	8003e20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000216:	484d      	ldr	r0, [pc, #308]	; (800034c <main+0x184>)
 8000218:	f003 fe02 	bl	8003e20 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800021c:	210c      	movs	r1, #12
 800021e:	484b      	ldr	r0, [pc, #300]	; (800034c <main+0x184>)
 8000220:	f003 fec6 	bl	8003fb0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  xSpeed = 250U;
 8000224:	4b4a      	ldr	r3, [pc, #296]	; (8000350 <main+0x188>)
 8000226:	22fa      	movs	r2, #250	; 0xfa
 8000228:	701a      	strb	r2, [r3, #0]
       ySpeed = 250U;
 800022a:	4b4a      	ldr	r3, [pc, #296]	; (8000354 <main+0x18c>)
 800022c:	22fa      	movs	r2, #250	; 0xfa
 800022e:	701a      	strb	r2, [r3, #0]
       xSen = 2U;
 8000230:	4b49      	ldr	r3, [pc, #292]	; (8000358 <main+0x190>)
 8000232:	2202      	movs	r2, #2
 8000234:	701a      	strb	r2, [r3, #0]
       ySen = 2U;
 8000236:	4b49      	ldr	r3, [pc, #292]	; (800035c <main+0x194>)
 8000238:	2202      	movs	r2, #2
 800023a:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);



	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 800023c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000240:	4840      	ldr	r0, [pc, #256]	; (8000344 <main+0x17c>)
 8000242:	f001 f9a3 	bl	800158c <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d103      	bne.n	8000254 <main+0x8c>
		  	//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
		  	  X0=1;
 800024c:	4b44      	ldr	r3, [pc, #272]	; (8000360 <main+0x198>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
 8000252:	e002      	b.n	800025a <main+0x92>
	  }
	  else {
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
		  X0=0;
 8000254:	4b42      	ldr	r3, [pc, #264]	; (8000360 <main+0x198>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 800025a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025e:	4839      	ldr	r0, [pc, #228]	; (8000344 <main+0x17c>)
 8000260:	f001 f994 	bl	800158c <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d103      	bne.n	8000272 <main+0xaa>
		  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_RESET);
		  	  Y0=1;
 800026a:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <main+0x19c>)
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	e002      	b.n	8000278 <main+0xb0>
	  }
	  else  {
		 // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
		  Y0=0;
 8000272:	4b3c      	ldr	r3, [pc, #240]	; (8000364 <main+0x19c>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	  }


	  if(highMode>1) {
 8000278:	4b3b      	ldr	r3, [pc, #236]	; (8000368 <main+0x1a0>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	dd0f      	ble.n	80002a0 <main+0xd8>
	    xSpeed = 50U;
 8000280:	4b33      	ldr	r3, [pc, #204]	; (8000350 <main+0x188>)
 8000282:	2232      	movs	r2, #50	; 0x32
 8000284:	701a      	strb	r2, [r3, #0]
	    ySpeed = 50U;
 8000286:	4b33      	ldr	r3, [pc, #204]	; (8000354 <main+0x18c>)
 8000288:	2232      	movs	r2, #50	; 0x32
 800028a:	701a      	strb	r2, [r3, #0]
	    xSen = 10U;
 800028c:	4b32      	ldr	r3, [pc, #200]	; (8000358 <main+0x190>)
 800028e:	220a      	movs	r2, #10
 8000290:	701a      	strb	r2, [r3, #0]
	    ySen = 10U;
 8000292:	4b32      	ldr	r3, [pc, #200]	; (800035c <main+0x194>)
 8000294:	220a      	movs	r2, #10
 8000296:	701a      	strb	r2, [r3, #0]
	    highMode = 1;
 8000298:	4b33      	ldr	r3, [pc, #204]	; (8000368 <main+0x1a0>)
 800029a:	2201      	movs	r2, #1
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	e012      	b.n	80002c6 <main+0xfe>
	  }else if (highMode < 1) {
 80002a0:	4b31      	ldr	r3, [pc, #196]	; (8000368 <main+0x1a0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	dc0e      	bgt.n	80002c6 <main+0xfe>
	    xSpeed = 250U;
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <main+0x188>)
 80002aa:	22fa      	movs	r2, #250	; 0xfa
 80002ac:	701a      	strb	r2, [r3, #0]
      ySpeed = 250U;
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <main+0x18c>)
 80002b0:	22fa      	movs	r2, #250	; 0xfa
 80002b2:	701a      	strb	r2, [r3, #0]
      xSen = 2U;
 80002b4:	4b28      	ldr	r3, [pc, #160]	; (8000358 <main+0x190>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	701a      	strb	r2, [r3, #0]
      ySen = 2U;
 80002ba:	4b28      	ldr	r3, [pc, #160]	; (800035c <main+0x194>)
 80002bc:	2202      	movs	r2, #2
 80002be:	701a      	strb	r2, [r3, #0]
      highMode = 1;
 80002c0:	4b29      	ldr	r3, [pc, #164]	; (8000368 <main+0x1a0>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
 80002c6:	2120      	movs	r1, #32
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 f95e 	bl	800158c <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d105      	bne.n	80002e2 <main+0x11a>
	      {
	  	    xPul = -(xSen);
 80002d6:	4b20      	ldr	r3, [pc, #128]	; (8000358 <main+0x190>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	425b      	negs	r3, r3
 80002dc:	4a23      	ldr	r2, [pc, #140]	; (800036c <main+0x1a4>)
 80002de:	6013      	str	r3, [r2, #0]
 80002e0:	e00c      	b.n	80002fc <main+0x134>
	      }else if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 80002e2:	2108      	movs	r1, #8
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f001 f950 	bl	800158c <HAL_GPIO_ReadPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d104      	bne.n	80002fc <main+0x134>
	      {
	        xPul = (xSen);
 80002f2:	4b19      	ldr	r3, [pc, #100]	; (8000358 <main+0x190>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <main+0x1a4>)
 80002fa:	601a      	str	r2, [r3, #0]
	      }
	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
 80002fc:	2120      	movs	r1, #32
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f001 f943 	bl	800158c <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d105      	bne.n	8000318 <main+0x150>
	  {
		  yPul = ySen;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <main+0x194>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0x1a8>)
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	e791      	b.n	800023c <main+0x74>
	  }
	  else if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000318:	2108      	movs	r1, #8
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f001 f935 	bl	800158c <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b01      	cmp	r3, #1
 8000326:	d189      	bne.n	800023c <main+0x74>
	  {
		  yPul = -ySen;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <main+0x194>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	425b      	negs	r3, r3
 800032e:	4a10      	ldr	r2, [pc, #64]	; (8000370 <main+0x1a8>)
 8000330:	6013      	str	r3, [r2, #0]
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000332:	e783      	b.n	800023c <main+0x74>
 8000334:	40000c00 	.word	0x40000c00
 8000338:	000b71b0 	.word	0x000b71b0
 800033c:	200003f0 	.word	0x200003f0
 8000340:	48000400 	.word	0x48000400
 8000344:	48001000 	.word	0x48001000
 8000348:	20000494 	.word	0x20000494
 800034c:	200004e0 	.word	0x200004e0
 8000350:	20000534 	.word	0x20000534
 8000354:	2000053c 	.word	0x2000053c
 8000358:	20000000 	.word	0x20000000
 800035c:	20000001 	.word	0x20000001
 8000360:	2000052c 	.word	0x2000052c
 8000364:	2000052d 	.word	0x2000052d
 8000368:	200001bc 	.word	0x200001bc
 800036c:	20000530 	.word	0x20000530
 8000370:	20000538 	.word	0x20000538

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b0b8      	sub	sp, #224	; 0xe0
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800037e:	2244      	movs	r2, #68	; 0x44
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f008 fdba 	bl	8008efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	463b      	mov	r3, r7
 800039a:	2288      	movs	r2, #136	; 0x88
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f008 fdac 	bl	8008efc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003a4:	2310      	movs	r3, #16
 80003a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003b6:	2360      	movs	r3, #96	; 0x60
 80003b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2302      	movs	r3, #2
 80003be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003c2:	2301      	movs	r3, #1
 80003c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003ce:	2328      	movs	r3, #40	; 0x28
 80003d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003d4:	2307      	movs	r3, #7
 80003d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003da:	2302      	movs	r3, #2
 80003dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fa44 	bl	8002878 <HAL_RCC_OscConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003f6:	f000 fac7 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	230f      	movs	r3, #15
 80003fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2303      	movs	r3, #3
 8000402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000418:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800041c:	2104      	movs	r1, #4
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fe10 	bl	8003044 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800042a:	f000 faad 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000434:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000438:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800043a:	2301      	movs	r3, #1
 800043c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800043e:	2301      	movs	r3, #1
 8000440:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000442:	2318      	movs	r3, #24
 8000444:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000446:	2307      	movs	r3, #7
 8000448:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800044a:	2302      	movs	r3, #2
 800044c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000452:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000456:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	4618      	mov	r0, r3
 800045c:	f002 ffcc 	bl	80033f8 <HAL_RCCEx_PeriphCLKConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000466:	f000 fa8f 	bl	8000988 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800046a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800046e:	f002 f99d 	bl	80027ac <HAL_PWREx_ControlVoltageScaling>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000478:	f000 fa86 	bl	8000988 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	37e0      	adds	r7, #224	; 0xe0
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004a2:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004a4:	4a1f      	ldr	r2, [pc, #124]	; (8000524 <MX_TIM1_Init+0xa0>)
 80004a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004aa:	224f      	movs	r2, #79	; 0x4f
 80004ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004b6:	2231      	movs	r2, #49	; 0x31
 80004b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004cc:	4814      	ldr	r0, [pc, #80]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004ce:	f003 fc4f 	bl	8003d70 <HAL_TIM_Base_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80004d8:	f000 fa56 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <MX_TIM1_Init+0x9c>)
 80004ea:	f004 f9cb 	bl	8004884 <HAL_TIM_ConfigClockSource>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80004f4:	f000 fa48 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_TIM1_Init+0x9c>)
 800050a:	f004 fed9 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000514:	f000 fa38 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000494 	.word	0x20000494
 8000524:	40012c00 	.word	0x40012c00

08000528 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_TIM2_Init+0x98>)
 8000548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_TIM2_Init+0x98>)
 8000550:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_TIM2_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_TIM2_Init+0x98>)
 800055e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_TIM2_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_TIM2_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000570:	4813      	ldr	r0, [pc, #76]	; (80005c0 <MX_TIM2_Init+0x98>)
 8000572:	f003 fbfd 	bl	8003d70 <HAL_TIM_Base_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800057c:	f000 fa04 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_TIM2_Init+0x98>)
 800058e:	f004 f979 	bl	8004884 <HAL_TIM_ConfigClockSource>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000598:	f000 f9f6 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_TIM2_Init+0x98>)
 80005aa:	f004 fe89 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80005b4:	f000 f9e8 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200004e0 	.word	0x200004e0

080005c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_TIM3_Init+0xac>)
 80005ea:	4a22      	ldr	r2, [pc, #136]	; (8000674 <MX_TIM3_Init+0xb0>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_TIM3_Init+0xac>)
 80005f0:	224f      	movs	r2, #79	; 0x4f
 80005f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_TIM3_Init+0xac>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_TIM3_Init+0xac>)
 80005fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000600:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_TIM3_Init+0xac>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_TIM3_Init+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <MX_TIM3_Init+0xac>)
 8000610:	f003 fc76 	bl	8003f00 <HAL_TIM_PWM_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800061a:	f000 f9b5 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <MX_TIM3_Init+0xac>)
 800062e:	f004 fe47 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000638:	f000 f9a6 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <MX_TIM3_Init+0xac>)
 8000654:	f004 f806 	bl	8004664 <HAL_TIM_PWM_ConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800065e:	f000 f993 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <MX_TIM3_Init+0xac>)
 8000664:	f000 fa7c 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000440 	.word	0x20000440
 8000674:	40000400 	.word	0x40000400

08000678 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2224      	movs	r2, #36	; 0x24
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fc38 	bl	8008efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_TIM4_Init+0xa4>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <MX_TIM4_Init+0xa8>)
 800069a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_TIM4_Init+0xa4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_TIM4_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 33888;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM4_Init+0xa4>)
 80006aa:	f248 4260 	movw	r2, #33888	; 0x8460
 80006ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM4_Init+0xa4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_TIM4_Init+0xa4>)
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006bc:	2303      	movs	r3, #3
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_TIM4_Init+0xa4>)
 80006e8:	f003 fd68 	bl	80041bc <HAL_TIM_Encoder_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006f2:	f000 f949 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_TIM4_Init+0xa4>)
 8000704:	f004 fddc 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800070e:	f000 f93b 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200003f0 	.word	0x200003f0
 8000720:	40000800 	.word	0x40000800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <MX_GPIO_Init+0x17c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a58      	ldr	r2, [pc, #352]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b56      	ldr	r3, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b53      	ldr	r3, [pc, #332]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a52      	ldr	r2, [pc, #328]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <MX_GPIO_Init+0x17c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a4c      	ldr	r2, [pc, #304]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b47      	ldr	r3, [pc, #284]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x17c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x17c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a40      	ldr	r2, [pc, #256]	; (80008a0 <MX_GPIO_Init+0x17c>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x17c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XDIR_Pin|XCLK_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	210c      	movs	r1, #12
 80007b6:	483b      	ldr	r0, [pc, #236]	; (80008a4 <MX_GPIO_Init+0x180>)
 80007b8:	f000 ff00 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4839      	ldr	r0, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x184>)
 80007c4:	f000 fefa 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <MX_GPIO_Init+0x188>)
 80007ce:	f000 fef5 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_GPIO_Init+0x18c>)
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_CENTER_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fd26 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin;
 80007ec:	2328      	movs	r3, #40	; 0x28
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 fd19 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : XDIR_Pin XCLK_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin|XCLK_Pin;
 8000806:	230c      	movs	r3, #12
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4821      	ldr	r0, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x180>)
 800081e:	f000 fd0b 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 8000822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_GPIO_Init+0x184>)
 800083c:	f000 fcfc 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000840:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x190>)
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_GPIO_Init+0x184>)
 8000856:	f000 fcef 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_GPIO_Init+0x188>)
 8000872:	f000 fce1 	bl	8001238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210a      	movs	r1, #10
 800087a:	2006      	movs	r0, #6
 800087c:	f000 fca5 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000880:	2006      	movs	r0, #6
 8000882:	f000 fcbe 	bl	8001202 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f000 fc9d 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f000 fcb6 	bl	8001202 <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48001000 	.word	0x48001000
 80008ac:	48000c00 	.word	0x48000c00
 80008b0:	10210000 	.word	0x10210000
 80008b4:	10310000 	.word	0x10310000

080008b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d115      	bne.n	80008f8 <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim4)-750000;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 80008d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008de:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim4.Init.Period)+cnt;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008f6:	601a      	str	r2, [r3, #0]
	}

}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	200004e0 	.word	0x200004e0
 8000908:	200003f0 	.word	0x200003f0
 800090c:	2000043c 	.word	0x2000043c
 8000910:	200001b8 	.word	0x200001b8
 8000914:	2000048c 	.word	0x2000048c

08000918 <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]

	  int8_t opbuff[4];

	  if(buf[0]== '0')
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b30      	cmp	r3, #48	; 0x30
 8000928:	d115      	bne.n	8000956 <CDC_ReceiveCallback+0x3e>
	  {
	  *(int32_t*)&(opbuff[0]) = TIM5->CNT;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <CDC_ReceiveCallback+0x64>)
 800092c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	601a      	str	r2, [r3, #0]

	  opbuff[3] =(X0<<0)+(Y0<<1);
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <CDC_ReceiveCallback+0x68>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <CDC_ReceiveCallback+0x6c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4413      	add	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b25b      	sxtb	r3, r3
 8000946:	73fb      	strb	r3, [r7, #15]


	  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2104      	movs	r1, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f007 fd3e 	bl	80083d0 <CDC_Transmit_FS>
		  opbuff[1]=0xFF;
		  opbuff[2]=0xFF;
		  opbuff[3]=0xFF;
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
	  }
}
 8000954:	e00d      	b.n	8000972 <CDC_ReceiveCallback+0x5a>
		  opbuff[0]=0xFF;
 8000956:	23ff      	movs	r3, #255	; 0xff
 8000958:	733b      	strb	r3, [r7, #12]
		  opbuff[1]=0xFF;
 800095a:	23ff      	movs	r3, #255	; 0xff
 800095c:	737b      	strb	r3, [r7, #13]
		  opbuff[2]=0xFF;
 800095e:	23ff      	movs	r3, #255	; 0xff
 8000960:	73bb      	strb	r3, [r7, #14]
		  opbuff[3]=0xFF;
 8000962:	23ff      	movs	r3, #255	; 0xff
 8000964:	73fb      	strb	r3, [r7, #15]
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f007 fd2f 	bl	80083d0 <CDC_Transmit_FS>
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40000c00 	.word	0x40000c00
 8000980:	2000052d 	.word	0x2000052d
 8000984:	2000052c 	.word	0x2000052c

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x50>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_MspInit+0x50>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x50>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x50>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_MspInit+0x50>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x50>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 fbfb 	bl	80011ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80009d4:	2005      	movs	r0, #5
 80009d6:	f000 fc14 	bl	8001202 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <HAL_TIM_Base_MspInit+0xa8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12c      	bne.n	8000a54 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a25      	ldr	r2, [pc, #148]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 8000a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2018      	movs	r0, #24
 8000a18:	f000 fbd7 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000a1c:	2018      	movs	r0, #24
 8000a1e:	f000 fbf0 	bl	8001202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2019      	movs	r0, #25
 8000a28:	f000 fbcf 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a2c:	2019      	movs	r0, #25
 8000a2e:	f000 fbe8 	bl	8001202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	201a      	movs	r0, #26
 8000a38:	f000 fbc7 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000a3c:	201a      	movs	r0, #26
 8000a3e:	f000 fbe0 	bl	8001202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	201b      	movs	r0, #27
 8000a48:	f000 fbbf 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a4c:	201b      	movs	r0, #27
 8000a4e:	f000 fbd8 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a52:	e018      	b.n	8000a86 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d113      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_TIM_Base_MspInit+0xac>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 fba5 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 fbbe 	bl	8001202 <HAL_NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_TIM_PWM_MspInit+0x38>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40000400 	.word	0x40000400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d127      	bne.n	8000b4a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x80>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2a:	23c0      	movs	r3, #192	; 0xc0
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x84>)
 8000b46:	f000 fb77 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000800 	.word	0x40000800
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400

08000b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <HAL_TIM_MspPostInit+0x64>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d11b      	bne.n	8000bba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000bb6:	f000 fb3f 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48001000 	.word	0x48001000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f9b6 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f000 fcf2 	bl	8001620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c46:	f003 fbed 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000494 	.word	0x20000494

08000c54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c58:	483c      	ldr	r0, [pc, #240]	; (8000d4c <TIM1_UP_TIM16_IRQHandler+0xf8>)
 8000c5a:	f003 fbe3 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  static int xcnt = 0;
  static int ycnt = 0;

  if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d92f      	bls.n	8000cc6 <TIM1_UP_TIM16_IRQHandler+0x72>
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a39      	ldr	r2, [pc, #228]	; (8000d50 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c72:	fb02 f201 	mul.w	r2, r2, r1
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d124      	bne.n	8000cc6 <TIM1_UP_TIM16_IRQHandler+0x72>
	  if(xPul!=0) {
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d020      	beq.n	8000cc6 <TIM1_UP_TIM16_IRQHandler+0x72>
	    if(xPul>0) {
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dd0a      	ble.n	8000ca2 <TIM1_UP_TIM16_IRQHandler+0x4e>
        HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4832      	ldr	r0, [pc, #200]	; (8000d5c <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000c92:	f000 fc93 	bl	80015bc <HAL_GPIO_WritePin>
        xPul--;
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e00d      	b.n	8000cbe <TIM1_UP_TIM16_IRQHandler+0x6a>
      }
	    else if(xPul<0) {
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	da09      	bge.n	8000cbe <TIM1_UP_TIM16_IRQHandler+0x6a>
        HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2104      	movs	r1, #4
 8000cae:	482b      	ldr	r0, [pc, #172]	; (8000d5c <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000cb0:	f000 fc84 	bl	80015bc <HAL_GPIO_WritePin>
        xPul++;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000cbc:	6013      	str	r3, [r2, #0]
      }
	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4826      	ldr	r0, [pc, #152]	; (8000d5c <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000cc2:	f000 fc93 	bl	80015ec <HAL_GPIO_TogglePin>
	  }
	  else {
	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
	  }
  }
  xcnt++;
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000cce:	6013      	str	r3, [r2, #0]
  if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d931      	bls.n	8000d3c <TIM1_UP_TIM16_IRQHandler+0xe8>
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce4:	fb02 f201 	mul.w	r2, r2, r1
 8000ce8:	1a9b      	subs	r3, r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d126      	bne.n	8000d3c <TIM1_UP_TIM16_IRQHandler+0xe8>
 	  if(yPul!=0) {
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d022      	beq.n	8000d3c <TIM1_UP_TIM16_IRQHandler+0xe8>
 	    if(yPul>0) {
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	dd0b      	ble.n	8000d16 <TIM1_UP_TIM16_IRQHandler+0xc2>
 	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <TIM1_UP_TIM16_IRQHandler+0x118>)
 8000d06:	f000 fc59 	bl	80015bc <HAL_GPIO_WritePin>
 	      yPul--;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e00e      	b.n	8000d34 <TIM1_UP_TIM16_IRQHandler+0xe0>
 	    }else if(yPul<0) {
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da0a      	bge.n	8000d34 <TIM1_UP_TIM16_IRQHandler+0xe0>
 	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	4811      	ldr	r0, [pc, #68]	; (8000d6c <TIM1_UP_TIM16_IRQHandler+0x118>)
 8000d26:	f000 fc49 	bl	80015bc <HAL_GPIO_WritePin>
 	      yPul++;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d32:	6013      	str	r3, [r2, #0]
 	    }
 	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
 		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 8000d34:	2101      	movs	r1, #1
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <TIM1_UP_TIM16_IRQHandler+0x11c>)
 8000d38:	f000 fc58 	bl	80015ec <HAL_GPIO_TogglePin>
 	  }else {
 	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 	  }
   }
   ycnt++;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000d44:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000494 	.word	0x20000494
 8000d50:	20000534 	.word	0x20000534
 8000d54:	200001c4 	.word	0x200001c4
 8000d58:	20000530 	.word	0x20000530
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	2000053c 	.word	0x2000053c
 8000d64:	200001c8 	.word	0x200001c8
 8000d68:	20000538 	.word	0x20000538
 8000d6c:	48001000 	.word	0x48001000
 8000d70:	48000c00 	.word	0x48000c00

08000d74 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000d7a:	f003 fb53 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000494 	.word	0x20000494

08000d88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM1_CC_IRQHandler+0x10>)
 8000d8e:	f003 fb49 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000494 	.word	0x20000494

08000d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM2_IRQHandler+0x10>)
 8000da2:	f003 fb3f 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200004e0 	.word	0x200004e0

08000db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000db4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000db8:	f000 fc32 	bl	8001620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc0:	f000 fc2e 	bl	8001620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <OTG_FS_IRQHandler+0x10>)
 8000dce:	f000 fd92 	bl	80018f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001a14 	.word	0x20001a14

08000ddc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if (GPIO_Pin == JOY_CENTER_Pin) {
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d114      	bne.n	8000e16 <HAL_GPIO_EXTI_Callback+0x3a>
    if(lastMode < 1)
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x48>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	dc03      	bgt.n	8000dfc <HAL_GPIO_EXTI_Callback+0x20>
      highMode = 2;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_EXTI_Callback+0x2e>
    else if (lastMode > 1)
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x48>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	dd02      	ble.n	8000e0a <HAL_GPIO_EXTI_Callback+0x2e>
      highMode = 0;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
    lastMode = 2 - lastMode;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1c3 0302 	rsb	r3, r3, #2
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e14:	6013      	str	r3, [r2, #0]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200001c0 	.word	0x200001c0
 8000e28:	200001bc 	.word	0x200001bc

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <SystemInit+0x5c>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <SystemInit+0x5c>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0x60>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <SystemInit+0x60>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0x60>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <SystemInit+0x60>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <SystemInit+0x60>)
 8000e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SystemInit+0x60>)
 8000e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x60>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x60>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	40021000 	.word	0x40021000

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffca 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
	ldr	r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LoopForever+0x16>)
	cmp	r2, r3
 8000eba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f007 fff9 	bl	8008eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff f981 	bl	80001c8 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ecc:	08008fb4 	.word	0x08008fb4
	ldr	r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ed4:	2000019c 	.word	0x2000019c
	ldr	r2, =_sbss
 8000ed8:	2000019c 	.word	0x2000019c
	ldr	r3, = _ebss
 8000edc:	20001e1c 	.word	0x20001e1c

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f961 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fd46 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f96d 	bl	800121e <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f937 	bl	80011ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000540 	.word	0x20000540

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000540 	.word	0x20000540

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000000c 	.word	0x2000000c

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff29 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff3e 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff31 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e17f      	b.n	8001548 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8171 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d00b      	beq.n	8001280 <HAL_GPIO_Init+0x48>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001274:	2b11      	cmp	r3, #17
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d130      	bne.n	80012e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f003 0201 	and.w	r2, r3, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d118      	bne.n	8001320 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x128>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ac 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_GPIO_Init+0x334>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x242>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_Init+0x338>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x23e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <HAL_GPIO_Init+0x33c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4d      	ldr	r2, [pc, #308]	; (8001578 <HAL_GPIO_Init+0x340>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x236>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_GPIO_Init+0x344>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x232>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_GPIO_Init+0x348>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x22e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x22a>
 800145e:	2306      	movs	r3, #6
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001462:	2307      	movs	r3, #7
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x244>
 800147a:	2300      	movs	r3, #0
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_GPIO_Init+0x334>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x350>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001512:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_GPIO_Init+0x350>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_GPIO_Init+0x350>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_GPIO_Init+0x350>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f47f ae78 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	48000c00 	.word	0x48000c00
 800157c:	48001000 	.word	0x48001000
 8001580:	48001400 	.word	0x48001400
 8001584:	48001800 	.word	0x48001800
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e001      	b.n	80015ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4013      	ands	r3, r2
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43d9      	mvns	r1, r3
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	400b      	ands	r3, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fbcc 	bl	8000ddc <HAL_GPIO_EXTI_Callback>
  }
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b08f      	sub	sp, #60	; 0x3c
 8001654:	af0a      	add	r7, sp, #40	; 0x28
 8001656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e116      	b.n	8001890 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d106      	bne.n	8001682 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f007 f801 	bl	8008684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 ff8c 	bl	80055be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	687e      	ldr	r6, [r7, #4]
 80016ae:	466d      	mov	r5, sp
 80016b0:	f106 0410 	add.w	r4, r6, #16
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	1d33      	adds	r3, r6, #4
 80016c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f003 fe9f 	bl	800540c <USB_CoreInit>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d7      	b.n	8001890 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 ff7a 	bl	80055e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e04a      	b.n	8001788 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	333d      	adds	r3, #61	; 0x3d
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	333c      	adds	r3, #60	; 0x3c
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	b298      	uxth	r0, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3342      	adds	r3, #66	; 0x42
 800172e:	4602      	mov	r2, r0
 8001730:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	333f      	adds	r3, #63	; 0x3f
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3344      	adds	r3, #68	; 0x44
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3348      	adds	r3, #72	; 0x48
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3350      	adds	r3, #80	; 0x50
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3301      	adds	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3af      	bcc.n	80016f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e044      	b.n	8001822 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017c4:	7bfa      	ldrb	r2, [r7, #15]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	3301      	adds	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3b5      	bcc.n	8001798 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	687e      	ldr	r6, [r7, #4]
 8001834:	466d      	mov	r5, sp
 8001836:	f106 0410 	add.w	r4, r6, #16
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001846:	e885 0003 	stmia.w	r5, {r0, r1}
 800184a:	1d33      	adds	r3, r6, #4
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f003 fef0 	bl	8005634 <USB_DevInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e014      	b.n	8001890 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 ff62 	bl	8002748 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f004 fe72 	bl	8006572 <USB_DevDisconnect>

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001898 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_PCD_Start+0x1c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e01c      	b.n	80018ee <HAL_PCD_Start+0x56>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fe61 	bl	800559c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fe26 	bl	8006530 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018f6:	b590      	push	{r4, r7, lr}
 80018f8:	b08d      	sub	sp, #52	; 0x34
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f004 fee4 	bl	80066da <USB_GetMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 838f 	bne.w	8002038 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fe48 	bl	80065b4 <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8385 	beq.w	8002036 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fe3f 	bl	80065b4 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b02      	cmp	r3, #2
 800193e:	d107      	bne.n	8001950 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f002 0202 	and.w	r2, r2, #2
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fe2d 	bl	80065b4 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d161      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0210 	bic.w	r2, r2, #16
 8001972:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f003 020f 	and.w	r2, r3, #15
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	0c5b      	lsrs	r3, r3, #17
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	2b02      	cmp	r3, #2
 800199e:	d124      	bne.n	80019ea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d035      	beq.n	8001a18 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	6a38      	ldr	r0, [r7, #32]
 80019c0:	f004 fc93 	bl	80062ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019d0:	441a      	add	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e2:	441a      	add	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	e016      	b.n	8001a18 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	0c5b      	lsrs	r3, r3, #17
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d110      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80019fc:	2208      	movs	r2, #8
 80019fe:	4619      	mov	r1, r3
 8001a00:	6a38      	ldr	r0, [r7, #32]
 8001a02:	f004 fc72 	bl	80062ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a12:	441a      	add	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fdc1 	bl	80065b4 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a3c:	d16e      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fdc7 	bl	80065da <USB_ReadDevAllOutEpInterrupt>
 8001a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a4e:	e062      	b.n	8001b16 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d057      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 fdec 	bl	8006642 <USB_ReadDevOutEPInterrupt>
 8001a6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a82:	461a      	mov	r2, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fd82 	bl	8002594 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fdbe 	bl	8002630 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	015a      	lsls	r2, r3, #5
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aca:	461a      	mov	r2, r3
 8001acc:	2310      	movs	r3, #16
 8001ace:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2320      	movs	r3, #32
 8001aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b02:	461a      	mov	r2, r3
 8001b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d199      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fd47 	bl	80065b4 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b30:	f040 8087 	bne.w	8001c42 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f004 fd68 	bl	800660e <USB_ReadDevAllInEpInterrupt>
 8001b3e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b44:	e07a      	b.n	8001c3c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d06f      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fd8f 	bl	800667e <USB_ReadDevInEPInterrupt>
 8001b60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	2201      	movs	r2, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69f9      	ldr	r1, [r7, #28]
 8001b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f006 fdfe 	bl	80087aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be0:	461a      	mov	r2, r3
 8001be2:	2310      	movs	r3, #16
 8001be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2340      	movs	r3, #64	; 0x40
 8001c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fc29 	bl	8002482 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	3301      	adds	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d181      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fcb4 	bl	80065b4 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c56:	d122      	bne.n	8001c9e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f007 f8ab 	bl	8008ddc <HAL_PCDEx_LPM_Callback>
 8001c86:	e002      	b.n	8001c8e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f006 fdfb 	bl	8008884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fc86 	bl	80065b4 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb2:	d112      	bne.n	8001cda <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 fdb7 	bl	8008838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fc68 	bl	80065b4 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cee:	d121      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001cfe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d111      	bne.n	8001d2e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001d24:	2101      	movs	r1, #1
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f007 f858 	bl	8008ddc <HAL_PCDEx_LPM_Callback>
 8001d2c:	e002      	b.n	8001d34 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f006 fd82 	bl	8008838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fc3b 	bl	80065b4 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d48:	f040 80c5 	bne.w	8001ed6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2110      	movs	r1, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fdb0 	bl	80058cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d70:	e056      	b.n	8001e20 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d84:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	0151      	lsls	r1, r2, #5
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	440a      	add	r2, r1
 8001dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001dd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	0151      	lsls	r1, r2, #5
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	440a      	add	r2, r1
 8001df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001df4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001df8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0a:	0151      	lsls	r1, r2, #5
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	440a      	add	r2, r1
 8001e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3a3      	bcc.n	8001d72 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e56:	f043 030b 	orr.w	r3, r3, #11
 8001e5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6c:	f043 030b 	orr.w	r3, r3, #11
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	e015      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e9a:	f043 030b 	orr.w	r3, r3, #11
 8001e9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001eb2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f004 fc3b 	bl	800673c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fb6a 	bl	80065b4 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eea:	d124      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fc00 	bl	80066f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fd47 	bl	800598e <USB_GetDevSpeed>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681c      	ldr	r4, [r3, #0]
 8001f0c:	f001 fa08 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f003 faa2 	bl	8005464 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f006 fc6a 	bl	80087fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fb3a 	bl	80065b4 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d10a      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f006 fc47 	bl	80087de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f002 0208 	and.w	r2, r2, #8
 8001f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fb25 	bl	80065b4 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f74:	d10f      	bne.n	8001f96 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f006 fcb9 	bl	80088f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fb0a 	bl	80065b4 <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001faa:	d10f      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f006 fc8c 	bl	80088d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 faef 	bl	80065b4 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe0:	d10a      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f006 fc9a 	bl	800891c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fad9 	bl	80065b4 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d115      	bne.n	8002038 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f006 fc8a 	bl	8008938 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	e000      	b.n	8002038 <HAL_PCD_IRQHandler+0x742>
      return;
 8002036:	bf00      	nop
    }
  }
}
 8002038:	3734      	adds	r7, #52	; 0x34
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}

0800203e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_PCD_SetAddress+0x1a>
 8002054:	2302      	movs	r3, #2
 8002056:	e013      	b.n	8002080 <HAL_PCD_SetAddress+0x42>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fa37 	bl	80064e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4603      	mov	r3, r0
 8002098:	70fb      	strb	r3, [r7, #3]
 800209a:	460b      	mov	r3, r1
 800209c:	803b      	strh	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da0f      	bge.n	80020ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	3338      	adds	r3, #56	; 0x38
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	705a      	strb	r2, [r3, #1]
 80020cc:	e00f      	b.n	80020ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 020f 	and.w	r2, r3, #15
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020fa:	883a      	ldrh	r2, [r7, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	78ba      	ldrb	r2, [r7, #2]
 8002104:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	785b      	ldrb	r3, [r3, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002118:	78bb      	ldrb	r3, [r7, #2]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d102      	bne.n	8002124 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_PCD_EP_Open+0xaa>
 800212e:	2302      	movs	r3, #2
 8002130:	e00e      	b.n	8002150 <HAL_PCD_EP_Open+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fc43 	bl	80059cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800214e:	7afb      	ldrb	r3, [r7, #11]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da0f      	bge.n	800218c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00f      	b.n	80021ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_PCD_EP_Close+0x6e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e00e      	b.n	80021e4 <HAL_PCD_EP_Close+0x8c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fc81 	bl	8005adc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fc:	7afb      	ldrb	r3, [r7, #11]
 80021fe:	f003 020f 	and.w	r2, r3, #15
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	3304      	adds	r3, #4
 8002214:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2200      	movs	r2, #0
 800222c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	b2da      	uxtb	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6979      	ldr	r1, [r7, #20]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fefe 	bl	800604c <USB_EP0StartXfer>
 8002250:	e005      	b.n	800225e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fd1b 	bl	8005c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	460b      	mov	r3, r1
 80022a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	f003 020f 	and.w	r2, r3, #15
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3338      	adds	r3, #56	; 0x38
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6979      	ldr	r1, [r7, #20]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fea9 	bl	800604c <USB_EP0StartXfer>
 80022fa:	e005      	b.n	8002308 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6979      	ldr	r1, [r7, #20]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fcc6 	bl	8005c94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 020f 	and.w	r2, r3, #15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d901      	bls.n	8002330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04e      	b.n	80023ce <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	da0f      	bge.n	8002358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	705a      	strb	r2, [r3, #1]
 8002356:	e00d      	b.n	8002374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_PCD_EP_SetStall+0x82>
 8002390:	2302      	movs	r3, #2
 8002392:	e01c      	b.n	80023ce <HAL_PCD_EP_SetStall+0xbc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 ffca 	bl	800633c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d108      	bne.n	80023c4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f004 f9bc 	bl	800673c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 020f 	and.w	r2, r3, #15
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d901      	bls.n	80023f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e042      	b.n	800247a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da0f      	bge.n	800241c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	3338      	adds	r3, #56	; 0x38
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	3304      	adds	r3, #4
 8002412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	705a      	strb	r2, [r3, #1]
 800241a:	e00f      	b.n	800243c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_PCD_EP_ClrStall+0x86>
 8002458:	2302      	movs	r3, #2
 800245a:	e00e      	b.n	800247a <HAL_PCD_EP_ClrStall+0xa4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 ffd4 	bl	8006418 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3338      	adds	r3, #56	; 0x38
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d901      	bls.n	80024ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3303      	adds	r3, #3
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024de:	e026      	b.n	800252e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d902      	bls.n	80024fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3303      	adds	r3, #3
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	b29b      	uxth	r3, r3
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f003 feb9 	bl	8006288 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	441a      	add	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	441a      	add	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	b29b      	uxth	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	429a      	cmp	r2, r3
 8002542:	d809      	bhi.n	8002558 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800254c:	429a      	cmp	r2, r3
 800254e:	d203      	bcs.n	8002558 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1c3      	bne.n	80024e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	429a      	cmp	r2, r3
 8002562:	d811      	bhi.n	8002588 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	2201      	movs	r2, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	43db      	mvns	r3, r3
 800257e:	6939      	ldr	r1, [r7, #16]
 8002580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002584:	4013      	ands	r3, r2
 8002586:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	333c      	adds	r3, #60	; 0x3c
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <PCD_EP_OutXfrComplete_int+0x98>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d124      	bne.n	8002614 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	e01a      	b.n	8002620 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002600:	461a      	mov	r2, r3
 8002602:	2320      	movs	r3, #32
 8002604:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 f8b1 	bl	8008774 <HAL_PCD_DataOutStageCallback>
 8002612:	e005      	b.n	8002620 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f006 f8aa 	bl	8008774 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	4f54310a 	.word	0x4f54310a

08002630 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	333c      	adds	r3, #60	; 0x3c
 8002648:	3304      	adds	r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <PCD_EP_OutSetupPacket_int+0x64>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d90e      	bls.n	8002684 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002682:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 f863 	bl	8008750 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	4f54300a 	.word	0x4f54300a

08002698 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
 80026a4:	4613      	mov	r3, r2
 80026a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026b6:	883b      	ldrh	r3, [r7, #0]
 80026b8:	0419      	lsls	r1, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
 80026c4:	e028      	b.n	8002718 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e00d      	b.n	80026f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	3340      	adds	r3, #64	; 0x40
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4413      	add	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	3301      	adds	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d3ec      	bcc.n	80026da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002700:	883b      	ldrh	r3, [r7, #0]
 8002702:	0418      	lsls	r0, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	3b01      	subs	r3, #1
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4302      	orrs	r2, r0
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277a:	f043 0303 	orr.w	r3, r3, #3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40007000 	.word	0x40007000

080027ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ba:	d130      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d038      	beq.n	800283c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2232      	movs	r2, #50	; 0x32
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f0:	e002      	b.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d102      	bne.n	800280c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f2      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002818:	d110      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e00f      	b.n	800283e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d007      	beq.n	800283c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000
 8002850:	20000004 	.word	0x20000004
 8002854:	431bde83 	.word	0x431bde83

08002858 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_PWREx_EnableVddUSB+0x1c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002866:	6053      	str	r3, [r2, #4]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e3d4      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4ba1      	ldr	r3, [pc, #644]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002894:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80e4 	beq.w	8002a74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4a>
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	f040 808b 	bne.w	80029d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 8087 	bne.w	80029d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c2:	4b93      	ldr	r3, [pc, #588]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e3ac      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1a      	ldr	r2, [r3, #32]
 80028de:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d004      	beq.n	80028f4 <HAL_RCC_OscConfig+0x7c>
 80028ea:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f2:	e005      	b.n	8002900 <HAL_RCC_OscConfig+0x88>
 80028f4:	4b86      	ldr	r3, [pc, #536]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002900:	4293      	cmp	r3, r2
 8002902:	d223      	bcs.n	800294c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fd15 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e38d      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002918:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7c      	ldr	r2, [pc, #496]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b7a      	ldr	r3, [pc, #488]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4977      	ldr	r1, [pc, #476]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002936:	4b76      	ldr	r3, [pc, #472]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	4972      	ldr	r1, [pc, #456]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	e025      	b.n	8002998 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4b70      	ldr	r3, [pc, #448]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6f      	ldr	r2, [pc, #444]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	496a      	ldr	r1, [pc, #424]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296a:	4b69      	ldr	r3, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4965      	ldr	r1, [pc, #404]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fcd5 	bl	8003338 <RCC_SetFlashLatencyFromMSIRange>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e34d      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002998:	f000 fc36 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b5c      	ldr	r3, [pc, #368]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	495a      	ldr	r1, [pc, #360]	; (8002b14 <HAL_RCC_OscConfig+0x29c>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_OscConfig+0x2a0>)
 80029b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029b8:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x2a4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe faa9 	bl	8000f14 <HAL_InitTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d052      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	e331      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d032      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a4c      	ldr	r2, [pc, #304]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fae6 	bl	8000fb4 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ec:	f7fe fae2 	bl	8000fb4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e31a      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fe:	4b44      	ldr	r3, [pc, #272]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	493b      	ldr	r1, [pc, #236]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	4936      	ldr	r1, [pc, #216]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e01a      	b.n	8002a74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a3e:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fab3 	bl	8000fb4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a52:	f7fe faaf 	bl	8000fb4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e2e7      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x1da>
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d074      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x21a>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d10e      	bne.n	8002aaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d064      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d160      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e2c4      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x24a>
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e01d      	b.n	8002afe <HAL_RCC_OscConfig+0x286>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x26e>
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x286>
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x298>)
 8002af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fa55 	bl	8000fb4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0c:	e011      	b.n	8002b32 <HAL_RCC_OscConfig+0x2ba>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08008f6c 	.word	0x08008f6c
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fa48 	bl	8000fb4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e280      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4baf      	ldr	r3, [pc, #700]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x2a8>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fa38 	bl	8000fb4 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fa34 	bl	8000fb4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e26c      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5a:	4ba5      	ldr	r3, [pc, #660]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d0>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d060      	beq.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x310>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d116      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b88:	4b99      	ldr	r3, [pc, #612]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x328>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e249      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b93      	ldr	r3, [pc, #588]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4990      	ldr	r1, [pc, #576]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb4:	e040      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d023      	beq.n	8002c06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbe:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a8b      	ldr	r2, [pc, #556]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe f9f3 	bl	8000fb4 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe f9ef 	bl	8000fb4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e227      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be4:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	497c      	ldr	r1, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	e018      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b7a      	ldr	r3, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a79      	ldr	r2, [pc, #484]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe f9cf 	bl	8000fb4 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe f9cb 	bl	8000fb4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e203      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c2c:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d03c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c52:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe f9aa 	bl	8000fb4 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe f9a6 	bl	8000fb4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1de      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c76:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3ec>
 8002c84:	e01b      	b.n	8002cbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	4b5a      	ldr	r3, [pc, #360]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe f98d 	bl	8000fb4 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe f989 	bl	8000fb4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1c1      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ef      	bne.n	8002c9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80a6 	beq.w	8002e18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cd0:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCC_OscConfig+0x57c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d118      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x57c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <HAL_RCC_OscConfig+0x57c>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d10:	f7fe f950 	bl	8000fb4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe f94c 	bl	8000fb4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e184      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_RCC_OscConfig+0x57c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4d8>
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d4e:	e024      	b.n	8002d9a <HAL_RCC_OscConfig+0x522>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d110      	bne.n	8002d7a <HAL_RCC_OscConfig+0x502>
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d78:	e00f      	b.n	8002d9a <HAL_RCC_OscConfig+0x522>
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe f907 	bl	8000fb4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe f903 	bl	8000fb4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e139      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ed      	beq.n	8002daa <HAL_RCC_OscConfig+0x532>
 8002dce:	e01a      	b.n	8002e06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f8f0 	bl	8000fb4 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd6:	e00f      	b.n	8002df8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe f8ec 	bl	8000fb4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d906      	bls.n	8002df8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e122      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df8:	4b90      	ldr	r3, [pc, #576]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e8      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b8b      	ldr	r3, [pc, #556]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4a8a      	ldr	r2, [pc, #552]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8108 	beq.w	8003032 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	f040 80d0 	bne.w	8002fcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e2c:	4b83      	ldr	r3, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d130      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d127      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11f      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e6c:	2a07      	cmp	r2, #7
 8002e6e:	bf14      	ite	ne
 8002e70:	2201      	movne	r2, #1
 8002e72:	2200      	moveq	r2, #0
 8002e74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d06e      	beq.n	8002f80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d069      	beq.n	8002f7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ea8:	4b64      	ldr	r3, [pc, #400]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b7      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5c      	ldr	r2, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ed0:	f7fe f870 	bl	8000fb4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f86c 	bl	8000fb4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0a4      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef6:	4b51      	ldr	r3, [pc, #324]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCC_OscConfig+0x7c8>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f10:	0212      	lsls	r2, r2, #8
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f18:	0852      	lsrs	r2, r2, #1
 8002f1a:	3a01      	subs	r2, #1
 8002f1c:	0552      	lsls	r2, r2, #21
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f24:	0852      	lsrs	r2, r2, #1
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0652      	lsls	r2, r2, #25
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f30:	0912      	lsrs	r2, r2, #4
 8002f32:	0452      	lsls	r2, r2, #17
 8002f34:	430a      	orrs	r2, r1
 8002f36:	4941      	ldr	r1, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3e      	ldr	r2, [pc, #248]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f54:	f7fe f82e 	bl	8000fb4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe f82a 	bl	8000fb4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e062      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7a:	e05a      	b.n	8003032 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e059      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d152      	bne.n	8003032 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f98:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fa4:	f7fe f806 	bl	8000fb4 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe f802 	bl	8000fb4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e03a      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x734>
 8002fca:	e032      	b.n	8003032 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d02d      	beq.n	800302e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002ff0:	f023 0303 	bic.w	r3, r3, #3
 8002ff4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8002ffc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fd ffd5 	bl	8000fb4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300e:	f7fd ffd1 	bl	8000fb4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e009      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x7c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x796>
 800302c:	e001      	b.n	8003032 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	f99d808c 	.word	0xf99d808c

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0c8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 0207 	bic.w	r2, r3, #7
 800306e:	4961      	ldr	r1, [pc, #388]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d04c      	beq.n	800312e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309c:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d121      	bne.n	80030ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e09e      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b4:	4b50      	ldr	r3, [pc, #320]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d115      	bne.n	80030ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e092      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030cc:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e086      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030dc:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e07e      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 0203 	bic.w	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	493f      	ldr	r1, [pc, #252]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fe:	f7fd ff59 	bl	8000fb4 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	e00a      	b.n	800311c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003106:	f7fd ff55 	bl	8000fb4 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e066      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 020c 	and.w	r2, r3, #12
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	429a      	cmp	r2, r3
 800312c:	d1eb      	bne.n	8003106 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	492c      	ldr	r1, [pc, #176]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d210      	bcs.n	800317c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 0207 	bic.w	r2, r3, #7
 8003162:	4924      	ldr	r1, [pc, #144]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_RCC_ClockConfig+0x1b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e036      	b.n	80031ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4918      	ldr	r1, [pc, #96]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4910      	ldr	r1, [pc, #64]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ba:	f000 f825 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_RCC_ClockConfig+0x1b4>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	490c      	ldr	r1, [pc, #48]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fe98 	bl	8000f14 <HAL_InitTick>
 80031e4:	4603      	mov	r3, r0
 80031e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80031e8:	7afb      	ldrb	r3, [r7, #11]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	08008f6c 	.word	0x08008f6c
 8003200:	20000004 	.word	0x20000004
 8003204:	20000008 	.word	0x20000008

08003208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x34>
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d121      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d11e      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e005      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003258:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d102      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_GetSysClockFreq+0x110>)
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e004      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d101      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCC_GetSysClockFreq+0x114>)
 800328e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d134      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0xa6>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d003      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xac>
 80032ac:	e005      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCC_GetSysClockFreq+0x110>)
 80032b0:	617b      	str	r3, [r7, #20]
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_GetSysClockFreq+0x114>)
 80032b6:	617b      	str	r3, [r7, #20]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	617b      	str	r3, [r7, #20]
      break;
 80032be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	3301      	adds	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	fb02 f203 	mul.w	r2, r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	0e5b      	lsrs	r3, r3, #25
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	3301      	adds	r3, #1
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003300:	69bb      	ldr	r3, [r7, #24]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	08008f7c 	.word	0x08008f7c
 8003318:	00f42400 	.word	0x00f42400
 800331c:	02dc6c00 	.word	0x02dc6c00

08003320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000004 	.word	0x20000004

08003338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003350:	f7ff fa1e 	bl	8002790 <HAL_PWREx_GetVoltageRange>
 8003354:	6178      	str	r0, [r7, #20]
 8003356:	e014      	b.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	; 0x58
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003370:	f7ff fa0e 	bl	8002790 <HAL_PWREx_GetVoltageRange>
 8003374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d10b      	bne.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d919      	bls.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2ba0      	cmp	r3, #160	; 0xa0
 8003394:	d902      	bls.n	800339c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003396:	2302      	movs	r3, #2
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e013      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e010      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d902      	bls.n	80033ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033a8:	2303      	movs	r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e00a      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d102      	bne.n	80033ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b4:	2302      	movs	r3, #2
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e004      	b.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b70      	cmp	r3, #112	; 0x70
 80033be:	d101      	bne.n	80033c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033c0:	2301      	movs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 0207 	bic.w	r2, r3, #7
 80033cc:	4909      	ldr	r1, [pc, #36]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40022000 	.word	0x40022000

080033f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003400:	2300      	movs	r3, #0
 8003402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003404:	2300      	movs	r3, #0
 8003406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	2b00      	cmp	r3, #0
 8003412:	d041      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800341c:	d02a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800341e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003422:	d824      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003428:	d008      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800342a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342e:	d81e      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003438:	d010      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800343a:	e018      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800343c:	4b86      	ldr	r3, [pc, #536]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a85      	ldr	r2, [pc, #532]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003448:	e015      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fabb 	bl	80039cc <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800345a:	e00c      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3320      	adds	r3, #32
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fba6 	bl	8003bb4 <RCCEx_PLLSAI2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800346c:	e003      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	74fb      	strb	r3, [r7, #19]
      break;
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348a:	4973      	ldr	r1, [pc, #460]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003492:	e001      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d041      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034ac:	d02a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034b2:	d824      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034be:	d81e      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c8:	d010      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ca:	e018      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034cc:	4b62      	ldr	r3, [pc, #392]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034d8:	e015      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa73 	bl	80039cc <RCCEx_PLLSAI1_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3320      	adds	r3, #32
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fb5e 	bl	8003bb4 <RCCEx_PLLSAI2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	74fb      	strb	r3, [r7, #19]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800350c:	4b52      	ldr	r3, [pc, #328]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351a:	494f      	ldr	r1, [pc, #316]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003522:	e001      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80a0 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003536:	2300      	movs	r3, #0
 8003538:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b41      	ldr	r3, [pc, #260]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a40      	ldr	r2, [pc, #256]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
 800355c:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a3a      	ldr	r2, [pc, #232]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003578:	f7fd fd1c 	bl	8000fb4 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800357e:	e009      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003580:	f7fd fd18 	bl	8000fb4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	74fb      	strb	r3, [r7, #19]
        break;
 8003592:	e005      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ef      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d15c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01f      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d019      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c4:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7fd fcd7 	bl	8000fb4 <HAL_GetTick>
 8003606:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003608:	e00b      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fd fcd3 	bl	8000fb4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d902      	bls.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	74fb      	strb	r3, [r7, #19]
            break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ec      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800364e:	e009      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003664:	7c7b      	ldrb	r3, [r7, #17]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366a:	4b9e      	ldr	r3, [pc, #632]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	4a9d      	ldr	r2, [pc, #628]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003674:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003682:	4b98      	ldr	r3, [pc, #608]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f023 0203 	bic.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	4994      	ldr	r1, [pc, #592]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a4:	4b8f      	ldr	r3, [pc, #572]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 020c 	bic.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	498c      	ldr	r1, [pc, #560]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c6:	4b87      	ldr	r3, [pc, #540]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	4983      	ldr	r1, [pc, #524]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	497b      	ldr	r1, [pc, #492]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003718:	4972      	ldr	r1, [pc, #456]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372c:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	496a      	ldr	r1, [pc, #424]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800374e:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	4961      	ldr	r1, [pc, #388]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	4959      	ldr	r1, [pc, #356]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	4950      	ldr	r1, [pc, #320]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037b4:	4b4b      	ldr	r3, [pc, #300]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	4948      	ldr	r1, [pc, #288]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	493f      	ldr	r1, [pc, #252]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d028      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003806:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003816:	d106      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a31      	ldr	r2, [pc, #196]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003822:	60d3      	str	r3, [r2, #12]
 8003824:	e011      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800382a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382e:	d10c      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3304      	adds	r3, #4
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f8c8 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	491f      	ldr	r1, [pc, #124]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003874:	d106      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003880:	60d3      	str	r3, [r2, #12]
 8003882:	e011      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f899 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d02b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d2:	d109      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a02      	ldr	r2, [pc, #8]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038de:	60d3      	str	r3, [r2, #12]
 80038e0:	e014      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f0:	d10c      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f867 	bl	80039cc <RCCEx_PLLSAI1_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02f      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003926:	4928      	ldr	r1, [pc, #160]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f844 	bl	80039cc <RCCEx_PLLSAI1_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d014      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	74bb      	strb	r3, [r7, #18]
 8003952:	e011      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3320      	adds	r3, #32
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f925 	bl	8003bb4 <RCCEx_PLLSAI2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003992:	490d      	ldr	r1, [pc, #52]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039a6:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b6:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039be:	7cbb      	ldrb	r3, [r7, #18]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000

080039cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039da:	4b75      	ldr	r3, [pc, #468]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
       ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039fe:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d047      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e044      	b.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d018      	beq.n	8003a52 <RCCEx_PLLSAI1_Config+0x86>
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d825      	bhi.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d002      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0x62>
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d009      	beq.n	8003a40 <RCCEx_PLLSAI1_Config+0x74>
 8003a2c:	e020      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2e:	4b60      	ldr	r3, [pc, #384]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11d      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e01a      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a40:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d116      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e013      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a52:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6e:	e006      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e004      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d17d      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aa8:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a40      	ldr	r2, [pc, #256]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fd fa7e 	bl	8000fb4 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aba:	e009      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003abc:	f7fd fa7a 	bl	8000fb4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ace:	e005      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ef      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d160      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d111      	bne.n	8003b0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	0912      	lsrs	r2, r2, #4
 8003b00:	0452      	lsls	r2, r2, #17
 8003b02:	430a      	orrs	r2, r1
 8003b04:	492a      	ldr	r1, [pc, #168]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
 8003b0a:	e027      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d112      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b12:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	0211      	lsls	r1, r2, #8
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6912      	ldr	r2, [r2, #16]
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0552      	lsls	r2, r2, #21
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	610b      	str	r3, [r1, #16]
 8003b36:	e011      	b.n	8003b5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
 8003b48:	0211      	lsls	r1, r2, #8
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6952      	ldr	r2, [r2, #20]
 8003b4e:	0852      	lsrs	r2, r2, #1
 8003b50:	3a01      	subs	r2, #1
 8003b52:	0652      	lsls	r2, r2, #25
 8003b54:	430a      	orrs	r2, r1
 8003b56:	4916      	ldr	r1, [pc, #88]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fd fa24 	bl	8000fb4 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b6e:	e009      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b70:	f7fd fa20 	bl	8000fb4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d902      	bls.n	8003b84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	73fb      	strb	r3, [r7, #15]
          break;
 8003b82:	e005      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0203 	and.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10d      	bne.n	8003bfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
       ||
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003be6:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d047      	beq.n	8003c8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e044      	b.n	8003c8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d018      	beq.n	8003c3a <RCCEx_PLLSAI2_Config+0x86>
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d825      	bhi.n	8003c58 <RCCEx_PLLSAI2_Config+0xa4>
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d002      	beq.n	8003c16 <RCCEx_PLLSAI2_Config+0x62>
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d009      	beq.n	8003c28 <RCCEx_PLLSAI2_Config+0x74>
 8003c14:	e020      	b.n	8003c58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c16:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11d      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e01a      	b.n	8003c5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c38:	e013      	b.n	8003c62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c3a:	4b4c      	ldr	r3, [pc, #304]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c46:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c56:	e006      	b.n	8003c66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e004      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	430b      	orrs	r3, r1
 8003c84:	4939      	ldr	r1, [pc, #228]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d167      	bne.n	8003d60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fd f98a 	bl	8000fb4 <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ca2:	e009      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ca4:	f7fd f986 	bl	8000fb4 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d902      	bls.n	8003cb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb6:	e005      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cb8:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d14a      	bne.n	8003d60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6892      	ldr	r2, [r2, #8]
 8003ce0:	0211      	lsls	r1, r2, #8
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0912      	lsrs	r2, r2, #4
 8003ce8:	0452      	lsls	r2, r2, #17
 8003cea:	430a      	orrs	r2, r1
 8003cec:	491f      	ldr	r1, [pc, #124]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	614b      	str	r3, [r1, #20]
 8003cf2:	e011      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	0211      	lsls	r1, r2, #8
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6912      	ldr	r2, [r2, #16]
 8003d0a:	0852      	lsrs	r2, r2, #1
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	0652      	lsls	r2, r2, #25
 8003d10:	430a      	orrs	r2, r1
 8003d12:	4916      	ldr	r1, [pc, #88]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd f946 	bl	8000fb4 <HAL_GetTick>
 8003d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d2a:	e009      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d2c:	f7fd f942 	bl	8000fb4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d3e:	e005      	b.n	8003d4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4904      	ldr	r1, [pc, #16]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e049      	b.n	8003e16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fc fe26 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fe56 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d001      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04f      	b.n	8003ed8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d018      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_TIM_Base_Start_IT+0xcc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIM_Base_Start_IT+0x76>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d115      	bne.n	8003ec2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <HAL_TIM_Base_Start_IT+0xdc>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d015      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0xb4>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d011      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	e008      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e000      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40013400 	.word	0x40013400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	00010007 	.word	0x00010007

08003f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e049      	b.n	8003fa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fc fdb6 	bl	8000a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 fd8e 	bl	8004a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0x24>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e03c      	b.n	800404e <HAL_TIM_PWM_Start+0x9e>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d109      	bne.n	8003fee <HAL_TIM_PWM_Start+0x3e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e02f      	b.n	800404e <HAL_TIM_PWM_Start+0x9e>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d109      	bne.n	8004008 <HAL_TIM_PWM_Start+0x58>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e022      	b.n	800404e <HAL_TIM_PWM_Start+0x9e>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d109      	bne.n	8004022 <HAL_TIM_PWM_Start+0x72>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e015      	b.n	800404e <HAL_TIM_PWM_Start+0x9e>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b10      	cmp	r3, #16
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x8c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e008      	b.n	800404e <HAL_TIM_PWM_Start+0x9e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e09c      	b.n	8004190 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0xb6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004064:	e023      	b.n	80040ae <HAL_TIM_PWM_Start+0xfe>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Start+0xc6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004074:	e01b      	b.n	80040ae <HAL_TIM_PWM_Start+0xfe>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0xd6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	e013      	b.n	80040ae <HAL_TIM_PWM_Start+0xfe>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xe6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004094:	e00b      	b.n	80040ae <HAL_TIM_PWM_Start+0xfe>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b10      	cmp	r3, #16
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xf6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	e003      	b.n	80040ae <HAL_TIM_PWM_Start+0xfe>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f8dc 	bl	8005274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a35      	ldr	r2, [pc, #212]	; (8004198 <HAL_TIM_PWM_Start+0x1e8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIM_PWM_Start+0x13e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_TIM_PWM_Start+0x1ec>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIM_PWM_Start+0x13e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a32      	ldr	r2, [pc, #200]	; (80041a0 <HAL_TIM_PWM_Start+0x1f0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIM_PWM_Start+0x13e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <HAL_TIM_PWM_Start+0x1f4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_PWM_Start+0x13e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <HAL_TIM_PWM_Start+0x1f8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_PWM_Start+0x142>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_PWM_Start+0x144>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_TIM_PWM_Start+0x1e8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d018      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a22      	ldr	r2, [pc, #136]	; (80041ac <HAL_TIM_PWM_Start+0x1fc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <HAL_TIM_PWM_Start+0x200>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_TIM_PWM_Start+0x204>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_TIM_PWM_Start+0x1ec>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIM_PWM_Start+0x19e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <HAL_TIM_PWM_Start+0x1f0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d115      	bne.n	800417a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_TIM_PWM_Start+0x208>)
 8004156:	4013      	ands	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b06      	cmp	r3, #6
 800415e:	d015      	beq.n	800418c <HAL_TIM_PWM_Start+0x1dc>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004166:	d011      	beq.n	800418c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	e008      	b.n	800418c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e000      	b.n	800418e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	00010007 	.word	0x00010007

080041bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e097      	b.n	8004300 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fc fc77 	bl	8000ad8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004200:	f023 0307 	bic.w	r3, r3, #7
 8004204:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f000 fc25 	bl	8004a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	4313      	orrs	r3, r2
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800425c:	f023 030c 	bic.w	r3, r3, #12
 8004260:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	4313      	orrs	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	011a      	lsls	r2, r3, #4
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	031b      	lsls	r3, r3, #12
 800428c:	4313      	orrs	r3, r2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4313      	orrs	r3, r2
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004318:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004320:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004328:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004330:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d102      	bne.n	8004344 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800433e:	7b7b      	ldrb	r3, [r7, #13]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d001      	beq.n	8004348 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e069      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	e031      	b.n	80043be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d110      	bne.n	8004382 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004366:	7b3b      	ldrb	r3, [r7, #12]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d001      	beq.n	8004370 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e055      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004380:	e01d      	b.n	80043be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800438e:	7b7b      	ldrb	r3, [r7, #13]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004394:	7b3b      	ldrb	r3, [r7, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e03e      	b.n	800441c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_Encoder_Start+0xc4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d008      	beq.n	80043dc <HAL_TIM_Encoder_Start+0xd4>
 80043ca:	e00f      	b.n	80043ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2201      	movs	r2, #1
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 ff4d 	bl	8005274 <TIM_CCxChannelCmd>
      break;
 80043da:	e016      	b.n	800440a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	2104      	movs	r1, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ff45 	bl	8005274 <TIM_CCxChannelCmd>
      break;
 80043ea:	e00e      	b.n	800440a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 ff3d 	bl	8005274 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	2104      	movs	r1, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ff36 	bl	8005274 <TIM_CCxChannelCmd>
      break;
 8004408:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0202 	mvn.w	r2, #2
 8004450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fadc 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 face 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fadf 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fab2 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 faa4 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fab5 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa88 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa7a 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa8b 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa5e 	bl	8004a24 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa50 	bl	8004a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa61 	bl	8004a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc f988 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 ff08 	bl	80053e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fefb 	bl	80053f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa0f 	bl	8004a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b20      	cmp	r3, #32
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0220 	mvn.w	r2, #32
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 febb 	bl	80053d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800467a:	2302      	movs	r3, #2
 800467c:	e0fd      	b.n	800487a <HAL_TIM_PWM_ConfigChannel+0x216>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b14      	cmp	r3, #20
 800468a:	f200 80f0 	bhi.w	800486e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046e9 	.word	0x080046e9
 8004698:	0800486f 	.word	0x0800486f
 800469c:	0800486f 	.word	0x0800486f
 80046a0:	0800486f 	.word	0x0800486f
 80046a4:	08004729 	.word	0x08004729
 80046a8:	0800486f 	.word	0x0800486f
 80046ac:	0800486f 	.word	0x0800486f
 80046b0:	0800486f 	.word	0x0800486f
 80046b4:	0800476b 	.word	0x0800476b
 80046b8:	0800486f 	.word	0x0800486f
 80046bc:	0800486f 	.word	0x0800486f
 80046c0:	0800486f 	.word	0x0800486f
 80046c4:	080047ab 	.word	0x080047ab
 80046c8:	0800486f 	.word	0x0800486f
 80046cc:	0800486f 	.word	0x0800486f
 80046d0:	0800486f 	.word	0x0800486f
 80046d4:	080047ed 	.word	0x080047ed
 80046d8:	0800486f 	.word	0x0800486f
 80046dc:	0800486f 	.word	0x0800486f
 80046e0:	0800486f 	.word	0x0800486f
 80046e4:	0800482d 	.word	0x0800482d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fa50 	bl	8004b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0208 	orr.w	r2, r2, #8
 8004702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0204 	bic.w	r2, r2, #4
 8004712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6999      	ldr	r1, [r3, #24]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	619a      	str	r2, [r3, #24]
      break;
 8004726:	e0a3      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fac0 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6999      	ldr	r1, [r3, #24]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	619a      	str	r2, [r3, #24]
      break;
 8004768:	e082      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb29 	bl	8004dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0208 	orr.w	r2, r2, #8
 8004784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0204 	bic.w	r2, r2, #4
 8004794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	61da      	str	r2, [r3, #28]
      break;
 80047a8:	e062      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fb91 	bl	8004ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69d9      	ldr	r1, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	021a      	lsls	r2, r3, #8
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	61da      	str	r2, [r3, #28]
      break;
 80047ea:	e041      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fbda 	bl	8004fac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800482a:	e021      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc1e 	bl	8005074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004846:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800486e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIM_ConfigClockSource+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e0b5      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x184>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d8:	d03e      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0xd4>
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048de:	f200 8087 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e6:	f000 8085 	beq.w	80049f4 <HAL_TIM_ConfigClockSource+0x170>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d87f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b70      	cmp	r3, #112	; 0x70
 80048f2:	d01a      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xa6>
 80048f4:	2b70      	cmp	r3, #112	; 0x70
 80048f6:	d87b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b60      	cmp	r3, #96	; 0x60
 80048fa:	d050      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x11a>
 80048fc:	2b60      	cmp	r3, #96	; 0x60
 80048fe:	d877      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b50      	cmp	r3, #80	; 0x50
 8004902:	d03c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xfa>
 8004904:	2b50      	cmp	r3, #80	; 0x50
 8004906:	d873      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d058      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x13a>
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d86f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b30      	cmp	r3, #48	; 0x30
 8004912:	d064      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d86b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d060      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x15a>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d867      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05c      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d05a      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004928:	e062      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f000 fc7b 	bl	8005234 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800494c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	609a      	str	r2, [r3, #8]
      break;
 8004956:	e04e      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6899      	ldr	r1, [r3, #8]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f000 fc64 	bl	8005234 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800497a:	609a      	str	r2, [r3, #8]
      break;
 800497c:	e03b      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	461a      	mov	r2, r3
 800498c:	f000 fbd8 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2150      	movs	r1, #80	; 0x50
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fc31 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 800499c:	e02b      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 fbf7 	bl	800519e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2160      	movs	r1, #96	; 0x60
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fc21 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 80049bc:	e01b      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 fbb8 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2140      	movs	r1, #64	; 0x40
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fc11 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 80049dc:	e00b      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 fc08 	bl	80051fe <TIM_ITRx_SetConfig>
        break;
 80049ee:	e002      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80049f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a7e:	d00f      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d108      	bne.n	8004ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01f      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d01b      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <TIM_Base_SetConfig+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d017      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <TIM_Base_SetConfig+0x11c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <TIM_Base_SetConfig+0x120>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00f      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <TIM_Base_SetConfig+0x128>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <TIM_Base_SetConfig+0x12c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <TIM_Base_SetConfig+0x130>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d108      	bne.n	8004b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <TIM_Base_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00f      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a12      	ldr	r2, [pc, #72]	; (8004b84 <TIM_Base_SetConfig+0x124>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <TIM_Base_SetConfig+0x128>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <TIM_Base_SetConfig+0x12c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0xf8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <TIM_Base_SetConfig+0x130>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 0302 	bic.w	r3, r3, #2
 8004be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2c      	ldr	r2, [pc, #176]	; (8004ca0 <TIM_OC1_SetConfig+0x10c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00f      	beq.n	8004c14 <TIM_OC1_SetConfig+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2b      	ldr	r2, [pc, #172]	; (8004ca4 <TIM_OC1_SetConfig+0x110>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_OC1_SetConfig+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <TIM_OC1_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_OC1_SetConfig+0x80>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a29      	ldr	r2, [pc, #164]	; (8004cac <TIM_OC1_SetConfig+0x118>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC1_SetConfig+0x80>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a28      	ldr	r2, [pc, #160]	; (8004cb0 <TIM_OC1_SetConfig+0x11c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10c      	bne.n	8004c2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0308 	bic.w	r3, r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <TIM_OC1_SetConfig+0x10c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_OC1_SetConfig+0xc2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <TIM_OC1_SetConfig+0x110>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_OC1_SetConfig+0xc2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <TIM_OC1_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_OC1_SetConfig+0xc2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <TIM_OC1_SetConfig+0x118>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC1_SetConfig+0xc2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a17      	ldr	r2, [pc, #92]	; (8004cb0 <TIM_OC1_SetConfig+0x11c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0210 	bic.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0320 	bic.w	r3, r3, #32
 8004d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <TIM_OC2_SetConfig+0x100>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_OC2_SetConfig+0x6c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <TIM_OC2_SetConfig+0x104>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10d      	bne.n	8004d3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <TIM_OC2_SetConfig+0x100>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <TIM_OC2_SetConfig+0xb0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <TIM_OC2_SetConfig+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_OC2_SetConfig+0xb0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <TIM_OC2_SetConfig+0x108>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC2_SetConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <TIM_OC2_SetConfig+0x10c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC2_SetConfig+0xb0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <TIM_OC2_SetConfig+0x110>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d113      	bne.n	8004d8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	621a      	str	r2, [r3, #32]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40013400 	.word	0x40013400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800

08004dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_OC3_SetConfig+0xfc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC3_SetConfig+0x6a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <TIM_OC3_SetConfig+0x100>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10d      	bne.n	8004e4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <TIM_OC3_SetConfig+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_OC3_SetConfig+0xae>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <TIM_OC3_SetConfig+0x100>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_OC3_SetConfig+0xae>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <TIM_OC3_SetConfig+0x104>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_OC3_SetConfig+0xae>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <TIM_OC3_SetConfig+0x108>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_OC3_SetConfig+0xae>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <TIM_OC3_SetConfig+0x10c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d113      	bne.n	8004e9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	031b      	lsls	r3, r3, #12
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <TIM_OC4_SetConfig+0xc0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <TIM_OC4_SetConfig+0x84>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <TIM_OC4_SetConfig+0xc4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <TIM_OC4_SetConfig+0x84>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <TIM_OC4_SetConfig+0xc8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_OC4_SetConfig+0x84>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <TIM_OC4_SetConfig+0xcc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC4_SetConfig+0x84>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <TIM_OC4_SetConfig+0xd0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d109      	bne.n	8004f70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	019b      	lsls	r3, r3, #6
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ff0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <TIM_OC5_SetConfig+0xb4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_OC5_SetConfig+0x7a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC5_SetConfig+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_OC5_SetConfig+0x7a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC5_SetConfig+0xbc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_OC5_SetConfig+0x7a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC5_SetConfig+0xc0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC5_SetConfig+0x7a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <TIM_OC5_SetConfig+0xc4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d109      	bne.n	800503a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	051b      	lsls	r3, r3, #20
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a18      	ldr	r2, [pc, #96]	; (800512c <TIM_OC6_SetConfig+0xb8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00f      	beq.n	80050f0 <TIM_OC6_SetConfig+0x7c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a17      	ldr	r2, [pc, #92]	; (8005130 <TIM_OC6_SetConfig+0xbc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <TIM_OC6_SetConfig+0x7c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a16      	ldr	r2, [pc, #88]	; (8005134 <TIM_OC6_SetConfig+0xc0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_OC6_SetConfig+0x7c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <TIM_OC6_SetConfig+0xc4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_OC6_SetConfig+0x7c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a14      	ldr	r2, [pc, #80]	; (800513c <TIM_OC6_SetConfig+0xc8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d109      	bne.n	8005104 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400
 800513c:	40014800 	.word	0x40014800

08005140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 030a 	bic.w	r3, r3, #10
 800517c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0210 	bic.w	r2, r3, #16
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	f043 0307 	orr.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	43db      	mvns	r3, r3
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e068      	b.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d018      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1a      	ldr	r2, [pc, #104]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a13      	ldr	r2, [pc, #76]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10c      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000

080053d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800540c:	b084      	sub	sp, #16
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	f107 001c 	add.w	r0, r7, #28
 800541a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f001 f9ce 	bl	80067cc <USB_CoreReset>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
 8005446:	e005      	b.n	8005454 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005460:	b004      	add	sp, #16
 8005462:	4770      	bx	lr

08005464 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d165      	bne.n	8005544 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4a3e      	ldr	r2, [pc, #248]	; (8005574 <USB_SetTurnaroundTime+0x110>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d906      	bls.n	800548e <USB_SetTurnaroundTime+0x2a>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4a3d      	ldr	r2, [pc, #244]	; (8005578 <USB_SetTurnaroundTime+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d202      	bcs.n	800548e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005488:	230f      	movs	r3, #15
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e05c      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4a39      	ldr	r2, [pc, #228]	; (8005578 <USB_SetTurnaroundTime+0x114>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d306      	bcc.n	80054a4 <USB_SetTurnaroundTime+0x40>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a38      	ldr	r2, [pc, #224]	; (800557c <USB_SetTurnaroundTime+0x118>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d202      	bcs.n	80054a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800549e:	230e      	movs	r3, #14
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e051      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4a35      	ldr	r2, [pc, #212]	; (800557c <USB_SetTurnaroundTime+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d306      	bcc.n	80054ba <USB_SetTurnaroundTime+0x56>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a34      	ldr	r2, [pc, #208]	; (8005580 <USB_SetTurnaroundTime+0x11c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d202      	bcs.n	80054ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054b4:	230d      	movs	r3, #13
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e046      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a30      	ldr	r2, [pc, #192]	; (8005580 <USB_SetTurnaroundTime+0x11c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d306      	bcc.n	80054d0 <USB_SetTurnaroundTime+0x6c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	; (8005584 <USB_SetTurnaroundTime+0x120>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d802      	bhi.n	80054d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054ca:	230c      	movs	r3, #12
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e03b      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <USB_SetTurnaroundTime+0x120>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d906      	bls.n	80054e6 <USB_SetTurnaroundTime+0x82>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <USB_SetTurnaroundTime+0x124>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d802      	bhi.n	80054e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054e0:	230b      	movs	r3, #11
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e030      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <USB_SetTurnaroundTime+0x124>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d906      	bls.n	80054fc <USB_SetTurnaroundTime+0x98>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4a26      	ldr	r2, [pc, #152]	; (800558c <USB_SetTurnaroundTime+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d802      	bhi.n	80054fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054f6:	230a      	movs	r3, #10
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e025      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <USB_SetTurnaroundTime+0x128>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d906      	bls.n	8005512 <USB_SetTurnaroundTime+0xae>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a22      	ldr	r2, [pc, #136]	; (8005590 <USB_SetTurnaroundTime+0x12c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d202      	bcs.n	8005512 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800550c:	2309      	movs	r3, #9
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e01a      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4a1e      	ldr	r2, [pc, #120]	; (8005590 <USB_SetTurnaroundTime+0x12c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d306      	bcc.n	8005528 <USB_SetTurnaroundTime+0xc4>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <USB_SetTurnaroundTime+0x130>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d802      	bhi.n	8005528 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005522:	2308      	movs	r3, #8
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e00f      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <USB_SetTurnaroundTime+0x130>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d906      	bls.n	800553e <USB_SetTurnaroundTime+0xda>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a19      	ldr	r2, [pc, #100]	; (8005598 <USB_SetTurnaroundTime+0x134>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d202      	bcs.n	800553e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005538:	2307      	movs	r3, #7
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e004      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800553e:	2306      	movs	r3, #6
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e001      	b.n	8005548 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005544:	2309      	movs	r3, #9
 8005546:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	029b      	lsls	r3, r3, #10
 800555c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00d8acbf 	.word	0x00d8acbf
 8005578:	00e4e1c0 	.word	0x00e4e1c0
 800557c:	00f42400 	.word	0x00f42400
 8005580:	01067380 	.word	0x01067380
 8005584:	011a499f 	.word	0x011a499f
 8005588:	01312cff 	.word	0x01312cff
 800558c:	014ca43f 	.word	0x014ca43f
 8005590:	016e3600 	.word	0x016e3600
 8005594:	01a6ab1f 	.word	0x01a6ab1f
 8005598:	01e84800 	.word	0x01e84800

0800559c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d106      	bne.n	800560c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	e00b      	b.n	8005624 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e001      	b.n	8005624 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e003      	b.n	800562c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005624:	2032      	movs	r0, #50	; 0x32
 8005626:	f7fb fcd1 	bl	8000fcc <HAL_Delay>

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005634:	b084      	sub	sp, #16
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e009      	b.n	8005668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3340      	adds	r3, #64	; 0x40
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	2200      	movs	r2, #0
 8005660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b0e      	cmp	r3, #14
 800566c:	d9f2      	bls.n	8005654 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11c      	bne.n	80056ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005682:	f043 0302 	orr.w	r3, r3, #2
 8005686:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c0:	461a      	mov	r2, r3
 80056c2:	2300      	movs	r3, #0
 80056c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	4619      	mov	r1, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	461a      	mov	r2, r3
 80056d6:	680b      	ldr	r3, [r1, #0]
 80056d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056da:	2103      	movs	r1, #3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f93d 	bl	800595c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056e2:	2110      	movs	r1, #16
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8f1 	bl	80058cc <USB_FlushTxFifo>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f90f 	bl	8005918 <USB_FlushRxFifo>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e043      	b.n	80057b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005744:	d118      	bne.n	8005778 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e013      	b.n	800578a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	461a      	mov	r2, r3
 8005770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e008      	b.n	800578a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	461a      	mov	r2, r3
 80057aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3b7      	bcc.n	800572e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e043      	b.n	800584c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057da:	d118      	bne.n	800580e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e013      	b.n	8005820 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e008      	b.n	8005820 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	461a      	mov	r2, r3
 8005840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3b7      	bcc.n	80057c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 0210 	orr.w	r2, r3, #16
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <USB_DevInit+0x294>)
 8005888:	4313      	orrs	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f043 0208 	orr.w	r2, r3, #8
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d107      	bne.n	80058b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ae:	f043 0304 	orr.w	r3, r3, #4
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c2:	b004      	add	sp, #16
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	803c3800 	.word	0x803c3800

080058cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	f043 0220 	orr.w	r2, r3, #32
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <USB_FlushTxFifo+0x48>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d901      	bls.n	80058f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e006      	b.n	8005906 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b20      	cmp	r3, #32
 8005902:	d0f0      	beq.n	80058e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	00030d40 	.word	0x00030d40

08005918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2210      	movs	r2, #16
 8005928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a09      	ldr	r2, [pc, #36]	; (8005958 <USB_FlushRxFifo+0x40>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e006      	b.n	800594a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	d0f0      	beq.n	800592a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	00030d40 	.word	0x00030d40

0800595c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d002      	beq.n	80059b4 <USB_GetDevSpeed+0x26>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b06      	cmp	r3, #6
 80059b2:	d102      	bne.n	80059ba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059b4:	2302      	movs	r3, #2
 80059b6:	75fb      	strb	r3, [r7, #23]
 80059b8:	e001      	b.n	80059be <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059ba:	230f      	movs	r3, #15
 80059bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059be:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d13a      	bne.n	8005a5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2101      	movs	r1, #1
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	68f9      	ldr	r1, [r7, #12]
 8005a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a06:	4313      	orrs	r3, r2
 8005a08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d155      	bne.n	8005acc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	78db      	ldrb	r3, [r3, #3]
 8005a3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	059b      	lsls	r3, r3, #22
 8005a42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a44:	4313      	orrs	r3, r2
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e036      	b.n	8005acc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11a      	bne.n	8005acc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d161      	bne.n	8005bbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0e:	d11f      	bne.n	8005b50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b70:	4013      	ands	r3, r2
 8005b72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	2101      	movs	r1, #1
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b94:	4013      	ands	r3, r2
 8005b96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <USB_DeactivateEndpoint+0x1b0>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]
 8005bba:	e060      	b.n	8005c7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd2:	d11f      	bne.n	8005c14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2101      	movs	r1, #1
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4013      	ands	r3, r2
 8005c36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	43db      	mvns	r3, r3
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	0159      	lsls	r1, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	440b      	add	r3, r1
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	4619      	mov	r1, r3
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <USB_DeactivateEndpoint+0x1b4>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	ec337800 	.word	0xec337800
 8005c90:	eff37800 	.word	0xeff37800

08005c94 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	f040 810a 	bne.w	8005ec6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d132      	bne.n	8005d20 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	0cdb      	lsrs	r3, r3, #19
 8005d1a:	04db      	lsls	r3, r3, #19
 8005d1c:	6113      	str	r3, [r2, #16]
 8005d1e:	e074      	b.n	8005e0a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	0cdb      	lsrs	r3, r3, #19
 8005d3c:	04db      	lsls	r3, r3, #19
 8005d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6959      	ldr	r1, [r3, #20]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	440b      	add	r3, r1
 8005d7c:	1e59      	subs	r1, r3, #1
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d86:	04d9      	lsls	r1, r3, #19
 8005d88:	4baf      	ldr	r3, [pc, #700]	; (8006048 <USB_EPStartXfer+0x3b4>)
 8005d8a:	400b      	ands	r3, r1
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	0148      	lsls	r0, r1, #5
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	4401      	add	r1, r0
 8005d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005db2:	6939      	ldr	r1, [r7, #16]
 8005db4:	0148      	lsls	r0, r1, #5
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	4401      	add	r1, r0
 8005dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d11f      	bne.n	8005e0a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e08:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e28:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	78db      	ldrb	r3, [r3, #3]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d015      	beq.n	8005e5e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8100 	beq.w	800603c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	634b      	str	r3, [r1, #52]	; 0x34
 8005e5c:	e0ee      	b.n	800603c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d110      	bne.n	8005e90 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e00f      	b.n	8005eb0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68d9      	ldr	r1, [r3, #12]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9e2 	bl	8006288 <USB_WritePacket>
 8005ec4:	e0ba      	b.n	800603c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee0:	0cdb      	lsrs	r3, r3, #19
 8005ee2:	04db      	lsls	r3, r3, #19
 8005ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d123      	bne.n	8005f5a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f28:	6939      	ldr	r1, [r7, #16]
 8005f2a:	0148      	lsls	r0, r1, #5
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	4401      	add	r1, r0
 8005f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f56:	6113      	str	r3, [r2, #16]
 8005f58:	e033      	b.n	8005fc2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695a      	ldr	r2, [r3, #20]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	4413      	add	r3, r2
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	89fb      	ldrh	r3, [r7, #14]
 8005f80:	04d9      	lsls	r1, r3, #19
 8005f82:	4b31      	ldr	r3, [pc, #196]	; (8006048 <USB_EPStartXfer+0x3b4>)
 8005f84:	400b      	ands	r3, r1
 8005f86:	6939      	ldr	r1, [r7, #16]
 8005f88:	0148      	lsls	r0, r1, #5
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	4401      	add	r1, r0
 8005f8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f92:	4313      	orrs	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	89f9      	ldrh	r1, [r7, #14]
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	0148      	lsls	r0, r1, #5
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	4401      	add	r1, r0
 8005fba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d128      	bne.n	800601c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d110      	bne.n	8005ffc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e00f      	b.n	800601c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006036:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800603a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	1ff80000 	.word	0x1ff80000

0800604c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	f040 80ab 	bne.w	80061c0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d132      	bne.n	80060d8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	0cdb      	lsrs	r3, r3, #19
 80060d2:	04db      	lsls	r3, r3, #19
 80060d4:	6113      	str	r3, [r2, #16]
 80060d6:	e04e      	b.n	8006176 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	0cdb      	lsrs	r3, r3, #19
 80060f4:	04db      	lsls	r3, r3, #19
 80060f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800611a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800614e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	0148      	lsls	r0, r1, #5
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	4401      	add	r1, r0
 800616e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006194:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d06d      	beq.n	800627a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	2101      	movs	r1, #1
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ba:	4313      	orrs	r3, r2
 80061bc:	634b      	str	r3, [r1, #52]	; 0x34
 80061be:	e05c      	b.n	800627a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061da:	0cdb      	lsrs	r3, r3, #19
 80061dc:	04db      	lsls	r3, r3, #19
 80061de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006202:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	0148      	lsls	r0, r1, #5
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	4401      	add	r1, r0
 8006252:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006256:	4313      	orrs	r3, r2
 8006258:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006288:	b480      	push	{r7}
 800628a:	b089      	sub	sp, #36	; 0x24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	460b      	mov	r3, r1
 8006298:	71fb      	strb	r3, [r7, #7]
 800629a:	4613      	mov	r3, r2
 800629c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80062a6:	88bb      	ldrh	r3, [r7, #4]
 80062a8:	3303      	adds	r3, #3
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	e00f      	b.n	80062d4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	031a      	lsls	r2, r3, #12
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c0:	461a      	mov	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3304      	adds	r3, #4
 80062cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3eb      	bcc.n	80062b4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b089      	sub	sp, #36	; 0x24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	4613      	mov	r3, r2
 80062f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	3303      	adds	r3, #3
 8006304:	089b      	lsrs	r3, r3, #2
 8006306:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	e00b      	b.n	8006326 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	601a      	str	r2, [r3, #0]
    pDest++;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	3304      	adds	r3, #4
 800631e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	3301      	adds	r3, #1
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3ef      	bcc.n	800630e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3724      	adds	r7, #36	; 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d12c      	bne.n	80063b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	db12      	blt.n	8006390 <USB_EPSetStall+0x54>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00f      	beq.n	8006390 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800638e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e02b      	b.n	800640a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db12      	blt.n	80063ea <USB_EPSetStall+0xae>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00f      	beq.n	80063ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d128      	bne.n	8006486 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	78db      	ldrb	r3, [r3, #3]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d003      	beq.n	8006464 <USB_EPClearStall+0x4c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	78db      	ldrb	r3, [r3, #3]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d138      	bne.n	80064d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e027      	b.n	80064d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	78db      	ldrb	r3, [r3, #3]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d003      	beq.n	80064b6 <USB_EPClearStall+0x9e>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d10f      	bne.n	80064d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006502:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006506:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006518:	68f9      	ldr	r1, [r7, #12]
 800651a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800651e:	4313      	orrs	r3, r2
 8006520:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655e:	f023 0302 	bic.w	r3, r3, #2
 8006562:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0c1b      	lsrs	r3, r3, #16
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	4013      	ands	r3, r2
 8006630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	b29b      	uxth	r3, r3
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006670:	68bb      	ldr	r3, [r7, #8]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800667e:	b480      	push	{r7}
 8006680:	b087      	sub	sp, #28
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	01db      	lsls	r3, r3, #7
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4013      	ands	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066cc:	68bb      	ldr	r3, [r7, #8]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0301 	and.w	r3, r3, #1
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006710:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006714:	f023 0307 	bic.w	r3, r3, #7
 8006718:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	333c      	adds	r3, #60	; 0x3c
 800674e:	3304      	adds	r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <USB_EP0_OutStart+0x8c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d90a      	bls.n	8006772 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676c:	d101      	bne.n	8006772 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e024      	b.n	80067bc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a0:	f043 0318 	orr.w	r3, r3, #24
 80067a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067b8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	4f54300a 	.word	0x4f54300a

080067cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4a13      	ldr	r2, [pc, #76]	; (8006830 <USB_CoreReset+0x64>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e01b      	b.n	8006822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	daf2      	bge.n	80067d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <USB_CoreReset+0x64>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d0f0      	beq.n	8006802 <USB_CoreReset+0x36>

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	00030d40 	.word	0x00030d40

08006834 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006840:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006844:	f002 fb18 	bl	8008e78 <USBD_static_malloc>
 8006848:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006858:	2302      	movs	r3, #2
 800685a:	e066      	b.n	800692a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d119      	bne.n	80068a0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800686c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006870:	2202      	movs	r2, #2
 8006872:	2181      	movs	r1, #129	; 0x81
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f002 f8eb 	bl	8008a50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006884:	2202      	movs	r2, #2
 8006886:	2101      	movs	r1, #1
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f002 f8e1 	bl	8008a50 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2210      	movs	r2, #16
 800689a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800689e:	e016      	b.n	80068ce <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068a0:	2340      	movs	r3, #64	; 0x40
 80068a2:	2202      	movs	r2, #2
 80068a4:	2181      	movs	r1, #129	; 0x81
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 f8d2 	bl	8008a50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	2202      	movs	r2, #2
 80068b6:	2101      	movs	r1, #1
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f8c9 	bl	8008a50 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2210      	movs	r2, #16
 80068ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068ce:	2308      	movs	r3, #8
 80068d0:	2203      	movs	r2, #3
 80068d2:	2182      	movs	r1, #130	; 0x82
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f002 f8bb 	bl	8008a50 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7c1b      	ldrb	r3, [r3, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800690a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690e:	2101      	movs	r1, #1
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f002 fa17 	bl	8008d44 <USBD_LL_PrepareReceive>
 8006916:	e007      	b.n	8006928 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	2101      	movs	r1, #1
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 fa0e 	bl	8008d44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800693e:	2181      	movs	r1, #129	; 0x81
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 f8c3 	bl	8008acc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800694c:	2101      	movs	r1, #1
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f002 f8bc 	bl	8008acc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800695c:	2182      	movs	r1, #130	; 0x82
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 f8b4 	bl	8008acc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800698e:	4618      	mov	r0, r3
 8006990:	f002 fa80 	bl	8008e94 <USBD_static_free>
    pdev->pClassData = NULL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e0af      	b.n	8006b30 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03f      	beq.n	8006a5c <USBD_CDC_Setup+0xb4>
 80069dc:	2b20      	cmp	r3, #32
 80069de:	f040 809f 	bne.w	8006b20 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d02e      	beq.n	8006a48 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	b25b      	sxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da16      	bge.n	8006a22 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a00:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	88d2      	ldrh	r2, [r2, #6]
 8006a06:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	88db      	ldrh	r3, [r3, #6]
 8006a0c:	2b07      	cmp	r3, #7
 8006a0e:	bf28      	it	cs
 8006a10:	2307      	movcs	r3, #7
 8006a12:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	89fa      	ldrh	r2, [r7, #14]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fb43 	bl	80080a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a20:	e085      	b.n	8006b2e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	785a      	ldrb	r2, [r3, #1]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	88db      	ldrh	r3, [r3, #6]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	88db      	ldrh	r3, [r3, #6]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fb5c 	bl	80080fe <USBD_CtlPrepareRx>
      break;
 8006a46:	e072      	b.n	8006b2e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	7850      	ldrb	r0, [r2, #1]
 8006a54:	2200      	movs	r2, #0
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	4798      	blx	r3
      break;
 8006a5a:	e068      	b.n	8006b2e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b0b      	cmp	r3, #11
 8006a62:	d852      	bhi.n	8006b0a <USBD_CDC_Setup+0x162>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <USBD_CDC_Setup+0xc4>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a9d 	.word	0x08006a9d
 8006a70:	08006b19 	.word	0x08006b19
 8006a74:	08006b0b 	.word	0x08006b0b
 8006a78:	08006b0b 	.word	0x08006b0b
 8006a7c:	08006b0b 	.word	0x08006b0b
 8006a80:	08006b0b 	.word	0x08006b0b
 8006a84:	08006b0b 	.word	0x08006b0b
 8006a88:	08006b0b 	.word	0x08006b0b
 8006a8c:	08006b0b 	.word	0x08006b0b
 8006a90:	08006b0b 	.word	0x08006b0b
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006af1 	.word	0x08006af1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d107      	bne.n	8006ab8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006aa8:	f107 030a 	add.w	r3, r7, #10
 8006aac:	2202      	movs	r2, #2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 faf8 	bl	80080a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab6:	e032      	b.n	8006b1e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fa82 	bl	8007fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac4:	e02b      	b.n	8006b1e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d107      	bne.n	8006ae2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ad2:	f107 030d 	add.w	r3, r7, #13
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fae3 	bl	80080a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae0:	e01d      	b.n	8006b1e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fa6d 	bl	8007fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aea:	2303      	movs	r3, #3
 8006aec:	75fb      	strb	r3, [r7, #23]
          break;
 8006aee:	e016      	b.n	8006b1e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d00f      	beq.n	8006b1c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fa60 	bl	8007fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b04:	2303      	movs	r3, #3
 8006b06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b08:	e008      	b.n	8006b1c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fa59 	bl	8007fc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	75fb      	strb	r3, [r7, #23]
          break;
 8006b16:	e002      	b.n	8006b1e <USBD_CDC_Setup+0x176>
          break;
 8006b18:	bf00      	nop
 8006b1a:	e008      	b.n	8006b2e <USBD_CDC_Setup+0x186>
          break;
 8006b1c:	bf00      	nop
      }
      break;
 8006b1e:	e006      	b.n	8006b2e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fa4e 	bl	8007fc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e04f      	b.n	8006bfa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3318      	adds	r3, #24
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d029      	beq.n	8006bcc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3318      	adds	r3, #24
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	78f9      	ldrb	r1, [r7, #3]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4403      	add	r3, r0
 8006b98:	3344      	adds	r3, #68	; 0x44
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ba0:	fb03 f301 	mul.w	r3, r3, r1
 8006ba4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3318      	adds	r3, #24
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bbe:	78f9      	ldrb	r1, [r7, #3]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 f885 	bl	8008cd4 <USBD_LL_Transmit>
 8006bca:	e015      	b.n	8006bf8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e015      	b.n	8006c50 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 f8c3 	bl	8008db4 <USBD_LL_GetRxDataSize>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e01b      	b.n	8006caa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d015      	beq.n	8006ca8 <USBD_CDC_EP0_RxReady+0x50>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c82:	2bff      	cmp	r3, #255	; 0xff
 8006c84:	d010      	beq.n	8006ca8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c94:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	22ff      	movs	r2, #255	; 0xff
 8006ca4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2243      	movs	r2, #67	; 0x43
 8006cc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20000098 	.word	0x20000098

08006cd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2243      	movs	r2, #67	; 0x43
 8006ce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	20000054 	.word	0x20000054

08006cf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2243      	movs	r2, #67	; 0x43
 8006d00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	200000dc 	.word	0x200000dc

08006d14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	220a      	movs	r2, #10
 8006d20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d22:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000010 	.word	0x20000010

08006d34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e004      	b.n	8006d52 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b087      	sub	sp, #28
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d70:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e008      	b.n	8006d8e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006daa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e004      	b.n	8006dc0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dda:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e01a      	b.n	8006e24 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d114      	bne.n	8006e22 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e16:	2181      	movs	r1, #129	; 0x81
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 ff5b 	bl	8008cd4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e016      	b.n	8006e78 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7c1b      	ldrb	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 ff70 	bl	8008d44 <USBD_LL_PrepareReceive>
 8006e64:	e007      	b.n	8006e76 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 ff67 	bl	8008d44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e01f      	b.n	8006ed8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	79fa      	ldrb	r2, [r7, #7]
 8006eca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 fd41 	bl	8008954 <USBD_LL_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e016      	b.n	8006f26 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	f107 020e 	add.w	r2, r7, #14
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 fd58 	bl	80089ec <USBD_LL_Start>
 8006f3c:	4603      	mov	r3, r0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
  }

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 ffba 	bl	8007f50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d01a      	beq.n	8007036 <USBD_LL_SetupStage+0x72>
 8007000:	2b02      	cmp	r3, #2
 8007002:	d822      	bhi.n	800704a <USBD_LL_SetupStage+0x86>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <USBD_LL_SetupStage+0x4a>
 8007008:	2b01      	cmp	r3, #1
 800700a:	d00a      	beq.n	8007022 <USBD_LL_SetupStage+0x5e>
 800700c:	e01d      	b.n	800704a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa62 	bl	80074e0 <USBD_StdDevReq>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
      break;
 8007020:	e020      	b.n	8007064 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fac6 	bl	80075bc <USBD_StdItfReq>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
      break;
 8007034:	e016      	b.n	8007064 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb05 	bl	800764e <USBD_StdEPReq>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e00c      	b.n	8007064 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007050:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007054:	b2db      	uxtb	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fd6d 	bl	8008b38 <USBD_LL_StallEP>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
      break;
 8007062:	bf00      	nop
  }

  return ret;
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b086      	sub	sp, #24
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	460b      	mov	r3, r1
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800707c:	7afb      	ldrb	r3, [r7, #11]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d138      	bne.n	80070f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007088:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007090:	2b03      	cmp	r3, #3
 8007092:	d14a      	bne.n	800712a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	d913      	bls.n	80070c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	1ad2      	subs	r2, r2, r3
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	bf28      	it	cs
 80070ba:	4613      	movcs	r3, r2
 80070bc:	461a      	mov	r2, r3
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 f839 	bl	8008138 <USBD_CtlContinueRx>
 80070c6:	e030      	b.n	800712a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d10b      	bne.n	80070ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f001 f834 	bl	800815a <USBD_CtlSendStatus>
 80070f2:	e01a      	b.n	800712a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d114      	bne.n	800712a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	7afa      	ldrb	r2, [r7, #11]
 8007116:	4611      	mov	r1, r2
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	4798      	blx	r3
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	e000      	b.n	800712c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	460b      	mov	r3, r1
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d16b      	bne.n	8007220 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3314      	adds	r3, #20
 800714c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007154:	2b02      	cmp	r3, #2
 8007156:	d156      	bne.n	8007206 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d914      	bls.n	800718e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	461a      	mov	r2, r3
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 ffae 	bl	80080dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f001 fddc 	bl	8008d44 <USBD_LL_PrepareReceive>
 800718c:	e03b      	b.n	8007206 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	d11c      	bne.n	80071d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d316      	bcc.n	80071d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d20f      	bcs.n	80071d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 ff8f 	bl	80080dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 fdb9 	bl	8008d44 <USBD_LL_PrepareReceive>
 80071d2:	e018      	b.n	8007206 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d10b      	bne.n	80071f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 fc9c 	bl	8008b38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 ffbd 	bl	8008180 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d122      	bne.n	8007256 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fe98 	bl	8006f46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800721e:	e01a      	b.n	8007256 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d114      	bne.n	8007256 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00e      	beq.n	8007256 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	7afa      	ldrb	r2, [r7, #11]
 8007242:	4611      	mov	r1, r2
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	e000      	b.n	8007258 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	e02f      	b.n	80072f4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00f      	beq.n	80072be <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6852      	ldr	r2, [r2, #4]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	4611      	mov	r1, r2
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072be:	2340      	movs	r3, #64	; 0x40
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fbc3 	bl	8008a50 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2240      	movs	r2, #64	; 0x40
 80072d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	2200      	movs	r2, #0
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fbb5 	bl	8008a50 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2240      	movs	r2, #64	; 0x40
 80072f0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732a:	b2da      	uxtb	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b04      	cmp	r3, #4
 800735a:	d106      	bne.n	800736a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e012      	b.n	80073b4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d10b      	bne.n	80073b2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e014      	b.n	8007400 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d10d      	bne.n	80073fe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800741e:	2303      	movs	r3, #3
 8007420:	e014      	b.n	800744c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b03      	cmp	r3, #3
 800742c:	d10d      	bne.n	800744a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6852      	ldr	r2, [r2, #4]
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	4611      	mov	r1, r2
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
  }

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b087      	sub	sp, #28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	3301      	adds	r3, #1
 80074b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074c0:	8a3b      	ldrh	r3, [r7, #16]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	b21b      	sxth	r3, r3
 80074ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074d0:	89fb      	ldrh	r3, [r7, #14]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d005      	beq.n	8007506 <USBD_StdDevReq+0x26>
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d853      	bhi.n	80075a6 <USBD_StdDevReq+0xc6>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <USBD_StdDevReq+0x3a>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d14f      	bne.n	80075a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e04a      	b.n	80075b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d83b      	bhi.n	800759a <USBD_StdDevReq+0xba>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USBD_StdDevReq+0x48>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800757d 	.word	0x0800757d
 800752c:	08007591 	.word	0x08007591
 8007530:	0800759b 	.word	0x0800759b
 8007534:	08007587 	.word	0x08007587
 8007538:	0800759b 	.word	0x0800759b
 800753c:	0800755b 	.word	0x0800755b
 8007540:	08007551 	.word	0x08007551
 8007544:	0800759b 	.word	0x0800759b
 8007548:	08007573 	.word	0x08007573
 800754c:	08007565 	.word	0x08007565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f9de 	bl	8007914 <USBD_GetDescriptor>
          break;
 8007558:	e024      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fb6d 	bl	8007c3c <USBD_SetAddress>
          break;
 8007562:	e01f      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fbac 	bl	8007cc4 <USBD_SetConfig>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
          break;
 8007570:	e018      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc4b 	bl	8007e10 <USBD_GetConfig>
          break;
 800757a:	e013      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fc7c 	bl	8007e7c <USBD_GetStatus>
          break;
 8007584:	e00e      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fcab 	bl	8007ee4 <USBD_SetFeature>
          break;
 800758e:	e009      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fcba 	bl	8007f0c <USBD_ClrFeature>
          break;
 8007598:	e004      	b.n	80075a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fd11 	bl	8007fc4 <USBD_CtlError>
          break;
 80075a2:	bf00      	nop
      }
      break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd0b 	bl	8007fc4 <USBD_CtlError>
      break;
 80075ae:	bf00      	nop
  }

  return ret;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop

080075bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d005      	beq.n	80075e2 <USBD_StdItfReq+0x26>
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d82f      	bhi.n	800763a <USBD_StdItfReq+0x7e>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USBD_StdItfReq+0x26>
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d12b      	bne.n	800763a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d81d      	bhi.n	800762c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	889b      	ldrh	r3, [r3, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d813      	bhi.n	8007622 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	4798      	blx	r3
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	88db      	ldrh	r3, [r3, #6]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d110      	bne.n	8007636 <USBD_StdItfReq+0x7a>
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10d      	bne.n	8007636 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fd9d 	bl	800815a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007620:	e009      	b.n	8007636 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fccd 	bl	8007fc4 <USBD_CtlError>
          break;
 800762a:	e004      	b.n	8007636 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fcc8 	bl	8007fc4 <USBD_CtlError>
          break;
 8007634:	e000      	b.n	8007638 <USBD_StdItfReq+0x7c>
          break;
 8007636:	bf00      	nop
      }
      break;
 8007638:	e004      	b.n	8007644 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fcc1 	bl	8007fc4 <USBD_CtlError>
      break;
 8007642:	bf00      	nop
  }

  return ret;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	889b      	ldrh	r3, [r3, #4]
 8007660:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d007      	beq.n	800767e <USBD_StdEPReq+0x30>
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	f200 8145 	bhi.w	80078fe <USBD_StdEPReq+0x2b0>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <USBD_StdEPReq+0x44>
 8007678:	2b20      	cmp	r3, #32
 800767a:	f040 8140 	bne.w	80078fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	e13a      	b.n	8007908 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d007      	beq.n	80076aa <USBD_StdEPReq+0x5c>
 800769a:	2b03      	cmp	r3, #3
 800769c:	f300 8129 	bgt.w	80078f2 <USBD_StdEPReq+0x2a4>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d07f      	beq.n	80077a4 <USBD_StdEPReq+0x156>
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d03c      	beq.n	8007722 <USBD_StdEPReq+0xd4>
 80076a8:	e123      	b.n	80078f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d002      	beq.n	80076bc <USBD_StdEPReq+0x6e>
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d016      	beq.n	80076e8 <USBD_StdEPReq+0x9a>
 80076ba:	e02c      	b.n	8007716 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <USBD_StdEPReq+0x90>
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d00a      	beq.n	80076de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fa33 	bl	8008b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fa2f 	bl	8008b38 <USBD_LL_StallEP>
 80076da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076dc:	e020      	b.n	8007720 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc6f 	bl	8007fc4 <USBD_CtlError>
              break;
 80076e6:	e01b      	b.n	8007720 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	885b      	ldrh	r3, [r3, #2]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10e      	bne.n	800770e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <USBD_StdEPReq+0xc0>
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b80      	cmp	r3, #128	; 0x80
 80076fa:	d008      	beq.n	800770e <USBD_StdEPReq+0xc0>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	88db      	ldrh	r3, [r3, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fa15 	bl	8008b38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fd23 	bl	800815a <USBD_CtlSendStatus>

              break;
 8007714:	e004      	b.n	8007720 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc53 	bl	8007fc4 <USBD_CtlError>
              break;
 800771e:	bf00      	nop
          }
          break;
 8007720:	e0ec      	b.n	80078fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d002      	beq.n	8007734 <USBD_StdEPReq+0xe6>
 800772e:	2b03      	cmp	r3, #3
 8007730:	d016      	beq.n	8007760 <USBD_StdEPReq+0x112>
 8007732:	e030      	b.n	8007796 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <USBD_StdEPReq+0x108>
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	2b80      	cmp	r3, #128	; 0x80
 800773e:	d00a      	beq.n	8007756 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 f9f7 	bl	8008b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f9f3 	bl	8008b38 <USBD_LL_StallEP>
 8007752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007754:	e025      	b.n	80077a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc33 	bl	8007fc4 <USBD_CtlError>
              break;
 800775e:	e020      	b.n	80077a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	885b      	ldrh	r3, [r3, #2]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11b      	bne.n	80077a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	2b00      	cmp	r3, #0
 8007770:	d004      	beq.n	800777c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fa14 	bl	8008ba4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcec 	bl	800815a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007794:	e004      	b.n	80077a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc13 	bl	8007fc4 <USBD_CtlError>
              break;
 800779e:	e000      	b.n	80077a2 <USBD_StdEPReq+0x154>
              break;
 80077a0:	bf00      	nop
          }
          break;
 80077a2:	e0ab      	b.n	80078fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d002      	beq.n	80077b6 <USBD_StdEPReq+0x168>
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d032      	beq.n	800781a <USBD_StdEPReq+0x1cc>
 80077b4:	e097      	b.n	80078e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <USBD_StdEPReq+0x17e>
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d004      	beq.n	80077cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fbfd 	bl	8007fc4 <USBD_CtlError>
                break;
 80077ca:	e091      	b.n	80078f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da0b      	bge.n	80077ec <USBD_StdEPReq+0x19e>
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	3310      	adds	r3, #16
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	3304      	adds	r3, #4
 80077ea:	e00b      	b.n	8007804 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2202      	movs	r2, #2
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc47 	bl	80080a6 <USBD_CtlSendData>
              break;
 8007818:	e06a      	b.n	80078f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800781a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da11      	bge.n	8007846 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	f003 020f 	and.w	r2, r3, #15
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3324      	adds	r3, #36	; 0x24
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d117      	bne.n	800786c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fbc0 	bl	8007fc4 <USBD_CtlError>
                  break;
 8007844:	e054      	b.n	80078f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbad 	bl	8007fc4 <USBD_CtlError>
                  break;
 800786a:	e041      	b.n	80078f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da0b      	bge.n	800788c <USBD_StdEPReq+0x23e>
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	3310      	adds	r3, #16
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	3304      	adds	r3, #4
 800788a:	e00b      	b.n	80078a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	3304      	adds	r3, #4
 80078a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <USBD_StdEPReq+0x264>
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d103      	bne.n	80078ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e00e      	b.n	80078d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 f9a6 	bl	8008c10 <USBD_LL_IsStallEP>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2201      	movs	r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	e002      	b.n	80078d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2202      	movs	r2, #2
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fbe1 	bl	80080a6 <USBD_CtlSendData>
              break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb6b 	bl	8007fc4 <USBD_CtlError>
              break;
 80078ee:	bf00      	nop
          }
          break;
 80078f0:	e004      	b.n	80078fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb65 	bl	8007fc4 <USBD_CtlError>
          break;
 80078fa:	bf00      	nop
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb5f 	bl	8007fc4 <USBD_CtlError>
      break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	2b0e      	cmp	r3, #14
 8007936:	f200 8152 	bhi.w	8007bde <USBD_GetDescriptor+0x2ca>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <USBD_GetDescriptor+0x2c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	080079b1 	.word	0x080079b1
 8007944:	080079c9 	.word	0x080079c9
 8007948:	08007a09 	.word	0x08007a09
 800794c:	08007bdf 	.word	0x08007bdf
 8007950:	08007bdf 	.word	0x08007bdf
 8007954:	08007b7f 	.word	0x08007b7f
 8007958:	08007bab 	.word	0x08007bab
 800795c:	08007bdf 	.word	0x08007bdf
 8007960:	08007bdf 	.word	0x08007bdf
 8007964:	08007bdf 	.word	0x08007bdf
 8007968:	08007bdf 	.word	0x08007bdf
 800796c:	08007bdf 	.word	0x08007bdf
 8007970:	08007bdf 	.word	0x08007bdf
 8007974:	08007bdf 	.word	0x08007bdf
 8007978:	0800797d 	.word	0x0800797d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00b      	beq.n	80079a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	7c12      	ldrb	r2, [r2, #16]
 8007994:	f107 0108 	add.w	r1, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799e:	e126      	b.n	8007bee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb0e 	bl	8007fc4 <USBD_CtlError>
        err++;
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	3301      	adds	r3, #1
 80079ac:	72fb      	strb	r3, [r7, #11]
      break;
 80079ae:	e11e      	b.n	8007bee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
      break;
 80079c6:	e112      	b.n	8007bee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7c1b      	ldrb	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	f107 0208 	add.w	r2, r7, #8
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
 80079e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	2202      	movs	r2, #2
 80079e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079ea:	e100      	b.n	8007bee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f107 0208 	add.w	r2, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	2202      	movs	r2, #2
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e0f2      	b.n	8007bee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	f200 80ac 	bhi.w	8007b6c <USBD_GetDescriptor+0x258>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <USBD_GetDescriptor+0x108>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a69 	.word	0x08007a69
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007ad1 	.word	0x08007ad1
 8007a2c:	08007b05 	.word	0x08007b05
 8007a30:	08007b39 	.word	0x08007b39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	7c12      	ldrb	r2, [r2, #16]
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a56:	e091      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fab2 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	3301      	adds	r3, #1
 8007a64:	72fb      	strb	r3, [r7, #11]
          break;
 8007a66:	e089      	b.n	8007b7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8a:	e077      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa98 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	3301      	adds	r3, #1
 8007a98:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9a:	e06f      	b.n	8007b7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e05d      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa7e 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e055      	b.n	8007b7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af2:	e043      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa64 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
          break;
 8007b02:	e03b      	b.n	8007b7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b26:	e029      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa4a 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
          break;
 8007b36:	e021      	b.n	8007b7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5a:	e00f      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa30 	bl	8007fc4 <USBD_CtlError>
            err++;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	3301      	adds	r3, #1
 8007b68:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6a:	e007      	b.n	8007b7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa28 	bl	8007fc4 <USBD_CtlError>
          err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b7a:	bf00      	nop
      }
      break;
 8007b7c:	e037      	b.n	8007bee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7c1b      	ldrb	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8e:	f107 0208 	add.w	r2, r7, #8
 8007b92:	4610      	mov	r0, r2
 8007b94:	4798      	blx	r3
 8007b96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b98:	e029      	b.n	8007bee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa11 	bl	8007fc4 <USBD_CtlError>
        err++;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba8:	e021      	b.n	8007bee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7c1b      	ldrb	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10d      	bne.n	8007bce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f107 0208 	add.w	r2, r7, #8
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4798      	blx	r3
 8007bc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	2207      	movs	r2, #7
 8007bca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bcc:	e00f      	b.n	8007bee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9f7 	bl	8007fc4 <USBD_CtlError>
        err++;
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	72fb      	strb	r3, [r7, #11]
      break;
 8007bdc:	e007      	b.n	8007bee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f9ef 	bl	8007fc4 <USBD_CtlError>
      err++;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	3301      	adds	r3, #1
 8007bea:	72fb      	strb	r3, [r7, #11]
      break;
 8007bec:	bf00      	nop
  }

  if (err != 0U)
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11e      	bne.n	8007c32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	88db      	ldrh	r3, [r3, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d016      	beq.n	8007c2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00e      	beq.n	8007c20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88da      	ldrh	r2, [r3, #6]
 8007c06:	893b      	ldrh	r3, [r7, #8]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	bf28      	it	cs
 8007c0c:	4613      	movcs	r3, r2
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c12:	893b      	ldrh	r3, [r7, #8]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa44 	bl	80080a6 <USBD_CtlSendData>
 8007c1e:	e009      	b.n	8007c34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9ce 	bl	8007fc4 <USBD_CtlError>
 8007c28:	e004      	b.n	8007c34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa95 	bl	800815a <USBD_CtlSendStatus>
 8007c30:	e000      	b.n	8007c34 <USBD_GetDescriptor+0x320>
    return;
 8007c32:	bf00      	nop
  }
}
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop

08007c3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	889b      	ldrh	r3, [r3, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d131      	bne.n	8007cb2 <USBD_SetAddress+0x76>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	88db      	ldrh	r3, [r3, #6]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d12d      	bne.n	8007cb2 <USBD_SetAddress+0x76>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	885b      	ldrh	r3, [r3, #2]
 8007c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5c:	d829      	bhi.n	8007cb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	885b      	ldrh	r3, [r3, #2]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d104      	bne.n	8007c80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9a3 	bl	8007fc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7e:	e01d      	b.n	8007cbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7bfa      	ldrb	r2, [r7, #15]
 8007c84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ffeb 	bl	8008c68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa61 	bl	800815a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca6:	e009      	b.n	8007cbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb0:	e004      	b.n	8007cbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f985 	bl	8007fc4 <USBD_CtlError>
  }
}
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	885b      	ldrh	r3, [r3, #2]
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <USBD_SetConfig+0x148>)
 8007cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cdc:	4b4b      	ldr	r3, [pc, #300]	; (8007e0c <USBD_SetConfig+0x148>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d905      	bls.n	8007cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f96c 	bl	8007fc4 <USBD_CtlError>
    return USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e088      	b.n	8007e02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d002      	beq.n	8007d02 <USBD_SetConfig+0x3e>
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d025      	beq.n	8007d4c <USBD_SetConfig+0x88>
 8007d00:	e071      	b.n	8007de6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d02:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d01c      	beq.n	8007d44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007d0a:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d14:	4b3d      	ldr	r3, [pc, #244]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff f91e 	bl	8006f5c <USBD_SetClassConfig>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f949 	bl	8007fc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d32:	e065      	b.n	8007e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fa10 	bl	800815a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d42:	e05d      	b.n	8007e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa08 	bl	800815a <USBD_CtlSendStatus>
      break;
 8007d4a:	e059      	b.n	8007e00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d4c:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d112      	bne.n	8007d7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d5c:	4b2b      	ldr	r3, [pc, #172]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d66:	4b29      	ldr	r3, [pc, #164]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f911 	bl	8006f94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9f1 	bl	800815a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d78:	e042      	b.n	8007e00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d7a:	4b24      	ldr	r3, [pc, #144]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d02a      	beq.n	8007dde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff f8ff 	bl	8006f94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <USBD_SetConfig+0x148>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <USBD_SetConfig+0x148>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff f8d8 	bl	8006f5c <USBD_SetClassConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00f      	beq.n	8007dd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f903 	bl	8007fc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff f8e4 	bl	8006f94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dd4:	e014      	b.n	8007e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f9bf 	bl	800815a <USBD_CtlSendStatus>
      break;
 8007ddc:	e010      	b.n	8007e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9bb 	bl	800815a <USBD_CtlSendStatus>
      break;
 8007de4:	e00c      	b.n	8007e00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8eb 	bl	8007fc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <USBD_SetConfig+0x148>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff f8cd 	bl	8006f94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfe:	bf00      	nop
  }

  return ret;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200001cc 	.word	0x200001cc

08007e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d004      	beq.n	8007e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8cd 	bl	8007fc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e2a:	e023      	b.n	8007e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	dc02      	bgt.n	8007e3e <USBD_GetConfig+0x2e>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc03      	bgt.n	8007e44 <USBD_GetConfig+0x34>
 8007e3c:	e015      	b.n	8007e6a <USBD_GetConfig+0x5a>
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d00b      	beq.n	8007e5a <USBD_GetConfig+0x4a>
 8007e42:	e012      	b.n	8007e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f927 	bl	80080a6 <USBD_CtlSendData>
        break;
 8007e58:	e00c      	b.n	8007e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f91f 	bl	80080a6 <USBD_CtlSendData>
        break;
 8007e68:	e004      	b.n	8007e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8a9 	bl	8007fc4 <USBD_CtlError>
        break;
 8007e72:	bf00      	nop
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d81e      	bhi.n	8007ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	88db      	ldrh	r3, [r3, #6]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d004      	beq.n	8007ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f890 	bl	8007fc4 <USBD_CtlError>
        break;
 8007ea4:	e01a      	b.n	8007edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f043 0202 	orr.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f8eb 	bl	80080a6 <USBD_CtlSendData>
      break;
 8007ed0:	e004      	b.n	8007edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f875 	bl	8007fc4 <USBD_CtlError>
      break;
 8007eda:	bf00      	nop
  }
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d106      	bne.n	8007f04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f92b 	bl	800815a <USBD_CtlSendStatus>
  }
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d80b      	bhi.n	8007f3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d10c      	bne.n	8007f46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f910 	bl	800815a <USBD_CtlSendStatus>
      }
      break;
 8007f3a:	e004      	b.n	8007f46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f840 	bl	8007fc4 <USBD_CtlError>
      break;
 8007f44:	e000      	b.n	8007f48 <USBD_ClrFeature+0x3c>
      break;
 8007f46:	bf00      	nop
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff fa91 	bl	80074a2 <SWAPBYTE>
 8007f80:	4603      	mov	r3, r0
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3301      	adds	r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fa84 	bl	80074a2 <SWAPBYTE>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff fa77 	bl	80074a2 <SWAPBYTE>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	80da      	strh	r2, [r3, #6]
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fce:	2180      	movs	r1, #128	; 0x80
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fdb1 	bl	8008b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fdad 	bl	8008b38 <USBD_LL_StallEP>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b086      	sub	sp, #24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d036      	beq.n	800806a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008000:	6938      	ldr	r0, [r7, #16]
 8008002:	f000 f836 	bl	8008072 <USBD_GetLen>
 8008006:	4603      	mov	r3, r0
 8008008:	3301      	adds	r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	3301      	adds	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	2203      	movs	r2, #3
 800802e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	3301      	adds	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008036:	e013      	b.n	8008060 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	3301      	adds	r3, #1
 8008048:	613b      	str	r3, [r7, #16]
    idx++;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	3301      	adds	r3, #1
 800804e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
    idx++;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	3301      	adds	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e7      	bne.n	8008038 <USBD_GetString+0x52>
 8008068:	e000      	b.n	800806c <USBD_GetString+0x86>
    return;
 800806a:	bf00      	nop
  }
}
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008082:	e005      	b.n	8008090 <USBD_GetLen+0x1e>
  {
    len++;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	3301      	adds	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	3301      	adds	r3, #1
 800808e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f5      	bne.n	8008084 <USBD_GetLen+0x12>
  }

  return len;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2202      	movs	r2, #2
 80080b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	2100      	movs	r1, #0
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 fe01 	bl	8008cd4 <USBD_LL_Transmit>

  return USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	2100      	movs	r1, #0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 fdf0 	bl	8008cd4 <USBD_LL_Transmit>

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2203      	movs	r2, #3
 800810e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fe0b 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	2100      	movs	r1, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fdfa 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2204      	movs	r2, #4
 8008166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800816a:	2300      	movs	r3, #0
 800816c:	2200      	movs	r2, #0
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fdaf 	bl	8008cd4 <USBD_LL_Transmit>

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2205      	movs	r2, #5
 800818c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008190:	2300      	movs	r3, #0
 8008192:	2200      	movs	r2, #0
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fdd4 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081ac:	2200      	movs	r2, #0
 80081ae:	4912      	ldr	r1, [pc, #72]	; (80081f8 <MX_USB_DEVICE_Init+0x50>)
 80081b0:	4812      	ldr	r0, [pc, #72]	; (80081fc <MX_USB_DEVICE_Init+0x54>)
 80081b2:	f7fe fe65 	bl	8006e80 <USBD_Init>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081bc:	f7f8 fbe4 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081c0:	490f      	ldr	r1, [pc, #60]	; (8008200 <MX_USB_DEVICE_Init+0x58>)
 80081c2:	480e      	ldr	r0, [pc, #56]	; (80081fc <MX_USB_DEVICE_Init+0x54>)
 80081c4:	f7fe fe8c 	bl	8006ee0 <USBD_RegisterClass>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081ce:	f7f8 fbdb 	bl	8000988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081d2:	490c      	ldr	r1, [pc, #48]	; (8008204 <MX_USB_DEVICE_Init+0x5c>)
 80081d4:	4809      	ldr	r0, [pc, #36]	; (80081fc <MX_USB_DEVICE_Init+0x54>)
 80081d6:	f7fe fdad 	bl	8006d34 <USBD_CDC_RegisterInterface>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081e0:	f7f8 fbd2 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081e4:	4805      	ldr	r0, [pc, #20]	; (80081fc <MX_USB_DEVICE_Init+0x54>)
 80081e6:	f7fe fea2 	bl	8006f2e <USBD_Start>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081f0:	f7f8 fbca 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081f4:	bf00      	nop
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	2000013c 	.word	0x2000013c
 80081fc:	20000544 	.word	0x20000544
 8008200:	2000001c 	.word	0x2000001c
 8008204:	20000128 	.word	0x20000128

08008208 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800820c:	2200      	movs	r2, #0
 800820e:	4905      	ldr	r1, [pc, #20]	; (8008224 <CDC_Init_FS+0x1c>)
 8008210:	4805      	ldr	r0, [pc, #20]	; (8008228 <CDC_Init_FS+0x20>)
 8008212:	f7fe fda4 	bl	8006d5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008216:	4905      	ldr	r1, [pc, #20]	; (800822c <CDC_Init_FS+0x24>)
 8008218:	4803      	ldr	r0, [pc, #12]	; (8008228 <CDC_Init_FS+0x20>)
 800821a:	f7fe fdbe 	bl	8006d9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800821e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008220:	4618      	mov	r0, r3
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20001014 	.word	0x20001014
 8008228:	20000544 	.word	0x20000544
 800822c:	20000814 	.word	0x20000814

08008230 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008234:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008236:	4618      	mov	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	4613      	mov	r3, r2
 800824e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b23      	cmp	r3, #35	; 0x23
 8008254:	f200 8098 	bhi.w	8008388 <CDC_Control_FS+0x148>
 8008258:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <CDC_Control_FS+0x20>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	08008389 	.word	0x08008389
 8008264:	08008389 	.word	0x08008389
 8008268:	08008389 	.word	0x08008389
 800826c:	08008389 	.word	0x08008389
 8008270:	08008389 	.word	0x08008389
 8008274:	08008389 	.word	0x08008389
 8008278:	08008389 	.word	0x08008389
 800827c:	08008389 	.word	0x08008389
 8008280:	08008389 	.word	0x08008389
 8008284:	08008389 	.word	0x08008389
 8008288:	08008389 	.word	0x08008389
 800828c:	08008389 	.word	0x08008389
 8008290:	08008389 	.word	0x08008389
 8008294:	08008389 	.word	0x08008389
 8008298:	08008389 	.word	0x08008389
 800829c:	08008389 	.word	0x08008389
 80082a0:	08008389 	.word	0x08008389
 80082a4:	08008389 	.word	0x08008389
 80082a8:	08008389 	.word	0x08008389
 80082ac:	08008389 	.word	0x08008389
 80082b0:	08008389 	.word	0x08008389
 80082b4:	08008389 	.word	0x08008389
 80082b8:	08008389 	.word	0x08008389
 80082bc:	08008389 	.word	0x08008389
 80082c0:	08008389 	.word	0x08008389
 80082c4:	08008389 	.word	0x08008389
 80082c8:	08008389 	.word	0x08008389
 80082cc:	08008389 	.word	0x08008389
 80082d0:	08008389 	.word	0x08008389
 80082d4:	08008389 	.word	0x08008389
 80082d8:	08008389 	.word	0x08008389
 80082dc:	08008389 	.word	0x08008389
 80082e0:	080082f1 	.word	0x080082f1
 80082e4:	08008335 	.word	0x08008335
 80082e8:	08008389 	.word	0x08008389
 80082ec:	08008389 	.word	0x08008389
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	3301      	adds	r3, #1
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	3302      	adds	r3, #2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	431a      	orrs	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	3303      	adds	r3, #3
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	061b      	lsls	r3, r3, #24
 8008312:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8008314:	461a      	mov	r2, r3
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <CDC_Control_FS+0x158>)
 8008318:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	791a      	ldrb	r2, [r3, #4]
 800831e:	4b1e      	ldr	r3, [pc, #120]	; (8008398 <CDC_Control_FS+0x158>)
 8008320:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	795a      	ldrb	r2, [r3, #5]
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <CDC_Control_FS+0x158>)
 8008328:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	799a      	ldrb	r2, [r3, #6]
 800832e:	4b1a      	ldr	r3, [pc, #104]	; (8008398 <CDC_Control_FS+0x158>)
 8008330:	719a      	strb	r2, [r3, #6]
		break;
 8008332:	e02a      	b.n	800838a <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8008334:	4b18      	ldr	r3, [pc, #96]	; (8008398 <CDC_Control_FS+0x158>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	b2da      	uxtb	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <CDC_Control_FS+0x158>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	0a1a      	lsrs	r2, r3, #8
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <CDC_Control_FS+0x158>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	0c1a      	lsrs	r2, r3, #16
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	3302      	adds	r3, #2
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <CDC_Control_FS+0x158>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	0e1a      	lsrs	r2, r3, #24
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	3303      	adds	r3, #3
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	3304      	adds	r3, #4
 800836c:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <CDC_Control_FS+0x158>)
 800836e:	7912      	ldrb	r2, [r2, #4]
 8008370:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	3305      	adds	r3, #5
 8008376:	4a08      	ldr	r2, [pc, #32]	; (8008398 <CDC_Control_FS+0x158>)
 8008378:	7952      	ldrb	r2, [r2, #5]
 800837a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	3306      	adds	r3, #6
 8008380:	4a05      	ldr	r2, [pc, #20]	; (8008398 <CDC_Control_FS+0x158>)
 8008382:	7992      	ldrb	r2, [r2, #6]
 8008384:	701a      	strb	r2, [r3, #0]
		break;
 8008386:	e000      	b.n	800838a <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008388:	bf00      	nop
	}

  return (USBD_OK);
 800838a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	20000120 	.word	0x20000120

0800839c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4808      	ldr	r0, [pc, #32]	; (80083cc <CDC_Receive_FS+0x30>)
 80083aa:	f7fe fcf6 	bl	8006d9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083ae:	4807      	ldr	r0, [pc, #28]	; (80083cc <CDC_Receive_FS+0x30>)
 80083b0:	f7fe fd3c 	bl	8006e2c <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7f8 faac 	bl	8000918 <CDC_ReceiveCallback>
  return (USBD_OK);
 80083c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000544 	.word	0x20000544

080083d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083e0:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <CDC_Transmit_FS+0x48>)
 80083e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e00b      	b.n	800840e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4806      	ldr	r0, [pc, #24]	; (8008418 <CDC_Transmit_FS+0x48>)
 80083fe:	f7fe fcae 	bl	8006d5e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008402:	4805      	ldr	r0, [pc, #20]	; (8008418 <CDC_Transmit_FS+0x48>)
 8008404:	f7fe fce2 	bl	8006dcc <USBD_CDC_TransmitPacket>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000544 	.word	0x20000544

0800841c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800842e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008432:	4618      	mov	r0, r3
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
	...

08008440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	6039      	str	r1, [r7, #0]
 800844a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2212      	movs	r2, #18
 8008450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008452:	4b03      	ldr	r3, [pc, #12]	; (8008460 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	2000015c 	.word	0x2000015c

08008464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	6039      	str	r1, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2204      	movs	r2, #4
 8008474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008476:	4b03      	ldr	r3, [pc, #12]	; (8008484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	2000017c 	.word	0x2000017c

08008488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <USBD_FS_ProductStrDescriptor+0x34>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80084a0:	f7ff fda1 	bl	8007fe6 <USBD_GetString>
 80084a4:	e004      	b.n	80084b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_ProductStrDescriptor+0x34>)
 80084aa:	4805      	ldr	r0, [pc, #20]	; (80084c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80084ac:	f7ff fd9b 	bl	8007fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20001814 	.word	0x20001814
 80084c0:	08008f24 	.word	0x08008f24

080084c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	4904      	ldr	r1, [pc, #16]	; (80084e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084d4:	4804      	ldr	r0, [pc, #16]	; (80084e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084d6:	f7ff fd86 	bl	8007fe6 <USBD_GetString>
  return USBD_StrDesc;
 80084da:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20001814 	.word	0x20001814
 80084e8:	08008f3c 	.word	0x08008f3c

080084ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	221a      	movs	r2, #26
 80084fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084fe:	f000 f855 	bl	80085ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000180 	.word	0x20000180

08008510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4907      	ldr	r1, [pc, #28]	; (8008544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008526:	4808      	ldr	r0, [pc, #32]	; (8008548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008528:	f7ff fd5d 	bl	8007fe6 <USBD_GetString>
 800852c:	e004      	b.n	8008538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4904      	ldr	r1, [pc, #16]	; (8008544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008532:	4805      	ldr	r0, [pc, #20]	; (8008548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008534:	f7ff fd57 	bl	8007fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008538:	4b02      	ldr	r3, [pc, #8]	; (8008544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20001814 	.word	0x20001814
 8008548:	08008f50 	.word	0x08008f50

0800854c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d105      	bne.n	800856a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	4907      	ldr	r1, [pc, #28]	; (8008580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008562:	4808      	ldr	r0, [pc, #32]	; (8008584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008564:	f7ff fd3f 	bl	8007fe6 <USBD_GetString>
 8008568:	e004      	b.n	8008574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4904      	ldr	r1, [pc, #16]	; (8008580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800856e:	4805      	ldr	r0, [pc, #20]	; (8008584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008570:	f7ff fd39 	bl	8007fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20001814 	.word	0x20001814
 8008584:	08008f5c 	.word	0x08008f5c

08008588 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	220c      	movs	r2, #12
 8008598:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800859a:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20000170 	.word	0x20000170

080085ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085b2:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <Get_SerialNum+0x44>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085b8:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <Get_SerialNum+0x48>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <Get_SerialNum+0x4c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d009      	beq.n	80085e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085d2:	2208      	movs	r2, #8
 80085d4:	4909      	ldr	r1, [pc, #36]	; (80085fc <Get_SerialNum+0x50>)
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f814 	bl	8008604 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085dc:	2204      	movs	r2, #4
 80085de:	4908      	ldr	r1, [pc, #32]	; (8008600 <Get_SerialNum+0x54>)
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f000 f80f 	bl	8008604 <IntToUnicode>
  }
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	1fff7590 	.word	0x1fff7590
 80085f4:	1fff7594 	.word	0x1fff7594
 80085f8:	1fff7598 	.word	0x1fff7598
 80085fc:	20000182 	.word	0x20000182
 8008600:	20000192 	.word	0x20000192

08008604 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4613      	mov	r3, r2
 8008610:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
 800861a:	e027      	b.n	800866c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	0f1b      	lsrs	r3, r3, #28
 8008620:	2b09      	cmp	r3, #9
 8008622:	d80b      	bhi.n	800863c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	0f1b      	lsrs	r3, r3, #28
 8008628:	b2da      	uxtb	r2, r3
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	4619      	mov	r1, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	440b      	add	r3, r1
 8008634:	3230      	adds	r2, #48	; 0x30
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e00a      	b.n	8008652 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	0f1b      	lsrs	r3, r3, #28
 8008640:	b2da      	uxtb	r2, r3
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	4619      	mov	r1, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	440b      	add	r3, r1
 800864c:	3237      	adds	r2, #55	; 0x37
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	3301      	adds	r3, #1
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	3301      	adds	r3, #1
 800866a:	75fb      	strb	r3, [r7, #23]
 800866c:	7dfa      	ldrb	r2, [r7, #23]
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d3d3      	bcc.n	800861c <IntToUnicode+0x18>
  }
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08a      	sub	sp, #40	; 0x28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868c:	f107 0314 	add.w	r3, r7, #20
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a4:	d14e      	bne.n	8008744 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a6:	4b29      	ldr	r3, [pc, #164]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086aa:	4a28      	ldr	r2, [pc, #160]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b2:	4b26      	ldr	r3, [pc, #152]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c4:	2302      	movs	r3, #2
 80086c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086cc:	2303      	movs	r3, #3
 80086ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086d0:	230a      	movs	r3, #10
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4619      	mov	r1, r3
 80086da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086de:	f7f8 fdab 	bl	8001238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086e2:	4b1a      	ldr	r3, [pc, #104]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e6:	4a19      	ldr	r2, [pc, #100]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086ee:	4b17      	ldr	r3, [pc, #92]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086fa:	4b14      	ldr	r3, [pc, #80]	; (800874c <HAL_PCD_MspInit+0xc8>)
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d114      	bne.n	8008730 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008706:	4b11      	ldr	r3, [pc, #68]	; (800874c <HAL_PCD_MspInit+0xc8>)
 8008708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870a:	4a10      	ldr	r2, [pc, #64]	; (800874c <HAL_PCD_MspInit+0xc8>)
 800870c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008710:	6593      	str	r3, [r2, #88]	; 0x58
 8008712:	4b0e      	ldr	r3, [pc, #56]	; (800874c <HAL_PCD_MspInit+0xc8>)
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871a:	60bb      	str	r3, [r7, #8]
 800871c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800871e:	f7fa f89b 	bl	8002858 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008722:	4b0a      	ldr	r3, [pc, #40]	; (800874c <HAL_PCD_MspInit+0xc8>)
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <HAL_PCD_MspInit+0xc8>)
 8008728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872c:	6593      	str	r3, [r2, #88]	; 0x58
 800872e:	e001      	b.n	8008734 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008730:	f7fa f892 	bl	8002858 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008734:	2200      	movs	r2, #0
 8008736:	2100      	movs	r1, #0
 8008738:	2043      	movs	r0, #67	; 0x43
 800873a:	f7f8 fd46 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800873e:	2043      	movs	r0, #67	; 0x43
 8008740:	f7f8 fd5f 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008744:	bf00      	nop
 8008746:	3728      	adds	r7, #40	; 0x28
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40021000 	.word	0x40021000

08008750 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fc2c 	bl	8006fc4 <USBD_LL_SetupStage>
}
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008786:	78fa      	ldrb	r2, [r7, #3]
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	4613      	mov	r3, r2
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	1a9b      	subs	r3, r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	4619      	mov	r1, r3
 800879e:	f7fe fc66 	bl	800706e <USBD_LL_DataOutStage>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	3348      	adds	r3, #72	; 0x48
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	4619      	mov	r1, r3
 80087d2:	f7fe fcaf 	bl	8007134 <USBD_LL_DataInStage>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fdc3 	bl	8007378 <USBD_LL_SOF>
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008802:	2301      	movs	r3, #1
 8008804:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d001      	beq.n	8008812 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800880e:	f7f8 f8bb 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008818:	7bfa      	ldrb	r2, [r7, #15]
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fd6d 	bl	80072fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe fd19 	bl	8007260 <USBD_LL_Reset>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008852:	f043 0301 	orr.w	r3, r3, #1
 8008856:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fd5c 	bl	800731c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800886c:	4b04      	ldr	r3, [pc, #16]	; (8008880 <HAL_PCD_SuspendCallback+0x48>)
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	4a03      	ldr	r2, [pc, #12]	; (8008880 <HAL_PCD_SuspendCallback+0x48>)
 8008872:	f043 0306 	orr.w	r3, r3, #6
 8008876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	e000ed00 	.word	0xe000ed00

08008884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800889e:	f023 0301 	bic.w	r3, r3, #1
 80088a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <HAL_PCD_ResumeCallback+0x4c>)
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	4a07      	ldr	r2, [pc, #28]	; (80088d0 <HAL_PCD_ResumeCallback+0x4c>)
 80088b2:	f023 0306 	bic.w	r3, r3, #6
 80088b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80088b8:	f000 faf6 	bl	8008ea8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fd40 	bl	8007348 <USBD_LL_Resume>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fd8c 	bl	8007408 <USBD_LL_IsoOUTIncomplete>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fd54 	bl	80073bc <USBD_LL_IsoINIncomplete>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fd92 	bl	8007454 <USBD_LL_DevConnected>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fd8f 	bl	800746a <USBD_LL_DevDisconnected>
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d13c      	bne.n	80089de <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008964:	4a20      	ldr	r2, [pc, #128]	; (80089e8 <USBD_LL_Init+0x94>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <USBD_LL_Init+0x94>)
 8008970:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008974:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <USBD_LL_Init+0x94>)
 8008976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800897a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800897c:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <USBD_LL_Init+0x94>)
 800897e:	2206      	movs	r2, #6
 8008980:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <USBD_LL_Init+0x94>)
 8008984:	2202      	movs	r2, #2
 8008986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008988:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <USBD_LL_Init+0x94>)
 800898a:	2202      	movs	r2, #2
 800898c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <USBD_LL_Init+0x94>)
 8008990:	2200      	movs	r2, #0
 8008992:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <USBD_LL_Init+0x94>)
 8008996:	2200      	movs	r2, #0
 8008998:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <USBD_LL_Init+0x94>)
 800899c:	2200      	movs	r2, #0
 800899e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <USBD_LL_Init+0x94>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <USBD_LL_Init+0x94>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <USBD_LL_Init+0x94>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089b2:	480d      	ldr	r0, [pc, #52]	; (80089e8 <USBD_LL_Init+0x94>)
 80089b4:	f7f8 fe4c 	bl	8001650 <HAL_PCD_Init>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089be:	f7f7 ffe3 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	4808      	ldr	r0, [pc, #32]	; (80089e8 <USBD_LL_Init+0x94>)
 80089c6:	f7f9 feae 	bl	8002726 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089ca:	2240      	movs	r2, #64	; 0x40
 80089cc:	2100      	movs	r1, #0
 80089ce:	4806      	ldr	r0, [pc, #24]	; (80089e8 <USBD_LL_Init+0x94>)
 80089d0:	f7f9 fe62 	bl	8002698 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089d4:	2280      	movs	r2, #128	; 0x80
 80089d6:	2101      	movs	r1, #1
 80089d8:	4803      	ldr	r0, [pc, #12]	; (80089e8 <USBD_LL_Init+0x94>)
 80089da:	f7f9 fe5d 	bl	8002698 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20001a14 	.word	0x20001a14

080089ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f8 ff48 	bl	8001898 <HAL_PCD_Start>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d816      	bhi.n	8008a40 <USBD_LL_Start+0x54>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <USBD_LL_Start+0x2c>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a2f 	.word	0x08008a2f
 8008a20:	08008a35 	.word	0x08008a35
 8008a24:	08008a3b 	.word	0x08008a3b
    case HAL_OK :
      usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e00b      	b.n	8008a46 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e008      	b.n	8008a46 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	e005      	b.n	8008a46 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3e:	e002      	b.n	8008a46 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	73fb      	strb	r3, [r7, #15]
    break;
 8008a44:	bf00      	nop
  }
  return usb_status;
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	70fb      	strb	r3, [r7, #3]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70bb      	strb	r3, [r7, #2]
 8008a66:	4613      	mov	r3, r2
 8008a68:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a78:	78bb      	ldrb	r3, [r7, #2]
 8008a7a:	883a      	ldrh	r2, [r7, #0]
 8008a7c:	78f9      	ldrb	r1, [r7, #3]
 8008a7e:	f7f9 fb03 	bl	8002088 <HAL_PCD_EP_Open>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d817      	bhi.n	8008abc <USBD_LL_OpenEP+0x6c>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <USBD_LL_OpenEP+0x44>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aab 	.word	0x08008aab
 8008a9c:	08008ab1 	.word	0x08008ab1
 8008aa0:	08008ab7 	.word	0x08008ab7
    case HAL_OK :
      usb_status = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008aa8:	e00b      	b.n	8008ac2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	73fb      	strb	r3, [r7, #15]
    break;
 8008aae:	e008      	b.n	8008ac2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab4:	e005      	b.n	8008ac2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aba:	e002      	b.n	8008ac2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac0:	bf00      	nop
  }
  return usb_status;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f9 fb34 	bl	8002158 <HAL_PCD_EP_Close>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d816      	bhi.n	8008b28 <USBD_LL_CloseEP+0x5c>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBD_LL_CloseEP+0x34>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b17 	.word	0x08008b17
 8008b08:	08008b1d 	.word	0x08008b1d
 8008b0c:	08008b23 	.word	0x08008b23
    case HAL_OK :
      usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e00b      	b.n	8008b2e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1a:	e008      	b.n	8008b2e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	e005      	b.n	8008b2e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b22:	2303      	movs	r3, #3
 8008b24:	73fb      	strb	r3, [r7, #15]
    break;
 8008b26:	e002      	b.n	8008b2e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2c:	bf00      	nop
  }
  return usb_status;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 fbdb 	bl	8002312 <HAL_PCD_EP_SetStall>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d816      	bhi.n	8008b94 <USBD_LL_StallEP+0x5c>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_LL_StallEP+0x34>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b83 	.word	0x08008b83
 8008b74:	08008b89 	.word	0x08008b89
 8008b78:	08008b8f 	.word	0x08008b8f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e00b      	b.n	8008b9a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	e008      	b.n	8008b9a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e005      	b.n	8008b9a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e002      	b.n	8008b9a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008b94:	2303      	movs	r3, #3
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	bf00      	nop
  }
  return usb_status;
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 fc07 	bl	80023d6 <HAL_PCD_EP_ClrStall>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d816      	bhi.n	8008c00 <USBD_LL_ClearStallEP+0x5c>
 8008bd2:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <USBD_LL_ClearStallEP+0x34>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008be9 	.word	0x08008be9
 8008bdc:	08008bef 	.word	0x08008bef
 8008be0:	08008bf5 	.word	0x08008bf5
 8008be4:	08008bfb 	.word	0x08008bfb
    case HAL_OK :
      usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
    break;
 8008bec:	e00b      	b.n	8008c06 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf2:	e008      	b.n	8008c06 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	e005      	b.n	8008c06 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfe:	e002      	b.n	8008c06 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	73fb      	strb	r3, [r7, #15]
    break;
 8008c04:	bf00      	nop
  }
  return usb_status;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	da0b      	bge.n	8008c44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	4613      	mov	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	333e      	adds	r3, #62	; 0x3e
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	e00b      	b.n	8008c5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c4a:	68f9      	ldr	r1, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	00db      	lsls	r3, r3, #3
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f9 f9d9 	bl	800203e <HAL_PCD_SetAddress>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d816      	bhi.n	8008cc4 <USBD_LL_SetUSBAddress+0x5c>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBD_LL_SetUSBAddress+0x34>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cad 	.word	0x08008cad
 8008ca0:	08008cb3 	.word	0x08008cb3
 8008ca4:	08008cb9 	.word	0x08008cb9
 8008ca8:	08008cbf 	.word	0x08008cbf
    case HAL_OK :
      usb_status = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e00b      	b.n	8008cca <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb6:	e008      	b.n	8008cca <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	e005      	b.n	8008cca <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc2:	e002      	b.n	8008cca <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	bf00      	nop
  }
  return usb_status;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008cf2:	7af9      	ldrb	r1, [r7, #11]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	f7f9 face 	bl	8002298 <HAL_PCD_EP_Transmit>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d00:	7dbb      	ldrb	r3, [r7, #22]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d816      	bhi.n	8008d34 <USBD_LL_Transmit+0x60>
 8008d06:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <USBD_LL_Transmit+0x38>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d1d 	.word	0x08008d1d
 8008d10:	08008d23 	.word	0x08008d23
 8008d14:	08008d29 	.word	0x08008d29
 8008d18:	08008d2f 	.word	0x08008d2f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d20:	e00b      	b.n	8008d3a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d22:	2303      	movs	r3, #3
 8008d24:	75fb      	strb	r3, [r7, #23]
    break;
 8008d26:	e008      	b.n	8008d3a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d2c:	e005      	b.n	8008d3a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	75fb      	strb	r3, [r7, #23]
    break;
 8008d32:	e002      	b.n	8008d3a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	75fb      	strb	r3, [r7, #23]
    break;
 8008d38:	bf00      	nop
  }
  return usb_status;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	460b      	mov	r3, r1
 8008d52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d62:	7af9      	ldrb	r1, [r7, #11]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	f7f9 fa40 	bl	80021ec <HAL_PCD_EP_Receive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008d70:	7dbb      	ldrb	r3, [r7, #22]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d816      	bhi.n	8008da4 <USBD_LL_PrepareReceive+0x60>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <USBD_LL_PrepareReceive+0x38>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008d93 	.word	0x08008d93
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008d9f 	.word	0x08008d9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]
    break;
 8008d90:	e00b      	b.n	8008daa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d92:	2303      	movs	r3, #3
 8008d94:	75fb      	strb	r3, [r7, #23]
    break;
 8008d96:	e008      	b.n	8008daa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d9c:	e005      	b.n	8008daa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	75fb      	strb	r3, [r7, #23]
    break;
 8008da2:	e002      	b.n	8008daa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	75fb      	strb	r3, [r7, #23]
    break;
 8008da8:	bf00      	nop
  }
  return usb_status;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7f9 fa4c 	bl	8002268 <HAL_PCD_EP_GetRxCount>
 8008dd0:	4603      	mov	r3, r0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_PCDEx_LPM_Callback+0x18>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d01f      	beq.n	8008e32 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008df2:	e03b      	b.n	8008e6c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008dfc:	f000 f854 	bl	8008ea8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e00:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e06:	f023 0306 	bic.w	r3, r3, #6
 8008e0a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fa8c 	bl	8007348 <USBD_LL_Resume>
    break;
 8008e30:	e01c      	b.n	8008e6c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6812      	ldr	r2, [r2, #0]
 8008e40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fa63 	bl	800731c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	4a04      	ldr	r2, [pc, #16]	; (8008e74 <HAL_PCDEx_LPM_Callback+0x98>)
 8008e64:	f043 0306 	orr.w	r3, r3, #6
 8008e68:	6113      	str	r3, [r2, #16]
    break;
 8008e6a:	bf00      	nop
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <USBD_static_malloc+0x18>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200001d0 	.word	0x200001d0

08008e94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]

}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008eac:	f7f7 fa62 	bl	8000374 <SystemClock_Config>
}
 8008eb0:	bf00      	nop
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <__libc_init_array>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	4d0d      	ldr	r5, [pc, #52]	; (8008eec <__libc_init_array+0x38>)
 8008eb8:	4c0d      	ldr	r4, [pc, #52]	; (8008ef0 <__libc_init_array+0x3c>)
 8008eba:	1b64      	subs	r4, r4, r5
 8008ebc:	10a4      	asrs	r4, r4, #2
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	42a6      	cmp	r6, r4
 8008ec2:	d109      	bne.n	8008ed8 <__libc_init_array+0x24>
 8008ec4:	4d0b      	ldr	r5, [pc, #44]	; (8008ef4 <__libc_init_array+0x40>)
 8008ec6:	4c0c      	ldr	r4, [pc, #48]	; (8008ef8 <__libc_init_array+0x44>)
 8008ec8:	f000 f820 	bl	8008f0c <_init>
 8008ecc:	1b64      	subs	r4, r4, r5
 8008ece:	10a4      	asrs	r4, r4, #2
 8008ed0:	2600      	movs	r6, #0
 8008ed2:	42a6      	cmp	r6, r4
 8008ed4:	d105      	bne.n	8008ee2 <__libc_init_array+0x2e>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008edc:	4798      	blx	r3
 8008ede:	3601      	adds	r6, #1
 8008ee0:	e7ee      	b.n	8008ec0 <__libc_init_array+0xc>
 8008ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee6:	4798      	blx	r3
 8008ee8:	3601      	adds	r6, #1
 8008eea:	e7f2      	b.n	8008ed2 <__libc_init_array+0x1e>
 8008eec:	08008fac 	.word	0x08008fac
 8008ef0:	08008fac 	.word	0x08008fac
 8008ef4:	08008fac 	.word	0x08008fac
 8008ef8:	08008fb0 	.word	0x08008fb0

08008efc <memset>:
 8008efc:	4402      	add	r2, r0
 8008efe:	4603      	mov	r3, r0
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d100      	bne.n	8008f06 <memset+0xa>
 8008f04:	4770      	bx	lr
 8008f06:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0a:	e7f9      	b.n	8008f00 <memset+0x4>

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr
