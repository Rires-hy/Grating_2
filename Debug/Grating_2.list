
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003638  200001a0  0800b7cc  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037d8  0800b7cc  000237d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a80b  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005121  00000000  00000000  0004a9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0004fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  000516d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e19  00000000  00000000  000530a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9f7  00000000  00000000  00059ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd644  00000000  00000000  000798b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176efc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  00176f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4dc 	.word	0x0800b4dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800b4dc 	.word	0x0800b4dc

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 f8fd 	bl	80013d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f866 	bl	80002a8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa98 	bl	8000710 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8ea 	bl	80003b8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80001e4:	f000 f9e4 	bl	80005b0 <MX_TIM5_Init>
  MX_TIM2_Init();
 80001e8:	f000 f938 	bl	800045c <MX_TIM2_Init>
  MX_TIM8_Init();
 80001ec:	f000 fa36 	bl	800065c <MX_TIM8_Init>
  MX_TIM3_Init();
 80001f0:	f000 f988 	bl	8000504 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80001f4:	213c      	movs	r1, #60	; 0x3c
 80001f6:	481c      	ldr	r0, [pc, #112]	; (8000268 <main+0x98>)
 80001f8:	f004 f9c0 	bl	800457c <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2104      	movs	r1, #4
 8000200:	481a      	ldr	r0, [pc, #104]	; (800026c <main+0x9c>)
 8000202:	f001 fc53 	bl	8001aac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <main+0xa0>)
 800020e:	f001 fc4d 	bl	8001aac <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000212:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0xa4>)
 8000214:	f004 f89c 	bl	8004350 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	4817      	ldr	r0, [pc, #92]	; (8000278 <main+0xa8>)
 800021a:	f004 f899 	bl	8004350 <HAL_TIM_Base_Start_IT>

  TIM5->CNT=750000;
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <main+0xac>)
 8000220:	4a17      	ldr	r2, [pc, #92]	; (8000280 <main+0xb0>)
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT=750000;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	4a15      	ldr	r2, [pc, #84]	; (8000280 <main+0xb0>)
 800022a:	625a      	str	r2, [r3, #36]	; 0x24


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800022c:	f007 fd44 	bl	8007cb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <main+0xb4>)
 8000232:	2100      	movs	r1, #0
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0xb8>)
 8000236:	f007 fd89 	bl	8007d4c <osThreadNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a13      	ldr	r2, [pc, #76]	; (800028c <main+0xbc>)
 800023e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0xc0>)
 8000242:	2100      	movs	r1, #0
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <main+0xc4>)
 8000246:	f007 fd81 	bl	8007d4c <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0xc8>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xcc>)
 8000252:	2100      	movs	r1, #0
 8000254:	4812      	ldr	r0, [pc, #72]	; (80002a0 <main+0xd0>)
 8000256:	f007 fd79 	bl	8007d4c <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <main+0xd4>)
 800025e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f007 fd4e 	bl	8007d00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x94>
 8000266:	bf00      	nop
 8000268:	20001d4c 	.word	0x20001d4c
 800026c:	48000400 	.word	0x48000400
 8000270:	48001000 	.word	0x48001000
 8000274:	20001e00 	.word	0x20001e00
 8000278:	20001e5c 	.word	0x20001e5c
 800027c:	40000c00 	.word	0x40000c00
 8000280:	000b71b0 	.word	0x000b71b0
 8000284:	0800b578 	.word	0x0800b578
 8000288:	080009bd 	.word	0x080009bd
 800028c:	20001cf0 	.word	0x20001cf0
 8000290:	0800b59c 	.word	0x0800b59c
 8000294:	08000b41 	.word	0x08000b41
 8000298:	20001df4 	.word	0x20001df4
 800029c:	0800b5c0 	.word	0x0800b5c0
 80002a0:	08000e19 	.word	0x08000e19
 80002a4:	20001e54 	.word	0x20001e54

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0b8      	sub	sp, #224	; 0xe0
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f00b f908 	bl	800b4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2288      	movs	r2, #136	; 0x88
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f00b f8fa 	bl	800b4cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d8:	2310      	movs	r3, #16
 80002da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ea:	2360      	movs	r3, #96	; 0x60
 80002ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000302:	2308      	movs	r3, #8
 8000304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000308:	2307      	movs	r3, #7
 800030a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800031e:	4618      	mov	r0, r3
 8000320:	f002 fd42 	bl	8002da8 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800032a:	f000 fd7d 	bl	8000e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 f90e 	bl	8003574 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800035e:	f000 fd63 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000376:	2308      	movs	r3, #8
 8000378:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800037a:	2307      	movs	r3, #7
 800037c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800038a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038c:	463b      	mov	r3, r7
 800038e:	4618      	mov	r0, r3
 8000390:	f003 faca 	bl	8003928 <HAL_RCCEx_PeriphCLKConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800039a:	f000 fd45 	bl	8000e28 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f002 fc9b 	bl	8002cdc <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80003ac:	f000 fd3c 	bl	8000e28 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	37e0      	adds	r7, #224	; 0xe0
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <MX_TIM1_Init+0xa0>)
 80003da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003de:	224f      	movs	r2, #79	; 0x4f
 80003e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003ea:	2231      	movs	r2, #49	; 0x31
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000400:	4814      	ldr	r0, [pc, #80]	; (8000454 <MX_TIM1_Init+0x9c>)
 8000402:	f003 ff4d 	bl	80042a0 <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800040c:	f000 fd0c 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM1_Init+0x9c>)
 800041e:	f004 fa5a 	bl	80048d6 <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000428:	f000 fcfe 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_TIM1_Init+0x9c>)
 800043e:	f004 fc93 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000448:	f000 fcee 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20001e00 	.word	0x20001e00
 8000458:	40012c00 	.word	0x40012c00

0800045c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2224      	movs	r2, #36	; 0x24
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f00b f82e 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_TIM2_Init+0xa4>)
 800047c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_TIM2_Init+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33888;
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000490:	f248 4260 	movw	r2, #33888	; 0x8460
 8000494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_TIM2_Init+0xa4>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004a2:	2303      	movs	r3, #3
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004a6:	2300      	movs	r3, #0
 80004a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004b6:	2300      	movs	r3, #0
 80004b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004ba:	2301      	movs	r3, #1
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	4619      	mov	r1, r3
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <MX_TIM2_Init+0xa4>)
 80004ce:	f003 ffaf 	bl	8004430 <HAL_TIM_Encoder_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80004d8:	f000 fca6 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_TIM2_Init+0xa4>)
 80004ea:	f004 fc3d 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80004f4:	f000 fc98 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3730      	adds	r7, #48	; 0x30
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20001e5c 	.word	0x20001e5c

08000504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2224      	movs	r2, #36	; 0x24
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f00a ffda 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <MX_TIM3_Init+0xa8>)
 8000526:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_TIM3_Init+0xa4>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM3_Init+0xa4>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000548:	2301      	movs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000560:	2301      	movs	r3, #1
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000574:	f003 ff5c 	bl	8004430 <HAL_TIM_Encoder_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800057e:	f000 fc53 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000590:	f004 fbea 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800059a:	f000 fc45 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001d98 	.word	0x20001d98
 80005ac:	40000400 	.word	0x40000400

080005b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2224      	movs	r2, #36	; 0x24
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00a ff84 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <MX_TIM5_Init+0xa8>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005e2:	f248 4260 	movw	r2, #33888	; 0x8460
 80005e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005f4:	2303      	movs	r3, #3
 80005f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800060c:	2301      	movs	r3, #1
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_TIM5_Init+0xa4>)
 8000620:	f003 ff06 	bl	8004430 <HAL_TIM_Encoder_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800062a:	f000 fbfd 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_TIM5_Init+0xa4>)
 800063c:	f004 fb94 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000646:	f000 fbef 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3730      	adds	r7, #48	; 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20001d4c 	.word	0x20001d4c
 8000658:	40000c00 	.word	0x40000c00

0800065c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2224      	movs	r2, #36	; 0x24
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00a ff2e 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_TIM8_Init+0xac>)
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <MX_TIM8_Init+0xb0>)
 800067e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_TIM8_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_TIM8_Init+0xac>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_TIM8_Init+0xac>)
 800068e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000692:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_TIM8_Init+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM8_Init+0xac>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM8_Init+0xac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006be:	2301      	movs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_TIM8_Init+0xac>)
 80006d2:	f003 fead 	bl	8004430 <HAL_TIM_Encoder_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80006dc:	f000 fba4 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM8_Init+0xac>)
 80006f2:	f004 fb39 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80006fc:	f000 fb94 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20001cf8 	.word	0x20001cf8
 800070c:	40013400 	.word	0x40013400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b76      	ldr	r3, [pc, #472]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a75      	ldr	r2, [pc, #468]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b73      	ldr	r3, [pc, #460]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b70      	ldr	r3, [pc, #448]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a6f      	ldr	r2, [pc, #444]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b6d      	ldr	r3, [pc, #436]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a69      	ldr	r2, [pc, #420]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b67      	ldr	r3, [pc, #412]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b64      	ldr	r3, [pc, #400]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a63      	ldr	r2, [pc, #396]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b61      	ldr	r3, [pc, #388]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b5e      	ldr	r3, [pc, #376]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a5d      	ldr	r2, [pc, #372]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b5b      	ldr	r3, [pc, #364]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b58      	ldr	r3, [pc, #352]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a57      	ldr	r2, [pc, #348]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XCLK_GPIO_Port, XCLK_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2104      	movs	r1, #4
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f001 f975 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	484f      	ldr	r0, [pc, #316]	; (8000904 <MX_GPIO_Init+0x1f4>)
 80007c8:	f001 f970 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	484d      	ldr	r0, [pc, #308]	; (8000908 <MX_GPIO_Init+0x1f8>)
 80007d4:	f001 f96a 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	484b      	ldr	r0, [pc, #300]	; (800090c <MX_GPIO_Init+0x1fc>)
 80007de:	f001 f965 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 80007e2:	2304      	movs	r3, #4
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 ff94 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000800:	2308      	movs	r3, #8
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 ff87 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : XDIR_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin;
 800081a:	2304      	movs	r3, #4
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XDIR_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4834      	ldr	r0, [pc, #208]	; (8000904 <MX_GPIO_Init+0x1f4>)
 8000832:	f000 ff79 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <MX_GPIO_Init+0x1f8>)
 8000850:	f000 ff6a 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin Z_E11_Pin Y__Pin Y_E13_Pin */
  GPIO_InitStruct.Pin = Z__Pin|Z_E11_Pin|Y__Pin|Y_E13_Pin;
 8000854:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0x200>)
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4827      	ldr	r0, [pc, #156]	; (8000908 <MX_GPIO_Init+0x1f8>)
 800086a:	f000 ff5d 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : X__Pin */
  GPIO_InitStruct.Pin = X__Pin;
 800086e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0x204>)
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X__GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x1f8>)
 8000884:	f000 ff50 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_E15_Pin */
  GPIO_InitStruct.Pin = X_E15_Pin;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_E15_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	481a      	ldr	r0, [pc, #104]	; (8000908 <MX_GPIO_Init+0x1f8>)
 800089e:	f000 ff43 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_GPIO_Init+0x1fc>)
 80008ba:	f000 ff35 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <MX_GPIO_Init+0x1f4>)
 80008da:	f000 ff25 	bl	8001728 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80008de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008e2:	f001 f92d 	bl	8001b40 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f000 fee5 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 fefe 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400
 8000908:	48001000 	.word	0x48001000
 800090c:	48000c00 	.word	0x48000c00
 8000910:	10310000 	.word	0x10310000
 8000914:	10110000 	.word	0x10110000

08000918 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d115      	bne.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 8000936:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800093a:	461a      	mov	r2, r3
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800093e:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4413      	add	r3, r2
 8000952:	461a      	mov	r2, r3
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000956:	601a      	str	r2, [r3, #0]
	}

}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20001e5c 	.word	0x20001e5c
 8000968:	20001d4c 	.word	0x20001d4c
 800096c:	20001d44 	.word	0x20001d44
 8000970:	200001bc 	.word	0x200001bc
 8000974:	20001df8 	.word	0x20001df8

08000978 <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	  for (int i=0;i<=31;i++)
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e00c      	b.n	80009a2 <CDC_ReceiveCallback+0x2a>
	  {
		 rxbuf[i]=buf[i];
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b259      	sxtb	r1, r3
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <CDC_ReceiveCallback+0x40>)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	460a      	mov	r2, r1
 800099a:	701a      	strb	r2, [r3, #0]
	  for (int i=0;i<=31;i++)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b1f      	cmp	r3, #31
 80009a6:	ddef      	ble.n	8000988 <CDC_ReceiveCallback+0x10>
	  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20001cd0 	.word	0x20001cd0

080009bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009c4:	f009 feca 	bl	800a75c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	484e      	ldr	r0, [pc, #312]	; (8000b08 <StartDefaultTask+0x14c>)
 80009ce:	f001 f855 	bl	8001a7c <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d103      	bne.n	80009e0 <StartDefaultTask+0x24>
		  	  Xpos=0;
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <StartDefaultTask+0x150>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e002      	b.n	80009e6 <StartDefaultTask+0x2a>
	 	  }
	 	  else {
	 		  Xpos=1;
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <StartDefaultTask+0x150>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_RESET){
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4847      	ldr	r0, [pc, #284]	; (8000b08 <StartDefaultTask+0x14c>)
 80009ec:	f001 f846 	bl	8001a7c <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <StartDefaultTask+0x42>
	 		  Xneg=0;
 80009f6:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <StartDefaultTask+0x154>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e002      	b.n	8000a04 <StartDefaultTask+0x48>
	 	  }
	 	  else  {
	 		  Xneg=1;
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <StartDefaultTask+0x154>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
	 	  }
		  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	483f      	ldr	r0, [pc, #252]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a0a:	f001 f837 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d103      	bne.n	8000a1c <StartDefaultTask+0x60>
			  Ypos=0;
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <StartDefaultTask+0x158>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e002      	b.n	8000a22 <StartDefaultTask+0x66>
		 	  }
		 	  else {
		 	 Ypos=1;
 8000a1c:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <StartDefaultTask+0x158>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
		 	  }
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a28:	f001 f828 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d103      	bne.n	8000a3a <StartDefaultTask+0x7e>
		 	 Yneg=0;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <StartDefaultTask+0x15c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e002      	b.n	8000a40 <StartDefaultTask+0x84>
		 	  }
		 	  else  {
		 	 Yneg=1;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <StartDefaultTask+0x15c>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
		 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	4830      	ldr	r0, [pc, #192]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a46:	f001 f819 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <StartDefaultTask+0x9c>
		  	 Zpos=0;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <StartDefaultTask+0x160>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e002      	b.n	8000a5e <StartDefaultTask+0xa2>
	 	  }
	 	  else {
	 		 Zpos=1;
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <StartDefaultTask+0x160>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4829      	ldr	r0, [pc, #164]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a64:	f001 f80a 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <StartDefaultTask+0xba>
		  	  Zneg=0;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <StartDefaultTask+0x164>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e002      	b.n	8000a7c <StartDefaultTask+0xc0>
	 	  }
	 	  else  {
	 		 Zneg=1;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <StartDefaultTask+0x164>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
	 	  }


	 	  if(highMode>1) {
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <StartDefaultTask+0x168>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	dd0f      	ble.n	8000aa4 <StartDefaultTask+0xe8>
		 	    xSpeed = 250U;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <StartDefaultTask+0x16c>)
 8000a86:	22fa      	movs	r2, #250	; 0xfa
 8000a88:	701a      	strb	r2, [r3, #0]
		       ySpeed = 250U;
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <StartDefaultTask+0x170>)
 8000a8c:	22fa      	movs	r2, #250	; 0xfa
 8000a8e:	701a      	strb	r2, [r3, #0]
		       xSen = 2U;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <StartDefaultTask+0x174>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
		       ySen = 2U;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <StartDefaultTask+0x178>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	701a      	strb	r2, [r3, #0]
		       highMode = 1;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <StartDefaultTask+0x168>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e012      	b.n	8000aca <StartDefaultTask+0x10e>
	 	  }else if (highMode < 1) {
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <StartDefaultTask+0x168>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dc0e      	bgt.n	8000aca <StartDefaultTask+0x10e>


	 	    xSpeed = 50U;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <StartDefaultTask+0x16c>)
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	701a      	strb	r2, [r3, #0]
	 	    ySpeed = 50U;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <StartDefaultTask+0x170>)
 8000ab4:	2232      	movs	r2, #50	; 0x32
 8000ab6:	701a      	strb	r2, [r3, #0]
	 	    xSen = 10U;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <StartDefaultTask+0x174>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	701a      	strb	r2, [r3, #0]
	 	    ySen = 10U;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <StartDefaultTask+0x178>)
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	701a      	strb	r2, [r3, #0]
	 	    highMode = 1;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <StartDefaultTask+0x168>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000aca:	2108      	movs	r1, #8
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f000 ffd4 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <StartDefaultTask+0x128>
	 	      {
	 	  	    xPul = -(xSen);
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <StartDefaultTask+0x174>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	425b      	negs	r3, r3
 8000ae0:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <StartDefaultTask+0x17c>)
 8000ae2:	6013      	str	r3, [r2, #0]
	 	      }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	      {
//	 	        xPul = (xSen);
//	 	      }
	 	  if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f000 ffc7 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d104      	bne.n	8000afe <StartDefaultTask+0x142>
	 	  {
	 		  yPul = ySen;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <StartDefaultTask+0x178>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <StartDefaultTask+0x180>)
 8000afc:	601a      	str	r2, [r3, #0]
	 	  }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	  {
//	 		  yPul = -ySen;
//	 	  }
    osDelay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f007 f9b6 	bl	8007e70 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000b04:	e760      	b.n	80009c8 <StartDefaultTask+0xc>
 8000b06:	bf00      	nop
 8000b08:	48001000 	.word	0x48001000
 8000b0c:	20001e4c 	.word	0x20001e4c
 8000b10:	20001de8 	.word	0x20001de8
 8000b14:	20001d48 	.word	0x20001d48
 8000b18:	20001df0 	.word	0x20001df0
 8000b1c:	20001ea8 	.word	0x20001ea8
 8000b20:	20001cf4 	.word	0x20001cf4
 8000b24:	200001c0 	.word	0x200001c0
 8000b28:	20001eb0 	.word	0x20001eb0
 8000b2c:	20001eb8 	.word	0x20001eb8
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000001 	.word	0x20000001
 8000b38:	20001eac 	.word	0x20001eac
 8000b3c:	20001eb4 	.word	0x20001eb4

08000b40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int rec_state=0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
//	  }

  /* Infinite loop */
  for(;;)
  {
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8000b4c:	4b9b      	ldr	r3, [pc, #620]	; (8000dbc <StartTask02+0x27c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b9a      	ldr	r3, [pc, #616]	; (8000dc0 <StartTask02+0x280>)
 8000b56:	601a      	str	r2, [r3, #0]
	  tim5Cnt=__HAL_TIM_GET_COUNTER(&htim5);
 8000b58:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <StartTask02+0x284>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b99      	ldr	r3, [pc, #612]	; (8000dc8 <StartTask02+0x288>)
 8000b62:	601a      	str	r2, [r3, #0]
	  size_t i = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
	  read=0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
	  control=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]

	  while (i < 32)
 8000b70:	e11c      	b.n	8000dac <StartTask02+0x26c>
	  {
		  uint8_t ch = rxbuf[i];
 8000b72:	4a96      	ldr	r2, [pc, #600]	; (8000dcc <StartTask02+0x28c>)
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	4413      	add	r3, r2
 8000b78:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	f200 8110 	bhi.w	8000da6 <StartTask02+0x266>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <StartTask02+0x4c>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000ba1 	.word	0x08000ba1
 8000b90:	08000baf 	.word	0x08000baf
 8000b94:	08000bd5 	.word	0x08000bd5
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000d79 	.word	0x08000d79
		  switch (rec_state)
		  {
		  case START:
			  if (ch==0x22)
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	2b22      	cmp	r3, #34	; 0x22
 8000ba4:	f040 80fe 	bne.w	8000da4 <StartTask02+0x264>
			  {
				  rec_state=CMD;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  break;
 8000bac:	e0fa      	b.n	8000da4 <StartTask02+0x264>
		  case CMD:
			  if (ch==0x30)
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	2b30      	cmp	r3, #48	; 0x30
 8000bb2:	d104      	bne.n	8000bbe <StartTask02+0x7e>
			  {
				  rec_state=ADDRESS;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
				  read=1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000bbc:	e0f3      	b.n	8000da6 <StartTask02+0x266>
			  else if (ch==0x66)
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b66      	cmp	r3, #102	; 0x66
 8000bc2:	d104      	bne.n	8000bce <StartTask02+0x8e>
				  rec_state=ADDRESS;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
				  control=1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
			  break;
 8000bcc:	e0eb      	b.n	8000da6 <StartTask02+0x266>
				  rec_state=START;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000bd2:	e0e8      	b.n	8000da6 <StartTask02+0x266>
		  case ADDRESS:
			  if(ch==0x00)
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <StartTask02+0xa6>
			  {
				  rec_state=DATA;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_1=1;
 8000bde:	4b7c      	ldr	r3, [pc, #496]	; (8000dd0 <StartTask02+0x290>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000be4:	e0df      	b.n	8000da6 <StartTask02+0x266>
			  else if (ch==0x01)
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d105      	bne.n	8000bf8 <StartTask02+0xb8>
				  rec_state=DATA;
 8000bec:	2303      	movs	r3, #3
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_2=1;
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <StartTask02+0x294>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
			  break;
 8000bf6:	e0d6      	b.n	8000da6 <StartTask02+0x266>
			  else if (ch==0x02)
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d105      	bne.n	8000c0a <StartTask02+0xca>
				  rec_state=DATA;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
				  PGsend=1;
 8000c02:	4b75      	ldr	r3, [pc, #468]	; (8000dd8 <StartTask02+0x298>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
			  break;
 8000c08:	e0cd      	b.n	8000da6 <StartTask02+0x266>
			  else if (ch==0x03)
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d105      	bne.n	8000c1c <StartTask02+0xdc>
				  rec_state=DATA;
 8000c10:	2303      	movs	r3, #3
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
				  spin=1;
 8000c14:	4b71      	ldr	r3, [pc, #452]	; (8000ddc <StartTask02+0x29c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
			  break;
 8000c1a:	e0c4      	b.n	8000da6 <StartTask02+0x266>
			  else if (ch==0x04)
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d105      	bne.n	8000c2e <StartTask02+0xee>
				  rec_state=DATA;
 8000c22:	2303      	movs	r3, #3
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
				  solder_push=1;
 8000c26:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <StartTask02+0x2a0>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
			  break;
 8000c2c:	e0bb      	b.n	8000da6 <StartTask02+0x266>
				  rec_state=START;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000c32:	e0b8      	b.n	8000da6 <StartTask02+0x266>

		  case DATA:
			  if(grating_scale_1==1)
 8000c34:	4b66      	ldr	r3, [pc, #408]	; (8000dd0 <StartTask02+0x290>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d114      	bne.n	8000c66 <StartTask02+0x126>
			  {
				  opbuff[0]=0x22;
 8000c3c:	2322      	movs	r3, #34	; 0x22
 8000c3e:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000c40:	2330      	movs	r3, #48	; 0x30
 8000c42:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x00;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM5->CNT;
 8000c48:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <StartTask02+0x2a4>)
 8000c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	3303      	adds	r3, #3
 8000c52:	601a      	str	r2, [r3, #0]
//				  opbuff[6]=0xFF;
				  opbuff[7]=0xFF;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 fe90 	bl	800a984 <CDC_Transmit_FS>
 8000c64:	e085      	b.n	8000d72 <StartTask02+0x232>
			  }
			  else if(grating_scale_2==1)
 8000c66:	4b5b      	ldr	r3, [pc, #364]	; (8000dd4 <StartTask02+0x294>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d115      	bne.n	8000c9a <StartTask02+0x15a>
			  {
				  opbuff[0]=0x22;
 8000c6e:	2322      	movs	r3, #34	; 0x22
 8000c70:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000c72:	2330      	movs	r3, #48	; 0x30
 8000c74:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x01;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM2->CNT;
 8000c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	3303      	adds	r3, #3
 8000c86:	601a      	str	r2, [r3, #0]
//				  opbuff[6]=0xFF;
				  opbuff[7]=0xFF;
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2108      	movs	r1, #8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f009 fe76 	bl	800a984 <CDC_Transmit_FS>
 8000c98:	e06b      	b.n	8000d72 <StartTask02+0x232>
			  }
			  else if(PGsend==1)
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <StartTask02+0x298>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d136      	bne.n	8000d10 <StartTask02+0x1d0>
			  {
				  opbuff[0]=0x22;
 8000ca2:	2322      	movs	r3, #34	; 0x22
 8000ca4:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000ca6:	2330      	movs	r3, #48	; 0x30
 8000ca8:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x02;
 8000caa:	2302      	movs	r3, #2
 8000cac:	73bb      	strb	r3, [r7, #14]
				  opbuff[3] =(Xpos<<0)	+	(Xneg<<1)	+	(Ypos<<2)	+	(Yneg<<3)	+ 	(Zpos<<4)	+	(Zneg<<5);
 8000cae:	4b4e      	ldr	r3, [pc, #312]	; (8000de8 <StartTask02+0x2a8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <StartTask02+0x2ac>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <StartTask02+0x2b0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b4a      	ldr	r3, [pc, #296]	; (8000df4 <StartTask02+0x2b4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <StartTask02+0x2b8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4413      	add	r3, r2
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <StartTask02+0x2bc>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	73fb      	strb	r3, [r7, #15]
				  opbuff[4]=0xFF;opbuff[5]=0xFF;opbuff[6]=0xFF;opbuff[7]=0xFF;
 8000cf2:	23ff      	movs	r3, #255	; 0xff
 8000cf4:	743b      	strb	r3, [r7, #16]
 8000cf6:	23ff      	movs	r3, #255	; 0xff
 8000cf8:	747b      	strb	r3, [r7, #17]
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	74bb      	strb	r3, [r7, #18]
 8000cfe:	23ff      	movs	r3, #255	; 0xff
 8000d00:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2108      	movs	r1, #8
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f009 fe3b 	bl	800a984 <CDC_Transmit_FS>
 8000d0e:	e030      	b.n	8000d72 <StartTask02+0x232>
			  }
			  else if(spin==1)
 8000d10:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <StartTask02+0x29c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d114      	bne.n	8000d42 <StartTask02+0x202>
			  {
				  xPul=10U;
 8000d18:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <StartTask02+0x2c0>)
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	601a      	str	r2, [r3, #0]
				  xSpeed = 50U;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <StartTask02+0x2c4>)
 8000d20:	2232      	movs	r2, #50	; 0x32
 8000d22:	701a      	strb	r2, [r3, #0]
				  spin_length=(rxbuf[i]) + (rxbuf[i+1]<<8);
 8000d24:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <StartTask02+0x28c>)
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	4413      	add	r3, r2
 8000d2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a25      	ldr	r2, [pc, #148]	; (8000dcc <StartTask02+0x28c>)
 8000d36:	56d3      	ldrsb	r3, [r2, r3]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	440b      	add	r3, r1
 8000d3c:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <StartTask02+0x2c8>)
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e017      	b.n	8000d72 <StartTask02+0x232>
			  }
			  else if (solder_push==1)
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <StartTask02+0x2a0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d113      	bne.n	8000d72 <StartTask02+0x232>
			  {
				  yPul=10U;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <StartTask02+0x2cc>)
 8000d4c:	220a      	movs	r2, #10
 8000d4e:	601a      	str	r2, [r3, #0]
				  ySpeed = 50U;
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <StartTask02+0x2d0>)
 8000d52:	2232      	movs	r2, #50	; 0x32
 8000d54:	701a      	strb	r2, [r3, #0]
				  push_length=(rxbuf[i]) + (rxbuf[i+1]<<8);
 8000d56:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <StartTask02+0x28c>)
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <StartTask02+0x28c>)
 8000d68:	56d3      	ldrsb	r3, [r2, r3]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	440b      	add	r3, r1
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <StartTask02+0x2d4>)
 8000d70:	6013      	str	r3, [r2, #0]
			  }
			  rec_state=CRC8;
 8000d72:	2304      	movs	r3, #4
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000d76:	e016      	b.n	8000da6 <StartTask02+0x266>
		  case CRC8:
			  grating_scale_1=0;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <StartTask02+0x290>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
			  grating_scale_2=0;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <StartTask02+0x294>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
			  PGsend=0;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <StartTask02+0x298>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
			  read=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
			  control=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
			  spin=0;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <StartTask02+0x29c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			  solder_push=0;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <StartTask02+0x2a0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

			  rec_state=START;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000da2:	e000      	b.n	8000da6 <StartTask02+0x266>
			  break;
 8000da4:	bf00      	nop
		  }
	  i++;
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	3301      	adds	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
	  while (i < 32)
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	2b1f      	cmp	r3, #31
 8000db0:	f67f aedf 	bls.w	8000b72 <StartTask02+0x32>
	  }


    osDelay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f007 f85b 	bl	8007e70 <osDelay>
  {
 8000dba:	e6c7      	b.n	8000b4c <StartTask02+0xc>
 8000dbc:	20001e5c 	.word	0x20001e5c
 8000dc0:	20001de4 	.word	0x20001de4
 8000dc4:	20001d4c 	.word	0x20001d4c
 8000dc8:	20001e50 	.word	0x20001e50
 8000dcc:	20001cd0 	.word	0x20001cd0
 8000dd0:	200001d4 	.word	0x200001d4
 8000dd4:	200001d8 	.word	0x200001d8
 8000dd8:	20001e58 	.word	0x20001e58
 8000ddc:	200001c4 	.word	0x200001c4
 8000de0:	200001c8 	.word	0x200001c8
 8000de4:	40000c00 	.word	0x40000c00
 8000de8:	20001de8 	.word	0x20001de8
 8000dec:	20001e4c 	.word	0x20001e4c
 8000df0:	20001d48 	.word	0x20001d48
 8000df4:	20001df0 	.word	0x20001df0
 8000df8:	20001ea8 	.word	0x20001ea8
 8000dfc:	20001cf4 	.word	0x20001cf4
 8000e00:	20001eac 	.word	0x20001eac
 8000e04:	20001eb0 	.word	0x20001eb0
 8000e08:	200001d0 	.word	0x200001d0
 8000e0c:	20001eb4 	.word	0x20001eb4
 8000e10:	20001eb8 	.word	0x20001eb8
 8000e14:	200001cc 	.word	0x200001cc

08000e18 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f007 f825 	bl	8007e70 <osDelay>
 8000e26:	e7fb      	b.n	8000e20 <StartTask03+0x8>

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6613      	str	r3, [r2, #96]	; 0x60
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	f06f 0001 	mvn.w	r0, #1
 8000e72:	f000 fc22 	bl	80016ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <HAL_TIM_Base_MspInit+0x64>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d123      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_TIM_Base_MspInit+0x68>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_TIM_Base_MspInit+0x68>)
 8000e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_TIM_Base_MspInit+0x68>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2018      	movs	r0, #24
 8000eb4:	f000 fc01 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000eb8:	2018      	movs	r0, #24
 8000eba:	f000 fc1a 	bl	80016f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2019      	movs	r0, #25
 8000ec4:	f000 fbf9 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ec8:	2019      	movs	r0, #25
 8000eca:	f000 fc12 	bl	80016f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	201a      	movs	r0, #26
 8000ed4:	f000 fbf1 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ed8:	201a      	movs	r0, #26
 8000eda:	f000 fc0a 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40012c00 	.word	0x40012c00
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b090      	sub	sp, #64	; 0x40
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d14d      	bne.n	8000fae <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	4b6e      	ldr	r3, [pc, #440]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1e:	4b6b      	ldr	r3, [pc, #428]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b68      	ldr	r3, [pc, #416]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a67      	ldr	r2, [pc, #412]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b62      	ldr	r3, [pc, #392]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a61      	ldr	r2, [pc, #388]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fbd6 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	484e      	ldr	r0, [pc, #312]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8000f98:	f000 fbc6 	bl	8001728 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 fb8a 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fba3 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fac:	e089      	b.n	80010c2 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d128      	bne.n	800100a <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbc:	4a43      	ldr	r2, [pc, #268]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fe8:	2318      	movs	r3, #24
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4835      	ldr	r0, [pc, #212]	; (80010d8 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001004:	f000 fb90 	bl	8001728 <HAL_GPIO_Init>
}
 8001008:	e05b      	b.n	80010c2 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM5)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a33      	ldr	r2, [pc, #204]	; (80010dc <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d129      	bne.n	8001068 <HAL_TIM_Encoder_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6593      	str	r3, [r2, #88]	; 0x58
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001044:	2303      	movs	r3, #3
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001054:	2302      	movs	r3, #2
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f000 fb61 	bl	8001728 <HAL_GPIO_Init>
}
 8001066:	e02c      	b.n	80010c2 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM8)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d127      	bne.n	80010c2 <HAL_TIM_Encoder_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800107c:	6613      	str	r3, [r2, #96]	; 0x60
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010b2:	2303      	movs	r3, #3
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ba:	4619      	mov	r1, r3
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80010be:	f000 fb33 	bl	8001728 <HAL_GPIO_Init>
}
 80010c2:	bf00      	nop
 80010c4:	3740      	adds	r7, #64	; 0x40
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	40000400 	.word	0x40000400
 80010d8:	48001000 	.word	0x48001000
 80010dc:	40000c00 	.word	0x40000c00
 80010e0:	40013400 	.word	0x40013400
 80010e4:	48000800 	.word	0x48000800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f9b0 	bl	800147c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800111c:	f008 fab6 	bl	800968c <xTaskGetSchedulerState>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d001      	beq.n	800112a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001126:	f009 f89f 	bl	800a268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001136:	f003 faaf 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20001e00 	.word	0x20001e00

08001144 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800114a:	4847      	ldr	r0, [pc, #284]	; (8001268 <TIM1_UP_TIM16_IRQHandler+0x124>)
 800114c:	f003 faa4 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
    static int xcnt = 0;
      static int ycnt = 0;

      if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 8001150:	4b46      	ldr	r3, [pc, #280]	; (800126c <TIM1_UP_TIM16_IRQHandler+0x128>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d934      	bls.n	80011c2 <TIM1_UP_TIM16_IRQHandler+0x7e>
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a43      	ldr	r2, [pc, #268]	; (800126c <TIM1_UP_TIM16_IRQHandler+0x128>)
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	fb93 f1f2 	sdiv	r1, r3, r2
 8001164:	fb02 f201 	mul.w	r2, r2, r1
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d129      	bne.n	80011c2 <TIM1_UP_TIM16_IRQHandler+0x7e>
    	  if(xPul!=0) {
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d025      	beq.n	80011c2 <TIM1_UP_TIM16_IRQHandler+0x7e>
    		  int i=0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
    	    if(xPul>0) {
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x130>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dd05      	ble.n	800118e <TIM1_UP_TIM16_IRQHandler+0x4a>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2104      	movs	r1, #4
 8001186:	483c      	ldr	r0, [pc, #240]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x134>)
 8001188:	f000 fc90 	bl	8001aac <HAL_GPIO_WritePin>
 800118c:	e008      	b.n	80011a0 <TIM1_UP_TIM16_IRQHandler+0x5c>
           // xPul--;
          }
    	    else if(xPul<0) {
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da04      	bge.n	80011a0 <TIM1_UP_TIM16_IRQHandler+0x5c>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2104      	movs	r1, #4
 800119a:	4837      	ldr	r0, [pc, #220]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x134>)
 800119c:	f000 fc86 	bl	8001aac <HAL_GPIO_WritePin>
           // xPul++;
          }
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
    	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 80011a0:	2104      	movs	r1, #4
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fc99 	bl	8001adc <HAL_GPIO_TogglePin>
    	    i++;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
    	    if(i>=2*spin_length)
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <TIM1_UP_TIM16_IRQHandler+0x138>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	db02      	blt.n	80011c2 <TIM1_UP_TIM16_IRQHandler+0x7e>
    	    {
    	    	xPul=0;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x130>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
    	  }
    	  else {
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
    	  }
      }
      xcnt++;
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a29      	ldr	r2, [pc, #164]	; (8001270 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 80011ca:	6013      	str	r3, [r2, #0]
      if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d93f      	bls.n	8001254 <TIM1_UP_TIM16_IRQHandler+0x110>
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <TIM1_UP_TIM16_IRQHandler+0x140>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a29      	ldr	r2, [pc, #164]	; (8001280 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80011e0:	fb02 f201 	mul.w	r2, r2, r1
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d134      	bne.n	8001254 <TIM1_UP_TIM16_IRQHandler+0x110>
     	  if(yPul!=0) {
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d030      	beq.n	8001254 <TIM1_UP_TIM16_IRQHandler+0x110>
     		 int i=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
     	    if(yPul>0) {
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd0b      	ble.n	8001216 <TIM1_UP_TIM16_IRQHandler+0xd2>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x148>)
 8001206:	f000 fc51 	bl	8001aac <HAL_GPIO_WritePin>
     	      yPul--;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e00e      	b.n	8001234 <TIM1_UP_TIM16_IRQHandler+0xf0>
     	    }else if(yPul<0) {
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da0a      	bge.n	8001234 <TIM1_UP_TIM16_IRQHandler+0xf0>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x148>)
 8001226:	f000 fc41 	bl	8001aac <HAL_GPIO_WritePin>
     	      yPul++;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a15      	ldr	r2, [pc, #84]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001232:	6013      	str	r3, [r2, #0]
     	    }
     	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
     		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 8001234:	2101      	movs	r1, #1
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <TIM1_UP_TIM16_IRQHandler+0x14c>)
 8001238:	f000 fc50 	bl	8001adc <HAL_GPIO_TogglePin>
     		 i++;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	603b      	str	r3, [r7, #0]
				if(i>=2*push_length)
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <TIM1_UP_TIM16_IRQHandler+0x150>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	db02      	blt.n	8001254 <TIM1_UP_TIM16_IRQHandler+0x110>
				{
					yPul=0;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
				}
     	  }else {
     	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
     	  }
       }
       ycnt++;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <TIM1_UP_TIM16_IRQHandler+0x140>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <TIM1_UP_TIM16_IRQHandler+0x140>)
 800125c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001e00 	.word	0x20001e00
 800126c:	20001eb0 	.word	0x20001eb0
 8001270:	200001dc 	.word	0x200001dc
 8001274:	20001eac 	.word	0x20001eac
 8001278:	48000400 	.word	0x48000400
 800127c:	200001d0 	.word	0x200001d0
 8001280:	20001eb8 	.word	0x20001eb8
 8001284:	200001e0 	.word	0x200001e0
 8001288:	20001eb4 	.word	0x20001eb4
 800128c:	48001000 	.word	0x48001000
 8001290:	48000c00 	.word	0x48000c00
 8001294:	200001cc 	.word	0x200001cc

08001298 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800129e:	f003 f9fb 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20001e00 	.word	0x20001e00

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f003 f9f1 	bl	8004698 <HAL_TIM_IRQHandler>
//   	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
//   	  }
//     }
//     ycnt++;
  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20001e5c 	.word	0x20001e5c

080012c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012c8:	f000 fc22 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d0:	f000 fc1e 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80012d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012d8:	f000 fc1a 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012e0:	f000 fc16 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012e8:	f000 fc12 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <OTG_FS_IRQHandler+0x10>)
 80012f6:	f000 fd96 	bl	8001e26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200033d0 	.word	0x200033d0

08001304 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <SystemInit+0x5c>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <SystemInit+0x5c>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <SystemInit+0x60>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <SystemInit+0x60>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <SystemInit+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <SystemInit+0x60>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a0d      	ldr	r2, [pc, #52]	; (800137c <SystemInit+0x60>)
 8001348:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800134c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001350:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <SystemInit+0x60>)
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <SystemInit+0x60>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <SystemInit+0x60>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <SystemInit+0x60>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	40021000 	.word	0x40021000

08001380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001384:	f7ff ffca 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001388:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800138a:	e003      	b.n	8001394 <LoopCopyDataInit>

0800138c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800138e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001390:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001392:	3104      	adds	r1, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001398:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800139a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800139c:	d3f6      	bcc.n	800138c <CopyDataInit>
	ldr	r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013a0:	e002      	b.n	80013a8 <LoopFillZerobss>

080013a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013a4:	f842 3b04 	str.w	r3, [r2], #4

080013a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <LoopForever+0x16>)
	cmp	r2, r3
 80013aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013ac:	d3f9      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f00a f85b 	bl	800b468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b2:	f7fe ff0d 	bl	80001d0 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013bc:	0800b62c 	.word	0x0800b62c
	ldr	r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013c4:	200001a0 	.word	0x200001a0
	ldr	r2, =_sbss
 80013c8:	200001a0 	.word	0x200001a0
	ldr	r3, = _ebss
 80013cc:	200037d8 	.word	0x200037d8

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>

080013d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f961 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f80e 	bl	8001404 <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e001      	b.n	80013f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f4:	f7ff fd1e 	bl	8000e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_InitTick+0x6c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_InitTick+0x70>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_InitTick+0x6c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f96d 	bl	800170e <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10f      	bne.n	800145a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d809      	bhi.n	8001454 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f937 	bl	80016ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_InitTick+0x74>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e007      	b.n	8001464 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e004      	b.n	8001464 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e001      	b.n	8001464 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c
 8001474:	20000004 	.word	0x20000004
 8001478:	20000008 	.word	0x20000008

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20001ebc 	.word	0x20001ebc

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20001ebc 	.word	0x20001ebc

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000000c 	.word	0x2000000c

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff29 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff3e 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff31 	bl	8001568 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e17f      	b.n	8001a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8171 	beq.w	8001a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0x48>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d118      	bne.n	8001810 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x128>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b12      	cmp	r3, #18
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	6939      	ldr	r1, [r7, #16]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80ac 	beq.w	8001a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	4a5e      	ldr	r2, [pc, #376]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6613      	str	r3, [r2, #96]	; 0x60
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f2:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_GPIO_Init+0x334>)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191c:	d025      	beq.n	800196a <HAL_GPIO_Init+0x242>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x338>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01f      	beq.n	8001966 <HAL_GPIO_Init+0x23e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x33c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x23a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x340>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x236>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x344>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x232>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x348>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x22e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x34c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x22a>
 800194e:	2306      	movs	r3, #6
 8001950:	e00c      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001952:	2307      	movs	r3, #7
 8001954:	e00a      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001956:	2305      	movs	r3, #5
 8001958:	e008      	b.n	800196c <HAL_GPIO_Init+0x244>
 800195a:	2304      	movs	r3, #4
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x244>
 800195e:	2303      	movs	r3, #3
 8001960:	e004      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <HAL_GPIO_Init+0x244>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x244>
 800196a:	2300      	movs	r3, #0
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	f002 0203 	and.w	r2, r2, #3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4093      	lsls	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800197c:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x334>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x350>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ae:	4a32      	ldr	r2, [pc, #200]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x350>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_GPIO_Init+0x350>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae78 	bne.w	8001738 <HAL_GPIO_Init+0x10>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	48000800 	.word	0x48000800
 8001a68:	48000c00 	.word	0x48000c00
 8001a6c:	48001000 	.word	0x48001000
 8001a70:	48001400 	.word	0x48001400
 8001a74:	48001800 	.word	0x48001800
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43d9      	mvns	r1, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	400b      	ands	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbe8 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6613      	str	r3, [r2, #96]	; 0x60
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4905      	ldr	r1, [pc, #20]	; (8001b7c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000

08001b80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b08f      	sub	sp, #60	; 0x3c
 8001b84:	af0a      	add	r7, sp, #40	; 0x28
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e116      	b.n	8001dc0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d106      	bne.n	8001bb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f009 f843 	bl	800ac38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fa48 	bl	8005066 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	687e      	ldr	r6, [r7, #4]
 8001bde:	466d      	mov	r5, sp
 8001be0:	f106 0410 	add.w	r4, r6, #16
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf4:	1d33      	adds	r3, r6, #4
 8001bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf8:	6838      	ldr	r0, [r7, #0]
 8001bfa:	f003 f95b 	bl	8004eb4 <USB_CoreInit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d7      	b.n	8001dc0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fa36 	bl	8005088 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e04a      	b.n	8001cb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	333d      	adds	r3, #61	; 0x3d
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	333c      	adds	r3, #60	; 0x3c
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	b298      	uxth	r0, r3
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3342      	adds	r3, #66	; 0x42
 8001c5e:	4602      	mov	r2, r0
 8001c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	333f      	adds	r3, #63	; 0x3f
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3344      	adds	r3, #68	; 0x44
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	3348      	adds	r3, #72	; 0x48
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3350      	adds	r3, #80	; 0x50
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3af      	bcc.n	8001c22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e044      	b.n	8001d52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3b5      	bcc.n	8001cc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f003 f9ac 	bl	80050dc <USB_DevInit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e014      	b.n	8001dc0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 ff62 	bl	8002c78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 f92e 	bl	800601a <USB_DevDisconnect>

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_Start+0x1c>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e01c      	b.n	8001e1e <HAL_PCD_Start+0x56>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 f91d 	bl	8005044 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f8e2 	bl	8005fd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b08d      	sub	sp, #52	; 0x34
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f004 f9a0 	bl	8006182 <USB_GetMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 838f 	bne.w	8002568 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f904 	bl	800605c <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8385 	beq.w	8002566 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 f8fb 	bl	800605c <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d107      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f002 0202 	and.w	r2, r2, #2
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f004 f8e9 	bl	800605c <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d161      	bne.n	8001f58 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0210 	bic.w	r2, r2, #16
 8001ea2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f003 020f 	and.w	r2, r3, #15
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	0c5b      	lsrs	r3, r3, #17
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d124      	bne.n	8001f1a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d035      	beq.n	8001f48 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6a38      	ldr	r0, [r7, #32]
 8001ef0:	f003 ff4f 	bl	8005d92 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f00:	441a      	add	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f12:	441a      	add	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	e016      	b.n	8001f48 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	0c5b      	lsrs	r3, r3, #17
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d110      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6a38      	ldr	r0, [r7, #32]
 8001f32:	f003 ff2e 	bl	8005d92 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f42:	441a      	add	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0210 	orr.w	r2, r2, #16
 8001f56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 f87d 	bl	800605c <USB_ReadInterrupts>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f6c:	d16e      	bne.n	800204c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 f883 	bl	8006082 <USB_ReadDevAllOutEpInterrupt>
 8001f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f7e:	e062      	b.n	8002046 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d057      	beq.n	800203a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 f8a8 	bl	80060ea <USB_ReadDevOutEPInterrupt>
 8001f9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fd82 	bl	8002ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2308      	movs	r3, #8
 8001fda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fdbe 	bl	8002b60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002016:	461a      	mov	r2, r3
 8002018:	2320      	movs	r3, #32
 800201a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002032:	461a      	mov	r2, r3
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	3301      	adds	r3, #1
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d199      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f004 f803 	bl	800605c <USB_ReadInterrupts>
 8002056:	4603      	mov	r3, r0
 8002058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002060:	f040 8087 	bne.w	8002172 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f004 f824 	bl	80060b6 <USB_ReadDevAllInEpInterrupt>
 800206e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002074:	e07a      	b.n	800216c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d06f      	beq.n	8002160 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f004 f84b 	bl	8006126 <USB_ReadDevInEPInterrupt>
 8002090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69f9      	ldr	r1, [r7, #28]
 80020b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020bc:	4013      	ands	r3, r2
 80020be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020cc:	461a      	mov	r2, r3
 80020ce:	2301      	movs	r3, #1
 80020d0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f008 fe40 	bl	800ad5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f4:	461a      	mov	r2, r3
 80020f6:	2308      	movs	r3, #8
 80020f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002110:	461a      	mov	r2, r3
 8002112:	2310      	movs	r3, #16
 8002114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	2302      	movs	r3, #2
 800214c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fc29 	bl	80029b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3301      	adds	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d181      	bne.n	8002076 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 ff70 	bl	800605c <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002186:	d122      	bne.n	80021ce <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ae:	2100      	movs	r1, #0
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f009 f8ed 	bl	800b390 <HAL_PCDEx_LPM_Callback>
 80021b6:	e002      	b.n	80021be <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f008 fe3d 	bl	800ae38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 ff42 	bl	800605c <USB_ReadInterrupts>
 80021d8:	4603      	mov	r3, r0
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e2:	d112      	bne.n	800220a <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f008 fdf9 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 ff24 	bl	800605c <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221e:	d121      	bne.n	8002264 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800222e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d111      	bne.n	800225e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002254:	2101      	movs	r1, #1
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f009 f89a 	bl	800b390 <HAL_PCDEx_LPM_Callback>
 800225c:	e002      	b.n	8002264 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f008 fdc4 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fef7 	bl	800605c <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002278:	f040 80c5 	bne.w	8002406 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2110      	movs	r1, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f003 f86c 	bl	8005374 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a0:	e056      	b.n	8002350 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	461a      	mov	r2, r3
 80022b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022d4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e6:	0151      	lsls	r1, r2, #5
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	440a      	add	r2, r1
 80022ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	461a      	mov	r2, r3
 8002304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002308:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	0151      	lsls	r1, r2, #5
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	440a      	add	r2, r1
 8002320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	440a      	add	r2, r1
 8002340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002348:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	3301      	adds	r3, #1
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002356:	429a      	cmp	r2, r3
 8002358:	d3a3      	bcc.n	80022a2 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002368:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800236c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002386:	f043 030b 	orr.w	r3, r3, #11
 800238a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239c:	f043 030b 	orr.w	r3, r3, #11
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	e015      	b.n	80023d0 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ca:	f043 030b 	orr.w	r3, r3, #11
 80023ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4610      	mov	r0, r2
 80023f2:	f003 fef7 	bl	80061e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fe26 	bl	800605c <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d124      	bne.n	8002466 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 febc 	bl	800619e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f803 	bl	8005436 <USB_GetDevSpeed>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	f001 fa08 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8002440:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f002 fd5e 	bl	8004f0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f008 fcac 	bl	800adae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fdf6 	bl	800605c <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d10a      	bne.n	8002490 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f008 fc89 	bl	800ad92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f002 0208 	and.w	r2, r2, #8
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fde1 	bl	800605c <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a4:	d10f      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f008 fcfb 	bl	800aeac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fdc6 	bl	800605c <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024da:	d10f      	bne.n	80024fc <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f008 fcce 	bl	800ae88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fdab 	bl	800605c <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d10a      	bne.n	8002528 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f008 fcdc 	bl	800aed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fd95 	bl	800605c <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d115      	bne.n	8002568 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f008 fccc 	bl	800aeec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	e000      	b.n	8002568 <HAL_PCD_IRQHandler+0x742>
      return;
 8002566:	bf00      	nop
    }
  }
}
 8002568:	3734      	adds	r7, #52	; 0x34
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}

0800256e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_PCD_SetAddress+0x1a>
 8002584:	2302      	movs	r3, #2
 8002586:	e013      	b.n	80025b0 <HAL_PCD_SetAddress+0x42>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fcf3 	bl	8005f8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	70fb      	strb	r3, [r7, #3]
 80025ca:	460b      	mov	r3, r1
 80025cc:	803b      	strh	r3, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da0f      	bge.n	80025fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3338      	adds	r3, #56	; 0x38
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	705a      	strb	r2, [r3, #1]
 80025fc:	e00f      	b.n	800261e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800262a:	883a      	ldrh	r2, [r7, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	78ba      	ldrb	r2, [r7, #2]
 8002634:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002648:	78bb      	ldrb	r3, [r7, #2]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d102      	bne.n	8002654 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_PCD_EP_Open+0xaa>
 800265e:	2302      	movs	r3, #2
 8002660:	e00e      	b.n	8002680 <HAL_PCD_EP_Open+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68f9      	ldr	r1, [r7, #12]
 8002670:	4618      	mov	r0, r3
 8002672:	f002 feff 	bl	8005474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800267e:	7afb      	ldrb	r3, [r7, #11]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da0f      	bge.n	80026bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	3338      	adds	r3, #56	; 0x38
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	705a      	strb	r2, [r3, #1]
 80026ba:	e00f      	b.n	80026dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 020f 	and.w	r2, r3, #15
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_Close+0x6e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e00e      	b.n	8002714 <HAL_PCD_EP_Close+0x8c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 ff3d 	bl	8005584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	460b      	mov	r3, r1
 800272a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	3304      	adds	r3, #4
 8002744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800275e:	7afb      	ldrb	r3, [r7, #11]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276a:	7afb      	ldrb	r3, [r7, #11]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6979      	ldr	r1, [r7, #20]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 f9ba 	bl	8005af4 <USB_EP0StartXfer>
 8002780:	e005      	b.n	800278e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 ffd7 	bl	800573c <USB_EPStartXfer>
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f003 020f 	and.w	r2, r3, #15
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	460b      	mov	r3, r1
 80027d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d8:	7afb      	ldrb	r3, [r7, #11]
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3338      	adds	r3, #56	; 0x38
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2201      	movs	r2, #1
 8002806:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	b2da      	uxtb	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 f965 	bl	8005af4 <USB_EP0StartXfer>
 800282a:	e005      	b.n	8002838 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6979      	ldr	r1, [r7, #20]
 8002832:	4618      	mov	r0, r3
 8002834:	f002 ff82 	bl	800573c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d901      	bls.n	8002860 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e04e      	b.n	80028fe <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002864:	2b00      	cmp	r3, #0
 8002866:	da0f      	bge.n	8002888 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 020f 	and.w	r2, r3, #15
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3338      	adds	r3, #56	; 0x38
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	705a      	strb	r2, [r3, #1]
 8002886:	e00d      	b.n	80028a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_PCD_EP_SetStall+0x82>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e01c      	b.n	80028fe <HAL_PCD_EP_SetStall+0xbc>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fa86 	bl	8005de4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f003 fc78 	bl	80061e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d901      	bls.n	8002924 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e042      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da0f      	bge.n	800294c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 020f 	and.w	r2, r3, #15
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3338      	adds	r3, #56	; 0x38
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	3304      	adds	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	705a      	strb	r2, [r3, #1]
 800294a:	e00f      	b.n	800296c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_ClrStall+0x86>
 8002988:	2302      	movs	r3, #2
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_ClrStall+0xa4>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fa90 	bl	8005ec0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b088      	sub	sp, #32
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d901      	bls.n	80029ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e067      	b.n	8002aba <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d902      	bls.n	8002a06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3303      	adds	r3, #3
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a0e:	e026      	b.n	8002a5e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d902      	bls.n	8002a2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3303      	adds	r3, #3
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68d9      	ldr	r1, [r3, #12]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	6978      	ldr	r0, [r7, #20]
 8002a42:	f003 f975 	bl	8005d30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d809      	bhi.n	8002a88 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d203      	bcs.n	8002a88 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1c3      	bne.n	8002a10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d811      	bhi.n	8002ab8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	6939      	ldr	r1, [r7, #16]
 8002ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	333c      	adds	r3, #60	; 0x3c
 8002adc:	3304      	adds	r3, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <PCD_EP_OutXfrComplete_int+0x98>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d124      	bne.n	8002b44 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	6093      	str	r3, [r2, #8]
 8002b18:	e01a      	b.n	8002b50 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	2320      	movs	r3, #32
 8002b34:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f008 f8f3 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
 8002b42:	e005      	b.n	8002b50 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f008 f8ec 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	4f54310a 	.word	0x4f54310a

08002b60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	333c      	adds	r3, #60	; 0x3c
 8002b78:	3304      	adds	r3, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <PCD_EP_OutSetupPacket_int+0x64>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d90e      	bls.n	8002bb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f008 f8a5 	bl	800ad04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	4f54300a 	.word	0x4f54300a

08002bc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002be6:	883b      	ldrh	r3, [r7, #0]
 8002be8:	0419      	lsls	r1, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf4:	e028      	b.n	8002c48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e00d      	b.n	8002c26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	3340      	adds	r3, #64	; 0x40
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	3301      	adds	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3ec      	bcc.n	8002c0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c30:	883b      	ldrh	r3, [r7, #0]
 8002c32:	0418      	lsls	r0, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	4302      	orrs	r2, r0
 8002c40:	3340      	adds	r3, #64	; 0x40
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	f043 0303 	orr.w	r3, r3, #3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000

08002cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cea:	d130      	bne.n	8002d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf8:	d038      	beq.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d02:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2232      	movs	r2, #50	; 0x32
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0c9b      	lsrs	r3, r3, #18
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d20:	e002      	b.n	8002d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d102      	bne.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f2      	bne.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d110      	bne.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e00f      	b.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d007      	beq.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d64:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	20000004 	.word	0x20000004
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d96:	6053      	str	r3, [r2, #4]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40007000 	.word	0x40007000

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3d4      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	4ba1      	ldr	r3, [pc, #644]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc4:	4b9e      	ldr	r3, [pc, #632]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80e4 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4a>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	f040 808b 	bne.w	8002f00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	f040 8087 	bne.w	8002f00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df2:	4b93      	ldr	r3, [pc, #588]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_RCC_OscConfig+0x62>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e3ac      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <HAL_RCC_OscConfig+0x7c>
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e22:	e005      	b.n	8002e30 <HAL_RCC_OscConfig+0x88>
 8002e24:	4b86      	ldr	r3, [pc, #536]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d223      	bcs.n	8002e7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd15 	bl	8003868 <RCC_SetFlashLatencyFromMSIRange>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e38d      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e48:	4b7d      	ldr	r3, [pc, #500]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a7c      	ldr	r2, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	f043 0308 	orr.w	r3, r3, #8
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b7a      	ldr	r3, [pc, #488]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4977      	ldr	r1, [pc, #476]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e66:	4b76      	ldr	r3, [pc, #472]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	4972      	ldr	r1, [pc, #456]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	e025      	b.n	8002ec8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7c:	4b70      	ldr	r3, [pc, #448]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6f      	ldr	r2, [pc, #444]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	496a      	ldr	r1, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9a:	4b69      	ldr	r3, [pc, #420]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	4965      	ldr	r1, [pc, #404]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fcd5 	bl	8003868 <RCC_SetFlashLatencyFromMSIRange>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e34d      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec8:	f000 fc36 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b5c      	ldr	r3, [pc, #368]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	495a      	ldr	r1, [pc, #360]	; (8003044 <HAL_RCC_OscConfig+0x29c>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_RCC_OscConfig+0x2a0>)
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee8:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_RCC_OscConfig+0x2a4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fa89 	bl	8001404 <HAL_InitTick>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d052      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	e331      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d032      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fac6 	bl	80014a4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fac2 	bl	80014a4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e31a      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2e:	4b44      	ldr	r3, [pc, #272]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	493b      	ldr	r1, [pc, #236]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f58:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
 8002f6c:	e01a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a33      	ldr	r2, [pc, #204]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fa93 	bl	80014a4 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f82:	f7fe fa8f 	bl	80014a4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e2e7      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x1da>
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d074      	beq.n	800309a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x21a>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d10e      	bne.n	8002fda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d064      	beq.n	8003098 <HAL_RCC_OscConfig+0x2f0>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d160      	bne.n	8003098 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e2c4      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x24a>
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e01d      	b.n	800302e <HAL_RCC_OscConfig+0x286>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x26e>
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8003002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x286>
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b07      	ldr	r3, [pc, #28]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_RCC_OscConfig+0x298>)
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01c      	beq.n	8003070 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fa35 	bl	80014a4 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303c:	e011      	b.n	8003062 <HAL_RCC_OscConfig+0x2ba>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	0800b5e4 	.word	0x0800b5e4
 8003048:	20000004 	.word	0x20000004
 800304c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fa28 	bl	80014a4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e280      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4baf      	ldr	r3, [pc, #700]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x2a8>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fa18 	bl	80014a4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fa14 	bl	80014a4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e26c      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308a:	4ba5      	ldr	r3, [pc, #660]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x2d0>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d060      	beq.n	8003168 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x310>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d116      	bne.n	80030e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	4b99      	ldr	r3, [pc, #612]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_OscConfig+0x328>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e249      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b93      	ldr	r3, [pc, #588]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	4990      	ldr	r1, [pc, #576]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e4:	e040      	b.n	8003168 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d023      	beq.n	8003136 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ee:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a8b      	ldr	r2, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe f9d3 	bl	80014a4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7fe f9cf 	bl	80014a4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e227      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003114:	4b82      	ldr	r3, [pc, #520]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b7f      	ldr	r3, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	497c      	ldr	r1, [pc, #496]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
 8003134:	e018      	b.n	8003168 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fe f9af 	bl	80014a4 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe f9ab 	bl	80014a4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e203      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800315c:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d03c      	beq.n	80031ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01c      	beq.n	80031b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	4a67      	ldr	r2, [pc, #412]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe f98a 	bl	80014a4 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe f986 	bl	80014a4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1de      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a6:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <HAL_RCC_OscConfig+0x3ec>
 80031b4:	e01b      	b.n	80031ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b6:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80031b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe f96d 	bl	80014a4 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ce:	f7fe f969 	bl	80014a4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1c1      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ef      	bne.n	80031ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80a6 	beq.w	8003348 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003200:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10d      	bne.n	8003228 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	4a43      	ldr	r2, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003216:	6593      	str	r3, [r2, #88]	; 0x58
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCC_OscConfig+0x57c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d118      	bne.n	8003266 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCC_OscConfig+0x57c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <HAL_RCC_OscConfig+0x57c>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003240:	f7fe f930 	bl	80014a4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe f92c 	bl	80014a4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e184      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCC_OscConfig+0x57c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d108      	bne.n	8003280 <HAL_RCC_OscConfig+0x4d8>
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800327e:	e024      	b.n	80032ca <HAL_RCC_OscConfig+0x522>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d110      	bne.n	80032aa <HAL_RCC_OscConfig+0x502>
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a8:	e00f      	b.n	80032ca <HAL_RCC_OscConfig+0x522>
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe f8e7 	bl	80014a4 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe f8e3 	bl	80014a4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e139      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x578>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0ed      	beq.n	80032da <HAL_RCC_OscConfig+0x532>
 80032fe:	e01a      	b.n	8003336 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe f8d0 	bl	80014a4 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003306:	e00f      	b.n	8003328 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe f8cc 	bl	80014a4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d906      	bls.n	8003328 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e122      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003328:	4b90      	ldr	r3, [pc, #576]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e8      	bne.n	8003308 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b8b      	ldr	r3, [pc, #556]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a8a      	ldr	r2, [pc, #552]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8108 	beq.w	8003562 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	2b02      	cmp	r3, #2
 8003358:	f040 80d0 	bne.w	80034fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800335c:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0203 	and.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	429a      	cmp	r2, r3
 800336e:	d130      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	3b01      	subs	r3, #1
 800337c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d127      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d11f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800339c:	2a07      	cmp	r2, #7
 800339e:	bf14      	ite	ne
 80033a0:	2201      	movne	r2, #1
 80033a2:	2200      	moveq	r2, #0
 80033a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d113      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d06e      	beq.n	80034b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	d069      	beq.n	80034ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b7      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f4:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5c      	ldr	r2, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003400:	f7fe f850 	bl	80014a4 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe f84c 	bl	80014a4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0a4      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	4b54      	ldr	r3, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCC_OscConfig+0x7c8>)
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003436:	3a01      	subs	r2, #1
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003440:	0212      	lsls	r2, r2, #8
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003448:	0852      	lsrs	r2, r2, #1
 800344a:	3a01      	subs	r2, #1
 800344c:	0552      	lsls	r2, r2, #21
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003454:	0852      	lsrs	r2, r2, #1
 8003456:	3a01      	subs	r2, #1
 8003458:	0652      	lsls	r2, r2, #25
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003460:	0912      	lsrs	r2, r2, #4
 8003462:	0452      	lsls	r2, r2, #17
 8003464:	430a      	orrs	r2, r1
 8003466:	4941      	ldr	r1, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b3c      	ldr	r3, [pc, #240]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a3b      	ldr	r2, [pc, #236]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003484:	f7fe f80e 	bl	80014a4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe f80a 	bl	80014a4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e062      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b33      	ldr	r3, [pc, #204]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034aa:	e05a      	b.n	8003562 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e059      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b0:	4b2e      	ldr	r3, [pc, #184]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d152      	bne.n	8003562 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034bc:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d4:	f7fd ffe6 	bl	80014a4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd ffe2 	bl	80014a4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e03a      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x734>
 80034fa:	e032      	b.n	8003562 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d02d      	beq.n	800355e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 800352c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fd ffb5 	bl	80014a4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd ffb1 	bl	80014a4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e009      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x7c4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x796>
 800355c:	e001      	b.n	8003562 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	f99d808c 	.word	0xf99d808c

08003574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0c8      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	4961      	ldr	r1, [pc, #388]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0b0      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d04c      	beq.n	800365e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035cc:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d121      	bne.n	800361c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e09e      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d107      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e092      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d109      	bne.n	800361c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e086      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e07e      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361c:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 0203 	bic.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	493f      	ldr	r1, [pc, #252]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362e:	f7fd ff39 	bl	80014a4 <HAL_GetTick>
 8003632:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	e00a      	b.n	800364c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003636:	f7fd ff35 	bl	80014a4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e066      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 020c 	and.w	r2, r3, #12
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	429a      	cmp	r2, r3
 800365c:	d1eb      	bne.n	8003636 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	492c      	ldr	r1, [pc, #176]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d210      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 0207 	bic.w	r2, r3, #7
 8003692:	4924      	ldr	r1, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCC_ClockConfig+0x1b0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e036      	b.n	800371a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4918      	ldr	r1, [pc, #96]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4910      	ldr	r1, [pc, #64]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ea:	f000 f825 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_RCC_ClockConfig+0x1b4>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	490c      	ldr	r1, [pc, #48]	; (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fe78 	bl	8001404 <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	72fb      	strb	r3, [r7, #11]

  return status;
 8003718:	7afb      	ldrb	r3, [r7, #11]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40022000 	.word	0x40022000
 8003728:	40021000 	.word	0x40021000
 800372c:	0800b5e4 	.word	0x0800b5e4
 8003730:	20000004 	.word	0x20000004
 8003734:	20000008 	.word	0x20000008

08003738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003750:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x34>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d121      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d11e      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800376c:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e005      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003788:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b0:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e004      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d134      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c6:	4b1e      	ldr	r3, [pc, #120]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0xa6>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d003      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xac>
 80037dc:	e005      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037de:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCC_GetSysClockFreq+0x110>)
 80037e0:	617b      	str	r3, [r7, #20]
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_GetSysClockFreq+0x114>)
 80037e6:	617b      	str	r3, [r7, #20]
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	617b      	str	r3, [r7, #20]
      break;
 80037ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	3301      	adds	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	fb02 f203 	mul.w	r2, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	0e5b      	lsrs	r3, r3, #25
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	3301      	adds	r3, #1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003830:	69bb      	ldr	r3, [r7, #24]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	; 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	0800b5f4 	.word	0x0800b5f4
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000004 	.word	0x20000004

08003868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003880:	f7ff fa1e 	bl	8002cc0 <HAL_PWREx_GetVoltageRange>
 8003884:	6178      	str	r0, [r7, #20]
 8003886:	e014      	b.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	4a24      	ldr	r2, [pc, #144]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003892:	6593      	str	r3, [r2, #88]	; 0x58
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a0:	f7ff fa0e 	bl	8002cc0 <HAL_PWREx_GetVoltageRange>
 80038a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b8:	d10b      	bne.n	80038d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d919      	bls.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2ba0      	cmp	r3, #160	; 0xa0
 80038c4:	d902      	bls.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038c6:	2302      	movs	r3, #2
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e013      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038cc:	2301      	movs	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	e010      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d902      	bls.n	80038de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038d8:	2303      	movs	r3, #3
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e00a      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d102      	bne.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e4:	2302      	movs	r3, #2
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e004      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b70      	cmp	r3, #112	; 0x70
 80038ee:	d101      	bne.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f0:	2301      	movs	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0207 	bic.w	r2, r3, #7
 80038fc:	4909      	ldr	r1, [pc, #36]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	40022000 	.word	0x40022000

08003928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003930:	2300      	movs	r3, #0
 8003932:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003934:	2300      	movs	r3, #0
 8003936:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003940:	2b00      	cmp	r3, #0
 8003942:	d041      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003948:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800394c:	d02a      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800394e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003952:	d824      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003958:	d008      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800395a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395e:	d81e      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003968:	d010      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800396a:	e018      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800396c:	4b86      	ldr	r3, [pc, #536]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a85      	ldr	r2, [pc, #532]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003978:	e015      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fabb 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3320      	adds	r3, #32
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fba6 	bl	80040e4 <RCCEx_PLLSAI2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	74fb      	strb	r3, [r7, #19]
      break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ac:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ba:	4973      	ldr	r1, [pc, #460]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039c2:	e001      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d041      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039dc:	d02a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e2:	d824      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e8:	d008      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ee:	d81e      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d010      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039fa:	e018      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039fc:	4b62      	ldr	r3, [pc, #392]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a61      	ldr	r2, [pc, #388]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a08:	e015      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa73 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a1a:	e00c      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3320      	adds	r3, #32
 8003a20:	2100      	movs	r1, #0
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fb5e 	bl	80040e4 <RCCEx_PLLSAI2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	74fb      	strb	r3, [r7, #19]
      break;
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a3c:	4b52      	ldr	r3, [pc, #328]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4a:	494f      	ldr	r1, [pc, #316]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a52:	e001      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80a0 	beq.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a66:	2300      	movs	r3, #0
 8003a68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3a      	ldr	r2, [pc, #232]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fcfc 	bl	80014a4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aae:	e009      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab0:	f7fd fcf8 	bl	80014a4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ef      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d15c      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ad6:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d019      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003af4:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b20:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fd fcb7 	bl	80014a4 <HAL_GetTick>
 8003b36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b38:	e00b      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fcb3 	bl	80014a4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d902      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b50:	e006      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ec      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b76:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b7e:	e009      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b94:	7c7b      	ldrb	r3, [r7, #17]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4b9e      	ldr	r3, [pc, #632]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	4a9d      	ldr	r2, [pc, #628]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb2:	4b98      	ldr	r3, [pc, #608]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f023 0203 	bic.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	4994      	ldr	r1, [pc, #592]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd4:	4b8f      	ldr	r3, [pc, #572]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 020c 	bic.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	498c      	ldr	r1, [pc, #560]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf6:	4b87      	ldr	r3, [pc, #540]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	4983      	ldr	r1, [pc, #524]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c18:	4b7e      	ldr	r3, [pc, #504]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	497b      	ldr	r1, [pc, #492]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c3a:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c48:	4972      	ldr	r1, [pc, #456]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c5c:	4b6d      	ldr	r3, [pc, #436]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	496a      	ldr	r1, [pc, #424]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	4961      	ldr	r1, [pc, #388]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca0:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	4959      	ldr	r1, [pc, #356]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	4950      	ldr	r1, [pc, #320]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	4948      	ldr	r1, [pc, #288]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	493f      	ldr	r1, [pc, #252]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d028      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d28:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d36:	4937      	ldr	r1, [pc, #220]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d46:	d106      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a31      	ldr	r2, [pc, #196]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
 8003d54:	e011      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	2101      	movs	r1, #1
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f8c8 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d86:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	491f      	ldr	r1, [pc, #124]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db0:	60d3      	str	r3, [r2, #12]
 8003db2:	e011      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f899 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d02b      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	4908      	ldr	r1, [pc, #32]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e02:	d109      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a02      	ldr	r2, [pc, #8]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
 8003e10:	e014      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f867 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d02f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e56:	4928      	ldr	r1, [pc, #160]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f844 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d014      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e7e:	7cfb      	ldrb	r3, [r7, #19]
 8003e80:	74bb      	strb	r3, [r7, #18]
 8003e82:	e011      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3320      	adds	r3, #32
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f925 	bl	80040e4 <RCCEx_PLLSAI2_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec2:	490d      	ldr	r1, [pc, #52]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eee:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000

08003efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0a:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d018      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f16:	4b72      	ldr	r3, [pc, #456]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d10d      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
       ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f2e:	4b6c      	ldr	r3, [pc, #432]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d047      	beq.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	e044      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d018      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x86>
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d825      	bhi.n	8003fa0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d002      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0x62>
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d009      	beq.n	8003f70 <RCCEx_PLLSAI1_Config+0x74>
 8003f5c:	e020      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f5e:	4b60      	ldr	r3, [pc, #384]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11d      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6e:	e01a      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f70:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d116      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f80:	e013      	b.n	8003faa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f82:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f8e:	4b54      	ldr	r3, [pc, #336]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f9e:	e006      	b.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e004      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	4944      	ldr	r1, [pc, #272]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d17d      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fa5e 	bl	80014a4 <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fea:	e009      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fec:	f7fd fa5a 	bl	80014a4 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ffe:	e005      	b.n	800400c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004000:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ef      	bne.n	8003fec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d160      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d111      	bne.n	800403c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6892      	ldr	r2, [r2, #8]
 8004028:	0211      	lsls	r1, r2, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68d2      	ldr	r2, [r2, #12]
 800402e:	0912      	lsrs	r2, r2, #4
 8004030:	0452      	lsls	r2, r2, #17
 8004032:	430a      	orrs	r2, r1
 8004034:	492a      	ldr	r1, [pc, #168]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	610b      	str	r3, [r1, #16]
 800403a:	e027      	b.n	800408c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d112      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800404a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6892      	ldr	r2, [r2, #8]
 8004052:	0211      	lsls	r1, r2, #8
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6912      	ldr	r2, [r2, #16]
 8004058:	0852      	lsrs	r2, r2, #1
 800405a:	3a01      	subs	r2, #1
 800405c:	0552      	lsls	r2, r2, #21
 800405e:	430a      	orrs	r2, r1
 8004060:	491f      	ldr	r1, [pc, #124]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
 8004066:	e011      	b.n	800408c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6952      	ldr	r2, [r2, #20]
 800407e:	0852      	lsrs	r2, r2, #1
 8004080:	3a01      	subs	r2, #1
 8004082:	0652      	lsls	r2, r2, #25
 8004084:	430a      	orrs	r2, r1
 8004086:	4916      	ldr	r1, [pc, #88]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fa04 	bl	80014a4 <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040a0:	f7fd fa00 	bl	80014a4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
          break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ef      	beq.n	80040a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	4904      	ldr	r1, [pc, #16]	; (80040e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000

080040e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040f2:	4b6a      	ldr	r3, [pc, #424]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d018      	beq.n	8004130 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040fe:	4b67      	ldr	r3, [pc, #412]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0203 	and.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d10d      	bne.n	800412a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
       ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004116:	4b61      	ldr	r3, [pc, #388]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
       ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d047      	beq.n	80041ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e044      	b.n	80041ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d018      	beq.n	800416a <RCCEx_PLLSAI2_Config+0x86>
 8004138:	2b03      	cmp	r3, #3
 800413a:	d825      	bhi.n	8004188 <RCCEx_PLLSAI2_Config+0xa4>
 800413c:	2b01      	cmp	r3, #1
 800413e:	d002      	beq.n	8004146 <RCCEx_PLLSAI2_Config+0x62>
 8004140:	2b02      	cmp	r3, #2
 8004142:	d009      	beq.n	8004158 <RCCEx_PLLSAI2_Config+0x74>
 8004144:	e020      	b.n	8004188 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004146:	4b55      	ldr	r3, [pc, #340]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11d      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004156:	e01a      	b.n	800418e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d116      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004168:	e013      	b.n	8004192 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800416a:	4b4c      	ldr	r3, [pc, #304]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004176:	4b49      	ldr	r3, [pc, #292]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004186:	e006      	b.n	8004196 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e004      	b.n	8004198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004196:	bf00      	nop
    }

    if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10d      	bne.n	80041ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800419e:	4b3f      	ldr	r3, [pc, #252]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	430b      	orrs	r3, r1
 80041b4:	4939      	ldr	r1, [pc, #228]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d167      	bne.n	8004290 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041c0:	4b36      	ldr	r3, [pc, #216]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a35      	ldr	r2, [pc, #212]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041cc:	f7fd f96a 	bl	80014a4 <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041d2:	e009      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d4:	f7fd f966 	bl	80014a4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d902      	bls.n	80041e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	73fb      	strb	r3, [r7, #15]
        break;
 80041e6:	e005      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041e8:	4b2c      	ldr	r3, [pc, #176]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ef      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d14a      	bne.n	8004290 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d111      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004200:	4b26      	ldr	r3, [pc, #152]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6892      	ldr	r2, [r2, #8]
 8004210:	0211      	lsls	r1, r2, #8
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68d2      	ldr	r2, [r2, #12]
 8004216:	0912      	lsrs	r2, r2, #4
 8004218:	0452      	lsls	r2, r2, #17
 800421a:	430a      	orrs	r2, r1
 800421c:	491f      	ldr	r1, [pc, #124]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	614b      	str	r3, [r1, #20]
 8004222:	e011      	b.n	8004248 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800422c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	0211      	lsls	r1, r2, #8
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6912      	ldr	r2, [r2, #16]
 800423a:	0852      	lsrs	r2, r2, #1
 800423c:	3a01      	subs	r2, #1
 800423e:	0652      	lsls	r2, r2, #25
 8004240:	430a      	orrs	r2, r1
 8004242:	4916      	ldr	r1, [pc, #88]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd f926 	bl	80014a4 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800425c:	f7fd f922 	bl	80014a4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
          break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4904      	ldr	r1, [pc, #16]	; (800429c <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000

080042a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e049      	b.n	8004346 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc fddc 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 fbe8 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d001      	beq.n	8004368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e04f      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_TIM_Base_Start_IT+0xc4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01d      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d018      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <HAL_TIM_Base_Start_IT+0xc8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_TIM_Base_Start_IT+0xcc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <HAL_TIM_Base_Start_IT+0xd4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIM_Base_Start_IT+0x76>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_TIM_Base_Start_IT+0xd8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d115      	bne.n	80043f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_TIM_Base_Start_IT+0xdc>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d015      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0xb4>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043de:	d011      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	e008      	b.n	8004404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e000      	b.n	8004406 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40000c00 	.word	0x40000c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40014000 	.word	0x40014000
 800442c:	00010007 	.word	0x00010007

08004430 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e097      	b.n	8004574 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fc fd49 	bl	8000ef0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f000 fb15 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4313      	orrs	r3, r2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044d0:	f023 030c 	bic.w	r3, r3, #12
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	4313      	orrs	r3, r2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	031b      	lsls	r3, r3, #12
 8004500:	4313      	orrs	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	4313      	orrs	r3, r2
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004594:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800459c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b2:	7b7b      	ldrb	r3, [r7, #13]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e069      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045cc:	e031      	b.n	8004632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d110      	bne.n	80045f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d4:	7bbb      	ldrb	r3, [r7, #14]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d102      	bne.n	80045e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045da:	7b3b      	ldrb	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e055      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f4:	e01d      	b.n	8004632 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d108      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	7b7b      	ldrb	r3, [r7, #13]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004608:	7b3b      	ldrb	r3, [r7, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e03e      	b.n	8004690 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_TIM_Encoder_Start+0xc4>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d008      	beq.n	8004650 <HAL_TIM_Encoder_Start+0xd4>
 800463e:	e00f      	b.n	8004660 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	2100      	movs	r1, #0
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fb67 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 800464e:	e016      	b.n	800467e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	2104      	movs	r1, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fb5f 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 800465e:	e00e      	b.n	800467e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2201      	movs	r2, #1
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fb57 	bl	8004d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	2104      	movs	r1, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb50 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 800467c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0202 	mvn.w	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f9cb 	bl	8004a76 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f9bd 	bl	8004a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f9ce 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9a1 	bl	8004a76 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f993 	bl	8004a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f9a4 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f977 	bl	8004a76 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f969 	bl	8004a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f97a 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f94d 	bl	8004a76 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f93f 	bl	8004a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f950 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0201 	mvn.w	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fc f87e 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb22 	bl	8004e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d10e      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	d107      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fb15 	bl	8004ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d10e      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f8fe 	bl	8004a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d10e      	bne.n	80048ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0220 	mvn.w	r2, #32
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fad5 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_ConfigClockSource+0x18>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0b5      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x184>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004910:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004918:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d03e      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xd4>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	f200 8087 	bhi.w	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	f000 8085 	beq.w	8004a46 <HAL_TIM_ConfigClockSource+0x170>
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d87f      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004942:	2b70      	cmp	r3, #112	; 0x70
 8004944:	d01a      	beq.n	800497c <HAL_TIM_ConfigClockSource+0xa6>
 8004946:	2b70      	cmp	r3, #112	; 0x70
 8004948:	d87b      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800494a:	2b60      	cmp	r3, #96	; 0x60
 800494c:	d050      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x11a>
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d877      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004952:	2b50      	cmp	r3, #80	; 0x50
 8004954:	d03c      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xfa>
 8004956:	2b50      	cmp	r3, #80	; 0x50
 8004958:	d873      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d058      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x13a>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d86f      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d064      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d86b      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d060      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d867      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d05c      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 8004976:	2b10      	cmp	r3, #16
 8004978:	d05a      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800497a:	e062      	b.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f000 f9a6 	bl	8004cdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800499e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e04e      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f000 f98f 	bl	8004cdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e03b      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	f000 f903 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2150      	movs	r1, #80	; 0x50
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f95c 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 80049ee:	e02b      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f000 f922 	bl	8004c46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2160      	movs	r1, #96	; 0x60
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f94c 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004a0e:	e01b      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f000 f8e3 	bl	8004be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2140      	movs	r1, #64	; 0x40
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f93c 	bl	8004ca6 <TIM_ITRx_SetConfig>
      break;
 8004a2e:	e00b      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 f933 	bl	8004ca6 <TIM_ITRx_SetConfig>
        break;
 8004a40:	e002      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <TIM_Base_SetConfig+0x114>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d00f      	beq.n	8004af4 <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3d      	ldr	r2, [pc, #244]	; (8004bcc <TIM_Base_SetConfig+0x118>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <TIM_Base_SetConfig+0x11c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_Base_SetConfig+0x40>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <TIM_Base_SetConfig+0x120>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3a      	ldr	r2, [pc, #232]	; (8004bd8 <TIM_Base_SetConfig+0x124>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2f      	ldr	r2, [pc, #188]	; (8004bc8 <TIM_Base_SetConfig+0x114>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d01b      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <TIM_Base_SetConfig+0x118>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d017      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	; (8004bd0 <TIM_Base_SetConfig+0x11c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <TIM_Base_SetConfig+0x120>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <TIM_Base_SetConfig+0x124>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <TIM_Base_SetConfig+0x128>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <TIM_Base_SetConfig+0x12c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0x9a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <TIM_Base_SetConfig+0x130>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <TIM_Base_SetConfig+0x128>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0xf8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <TIM_Base_SetConfig+0x12c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0xf8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <TIM_Base_SetConfig+0x130>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40013400 	.word	0x40013400
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0210 	bic.w	r2, r3, #16
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	031b      	lsls	r3, r3, #12
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	621a      	str	r2, [r3, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f043 0307 	orr.w	r3, r3, #7
 8004cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2201      	movs	r2, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e068      	b.n	8004e52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01d      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d018      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10c      	bne.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40014000 	.word	0x40014000

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	f107 001c 	add.w	r0, r7, #28
 8004ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 f9ce 	bl	8006274 <USB_CoreReset>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
 8004eee:	e005      	b.n	8004efc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr

08004f0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d165      	bne.n	8004fec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a3e      	ldr	r2, [pc, #248]	; (800501c <USB_SetTurnaroundTime+0x110>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d906      	bls.n	8004f36 <USB_SetTurnaroundTime+0x2a>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <USB_SetTurnaroundTime+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f30:	230f      	movs	r3, #15
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e05c      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a39      	ldr	r2, [pc, #228]	; (8005020 <USB_SetTurnaroundTime+0x114>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d306      	bcc.n	8004f4c <USB_SetTurnaroundTime+0x40>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a38      	ldr	r2, [pc, #224]	; (8005024 <USB_SetTurnaroundTime+0x118>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d202      	bcs.n	8004f4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f46:	230e      	movs	r3, #14
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e051      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	; (8005024 <USB_SetTurnaroundTime+0x118>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d306      	bcc.n	8004f62 <USB_SetTurnaroundTime+0x56>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <USB_SetTurnaroundTime+0x11c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d202      	bcs.n	8004f62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e046      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a30      	ldr	r2, [pc, #192]	; (8005028 <USB_SetTurnaroundTime+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d306      	bcc.n	8004f78 <USB_SetTurnaroundTime+0x6c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f72:	230c      	movs	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e03b      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a2c      	ldr	r2, [pc, #176]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d906      	bls.n	8004f8e <USB_SetTurnaroundTime+0x82>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a2b      	ldr	r2, [pc, #172]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d802      	bhi.n	8004f8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f88:	230b      	movs	r3, #11
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e030      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d906      	bls.n	8004fa4 <USB_SetTurnaroundTime+0x98>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d802      	bhi.n	8004fa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e025      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a23      	ldr	r2, [pc, #140]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0xae>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a22      	ldr	r2, [pc, #136]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e01a      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d306      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d802      	bhi.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fca:	2308      	movs	r3, #8
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e00f      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a1a      	ldr	r2, [pc, #104]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d906      	bls.n	8004fe6 <USB_SetTurnaroundTime+0xda>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <USB_SetTurnaroundTime+0x134>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d202      	bcs.n	8004fe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e004      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e001      	b.n	8004ff0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fec:	2309      	movs	r3, #9
 8004fee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	029b      	lsls	r3, r3, #10
 8005004:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	00d8acbf 	.word	0x00d8acbf
 8005020:	00e4e1c0 	.word	0x00e4e1c0
 8005024:	00f42400 	.word	0x00f42400
 8005028:	01067380 	.word	0x01067380
 800502c:	011a499f 	.word	0x011a499f
 8005030:	01312cff 	.word	0x01312cff
 8005034:	014ca43f 	.word	0x014ca43f
 8005038:	016e3600 	.word	0x016e3600
 800503c:	01a6ab1f 	.word	0x01a6ab1f
 8005040:	01e84800 	.word	0x01e84800

08005044 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d106      	bne.n	80050b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e00b      	b.n	80050cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	e001      	b.n	80050cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e003      	b.n	80050d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050cc:	2032      	movs	r0, #50	; 0x32
 80050ce:	f7fc f9f5 	bl	80014bc <HAL_Delay>

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e009      	b.n	8005110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3340      	adds	r3, #64	; 0x40
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0e      	cmp	r3, #14
 8005114:	d9f2      	bls.n	80050fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11c      	bne.n	8005156 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e005      	b.n	8005162 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005168:	461a      	mov	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	4619      	mov	r1, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	461a      	mov	r2, r3
 800517e:	680b      	ldr	r3, [r1, #0]
 8005180:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005182:	2103      	movs	r1, #3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f93d 	bl	8005404 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800518a:	2110      	movs	r1, #16
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8f1 	bl	8005374 <USB_FlushTxFifo>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f90f 	bl	80053c0 <USB_FlushRxFifo>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	461a      	mov	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	e043      	b.n	800525e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ec:	d118      	bne.n	8005220 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e013      	b.n	8005232 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e008      	b.n	8005232 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	461a      	mov	r2, r3
 8005240:	2300      	movs	r3, #0
 8005242:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	461a      	mov	r2, r3
 8005252:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	3301      	adds	r3, #1
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	429a      	cmp	r2, r3
 8005264:	d3b7      	bcc.n	80051d6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e043      	b.n	80052f4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005282:	d118      	bne.n	80052b6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	461a      	mov	r2, r3
 8005298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e013      	b.n	80052c8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	461a      	mov	r2, r3
 80052ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e008      	b.n	80052c8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	461a      	mov	r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	2300      	movs	r3, #0
 80052d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	461a      	mov	r2, r3
 80052e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3301      	adds	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3b7      	bcc.n	800526c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800531c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f043 0210 	orr.w	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	4b10      	ldr	r3, [pc, #64]	; (8005370 <USB_DevInit+0x294>)
 8005330:	4313      	orrs	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f043 0208 	orr.w	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d107      	bne.n	800535e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536a:	b004      	add	sp, #16
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	803c3800 	.word	0x803c3800

08005374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	019b      	lsls	r3, r3, #6
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <USB_FlushTxFifo+0x48>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d0f0      	beq.n	800538e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	00030d40 	.word	0x00030d40

080053c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2210      	movs	r2, #16
 80053d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <USB_FlushRxFifo+0x40>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e006      	b.n	80053f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d0f0      	beq.n	80053d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	00030d40 	.word	0x00030d40

08005404 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0306 	and.w	r3, r3, #6
 800544e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d002      	beq.n	800545c <USB_GetDevSpeed+0x26>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b06      	cmp	r3, #6
 800545a:	d102      	bne.n	8005462 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800545c:	2302      	movs	r3, #2
 800545e:	75fb      	strb	r3, [r7, #23]
 8005460:	e001      	b.n	8005466 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005462:	230f      	movs	r3, #15
 8005464:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d13a      	bne.n	8005506 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	68f9      	ldr	r1, [r7, #12]
 80054aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d155      	bne.n	8005574 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	059b      	lsls	r3, r3, #22
 80054ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e036      	b.n	8005574 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	2101      	movs	r1, #1
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11a      	bne.n	8005574 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800555a:	430b      	orrs	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d161      	bne.n	8005664 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b6:	d11f      	bne.n	80055f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005618:	4013      	ands	r3, r2
 800561a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f303 	lsl.w	r3, r1, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4013      	ands	r3, r2
 800563e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	440b      	add	r3, r1
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	4619      	mov	r1, r3
 800565c:	4b35      	ldr	r3, [pc, #212]	; (8005734 <USB_DeactivateEndpoint+0x1b0>)
 800565e:	4013      	ands	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
 8005662:	e060      	b.n	8005726 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d11f      	bne.n	80056bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800569a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	43db      	mvns	r3, r3
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4013      	ands	r3, r2
 80056de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	43db      	mvns	r3, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4013      	ands	r3, r2
 8005702:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	0159      	lsls	r1, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	440b      	add	r3, r1
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	4619      	mov	r1, r3
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <USB_DeactivateEndpoint+0x1b4>)
 8005722:	4013      	ands	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	ec337800 	.word	0xec337800
 8005738:	eff37800 	.word	0xeff37800

0800573c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 810a 	bne.w	800596e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	0cdb      	lsrs	r3, r3, #19
 80057c2:	04db      	lsls	r3, r3, #19
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e074      	b.n	80058b2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6959      	ldr	r1, [r3, #20]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	440b      	add	r3, r1
 8005824:	1e59      	subs	r1, r3, #1
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	fbb1 f3f3 	udiv	r3, r1, r3
 800582e:	04d9      	lsls	r1, r3, #19
 8005830:	4baf      	ldr	r3, [pc, #700]	; (8005af0 <USB_EPStartXfer+0x3b4>)
 8005832:	400b      	ands	r3, r1
 8005834:	6939      	ldr	r1, [r7, #16]
 8005836:	0148      	lsls	r0, r1, #5
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	4401      	add	r1, r0
 800583c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	6939      	ldr	r1, [r7, #16]
 800585c:	0148      	lsls	r0, r1, #5
 800585e:	6979      	ldr	r1, [r7, #20]
 8005860:	4401      	add	r1, r0
 8005862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d11f      	bne.n	80058b2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d015      	beq.n	8005906 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8100 	beq.w	8005ae4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005900:	4313      	orrs	r3, r2
 8005902:	634b      	str	r3, [r1, #52]	; 0x34
 8005904:	e0ee      	b.n	8005ae4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d110      	bne.n	8005938 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	440a      	add	r2, r1
 800592c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e00f      	b.n	8005958 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005956:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68d9      	ldr	r1, [r3, #12]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	b29b      	uxth	r3, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9e2 	bl	8005d30 <USB_WritePacket>
 800596c:	e0ba      	b.n	8005ae4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	0cdb      	lsrs	r3, r3, #19
 800598a:	04db      	lsls	r3, r3, #19
 800598c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d123      	bne.n	8005a02 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	0148      	lsls	r0, r1, #5
 80059d4:	6979      	ldr	r1, [r7, #20]
 80059d6:	4401      	add	r1, r0
 80059d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059dc:	4313      	orrs	r3, r2
 80059de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fe:	6113      	str	r3, [r2, #16]
 8005a00:	e033      	b.n	8005a6a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	89fb      	ldrh	r3, [r7, #14]
 8005a28:	04d9      	lsls	r1, r3, #19
 8005a2a:	4b31      	ldr	r3, [pc, #196]	; (8005af0 <USB_EPStartXfer+0x3b4>)
 8005a2c:	400b      	ands	r3, r1
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	0148      	lsls	r0, r1, #5
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	4401      	add	r1, r0
 8005a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	89f9      	ldrh	r1, [r7, #14]
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5a:	6939      	ldr	r1, [r7, #16]
 8005a5c:	0148      	lsls	r0, r1, #5
 8005a5e:	6979      	ldr	r1, [r7, #20]
 8005a60:	4401      	add	r1, r0
 8005a62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a66:	4313      	orrs	r3, r2
 8005a68:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d128      	bne.n	8005ac4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d110      	bne.n	8005aa4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e00f      	b.n	8005ac4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	1ff80000 	.word	0x1ff80000

08005af4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	f040 80ab 	bne.w	8005c68 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d132      	bne.n	8005b80 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	0cdb      	lsrs	r3, r3, #19
 8005b7a:	04db      	lsls	r3, r3, #19
 8005b7c:	6113      	str	r3, [r2, #16]
 8005b7e:	e04e      	b.n	8005c1e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	0cdb      	lsrs	r3, r3, #19
 8005b9c:	04db      	lsls	r3, r3, #19
 8005b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d903      	bls.n	8005bd8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	0148      	lsls	r0, r1, #5
 8005c12:	68f9      	ldr	r1, [r7, #12]
 8005c14:	4401      	add	r1, r0
 8005c16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d06d      	beq.n	8005d22 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	2101      	movs	r1, #1
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c62:	4313      	orrs	r3, r2
 8005c64:	634b      	str	r3, [r1, #52]	; 0x34
 8005c66:	e05c      	b.n	8005d22 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c82:	0cdb      	lsrs	r3, r3, #19
 8005c84:	04db      	lsls	r3, r3, #19
 8005c86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ca6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005caa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	0148      	lsls	r0, r1, #5
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	4401      	add	r1, r0
 8005cfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	460b      	mov	r3, r1
 8005d40:	71fb      	strb	r3, [r7, #7]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005d4e:	88bb      	ldrh	r3, [r7, #4]
 8005d50:	3303      	adds	r3, #3
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e00f      	b.n	8005d7c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	031a      	lsls	r2, r3, #12
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	461a      	mov	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3304      	adds	r3, #4
 8005d74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d3eb      	bcc.n	8005d5c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3724      	adds	r7, #36	; 0x24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b089      	sub	sp, #36	; 0x24
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	3303      	adds	r3, #3
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	e00b      	b.n	8005dce <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d3ef      	bcc.n	8005db6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3724      	adds	r7, #36	; 0x24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d12c      	bne.n	8005e5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db12      	blt.n	8005e38 <USB_EPSetStall+0x54>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00f      	beq.n	8005e38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e02b      	b.n	8005eb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	db12      	blt.n	8005e92 <USB_EPSetStall+0xae>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00f      	beq.n	8005e92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d128      	bne.n	8005f2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005efa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d003      	beq.n	8005f0c <USB_EPClearStall+0x4c>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d138      	bne.n	8005f7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e027      	b.n	8005f7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	78db      	ldrb	r3, [r3, #3]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d003      	beq.n	8005f5e <USB_EPClearStall+0x9e>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	78db      	ldrb	r3, [r3, #3]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d10f      	bne.n	8005f7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005faa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fc0:	68f9      	ldr	r1, [r7, #12]
 8005fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006006:	f023 0302 	bic.w	r3, r3, #2
 800600a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	4013      	ands	r3, r2
 80060a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	0c1b      	lsrs	r3, r3, #16
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	b29b      	uxth	r3, r3
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006118:	68bb      	ldr	r3, [r7, #8]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006126:	b480      	push	{r7}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006148:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	b2db      	uxtb	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4013      	ands	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006174:	68bb      	ldr	r3, [r7, #8]
}
 8006176:	4618      	mov	r0, r3
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0301 	and.w	r3, r3, #1
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	333c      	adds	r3, #60	; 0x3c
 80061f6:	3304      	adds	r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <USB_EP0_OutStart+0x8c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d90a      	bls.n	800621a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d101      	bne.n	800621a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e024      	b.n	8006264 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006238:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006248:	f043 0318 	orr.w	r3, r3, #24
 800624c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006260:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	4f54300a 	.word	0x4f54300a

08006274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <USB_CoreReset+0x64>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e01b      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	daf2      	bge.n	8006280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f043 0201 	orr.w	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <USB_CoreReset+0x64>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d0f0      	beq.n	80062aa <USB_CoreReset+0x36>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	00030d40 	.word	0x00030d40

080062dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062ec:	f005 f89e 	bl	800b42c <USBD_static_malloc>
 80062f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006300:	2302      	movs	r3, #2
 8006302:	e066      	b.n	80063d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7c1b      	ldrb	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d119      	bne.n	8006348 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006318:	2202      	movs	r2, #2
 800631a:	2181      	movs	r1, #129	; 0x81
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f004 fe71 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800632c:	2202      	movs	r2, #2
 800632e:	2101      	movs	r1, #1
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f004 fe67 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2210      	movs	r2, #16
 8006342:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006346:	e016      	b.n	8006376 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	2202      	movs	r2, #2
 800634c:	2181      	movs	r1, #129	; 0x81
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f004 fe58 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	2202      	movs	r2, #2
 800635e:	2101      	movs	r1, #1
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f004 fe4f 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2210      	movs	r2, #16
 8006372:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006376:	2308      	movs	r3, #8
 8006378:	2203      	movs	r2, #3
 800637a:	2182      	movs	r1, #130	; 0x82
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f004 fe41 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7c1b      	ldrb	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b6:	2101      	movs	r1, #1
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f004 ff9d 	bl	800b2f8 <USBD_LL_PrepareReceive>
 80063be:	e007      	b.n	80063d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	2101      	movs	r1, #1
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f004 ff94 	bl	800b2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063e6:	2181      	movs	r1, #129	; 0x81
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f004 fe49 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063f4:	2101      	movs	r1, #1
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f004 fe42 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006404:	2182      	movs	r1, #130	; 0x82
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f004 fe3a 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00e      	beq.n	8006444 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006436:	4618      	mov	r0, r3
 8006438:	f005 f806 	bl	800b448 <USBD_static_free>
    pdev->pClassData = NULL;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006460:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e0af      	b.n	80065d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03f      	beq.n	8006504 <USBD_CDC_Setup+0xb4>
 8006484:	2b20      	cmp	r3, #32
 8006486:	f040 809f 	bne.w	80065c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d02e      	beq.n	80064f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	b25b      	sxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	da16      	bge.n	80064ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80064a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	88d2      	ldrh	r2, [r2, #6]
 80064ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	bf28      	it	cs
 80064b8:	2307      	movcs	r3, #7
 80064ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	89fa      	ldrh	r2, [r7, #14]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fb43 	bl	8007b4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80064c8:	e085      	b.n	80065d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785a      	ldrb	r2, [r3, #1]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	88db      	ldrh	r3, [r3, #6]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80064e0:	6939      	ldr	r1, [r7, #16]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	88db      	ldrh	r3, [r3, #6]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fb5c 	bl	8007ba6 <USBD_CtlPrepareRx>
      break;
 80064ee:	e072      	b.n	80065d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	7850      	ldrb	r0, [r2, #1]
 80064fc:	2200      	movs	r2, #0
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	4798      	blx	r3
      break;
 8006502:	e068      	b.n	80065d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b0b      	cmp	r3, #11
 800650a:	d852      	bhi.n	80065b2 <USBD_CDC_Setup+0x162>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <USBD_CDC_Setup+0xc4>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006545 	.word	0x08006545
 8006518:	080065c1 	.word	0x080065c1
 800651c:	080065b3 	.word	0x080065b3
 8006520:	080065b3 	.word	0x080065b3
 8006524:	080065b3 	.word	0x080065b3
 8006528:	080065b3 	.word	0x080065b3
 800652c:	080065b3 	.word	0x080065b3
 8006530:	080065b3 	.word	0x080065b3
 8006534:	080065b3 	.word	0x080065b3
 8006538:	080065b3 	.word	0x080065b3
 800653c:	0800656f 	.word	0x0800656f
 8006540:	08006599 	.word	0x08006599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b03      	cmp	r3, #3
 800654e:	d107      	bne.n	8006560 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006550:	f107 030a 	add.w	r3, r7, #10
 8006554:	2202      	movs	r2, #2
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 faf8 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800655e:	e032      	b.n	80065c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fa82 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006568:	2303      	movs	r3, #3
 800656a:	75fb      	strb	r3, [r7, #23]
          break;
 800656c:	e02b      	b.n	80065c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d107      	bne.n	800658a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800657a:	f107 030d 	add.w	r3, r7, #13
 800657e:	2201      	movs	r2, #1
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fae3 	bl	8007b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006588:	e01d      	b.n	80065c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fa6d 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 8006592:	2303      	movs	r3, #3
 8006594:	75fb      	strb	r3, [r7, #23]
          break;
 8006596:	e016      	b.n	80065c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d00f      	beq.n	80065c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fa60 	bl	8007a6c <USBD_CtlError>
            ret = USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065b0:	e008      	b.n	80065c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fa59 	bl	8007a6c <USBD_CtlError>
          ret = USBD_FAIL;
 80065ba:	2303      	movs	r3, #3
 80065bc:	75fb      	strb	r3, [r7, #23]
          break;
 80065be:	e002      	b.n	80065c6 <USBD_CDC_Setup+0x176>
          break;
 80065c0:	bf00      	nop
 80065c2:	e008      	b.n	80065d6 <USBD_CDC_Setup+0x186>
          break;
 80065c4:	bf00      	nop
      }
      break;
 80065c6:	e006      	b.n	80065d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fa4e 	bl	8007a6c <USBD_CtlError>
      ret = USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	e04f      	b.n	80066a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006608:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800660a:	78fa      	ldrb	r2, [r7, #3]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	3318      	adds	r3, #24
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d029      	beq.n	8006674 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3318      	adds	r3, #24
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	78f9      	ldrb	r1, [r7, #3]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	460b      	mov	r3, r1
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	1a5b      	subs	r3, r3, r1
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4403      	add	r3, r0
 8006640:	3344      	adds	r3, #68	; 0x44
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	fbb2 f1f3 	udiv	r1, r2, r3
 8006648:	fb03 f301 	mul.w	r3, r3, r1
 800664c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d110      	bne.n	8006674 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	3318      	adds	r3, #24
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006666:	78f9      	ldrb	r1, [r7, #3]
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f004 fe0b 	bl	800b288 <USBD_LL_Transmit>
 8006672:	e015      	b.n	80066a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800669c:	78fa      	ldrb	r2, [r7, #3]
 800669e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e015      	b.n	80066f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f004 fe49 	bl	800b368 <USBD_LL_GetRxDataSize>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066f2:	4611      	mov	r1, r2
 80066f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800670e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006716:	2303      	movs	r3, #3
 8006718:	e01b      	b.n	8006752 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <USBD_CDC_EP0_RxReady+0x50>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800672a:	2bff      	cmp	r3, #255	; 0xff
 800672c:	d010      	beq.n	8006750 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800673c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006744:	b292      	uxth	r2, r2
 8006746:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2243      	movs	r2, #67	; 0x43
 8006768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000098 	.word	0x20000098

0800677c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2243      	movs	r2, #67	; 0x43
 8006788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800678a:	4b03      	ldr	r3, [pc, #12]	; (8006798 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20000054 	.word	0x20000054

0800679c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2243      	movs	r2, #67	; 0x43
 80067a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	200000dc 	.word	0x200000dc

080067bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	220a      	movs	r2, #10
 80067c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	20000010 	.word	0x20000010

080067dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e004      	b.n	80067fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006818:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e008      	b.n	8006836 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006852:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	e004      	b.n	8006868 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006882:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006892:	2303      	movs	r3, #3
 8006894:	e01a      	b.n	80068cc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800689c:	2b00      	cmp	r3, #0
 800689e:	d114      	bne.n	80068ca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068be:	2181      	movs	r1, #129	; 0x81
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 fce1 	bl	800b288 <USBD_LL_Transmit>

    ret = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e016      	b.n	8006920 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c1b      	ldrb	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f004 fcf6 	bl	800b2f8 <USBD_LL_PrepareReceive>
 800690c:	e007      	b.n	800691e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	2101      	movs	r1, #1
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f004 fced 	bl	800b2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800693c:	2303      	movs	r3, #3
 800693e:	e01f      	b.n	8006980 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	79fa      	ldrb	r2, [r7, #7]
 8006972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f004 fac7 	bl	800af08 <USBD_LL_Init>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	e016      	b.n	80069ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	f107 020e 	add.w	r2, r7, #14
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	4602      	mov	r2, r0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f004 fade 	bl	800afa0 <USBD_LL_Start>
 80069e4:	4603      	mov	r3, r0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
  }

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 ffba 	bl	80079f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a92:	461a      	mov	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d01a      	beq.n	8006ade <USBD_LL_SetupStage+0x72>
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d822      	bhi.n	8006af2 <USBD_LL_SetupStage+0x86>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <USBD_LL_SetupStage+0x4a>
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00a      	beq.n	8006aca <USBD_LL_SetupStage+0x5e>
 8006ab4:	e01d      	b.n	8006af2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa62 	bl	8006f88 <USBD_StdDevReq>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	e020      	b.n	8006b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fac6 	bl	8007064 <USBD_StdItfReq>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e016      	b.n	8006b0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fb05 	bl	80070f6 <USBD_StdEPReq>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e00c      	b.n	8006b0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006af8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f004 faf3 	bl	800b0ec <USBD_LL_StallEP>
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0a:	bf00      	nop
  }

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d138      	bne.n	8006b9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d14a      	bne.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d913      	bls.n	8006b70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	bf28      	it	cs
 8006b62:	4613      	movcs	r3, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 f839 	bl	8007be0 <USBD_CtlContinueRx>
 8006b6e:	e030      	b.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d10b      	bne.n	8006b94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f001 f834 	bl	8007c02 <USBD_CtlSendStatus>
 8006b9a:	e01a      	b.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d114      	bne.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	7afa      	ldrb	r2, [r7, #11]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	4798      	blx	r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	e000      	b.n	8006bd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	460b      	mov	r3, r1
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d16b      	bne.n	8006cc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d156      	bne.n	8006cae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d914      	bls.n	8006c36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 ffae 	bl	8007b84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f004 fb62 	bl	800b2f8 <USBD_LL_PrepareReceive>
 8006c34:	e03b      	b.n	8006cae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d11c      	bne.n	8006c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d316      	bcc.n	8006c7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d20f      	bcs.n	8006c7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 ff8f 	bl	8007b84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f004 fb3f 	bl	800b2f8 <USBD_LL_PrepareReceive>
 8006c7a:	e018      	b.n	8006cae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d10b      	bne.n	8006ca0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ca0:	2180      	movs	r1, #128	; 0x80
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f004 fa22 	bl	800b0ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 ffbd 	bl	8007c28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d122      	bne.n	8006cfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fe98 	bl	80069ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cc6:	e01a      	b.n	8006cfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d114      	bne.n	8006cfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00e      	beq.n	8006cfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	7afa      	ldrb	r2, [r7, #11]
 8006cea:	4611      	mov	r1, r2
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	4798      	blx	r3
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	e000      	b.n	8006d00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e02f      	b.n	8006d9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00f      	beq.n	8006d66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6852      	ldr	r2, [r2, #4]
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	4611      	mov	r1, r2
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 f949 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2240      	movs	r2, #64	; 0x40
 8006d7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d82:	2340      	movs	r3, #64	; 0x40
 8006d84:	2200      	movs	r2, #0
 8006d86:	2180      	movs	r1, #128	; 0x80
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f004 f93b 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2240      	movs	r2, #64	; 0x40
 8006d98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	d106      	bne.n	8006e12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e012      	b.n	8006e5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d10b      	bne.n	8006e5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e014      	b.n	8006ea8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d10d      	bne.n	8006ea6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e014      	b.n	8006ef4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d10d      	bne.n	8006ef2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d009      	beq.n	8006f40 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6852      	ldr	r2, [r2, #4]
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b087      	sub	sp, #28
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f68:	8a3b      	ldrh	r3, [r7, #16]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	b21a      	sxth	r2, r3
 8006f6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f78:	89fb      	ldrh	r3, [r7, #14]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f9e:	2b40      	cmp	r3, #64	; 0x40
 8006fa0:	d005      	beq.n	8006fae <USBD_StdDevReq+0x26>
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d853      	bhi.n	800704e <USBD_StdDevReq+0xc6>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <USBD_StdDevReq+0x3a>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d14f      	bne.n	800704e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc0:	e04a      	b.n	8007058 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b09      	cmp	r3, #9
 8006fc8:	d83b      	bhi.n	8007042 <USBD_StdDevReq+0xba>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <USBD_StdDevReq+0x48>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007043 	.word	0x08007043
 8006fdc:	0800702f 	.word	0x0800702f
 8006fe0:	08007043 	.word	0x08007043
 8006fe4:	08007003 	.word	0x08007003
 8006fe8:	08006ff9 	.word	0x08006ff9
 8006fec:	08007043 	.word	0x08007043
 8006ff0:	0800701b 	.word	0x0800701b
 8006ff4:	0800700d 	.word	0x0800700d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f9de 	bl	80073bc <USBD_GetDescriptor>
          break;
 8007000:	e024      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fb6d 	bl	80076e4 <USBD_SetAddress>
          break;
 800700a:	e01f      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fbac 	bl	800776c <USBD_SetConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]
          break;
 8007018:	e018      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc4b 	bl	80078b8 <USBD_GetConfig>
          break;
 8007022:	e013      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fc7c 	bl	8007924 <USBD_GetStatus>
          break;
 800702c:	e00e      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fcab 	bl	800798c <USBD_SetFeature>
          break;
 8007036:	e009      	b.n	800704c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fcba 	bl	80079b4 <USBD_ClrFeature>
          break;
 8007040:	e004      	b.n	800704c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fd11 	bl	8007a6c <USBD_CtlError>
          break;
 800704a:	bf00      	nop
      }
      break;
 800704c:	e004      	b.n	8007058 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fd0b 	bl	8007a6c <USBD_CtlError>
      break;
 8007056:	bf00      	nop
  }

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop

08007064 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800707a:	2b40      	cmp	r3, #64	; 0x40
 800707c:	d005      	beq.n	800708a <USBD_StdItfReq+0x26>
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d82f      	bhi.n	80070e2 <USBD_StdItfReq+0x7e>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <USBD_StdItfReq+0x26>
 8007086:	2b20      	cmp	r3, #32
 8007088:	d12b      	bne.n	80070e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007090:	b2db      	uxtb	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	2b02      	cmp	r3, #2
 8007096:	d81d      	bhi.n	80070d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	889b      	ldrh	r3, [r3, #4]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d813      	bhi.n	80070ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d110      	bne.n	80070de <USBD_StdItfReq+0x7a>
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10d      	bne.n	80070de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fd9d 	bl	8007c02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070c8:	e009      	b.n	80070de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fccd 	bl	8007a6c <USBD_CtlError>
          break;
 80070d2:	e004      	b.n	80070de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fcc8 	bl	8007a6c <USBD_CtlError>
          break;
 80070dc:	e000      	b.n	80070e0 <USBD_StdItfReq+0x7c>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fcc1 	bl	8007a6c <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	889b      	ldrh	r3, [r3, #4]
 8007108:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d007      	beq.n	8007126 <USBD_StdEPReq+0x30>
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	f200 8145 	bhi.w	80073a6 <USBD_StdEPReq+0x2b0>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <USBD_StdEPReq+0x44>
 8007120:	2b20      	cmp	r3, #32
 8007122:	f040 8140 	bne.w	80073a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e13a      	b.n	80073b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d007      	beq.n	8007152 <USBD_StdEPReq+0x5c>
 8007142:	2b03      	cmp	r3, #3
 8007144:	f300 8129 	bgt.w	800739a <USBD_StdEPReq+0x2a4>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d07f      	beq.n	800724c <USBD_StdEPReq+0x156>
 800714c:	2b01      	cmp	r3, #1
 800714e:	d03c      	beq.n	80071ca <USBD_StdEPReq+0xd4>
 8007150:	e123      	b.n	800739a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBD_StdEPReq+0x6e>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d016      	beq.n	8007190 <USBD_StdEPReq+0x9a>
 8007162:	e02c      	b.n	80071be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <USBD_StdEPReq+0x90>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d00a      	beq.n	8007186 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f003 ffb9 	bl	800b0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800717a:	2180      	movs	r1, #128	; 0x80
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f003 ffb5 	bl	800b0ec <USBD_LL_StallEP>
 8007182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007184:	e020      	b.n	80071c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fc6f 	bl	8007a6c <USBD_CtlError>
              break;
 800718e:	e01b      	b.n	80071c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	885b      	ldrh	r3, [r3, #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10e      	bne.n	80071b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <USBD_StdEPReq+0xc0>
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d008      	beq.n	80071b6 <USBD_StdEPReq+0xc0>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	88db      	ldrh	r3, [r3, #6]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f003 ff9b 	bl	800b0ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd23 	bl	8007c02 <USBD_CtlSendStatus>

              break;
 80071bc:	e004      	b.n	80071c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc53 	bl	8007a6c <USBD_CtlError>
              break;
 80071c6:	bf00      	nop
          }
          break;
 80071c8:	e0ec      	b.n	80073a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d002      	beq.n	80071dc <USBD_StdEPReq+0xe6>
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d016      	beq.n	8007208 <USBD_StdEPReq+0x112>
 80071da:	e030      	b.n	800723e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <USBD_StdEPReq+0x108>
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b80      	cmp	r3, #128	; 0x80
 80071e6:	d00a      	beq.n	80071fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f003 ff7d 	bl	800b0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f2:	2180      	movs	r1, #128	; 0x80
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f003 ff79 	bl	800b0ec <USBD_LL_StallEP>
 80071fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071fc:	e025      	b.n	800724a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc33 	bl	8007a6c <USBD_CtlError>
              break;
 8007206:	e020      	b.n	800724a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11b      	bne.n	8007248 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f003 ff9a 	bl	800b158 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fcec 	bl	8007c02 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800723c:	e004      	b.n	8007248 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc13 	bl	8007a6c <USBD_CtlError>
              break;
 8007246:	e000      	b.n	800724a <USBD_StdEPReq+0x154>
              break;
 8007248:	bf00      	nop
          }
          break;
 800724a:	e0ab      	b.n	80073a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d002      	beq.n	800725e <USBD_StdEPReq+0x168>
 8007258:	2b03      	cmp	r3, #3
 800725a:	d032      	beq.n	80072c2 <USBD_StdEPReq+0x1cc>
 800725c:	e097      	b.n	800738e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <USBD_StdEPReq+0x17e>
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d004      	beq.n	8007274 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fbfd 	bl	8007a6c <USBD_CtlError>
                break;
 8007272:	e091      	b.n	8007398 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da0b      	bge.n	8007294 <USBD_StdEPReq+0x19e>
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	3310      	adds	r3, #16
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	3304      	adds	r3, #4
 8007292:	e00b      	b.n	80072ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	3304      	adds	r3, #4
 80072ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2202      	movs	r2, #2
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc47 	bl	8007b4e <USBD_CtlSendData>
              break;
 80072c0:	e06a      	b.n	8007398 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da11      	bge.n	80072ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3324      	adds	r3, #36	; 0x24
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d117      	bne.n	8007314 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fbc0 	bl	8007a6c <USBD_CtlError>
                  break;
 80072ec:	e054      	b.n	8007398 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	f003 020f 	and.w	r2, r3, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d104      	bne.n	8007314 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fbad 	bl	8007a6c <USBD_CtlError>
                  break;
 8007312:	e041      	b.n	8007398 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007318:	2b00      	cmp	r3, #0
 800731a:	da0b      	bge.n	8007334 <USBD_StdEPReq+0x23e>
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	3310      	adds	r3, #16
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	e00b      	b.n	800734c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	3304      	adds	r3, #4
 800734c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <USBD_StdEPReq+0x264>
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d103      	bne.n	8007362 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e00e      	b.n	8007380 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f003 ff2c 	bl	800b1c4 <USBD_LL_IsStallEP>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e002      	b.n	8007380 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2202      	movs	r2, #2
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fbe1 	bl	8007b4e <USBD_CtlSendData>
              break;
 800738c:	e004      	b.n	8007398 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fb6b 	bl	8007a6c <USBD_CtlError>
              break;
 8007396:	bf00      	nop
          }
          break;
 8007398:	e004      	b.n	80073a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fb65 	bl	8007a6c <USBD_CtlError>
          break;
 80073a2:	bf00      	nop
      }
      break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb5f 	bl	8007a6c <USBD_CtlError>
      break;
 80073ae:	bf00      	nop
  }

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	885b      	ldrh	r3, [r3, #2]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b0e      	cmp	r3, #14
 80073de:	f200 8152 	bhi.w	8007686 <USBD_GetDescriptor+0x2ca>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USBD_GetDescriptor+0x2c>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007459 	.word	0x08007459
 80073ec:	08007471 	.word	0x08007471
 80073f0:	080074b1 	.word	0x080074b1
 80073f4:	08007687 	.word	0x08007687
 80073f8:	08007687 	.word	0x08007687
 80073fc:	08007627 	.word	0x08007627
 8007400:	08007653 	.word	0x08007653
 8007404:	08007687 	.word	0x08007687
 8007408:	08007687 	.word	0x08007687
 800740c:	08007687 	.word	0x08007687
 8007410:	08007687 	.word	0x08007687
 8007414:	08007687 	.word	0x08007687
 8007418:	08007687 	.word	0x08007687
 800741c:	08007687 	.word	0x08007687
 8007420:	08007425 	.word	0x08007425
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	7c12      	ldrb	r2, [r2, #16]
 800743c:	f107 0108 	add.w	r1, r7, #8
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007446:	e126      	b.n	8007696 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fb0e 	bl	8007a6c <USBD_CtlError>
        err++;
 8007450:	7afb      	ldrb	r3, [r7, #11]
 8007452:	3301      	adds	r3, #1
 8007454:	72fb      	strb	r3, [r7, #11]
      break;
 8007456:	e11e      	b.n	8007696 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	7c12      	ldrb	r2, [r2, #16]
 8007464:	f107 0108 	add.w	r1, r7, #8
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	60f8      	str	r0, [r7, #12]
      break;
 800746e:	e112      	b.n	8007696 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10d      	bne.n	8007494 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	f107 0208 	add.w	r2, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	2202      	movs	r2, #2
 8007490:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007492:	e100      	b.n	8007696 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f107 0208 	add.w	r2, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
      break;
 80074ae:	e0f2      	b.n	8007696 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	885b      	ldrh	r3, [r3, #2]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	f200 80ac 	bhi.w	8007614 <USBD_GetDescriptor+0x258>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <USBD_GetDescriptor+0x108>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	08007511 	.word	0x08007511
 80074cc:	08007545 	.word	0x08007545
 80074d0:	08007579 	.word	0x08007579
 80074d4:	080075ad 	.word	0x080075ad
 80074d8:	080075e1 	.word	0x080075e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fe:	e091      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fab2 	bl	8007a6c <USBD_CtlError>
            err++;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	3301      	adds	r3, #1
 800750c:	72fb      	strb	r3, [r7, #11]
          break;
 800750e:	e089      	b.n	8007624 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007532:	e077      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa98 	bl	8007a6c <USBD_CtlError>
            err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
          break;
 8007542:	e06f      	b.n	8007624 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c12      	ldrb	r2, [r2, #16]
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007566:	e05d      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa7e 	bl	8007a6c <USBD_CtlError>
            err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
          break;
 8007576:	e055      	b.n	8007624 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7c12      	ldrb	r2, [r2, #16]
 8007590:	f107 0108 	add.w	r1, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759a:	e043      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa64 	bl	8007a6c <USBD_CtlError>
            err++;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	3301      	adds	r3, #1
 80075a8:	72fb      	strb	r3, [r7, #11]
          break;
 80075aa:	e03b      	b.n	8007624 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e029      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa4a 	bl	8007a6c <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e021      	b.n	8007624 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e00f      	b.n	8007624 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa30 	bl	8007a6c <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e007      	b.n	8007624 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa28 	bl	8007a6c <USBD_CtlError>
          err++;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	3301      	adds	r3, #1
 8007620:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007622:	bf00      	nop
      }
      break;
 8007624:	e037      	b.n	8007696 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d109      	bne.n	8007642 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	f107 0208 	add.w	r2, r7, #8
 800763a:	4610      	mov	r0, r2
 800763c:	4798      	blx	r3
 800763e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007640:	e029      	b.n	8007696 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa11 	bl	8007a6c <USBD_CtlError>
        err++;
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	3301      	adds	r3, #1
 800764e:	72fb      	strb	r3, [r7, #11]
      break;
 8007650:	e021      	b.n	8007696 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7c1b      	ldrb	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10d      	bne.n	8007676 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f107 0208 	add.w	r2, r7, #8
 8007666:	4610      	mov	r0, r2
 8007668:	4798      	blx	r3
 800766a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	2207      	movs	r2, #7
 8007672:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007674:	e00f      	b.n	8007696 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9f7 	bl	8007a6c <USBD_CtlError>
        err++;
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	3301      	adds	r3, #1
 8007682:	72fb      	strb	r3, [r7, #11]
      break;
 8007684:	e007      	b.n	8007696 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9ef 	bl	8007a6c <USBD_CtlError>
      err++;
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	3301      	adds	r3, #1
 8007692:	72fb      	strb	r3, [r7, #11]
      break;
 8007694:	bf00      	nop
  }

  if (err != 0U)
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11e      	bne.n	80076da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	88db      	ldrh	r3, [r3, #6]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d016      	beq.n	80076d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80076a4:	893b      	ldrh	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00e      	beq.n	80076c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	88da      	ldrh	r2, [r3, #6]
 80076ae:	893b      	ldrh	r3, [r7, #8]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bf28      	it	cs
 80076b4:	4613      	movcs	r3, r2
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076ba:	893b      	ldrh	r3, [r7, #8]
 80076bc:	461a      	mov	r2, r3
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa44 	bl	8007b4e <USBD_CtlSendData>
 80076c6:	e009      	b.n	80076dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9ce 	bl	8007a6c <USBD_CtlError>
 80076d0:	e004      	b.n	80076dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa95 	bl	8007c02 <USBD_CtlSendStatus>
 80076d8:	e000      	b.n	80076dc <USBD_GetDescriptor+0x320>
    return;
 80076da:	bf00      	nop
  }
}
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop

080076e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	889b      	ldrh	r3, [r3, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d131      	bne.n	800775a <USBD_SetAddress+0x76>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d12d      	bne.n	800775a <USBD_SetAddress+0x76>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	885b      	ldrh	r3, [r3, #2]
 8007702:	2b7f      	cmp	r3, #127	; 0x7f
 8007704:	d829      	bhi.n	800775a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007710:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d104      	bne.n	8007728 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9a3 	bl	8007a6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	e01d      	b.n	8007764 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	7bfa      	ldrb	r2, [r7, #15]
 800772c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f003 fd71 	bl	800b21c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa61 	bl	8007c02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	e009      	b.n	8007764 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007758:	e004      	b.n	8007764 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f985 	bl	8007a6c <USBD_CtlError>
  }
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	885b      	ldrh	r3, [r3, #2]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	4b4c      	ldr	r3, [pc, #304]	; (80078b4 <USBD_SetConfig+0x148>)
 8007782:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007784:	4b4b      	ldr	r3, [pc, #300]	; (80078b4 <USBD_SetConfig+0x148>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d905      	bls.n	8007798 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f96c 	bl	8007a6c <USBD_CtlError>
    return USBD_FAIL;
 8007794:	2303      	movs	r3, #3
 8007796:	e088      	b.n	80078aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d002      	beq.n	80077aa <USBD_SetConfig+0x3e>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d025      	beq.n	80077f4 <USBD_SetConfig+0x88>
 80077a8:	e071      	b.n	800788e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077aa:	4b42      	ldr	r3, [pc, #264]	; (80078b4 <USBD_SetConfig+0x148>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01c      	beq.n	80077ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077b2:	4b40      	ldr	r3, [pc, #256]	; (80078b4 <USBD_SetConfig+0x148>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077bc:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <USBD_SetConfig+0x148>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff f91e 	bl	8006a04 <USBD_SetClassConfig>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f949 	bl	8007a6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077da:	e065      	b.n	80078a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa10 	bl	8007c02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2203      	movs	r2, #3
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077ea:	e05d      	b.n	80078a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa08 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 80077f2:	e059      	b.n	80078a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077f4:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <USBD_SetConfig+0x148>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d112      	bne.n	8007822 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007804:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <USBD_SetConfig+0x148>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800780e:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <USBD_SetConfig+0x148>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff f911 	bl	8006a3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9f1 	bl	8007c02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007820:	e042      	b.n	80078a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007822:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <USBD_SetConfig+0x148>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	429a      	cmp	r2, r3
 800782e:	d02a      	beq.n	8007886 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff f8ff 	bl	8006a3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <USBD_SetConfig+0x148>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <USBD_SetConfig+0x148>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff f8d8 	bl	8006a04 <USBD_SetClassConfig>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00f      	beq.n	800787e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f903 	bl	8007a6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff f8e4 	bl	8006a3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800787c:	e014      	b.n	80078a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9bf 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 8007884:	e010      	b.n	80078a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9bb 	bl	8007c02 <USBD_CtlSendStatus>
      break;
 800788c:	e00c      	b.n	80078a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8eb 	bl	8007a6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <USBD_SetConfig+0x148>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff f8cd 	bl	8006a3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
      break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200001e4 	.word	0x200001e4

080078b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d004      	beq.n	80078d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8cd 	bl	8007a6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078d2:	e023      	b.n	800791c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	dc02      	bgt.n	80078e6 <USBD_GetConfig+0x2e>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc03      	bgt.n	80078ec <USBD_GetConfig+0x34>
 80078e4:	e015      	b.n	8007912 <USBD_GetConfig+0x5a>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d00b      	beq.n	8007902 <USBD_GetConfig+0x4a>
 80078ea:	e012      	b.n	8007912 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3308      	adds	r3, #8
 80078f6:	2201      	movs	r2, #1
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f927 	bl	8007b4e <USBD_CtlSendData>
        break;
 8007900:	e00c      	b.n	800791c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	2201      	movs	r2, #1
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f91f 	bl	8007b4e <USBD_CtlSendData>
        break;
 8007910:	e004      	b.n	800791c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f8a9 	bl	8007a6c <USBD_CtlError>
        break;
 800791a:	bf00      	nop
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	2b02      	cmp	r3, #2
 800793a:	d81e      	bhi.n	800797a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	88db      	ldrh	r3, [r3, #6]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d004      	beq.n	800794e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f890 	bl	8007a6c <USBD_CtlError>
        break;
 800794c:	e01a      	b.n	8007984 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f043 0202 	orr.w	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	330c      	adds	r3, #12
 800796e:	2202      	movs	r2, #2
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8eb 	bl	8007b4e <USBD_CtlSendData>
      break;
 8007978:	e004      	b.n	8007984 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f875 	bl	8007a6c <USBD_CtlError>
      break;
 8007982:	bf00      	nop
  }
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d106      	bne.n	80079ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f92b 	bl	8007c02 <USBD_CtlSendStatus>
  }
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d80b      	bhi.n	80079e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d10c      	bne.n	80079ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f910 	bl	8007c02 <USBD_CtlSendStatus>
      }
      break;
 80079e2:	e004      	b.n	80079ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f840 	bl	8007a6c <USBD_CtlError>
      break;
 80079ec:	e000      	b.n	80079f0 <USBD_ClrFeature+0x3c>
      break;
 80079ee:	bf00      	nop
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fa91 	bl	8006f4a <SWAPBYTE>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fa84 	bl	8006f4a <SWAPBYTE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fa77 	bl	8006f4a <SWAPBYTE>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	80da      	strh	r2, [r3, #6]
}
 8007a64:	bf00      	nop
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f003 fb37 	bl	800b0ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f003 fb33 	bl	800b0ec <USBD_LL_StallEP>
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b086      	sub	sp, #24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d036      	beq.n	8007b12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aa8:	6938      	ldr	r0, [r7, #16]
 8007aaa:	f000 f836 	bl	8007b1a <USBD_GetLen>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	3301      	adds	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	3301      	adds	r3, #1
 8007adc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ade:	e013      	b.n	8007b08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	3301      	adds	r3, #1
 8007af0:	613b      	str	r3, [r7, #16]
    idx++;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	3301      	adds	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
 8007b04:	3301      	adds	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e7      	bne.n	8007ae0 <USBD_GetString+0x52>
 8007b10:	e000      	b.n	8007b14 <USBD_GetString+0x86>
    return;
 8007b12:	bf00      	nop
  }
}
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b2a:	e005      	b.n	8007b38 <USBD_GetLen+0x1e>
  {
    len++;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f5      	bne.n	8007b2c <USBD_GetLen+0x12>
  }

  return len;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f003 fb87 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f003 fb76 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f003 fb91 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f003 fb80 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f003 fb35 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2205      	movs	r2, #5
 8007c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f003 fb5a 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <__NVIC_SetPriority>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db0a      	blt.n	8007c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	490c      	ldr	r1, [pc, #48]	; (8007c9c <__NVIC_SetPriority+0x4c>)
 8007c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6e:	0112      	lsls	r2, r2, #4
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	440b      	add	r3, r1
 8007c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c78:	e00a      	b.n	8007c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <__NVIC_SetPriority+0x50>)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	3b04      	subs	r3, #4
 8007c88:	0112      	lsls	r2, r2, #4
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	761a      	strb	r2, [r3, #24]
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	e000e100 	.word	0xe000e100
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f06f 0004 	mvn.w	r0, #4
 8007cae:	f7ff ffcf 	bl	8007c50 <__NVIC_SetPriority>
#endif
}
 8007cb2:	bf00      	nop
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
 8007cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cca:	f06f 0305 	mvn.w	r3, #5
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	e00c      	b.n	8007cec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <osKernelInitialize+0x44>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cda:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <osKernelInitialize+0x44>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	607b      	str	r3, [r7, #4]
 8007ce4:	e002      	b.n	8007cec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cec:	687b      	ldr	r3, [r7, #4]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200001e8 	.word	0x200001e8

08007d00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d06:	f3ef 8305 	mrs	r3, IPSR
 8007d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007d0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d12:	f06f 0305 	mvn.w	r3, #5
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e010      	b.n	8007d3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <osKernelStart+0x48>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d109      	bne.n	8007d36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d22:	f7ff ffbf 	bl	8007ca4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <osKernelStart+0x48>)
 8007d28:	2202      	movs	r2, #2
 8007d2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d2c:	f001 f866 	bl	8008dfc <vTaskStartScheduler>
      stat = osOK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	e002      	b.n	8007d3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d3c:	687b      	ldr	r3, [r7, #4]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200001e8 	.word	0x200001e8

08007d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08e      	sub	sp, #56	; 0x38
 8007d50:	af04      	add	r7, sp, #16
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5c:	f3ef 8305 	mrs	r3, IPSR
 8007d60:	617b      	str	r3, [r7, #20]
  return(result);
 8007d62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d17e      	bne.n	8007e66 <osThreadNew+0x11a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d07b      	beq.n	8007e66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d72:	2318      	movs	r3, #24
 8007d74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d045      	beq.n	8007e12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <osThreadNew+0x48>
        name = attr->name;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <osThreadNew+0x6e>
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	2b38      	cmp	r3, #56	; 0x38
 8007dac:	d805      	bhi.n	8007dba <osThreadNew+0x6e>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <osThreadNew+0x72>
        return (NULL);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e054      	b.n	8007e68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	089b      	lsrs	r3, r3, #2
 8007dcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <osThreadNew+0xa8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b5b      	cmp	r3, #91	; 0x5b
 8007ddc:	d90a      	bls.n	8007df4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d006      	beq.n	8007df4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <osThreadNew+0xa8>
        mem = 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	61bb      	str	r3, [r7, #24]
 8007df2:	e010      	b.n	8007e16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10c      	bne.n	8007e16 <osThreadNew+0xca>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d108      	bne.n	8007e16 <osThreadNew+0xca>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <osThreadNew+0xca>
          mem = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e001      	b.n	8007e16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d110      	bne.n	8007e3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e24:	9202      	str	r2, [sp, #8]
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6a3a      	ldr	r2, [r7, #32]
 8007e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fe0c 	bl	8008a50 <xTaskCreateStatic>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	613b      	str	r3, [r7, #16]
 8007e3c:	e013      	b.n	8007e66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d110      	bne.n	8007e66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fe57 	bl	8008b0a <xTaskCreate>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d001      	beq.n	8007e66 <osThreadNew+0x11a>
            hTask = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e66:	693b      	ldr	r3, [r7, #16]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3728      	adds	r7, #40	; 0x28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e78:	f3ef 8305 	mrs	r3, IPSR
 8007e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <osDelay+0x1c>
    stat = osErrorISR;
 8007e84:	f06f 0305 	mvn.w	r3, #5
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e007      	b.n	8007e9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 ff7c 	bl	8008d94 <vTaskDelay>
    }
  }

  return (stat);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a07      	ldr	r2, [pc, #28]	; (8007ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a06      	ldr	r2, [pc, #24]	; (8007ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8007ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	601a      	str	r2, [r3, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	200001ec 	.word	0x200001ec
 8007ed8:	20000248 	.word	0x20000248

08007edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	4a06      	ldr	r2, [pc, #24]	; (8007f0c <vApplicationGetTimerTaskMemory+0x30>)
 8007ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20000448 	.word	0x20000448
 8007f0c:	200004a4 	.word	0x200004a4

08007f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f103 0208 	add.w	r2, r3, #8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f103 0208 	add.w	r2, r3, #8
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d103      	bne.n	8007fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	e00c      	b.n	8007fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e002      	b.n	8007fe0 <vListInsert+0x2e>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d2f6      	bcs.n	8007fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6892      	ldr	r2, [r2, #8]
 800803a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6852      	ldr	r2, [r2, #4]
 8008044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d103      	bne.n	8008058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	1e5a      	subs	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080a2:	f002 f84f 	bl	800a144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080b2:	fb01 f303 	mul.w	r3, r1, r3
 80080b6:	441a      	add	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	3b01      	subs	r3, #1
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	441a      	add	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	22ff      	movs	r2, #255	; 0xff
 80080e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d114      	bne.n	8008122 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01a      	beq.n	8008136 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3310      	adds	r3, #16
 8008104:	4618      	mov	r0, r3
 8008106:	f001 f903 	bl	8009310 <xTaskRemoveFromEventList>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <xQueueGenericReset+0xcc>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	e009      	b.n	8008136 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3310      	adds	r3, #16
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff fef2 	bl	8007f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff feed 	bl	8007f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008136:	f002 f835 	bl	800a1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800813a:	2301      	movs	r3, #1
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08e      	sub	sp, #56	; 0x38
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <xQueueGenericCreateStatic+0x52>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <xQueueGenericCreateStatic+0x56>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <xQueueGenericCreateStatic+0x58>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	623b      	str	r3, [r7, #32]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <xQueueGenericCreateStatic+0x7e>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <xQueueGenericCreateStatic+0x82>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e000      	b.n	80081cc <xQueueGenericCreateStatic+0x84>
 80081ca:	2300      	movs	r3, #0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61fb      	str	r3, [r7, #28]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081e6:	2350      	movs	r3, #80	; 0x50
 80081e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b50      	cmp	r3, #80	; 0x50
 80081ee:	d00a      	beq.n	8008206 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	61bb      	str	r3, [r7, #24]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008206:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00d      	beq.n	800822e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800821a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4613      	mov	r3, r2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	68b9      	ldr	r1, [r7, #8]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f805 	bl	8008238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008230:	4618      	mov	r0, r3
 8008232:	3730      	adds	r7, #48	; 0x30
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d103      	bne.n	8008254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e002      	b.n	800825a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008266:	2101      	movs	r1, #1
 8008268:	69b8      	ldr	r0, [r7, #24]
 800826a:	f7ff ff05 	bl	8008078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08e      	sub	sp, #56	; 0x38
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800828e:	2300      	movs	r3, #0
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <xQueueGenericSend+0x32>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <xQueueGenericSend+0x40>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <xQueueGenericSend+0x44>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <xQueueGenericSend+0x46>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <xQueueGenericSend+0x60>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d103      	bne.n	80082ee <xQueueGenericSend+0x6e>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <xQueueGenericSend+0x72>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <xQueueGenericSend+0x74>
 80082f2:	2300      	movs	r3, #0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <xQueueGenericSend+0x8e>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	623b      	str	r3, [r7, #32]
}
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800830e:	f001 f9bd 	bl	800968c <xTaskGetSchedulerState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <xQueueGenericSend+0x9e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <xQueueGenericSend+0xa2>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <xQueueGenericSend+0xa4>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xQueueGenericSend+0xbe>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	61fb      	str	r3, [r7, #28]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800833e:	f001 ff01 	bl	800a144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <xQueueGenericSend+0xd4>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d129      	bne.n	80083a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835a:	f000 fa0b 	bl	8008774 <prvCopyDataToQueue>
 800835e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	3324      	adds	r3, #36	; 0x24
 800836c:	4618      	mov	r0, r3
 800836e:	f000 ffcf 	bl	8009310 <xTaskRemoveFromEventList>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d013      	beq.n	80083a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008378:	4b3f      	ldr	r3, [pc, #252]	; (8008478 <xQueueGenericSend+0x1f8>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	e00a      	b.n	80083a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008390:	4b39      	ldr	r3, [pc, #228]	; (8008478 <xQueueGenericSend+0x1f8>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083a0:	f001 ff00 	bl	800a1a4 <vPortExitCritical>
				return pdPASS;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e063      	b.n	8008470 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083ae:	f001 fef9 	bl	800a1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e05c      	b.n	8008470 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 f809 	bl	80093d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083c6:	2301      	movs	r3, #1
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ca:	f001 feeb 	bl	800a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083ce:	f000 fd7b 	bl	8008ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083d2:	f001 feb7 	bl	800a144 <vPortEnterCritical>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083dc:	b25b      	sxtb	r3, r3
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d103      	bne.n	80083ec <xQueueGenericSend+0x16c>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d103      	bne.n	8008402 <xQueueGenericSend+0x182>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008402:	f001 fecf 	bl	800a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008406:	1d3a      	adds	r2, r7, #4
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fff8 	bl	8009404 <xTaskCheckForTimeOut>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d124      	bne.n	8008464 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800841a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841c:	f000 faa2 	bl	8008964 <prvIsQueueFull>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d018      	beq.n	8008458 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	3310      	adds	r3, #16
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f000 ff1e 	bl	8009270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008436:	f000 fa2d 	bl	8008894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800843a:	f000 fd53 	bl	8008ee4 <xTaskResumeAll>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	f47f af7c 	bne.w	800833e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <xQueueGenericSend+0x1f8>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	e772      	b.n	800833e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845a:	f000 fa1b 	bl	8008894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800845e:	f000 fd41 	bl	8008ee4 <xTaskResumeAll>
 8008462:	e76c      	b.n	800833e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008466:	f000 fa15 	bl	8008894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800846a:	f000 fd3b 	bl	8008ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800846e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008470:	4618      	mov	r0, r3
 8008472:	3738      	adds	r7, #56	; 0x38
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b090      	sub	sp, #64	; 0x40
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <xQueueGenericSendFromISR+0x3c>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <xQueueGenericSendFromISR+0x40>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <xQueueGenericSendFromISR+0x42>
 80084bc:	2300      	movs	r3, #0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <xQueueGenericSendFromISR+0x6a>
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d101      	bne.n	80084ea <xQueueGenericSendFromISR+0x6e>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueGenericSendFromISR+0x70>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	623b      	str	r3, [r7, #32]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008506:	f001 feff 	bl	800a308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800850a:	f3ef 8211 	mrs	r2, BASEPRI
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61fa      	str	r2, [r7, #28]
 8008520:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008522:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	429a      	cmp	r2, r3
 8008530:	d302      	bcc.n	8008538 <xQueueGenericSendFromISR+0xbc>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d12f      	bne.n	8008598 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800853e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800854e:	f000 f911 	bl	8008774 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008552:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d112      	bne.n	8008582 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b00      	cmp	r3, #0
 8008562:	d016      	beq.n	8008592 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	3324      	adds	r3, #36	; 0x24
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fed1 	bl	8009310 <xTaskRemoveFromEventList>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00e      	beq.n	8008592 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e007      	b.n	8008592 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008586:	3301      	adds	r3, #1
 8008588:	b2db      	uxtb	r3, r3
 800858a:	b25a      	sxtb	r2, r3
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008592:	2301      	movs	r3, #1
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008596:	e001      	b.n	800859c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008598:	2300      	movs	r3, #0
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3740      	adds	r7, #64	; 0x40
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08c      	sub	sp, #48	; 0x30
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <xQueueReceive+0x30>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	623b      	str	r3, [r7, #32]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <xQueueReceive+0x3e>
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <xQueueReceive+0x42>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <xQueueReceive+0x44>
 80085f6:	2300      	movs	r3, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xQueueReceive+0x5e>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	61fb      	str	r3, [r7, #28]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008612:	f001 f83b 	bl	800968c <xTaskGetSchedulerState>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <xQueueReceive+0x6e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <xQueueReceive+0x72>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <xQueueReceive+0x74>
 8008626:	2300      	movs	r3, #0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <xQueueReceive+0x8e>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61bb      	str	r3, [r7, #24]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008642:	f001 fd7f 	bl	800a144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01f      	beq.n	8008692 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008656:	f000 f8f7 	bl	8008848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00f      	beq.n	800868a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fe4e 	bl	8009310 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800867a:	4b3d      	ldr	r3, [pc, #244]	; (8008770 <xQueueReceive+0x1bc>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800868a:	f001 fd8b 	bl	800a1a4 <vPortExitCritical>
				return pdPASS;
 800868e:	2301      	movs	r3, #1
 8008690:	e069      	b.n	8008766 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008698:	f001 fd84 	bl	800a1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800869c:	2300      	movs	r3, #0
 800869e:	e062      	b.n	8008766 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a6:	f107 0310 	add.w	r3, r7, #16
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fe94 	bl	80093d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b4:	f001 fd76 	bl	800a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b8:	f000 fc06 	bl	8008ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086bc:	f001 fd42 	bl	800a144 <vPortEnterCritical>
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d103      	bne.n	80086d6 <xQueueReceive+0x122>
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086dc:	b25b      	sxtb	r3, r3
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d103      	bne.n	80086ec <xQueueReceive+0x138>
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ec:	f001 fd5a 	bl	800a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086f0:	1d3a      	adds	r2, r7, #4
 80086f2:	f107 0310 	add.w	r3, r7, #16
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fe83 	bl	8009404 <xTaskCheckForTimeOut>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d123      	bne.n	800874c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008706:	f000 f917 	bl	8008938 <prvIsQueueEmpty>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d017      	beq.n	8008740 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4611      	mov	r1, r2
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fda9 	bl	8009270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800871e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008720:	f000 f8b8 	bl	8008894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008724:	f000 fbde 	bl	8008ee4 <xTaskResumeAll>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d189      	bne.n	8008642 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800872e:	4b10      	ldr	r3, [pc, #64]	; (8008770 <xQueueReceive+0x1bc>)
 8008730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	e780      	b.n	8008642 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	f000 f8a7 	bl	8008894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008746:	f000 fbcd 	bl	8008ee4 <xTaskResumeAll>
 800874a:	e77a      	b.n	8008642 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800874c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874e:	f000 f8a1 	bl	8008894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008752:	f000 fbc7 	bl	8008ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008758:	f000 f8ee 	bl	8008938 <prvIsQueueEmpty>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	f43f af6f 	beq.w	8008642 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008766:	4618      	mov	r0, r3
 8008768:	3730      	adds	r7, #48	; 0x30
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10d      	bne.n	80087ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d14d      	bne.n	8008836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 ff92 	bl	80096c8 <xTaskPriorityDisinherit>
 80087a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	e043      	b.n	8008836 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d119      	bne.n	80087e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6858      	ldr	r0, [r3, #4]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	461a      	mov	r2, r3
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	f002 fe76 	bl	800b4b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d32b      	bcc.n	8008836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	605a      	str	r2, [r3, #4]
 80087e6:	e026      	b.n	8008836 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68d8      	ldr	r0, [r3, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	461a      	mov	r2, r3
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	f002 fe5c 	bl	800b4b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	425b      	negs	r3, r3
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d207      	bcs.n	8008824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	425b      	negs	r3, r3
 800881e:	441a      	add	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d105      	bne.n	8008836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3b01      	subs	r3, #1
 8008834:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800883e:	697b      	ldr	r3, [r7, #20]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d018      	beq.n	800888c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	441a      	add	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	429a      	cmp	r2, r3
 8008872:	d303      	bcc.n	800887c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68d9      	ldr	r1, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	461a      	mov	r2, r3
 8008886:	6838      	ldr	r0, [r7, #0]
 8008888:	f002 fe12 	bl	800b4b0 <memcpy>
	}
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800889c:	f001 fc52 	bl	800a144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a8:	e011      	b.n	80088ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d012      	beq.n	80088d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3324      	adds	r3, #36	; 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fd2a 	bl	8009310 <xTaskRemoveFromEventList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088c2:	f000 fe01 	bl	80094c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dce9      	bgt.n	80088aa <prvUnlockQueue+0x16>
 80088d6:	e000      	b.n	80088da <prvUnlockQueue+0x46>
					break;
 80088d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	22ff      	movs	r2, #255	; 0xff
 80088de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088e2:	f001 fc5f 	bl	800a1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088e6:	f001 fc2d 	bl	800a144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f2:	e011      	b.n	8008918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3310      	adds	r3, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fd05 	bl	8009310 <xTaskRemoveFromEventList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800890c:	f000 fddc 	bl	80094c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2db      	uxtb	r3, r3
 8008916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dce9      	bgt.n	80088f4 <prvUnlockQueue+0x60>
 8008920:	e000      	b.n	8008924 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008922:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800892c:	f001 fc3a 	bl	800a1a4 <vPortExitCritical>
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008940:	f001 fc00 	bl	800a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e001      	b.n	8008956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008956:	f001 fc25 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 800895a:	68fb      	ldr	r3, [r7, #12]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f001 fbea 	bl	800a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	429a      	cmp	r2, r3
 800897a:	d102      	bne.n	8008982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e001      	b.n	8008986 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f001 fc0d 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e014      	b.n	80089ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089a4:	4a0f      	ldr	r2, [pc, #60]	; (80089e4 <vQueueAddToRegistry+0x50>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089b0:	490c      	ldr	r1, [pc, #48]	; (80089e4 <vQueueAddToRegistry+0x50>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089ba:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <vQueueAddToRegistry+0x50>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089c6:	e006      	b.n	80089d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b07      	cmp	r3, #7
 80089d2:	d9e7      	bls.n	80089a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20001ec0 	.word	0x20001ec0

080089e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089f8:	f001 fba4 	bl	800a144 <vPortEnterCritical>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a08:	d103      	bne.n	8008a12 <vQueueWaitForMessageRestricted+0x2a>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d103      	bne.n	8008a28 <vQueueWaitForMessageRestricted+0x40>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a28:	f001 fbbc 	bl	800a1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	3324      	adds	r3, #36	; 0x24
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fc3b 	bl	80092b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	f7ff ff26 	bl	8008894 <prvUnlockQueue>
	}
 8008a48:	bf00      	nop
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	; 0x38
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	623b      	str	r3, [r7, #32]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	61fb      	str	r3, [r7, #28]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a96:	235c      	movs	r3, #92	; 0x5c
 8008a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8008a9e:	d00a      	beq.n	8008ab6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	61bb      	str	r3, [r7, #24]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ab6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01e      	beq.n	8008afc <xTaskCreateStatic+0xac>
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01b      	beq.n	8008afc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9303      	str	r3, [sp, #12]
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	f107 0314 	add.w	r3, r7, #20
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f850 	bl	8008b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af6:	f000 f8dd 	bl	8008cb4 <prvAddNewTaskToReadyList>
 8008afa:	e001      	b.n	8008b00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b00:	697b      	ldr	r3, [r7, #20]
	}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3728      	adds	r7, #40	; 0x28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b08c      	sub	sp, #48	; 0x30
 8008b0e:	af04      	add	r7, sp, #16
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b1a:	88fb      	ldrh	r3, [r7, #6]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 fc32 	bl	800a388 <pvPortMalloc>
 8008b24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b2c:	205c      	movs	r0, #92	; 0x5c
 8008b2e:	f001 fc2b 	bl	800a388 <pvPortMalloc>
 8008b32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b40:	e005      	b.n	8008b4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b42:	6978      	ldr	r0, [r7, #20]
 8008b44:	f001 fcec 	bl	800a520 <vPortFree>
 8008b48:	e001      	b.n	8008b4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d017      	beq.n	8008b84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b5c:	88fa      	ldrh	r2, [r7, #6]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68b9      	ldr	r1, [r7, #8]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f80e 	bl	8008b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b78:	69f8      	ldr	r0, [r7, #28]
 8008b7a:	f000 f89b 	bl	8008cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	e002      	b.n	8008b8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b84:	f04f 33ff 	mov.w	r3, #4294967295
 8008b88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	461a      	mov	r2, r3
 8008bac:	21a5      	movs	r1, #165	; 0xa5
 8008bae:	f002 fc8d 	bl	800b4cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f023 0307 	bic.w	r3, r3, #7
 8008bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	617b      	str	r3, [r7, #20]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d01f      	beq.n	8008c32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61fb      	str	r3, [r7, #28]
 8008bf6:	e012      	b.n	8008c1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	7819      	ldrb	r1, [r3, #0]
 8008c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	3334      	adds	r3, #52	; 0x34
 8008c08:	460a      	mov	r2, r1
 8008c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2b0f      	cmp	r3, #15
 8008c22:	d9e9      	bls.n	8008bf8 <prvInitialiseNewTask+0x64>
 8008c24:	e000      	b.n	8008c28 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c30:	e003      	b.n	8008c3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	2b37      	cmp	r3, #55	; 0x37
 8008c3e:	d901      	bls.n	8008c44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c40:	2337      	movs	r3, #55	; 0x37
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	2200      	movs	r2, #0
 8008c54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	3304      	adds	r3, #4
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff f978 	bl	8007f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	3318      	adds	r3, #24
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff f973 	bl	8007f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	2200      	movs	r2, #0
 8008c84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	68f9      	ldr	r1, [r7, #12]
 8008c92:	69b8      	ldr	r0, [r7, #24]
 8008c94:	f001 f928 	bl	8009ee8 <pxPortInitialiseStack>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008caa:	bf00      	nop
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cbc:	f001 fa42 	bl	800a144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cc0:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <prvAddNewTaskToReadyList+0xc4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	4a2c      	ldr	r2, [pc, #176]	; (8008d78 <prvAddNewTaskToReadyList+0xc4>)
 8008cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cca:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <prvAddNewTaskToReadyList+0xc8>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <prvAddNewTaskToReadyList+0xc8>)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cd8:	4b27      	ldr	r3, [pc, #156]	; (8008d78 <prvAddNewTaskToReadyList+0xc4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d110      	bne.n	8008d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ce0:	f000 fc16 	bl	8009510 <prvInitialiseTaskLists>
 8008ce4:	e00d      	b.n	8008d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ce6:	4b26      	ldr	r3, [pc, #152]	; (8008d80 <prvAddNewTaskToReadyList+0xcc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cee:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <prvAddNewTaskToReadyList+0xc8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d802      	bhi.n	8008d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cfc:	4a1f      	ldr	r2, [pc, #124]	; (8008d7c <prvAddNewTaskToReadyList+0xc8>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d02:	4b20      	ldr	r3, [pc, #128]	; (8008d84 <prvAddNewTaskToReadyList+0xd0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <prvAddNewTaskToReadyList+0xd0>)
 8008d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d0c:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <prvAddNewTaskToReadyList+0xd0>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <prvAddNewTaskToReadyList+0xd4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <prvAddNewTaskToReadyList+0x74>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <prvAddNewTaskToReadyList+0xd4>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <prvAddNewTaskToReadyList+0xd8>)
 8008d36:	441a      	add	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7ff f913 	bl	8007f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d44:	f001 fa2e 	bl	800a1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d48:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <prvAddNewTaskToReadyList+0xcc>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00e      	beq.n	8008d6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvAddNewTaskToReadyList+0xc8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d207      	bcs.n	8008d6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <prvAddNewTaskToReadyList+0xdc>)
 8008d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000d78 	.word	0x20000d78
 8008d7c:	200008a4 	.word	0x200008a4
 8008d80:	20000d84 	.word	0x20000d84
 8008d84:	20000d94 	.word	0x20000d94
 8008d88:	20000d80 	.word	0x20000d80
 8008d8c:	200008a8 	.word	0x200008a8
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d017      	beq.n	8008dd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <vTaskDelay+0x60>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <vTaskDelay+0x30>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60bb      	str	r3, [r7, #8]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dc4:	f000 f880 	bl	8008ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fcea 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dd0:	f000 f888 	bl	8008ee4 <xTaskResumeAll>
 8008dd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <vTaskDelay+0x64>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000da0 	.word	0x20000da0
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e0a:	463a      	mov	r2, r7
 8008e0c:	1d39      	adds	r1, r7, #4
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff f848 	bl	8007ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	9202      	str	r2, [sp, #8]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	2300      	movs	r3, #0
 8008e28:	460a      	mov	r2, r1
 8008e2a:	4921      	ldr	r1, [pc, #132]	; (8008eb0 <vTaskStartScheduler+0xb4>)
 8008e2c:	4821      	ldr	r0, [pc, #132]	; (8008eb4 <vTaskStartScheduler+0xb8>)
 8008e2e:	f7ff fe0f 	bl	8008a50 <xTaskCreateStatic>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4a20      	ldr	r2, [pc, #128]	; (8008eb8 <vTaskStartScheduler+0xbc>)
 8008e36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e38:	4b1f      	ldr	r3, [pc, #124]	; (8008eb8 <vTaskStartScheduler+0xbc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e40:	2301      	movs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e001      	b.n	8008e4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d102      	bne.n	8008e56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e50:	f000 fcfc 	bl	800984c <xTimerCreateTimerTask>
 8008e54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d116      	bne.n	8008e8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	613b      	str	r3, [r7, #16]
}
 8008e6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e70:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <vTaskStartScheduler+0xc0>)
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295
 8008e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <vTaskStartScheduler+0xc4>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <vTaskStartScheduler+0xc8>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e84:	f001 f8bc 	bl	800a000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e88:	e00e      	b.n	8008ea8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e90:	d10a      	bne.n	8008ea8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <vTaskStartScheduler+0xaa>
}
 8008ea8:	bf00      	nop
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	0800b518 	.word	0x0800b518
 8008eb4:	080094e1 	.word	0x080094e1
 8008eb8:	20000d9c 	.word	0x20000d9c
 8008ebc:	20000d98 	.word	0x20000d98
 8008ec0:	20000d84 	.word	0x20000d84
 8008ec4:	20000d7c 	.word	0x20000d7c

08008ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ecc:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <vTaskSuspendAll+0x18>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	4a03      	ldr	r2, [pc, #12]	; (8008ee0 <vTaskSuspendAll+0x18>)
 8008ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ed6:	bf00      	nop
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	20000da0 	.word	0x20000da0

08008ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ef2:	4b42      	ldr	r3, [pc, #264]	; (8008ffc <xTaskResumeAll+0x118>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <xTaskResumeAll+0x2c>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	603b      	str	r3, [r7, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f10:	f001 f918 	bl	800a144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f14:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	4a38      	ldr	r2, [pc, #224]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b37      	ldr	r3, [pc, #220]	; (8008ffc <xTaskResumeAll+0x118>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d162      	bne.n	8008fec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f26:	4b36      	ldr	r3, [pc, #216]	; (8009000 <xTaskResumeAll+0x11c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d05e      	beq.n	8008fec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f2e:	e02f      	b.n	8008f90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f30:	4b34      	ldr	r3, [pc, #208]	; (8009004 <xTaskResumeAll+0x120>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3318      	adds	r3, #24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff f871 	bl	8008024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff f86c 	bl	8008024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <xTaskResumeAll+0x124>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d903      	bls.n	8008f60 <xTaskResumeAll+0x7c>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <xTaskResumeAll+0x124>)
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4a27      	ldr	r2, [pc, #156]	; (800900c <xTaskResumeAll+0x128>)
 8008f6e:	441a      	add	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3304      	adds	r3, #4
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	f7fe fff7 	bl	8007f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b23      	ldr	r3, [pc, #140]	; (8009010 <xTaskResumeAll+0x12c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <xTaskResumeAll+0x130>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f90:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <xTaskResumeAll+0x120>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1cb      	bne.n	8008f30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f9e:	f000 fb55 	bl	800964c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fa2:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <xTaskResumeAll+0x134>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d010      	beq.n	8008fd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fae:	f000 f847 	bl	8009040 <xTaskIncrementTick>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fb8:	4b16      	ldr	r3, [pc, #88]	; (8009014 <xTaskResumeAll+0x130>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f1      	bne.n	8008fae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fca:	4b13      	ldr	r3, [pc, #76]	; (8009018 <xTaskResumeAll+0x134>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fd0:	4b10      	ldr	r3, [pc, #64]	; (8009014 <xTaskResumeAll+0x130>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <xTaskResumeAll+0x138>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fec:	f001 f8da 	bl	800a1a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000da0 	.word	0x20000da0
 8009000:	20000d78 	.word	0x20000d78
 8009004:	20000d38 	.word	0x20000d38
 8009008:	20000d80 	.word	0x20000d80
 800900c:	200008a8 	.word	0x200008a8
 8009010:	200008a4 	.word	0x200008a4
 8009014:	20000d8c 	.word	0x20000d8c
 8009018:	20000d88 	.word	0x20000d88
 800901c:	e000ed04 	.word	0xe000ed04

08009020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <xTaskGetTickCount+0x1c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800902c:	687b      	ldr	r3, [r7, #4]
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000d7c 	.word	0x20000d7c

08009040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904a:	4b4f      	ldr	r3, [pc, #316]	; (8009188 <xTaskIncrementTick+0x148>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f040 808f 	bne.w	8009172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009054:	4b4d      	ldr	r3, [pc, #308]	; (800918c <xTaskIncrementTick+0x14c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800905c:	4a4b      	ldr	r2, [pc, #300]	; (800918c <xTaskIncrementTick+0x14c>)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d120      	bne.n	80090aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009068:	4b49      	ldr	r3, [pc, #292]	; (8009190 <xTaskIncrementTick+0x150>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00a      	beq.n	8009088 <xTaskIncrementTick+0x48>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	603b      	str	r3, [r7, #0]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xTaskIncrementTick+0x46>
 8009088:	4b41      	ldr	r3, [pc, #260]	; (8009190 <xTaskIncrementTick+0x150>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	4b41      	ldr	r3, [pc, #260]	; (8009194 <xTaskIncrementTick+0x154>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a3f      	ldr	r2, [pc, #252]	; (8009190 <xTaskIncrementTick+0x150>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <xTaskIncrementTick+0x154>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	4b3e      	ldr	r3, [pc, #248]	; (8009198 <xTaskIncrementTick+0x158>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	4a3d      	ldr	r2, [pc, #244]	; (8009198 <xTaskIncrementTick+0x158>)
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	f000 fad1 	bl	800964c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090aa:	4b3c      	ldr	r3, [pc, #240]	; (800919c <xTaskIncrementTick+0x15c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d349      	bcc.n	8009148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b4:	4b36      	ldr	r3, [pc, #216]	; (8009190 <xTaskIncrementTick+0x150>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d104      	bne.n	80090c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	4b37      	ldr	r3, [pc, #220]	; (800919c <xTaskIncrementTick+0x15c>)
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	601a      	str	r2, [r3, #0]
					break;
 80090c6:	e03f      	b.n	8009148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c8:	4b31      	ldr	r3, [pc, #196]	; (8009190 <xTaskIncrementTick+0x150>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d203      	bcs.n	80090e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090e0:	4a2e      	ldr	r2, [pc, #184]	; (800919c <xTaskIncrementTick+0x15c>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e6:	e02f      	b.n	8009148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe ff99 	bl	8008024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3318      	adds	r3, #24
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ff90 	bl	8008024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <xTaskIncrementTick+0x160>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d903      	bls.n	8009118 <xTaskIncrementTick+0xd8>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a22      	ldr	r2, [pc, #136]	; (80091a0 <xTaskIncrementTick+0x160>)
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <xTaskIncrementTick+0x164>)
 8009126:	441a      	add	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe ff1b 	bl	8007f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <xTaskIncrementTick+0x168>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	429a      	cmp	r2, r3
 8009140:	d3b8      	bcc.n	80090b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009146:	e7b5      	b.n	80090b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <xTaskIncrementTick+0x168>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914e:	4915      	ldr	r1, [pc, #84]	; (80091a4 <xTaskIncrementTick+0x164>)
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d901      	bls.n	8009164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009164:	4b11      	ldr	r3, [pc, #68]	; (80091ac <xTaskIncrementTick+0x16c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e004      	b.n	800917c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTaskIncrementTick+0x170>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a0d      	ldr	r2, [pc, #52]	; (80091b0 <xTaskIncrementTick+0x170>)
 800917a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800917c:	697b      	ldr	r3, [r7, #20]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000da0 	.word	0x20000da0
 800918c:	20000d7c 	.word	0x20000d7c
 8009190:	20000d30 	.word	0x20000d30
 8009194:	20000d34 	.word	0x20000d34
 8009198:	20000d90 	.word	0x20000d90
 800919c:	20000d98 	.word	0x20000d98
 80091a0:	20000d80 	.word	0x20000d80
 80091a4:	200008a8 	.word	0x200008a8
 80091a8:	200008a4 	.word	0x200008a4
 80091ac:	20000d8c 	.word	0x20000d8c
 80091b0:	20000d88 	.word	0x20000d88

080091b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ba:	4b28      	ldr	r3, [pc, #160]	; (800925c <vTaskSwitchContext+0xa8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091c2:	4b27      	ldr	r3, [pc, #156]	; (8009260 <vTaskSwitchContext+0xac>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c8:	e041      	b.n	800924e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80091ca:	4b25      	ldr	r3, [pc, #148]	; (8009260 <vTaskSwitchContext+0xac>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b24      	ldr	r3, [pc, #144]	; (8009264 <vTaskSwitchContext+0xb0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e010      	b.n	80091fa <vTaskSwitchContext+0x46>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vTaskSwitchContext+0x3e>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	491b      	ldr	r1, [pc, #108]	; (8009268 <vTaskSwitchContext+0xb4>)
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0e4      	beq.n	80091d8 <vTaskSwitchContext+0x24>
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a13      	ldr	r2, [pc, #76]	; (8009268 <vTaskSwitchContext+0xb4>)
 800921a:	4413      	add	r3, r2
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	605a      	str	r2, [r3, #4]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3308      	adds	r3, #8
 8009230:	429a      	cmp	r2, r3
 8009232:	d104      	bne.n	800923e <vTaskSwitchContext+0x8a>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a09      	ldr	r2, [pc, #36]	; (800926c <vTaskSwitchContext+0xb8>)
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	4a06      	ldr	r2, [pc, #24]	; (8009264 <vTaskSwitchContext+0xb0>)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6013      	str	r3, [r2, #0]
}
 800924e:	bf00      	nop
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000da0 	.word	0x20000da0
 8009260:	20000d8c 	.word	0x20000d8c
 8009264:	20000d80 	.word	0x20000d80
 8009268:	200008a8 	.word	0x200008a8
 800926c:	200008a4 	.word	0x200008a4

08009270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009296:	4b07      	ldr	r3, [pc, #28]	; (80092b4 <vTaskPlaceOnEventList+0x44>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3318      	adds	r3, #24
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fe fe87 	bl	8007fb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092a4:	2101      	movs	r1, #1
 80092a6:	6838      	ldr	r0, [r7, #0]
 80092a8:	f000 fa7c 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
}
 80092ac:	bf00      	nop
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200008a4 	.word	0x200008a4

080092b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	617b      	str	r3, [r7, #20]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <vTaskPlaceOnEventListRestricted+0x54>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3318      	adds	r3, #24
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7fe fe3e 	bl	8007f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f000 fa51 	bl	80097a4 <prvAddCurrentTaskToDelayedList>
	}
 8009302:	bf00      	nop
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	200008a4 	.word	0x200008a4

08009310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60fb      	str	r3, [r7, #12]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	3318      	adds	r3, #24
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fe6f 	bl	8008024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009346:	4b1e      	ldr	r3, [pc, #120]	; (80093c0 <xTaskRemoveFromEventList+0xb0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d11d      	bne.n	800938a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	3304      	adds	r3, #4
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fe66 	bl	8008024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4b19      	ldr	r3, [pc, #100]	; (80093c4 <xTaskRemoveFromEventList+0xb4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <xTaskRemoveFromEventList+0x5c>
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <xTaskRemoveFromEventList+0xb4>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <xTaskRemoveFromEventList+0xb8>)
 800937a:	441a      	add	r2, r3
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fe fdf1 	bl	8007f6a <vListInsertEnd>
 8009388:	e005      	b.n	8009396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3318      	adds	r3, #24
 800938e:	4619      	mov	r1, r3
 8009390:	480e      	ldr	r0, [pc, #56]	; (80093cc <xTaskRemoveFromEventList+0xbc>)
 8009392:	f7fe fdea 	bl	8007f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	4b0d      	ldr	r3, [pc, #52]	; (80093d0 <xTaskRemoveFromEventList+0xc0>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d905      	bls.n	80093b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093a8:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <xTaskRemoveFromEventList+0xc4>)
 80093aa:	2201      	movs	r2, #1
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e001      	b.n	80093b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093b4:	697b      	ldr	r3, [r7, #20]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000da0 	.word	0x20000da0
 80093c4:	20000d80 	.word	0x20000d80
 80093c8:	200008a8 	.word	0x200008a8
 80093cc:	20000d38 	.word	0x20000d38
 80093d0:	200008a4 	.word	0x200008a4
 80093d4:	20000d8c 	.word	0x20000d8c

080093d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <vTaskInternalSetTimeOutState+0x24>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <vTaskInternalSetTimeOutState+0x28>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20000d90 	.word	0x20000d90
 8009400:	20000d7c 	.word	0x20000d7c

08009404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	613b      	str	r3, [r7, #16]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	60fb      	str	r3, [r7, #12]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009446:	f000 fe7d 	bl	800a144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800944a:	4b1d      	ldr	r3, [pc, #116]	; (80094c0 <xTaskCheckForTimeOut+0xbc>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d102      	bne.n	800946a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e023      	b.n	80094b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b15      	ldr	r3, [pc, #84]	; (80094c4 <xTaskCheckForTimeOut+0xc0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d007      	beq.n	8009486 <xTaskCheckForTimeOut+0x82>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	d302      	bcc.n	8009486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	e015      	b.n	80094b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	429a      	cmp	r2, r3
 800948e:	d20b      	bcs.n	80094a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	1ad2      	subs	r2, r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ff9b 	bl	80093d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	e004      	b.n	80094b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ae:	2301      	movs	r3, #1
 80094b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094b2:	f000 fe77 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 80094b6:	69fb      	ldr	r3, [r7, #28]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000d7c 	.word	0x20000d7c
 80094c4:	20000d90 	.word	0x20000d90

080094c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094cc:	4b03      	ldr	r3, [pc, #12]	; (80094dc <vTaskMissedYield+0x14>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
}
 80094d2:	bf00      	nop
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20000d8c 	.word	0x20000d8c

080094e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094e8:	f000 f852 	bl	8009590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <prvIdleTask+0x28>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d9f9      	bls.n	80094e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <prvIdleTask+0x2c>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009504:	e7f0      	b.n	80094e8 <prvIdleTask+0x8>
 8009506:	bf00      	nop
 8009508:	200008a8 	.word	0x200008a8
 800950c:	e000ed04 	.word	0xe000ed04

08009510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	e00c      	b.n	8009536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4a12      	ldr	r2, [pc, #72]	; (8009570 <prvInitialiseTaskLists+0x60>)
 8009528:	4413      	add	r3, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fcf0 	bl	8007f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3301      	adds	r3, #1
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b37      	cmp	r3, #55	; 0x37
 800953a:	d9ef      	bls.n	800951c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <prvInitialiseTaskLists+0x64>)
 800953e:	f7fe fce7 	bl	8007f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009542:	480d      	ldr	r0, [pc, #52]	; (8009578 <prvInitialiseTaskLists+0x68>)
 8009544:	f7fe fce4 	bl	8007f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009548:	480c      	ldr	r0, [pc, #48]	; (800957c <prvInitialiseTaskLists+0x6c>)
 800954a:	f7fe fce1 	bl	8007f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800954e:	480c      	ldr	r0, [pc, #48]	; (8009580 <prvInitialiseTaskLists+0x70>)
 8009550:	f7fe fcde 	bl	8007f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009554:	480b      	ldr	r0, [pc, #44]	; (8009584 <prvInitialiseTaskLists+0x74>)
 8009556:	f7fe fcdb 	bl	8007f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <prvInitialiseTaskLists+0x78>)
 800955c:	4a05      	ldr	r2, [pc, #20]	; (8009574 <prvInitialiseTaskLists+0x64>)
 800955e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvInitialiseTaskLists+0x7c>)
 8009562:	4a05      	ldr	r2, [pc, #20]	; (8009578 <prvInitialiseTaskLists+0x68>)
 8009564:	601a      	str	r2, [r3, #0]
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	200008a8 	.word	0x200008a8
 8009574:	20000d08 	.word	0x20000d08
 8009578:	20000d1c 	.word	0x20000d1c
 800957c:	20000d38 	.word	0x20000d38
 8009580:	20000d4c 	.word	0x20000d4c
 8009584:	20000d64 	.word	0x20000d64
 8009588:	20000d30 	.word	0x20000d30
 800958c:	20000d34 	.word	0x20000d34

08009590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009596:	e019      	b.n	80095cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009598:	f000 fdd4 	bl	800a144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <prvCheckTasksWaitingTermination+0x50>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fd3b 	bl	8008024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	4a0b      	ldr	r2, [pc, #44]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b8:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3b01      	subs	r3, #1
 80095be:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095c2:	f000 fdef 	bl	800a1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f810 	bl	80095ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095cc:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e1      	bne.n	8009598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000d4c 	.word	0x20000d4c
 80095e4:	20000d78 	.word	0x20000d78
 80095e8:	20000d60 	.word	0x20000d60

080095ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d108      	bne.n	8009610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	4618      	mov	r0, r3
 8009604:	f000 ff8c 	bl	800a520 <vPortFree>
				vPortFree( pxTCB );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 ff89 	bl	800a520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800960e:	e018      	b.n	8009642 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009616:	2b01      	cmp	r3, #1
 8009618:	d103      	bne.n	8009622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 ff80 	bl	800a520 <vPortFree>
	}
 8009620:	e00f      	b.n	8009642 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009628:	2b02      	cmp	r3, #2
 800962a:	d00a      	beq.n	8009642 <prvDeleteTCB+0x56>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	60fb      	str	r3, [r7, #12]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <prvDeleteTCB+0x54>
	}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <prvResetNextTaskUnblockTime+0x38>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <prvResetNextTaskUnblockTime+0x3c>)
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009664:	e008      	b.n	8009678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <prvResetNextTaskUnblockTime+0x38>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	4a04      	ldr	r2, [pc, #16]	; (8009688 <prvResetNextTaskUnblockTime+0x3c>)
 8009676:	6013      	str	r3, [r2, #0]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000d30 	.word	0x20000d30
 8009688:	20000d98 	.word	0x20000d98

0800968c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009692:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <xTaskGetSchedulerState+0x34>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800969a:	2301      	movs	r3, #1
 800969c:	607b      	str	r3, [r7, #4]
 800969e:	e008      	b.n	80096b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a0:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <xTaskGetSchedulerState+0x38>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096a8:	2302      	movs	r3, #2
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e001      	b.n	80096b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096ae:	2300      	movs	r3, #0
 80096b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096b2:	687b      	ldr	r3, [r7, #4]
	}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	20000d84 	.word	0x20000d84
 80096c4:	20000da0 	.word	0x20000da0

080096c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d056      	beq.n	800978c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096de:	4b2e      	ldr	r3, [pc, #184]	; (8009798 <xTaskPriorityDisinherit+0xd0>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d00a      	beq.n	80096fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	60fb      	str	r3, [r7, #12]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009720:	1e5a      	subs	r2, r3, #1
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972e:	429a      	cmp	r2, r3
 8009730:	d02c      	beq.n	800978c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009736:	2b00      	cmp	r3, #0
 8009738:	d128      	bne.n	800978c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3304      	adds	r3, #4
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe fc70 	bl	8008024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <xTaskPriorityDisinherit+0xd4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d903      	bls.n	800976c <xTaskPriorityDisinherit+0xa4>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a0c      	ldr	r2, [pc, #48]	; (800979c <xTaskPriorityDisinherit+0xd4>)
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <xTaskPriorityDisinherit+0xd8>)
 800977a:	441a      	add	r2, r3
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	3304      	adds	r3, #4
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f7fe fbf1 	bl	8007f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800978c:	697b      	ldr	r3, [r7, #20]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200008a4 	.word	0x200008a4
 800979c:	20000d80 	.word	0x20000d80
 80097a0:	200008a8 	.word	0x200008a8

080097a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097ae:	4b21      	ldr	r3, [pc, #132]	; (8009834 <prvAddCurrentTaskToDelayedList+0x90>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b4:	4b20      	ldr	r3, [pc, #128]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe fc32 	bl	8008024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d10a      	bne.n	80097de <prvAddCurrentTaskToDelayedList+0x3a>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d007      	beq.n	80097de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ce:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4819      	ldr	r0, [pc, #100]	; (800983c <prvAddCurrentTaskToDelayedList+0x98>)
 80097d8:	f7fe fbc7 	bl	8007f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097dc:	e026      	b.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4413      	add	r3, r2
 80097e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097e6:	4b14      	ldr	r3, [pc, #80]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d209      	bcs.n	800980a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7fe fbd5 	bl	8007fb2 <vListInsert>
}
 8009808:	e010      	b.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980a:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <prvAddCurrentTaskToDelayedList+0x94>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3304      	adds	r3, #4
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fe fbcb 	bl	8007fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	d202      	bcs.n	800982c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009826:	4a08      	ldr	r2, [pc, #32]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6013      	str	r3, [r2, #0]
}
 800982c:	bf00      	nop
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	20000d7c 	.word	0x20000d7c
 8009838:	200008a4 	.word	0x200008a4
 800983c:	20000d64 	.word	0x20000d64
 8009840:	20000d34 	.word	0x20000d34
 8009844:	20000d30 	.word	0x20000d30
 8009848:	20000d98 	.word	0x20000d98

0800984c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009856:	f000 fb07 	bl	8009e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800985a:	4b1c      	ldr	r3, [pc, #112]	; (80098cc <xTimerCreateTimerTask+0x80>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d021      	beq.n	80098a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800986a:	1d3a      	adds	r2, r7, #4
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	f107 030c 	add.w	r3, r7, #12
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe fb31 	bl	8007edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	9202      	str	r2, [sp, #8]
 8009882:	9301      	str	r3, [sp, #4]
 8009884:	2302      	movs	r3, #2
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	2300      	movs	r3, #0
 800988a:	460a      	mov	r2, r1
 800988c:	4910      	ldr	r1, [pc, #64]	; (80098d0 <xTimerCreateTimerTask+0x84>)
 800988e:	4811      	ldr	r0, [pc, #68]	; (80098d4 <xTimerCreateTimerTask+0x88>)
 8009890:	f7ff f8de 	bl	8008a50 <xTaskCreateStatic>
 8009894:	4603      	mov	r3, r0
 8009896:	4a10      	ldr	r2, [pc, #64]	; (80098d8 <xTimerCreateTimerTask+0x8c>)
 8009898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <xTimerCreateTimerTask+0x8c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098a2:	2301      	movs	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	613b      	str	r3, [r7, #16]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098c2:	697b      	ldr	r3, [r7, #20]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000dd4 	.word	0x20000dd4
 80098d0:	0800b520 	.word	0x0800b520
 80098d4:	08009a11 	.word	0x08009a11
 80098d8:	20000dd8 	.word	0x20000dd8

080098dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <xTimerGenericCommand+0x2e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	623b      	str	r3, [r7, #32]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <xTimerGenericCommand+0x98>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02a      	beq.n	8009968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b05      	cmp	r3, #5
 8009922:	dc18      	bgt.n	8009956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009924:	f7ff feb2 	bl	800968c <xTaskGetSchedulerState>
 8009928:	4603      	mov	r3, r0
 800992a:	2b02      	cmp	r3, #2
 800992c:	d109      	bne.n	8009942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800992e:	4b11      	ldr	r3, [pc, #68]	; (8009974 <xTimerGenericCommand+0x98>)
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	f107 0110 	add.w	r1, r7, #16
 8009936:	2300      	movs	r3, #0
 8009938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993a:	f7fe fca1 	bl	8008280 <xQueueGenericSend>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24
 8009940:	e012      	b.n	8009968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009942:	4b0c      	ldr	r3, [pc, #48]	; (8009974 <xTimerGenericCommand+0x98>)
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f107 0110 	add.w	r1, r7, #16
 800994a:	2300      	movs	r3, #0
 800994c:	2200      	movs	r2, #0
 800994e:	f7fe fc97 	bl	8008280 <xQueueGenericSend>
 8009952:	6278      	str	r0, [r7, #36]	; 0x24
 8009954:	e008      	b.n	8009968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009956:	4b07      	ldr	r3, [pc, #28]	; (8009974 <xTimerGenericCommand+0x98>)
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	f107 0110 	add.w	r1, r7, #16
 800995e:	2300      	movs	r3, #0
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f7fe fd8b 	bl	800847c <xQueueGenericSendFromISR>
 8009966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800996a:	4618      	mov	r0, r3
 800996c:	3728      	adds	r7, #40	; 0x28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000dd4 	.word	0x20000dd4

08009978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <prvProcessExpiredTimer+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3304      	adds	r3, #4
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fb47 	bl	8008024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d022      	beq.n	80099ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	699a      	ldr	r2, [r3, #24]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	18d1      	adds	r1, r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	6978      	ldr	r0, [r7, #20]
 80099b2:	f000 f8d1 	bl	8009b58 <prvInsertTimerInActiveList>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01f      	beq.n	80099fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099bc:	2300      	movs	r3, #0
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	2300      	movs	r3, #0
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	2100      	movs	r1, #0
 80099c6:	6978      	ldr	r0, [r7, #20]
 80099c8:	f7ff ff88 	bl	80098dc <xTimerGenericCommand>
 80099cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d113      	bne.n	80099fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	6978      	ldr	r0, [r7, #20]
 8009a02:	4798      	blx	r3
}
 8009a04:	bf00      	nop
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000dcc 	.word	0x20000dcc

08009a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a18:	f107 0308 	add.w	r3, r7, #8
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f857 	bl	8009ad0 <prvGetNextExpireTime>
 8009a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4619      	mov	r1, r3
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f803 	bl	8009a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a2e:	f000 f8d5 	bl	8009bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a32:	e7f1      	b.n	8009a18 <prvTimerTask+0x8>

08009a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a3e:	f7ff fa43 	bl	8008ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f866 	bl	8009b18 <prvSampleTimeNow>
 8009a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d130      	bne.n	8009ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10a      	bne.n	8009a70 <prvProcessTimerOrBlockTask+0x3c>
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d806      	bhi.n	8009a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a62:	f7ff fa3f 	bl	8008ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff ff85 	bl	8009978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a6e:	e024      	b.n	8009aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d008      	beq.n	8009a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a76:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <prvProcessTimerOrBlockTask+0x90>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <prvProcessTimerOrBlockTask+0x50>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <prvProcessTimerOrBlockTask+0x52>
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <prvProcessTimerOrBlockTask+0x94>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7fe ffa7 	bl	80089e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a9a:	f7ff fa23 	bl	8008ee4 <xTaskResumeAll>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <prvProcessTimerOrBlockTask+0x98>)
 8009aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	f3bf 8f6f 	isb	sy
}
 8009ab4:	e001      	b.n	8009aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ab6:	f7ff fa15 	bl	8008ee4 <xTaskResumeAll>
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20000dd0 	.word	0x20000dd0
 8009ac8:	20000dd4 	.word	0x20000dd4
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <prvGetNextExpireTime+0x44>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <prvGetNextExpireTime+0x16>
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	e000      	b.n	8009ae8 <prvGetNextExpireTime+0x18>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af4:	4b07      	ldr	r3, [pc, #28]	; (8009b14 <prvGetNextExpireTime+0x44>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e001      	b.n	8009b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b04:	68fb      	ldr	r3, [r7, #12]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000dcc 	.word	0x20000dcc

08009b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b20:	f7ff fa7e 	bl	8009020 <xTaskGetTickCount>
 8009b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <prvSampleTimeNow+0x3c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d205      	bcs.n	8009b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b30:	f000 f936 	bl	8009da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e002      	b.n	8009b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b42:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <prvSampleTimeNow+0x3c>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b48:	68fb      	ldr	r3, [r7, #12]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000ddc 	.word	0x20000ddc

08009b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d812      	bhi.n	8009ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e01b      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b92:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <prvInsertTimerInActiveList+0x7c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7fe fa08 	bl	8007fb2 <vListInsert>
 8009ba2:	e012      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d206      	bcs.n	8009bba <prvInsertTimerInActiveList+0x62>
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d302      	bcc.n	8009bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e007      	b.n	8009bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <prvInsertTimerInActiveList+0x80>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7fe f9f4 	bl	8007fb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bca:	697b      	ldr	r3, [r7, #20]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000dd0 	.word	0x20000dd0
 8009bd8:	20000dcc 	.word	0x20000dcc

08009bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be2:	e0ca      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da18      	bge.n	8009c1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bea:	1d3b      	adds	r3, r7, #4
 8009bec:	3304      	adds	r3, #4
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10a      	bne.n	8009c0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	61fb      	str	r3, [r7, #28]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c12:	6850      	ldr	r0, [r2, #4]
 8009c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c16:	6892      	ldr	r2, [r2, #8]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f2c0 80aa 	blt.w	8009d78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe f9f5 	bl	8008024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff ff6b 	bl	8009b18 <prvSampleTimeNow>
 8009c42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	f200 8097 	bhi.w	8009d7a <prvProcessReceivedCommands+0x19e>
 8009c4c:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <prvProcessReceivedCommands+0x78>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c7d 	.word	0x08009c7d
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009cf1 	.word	0x08009cf1
 8009c64:	08009d05 	.word	0x08009d05
 8009c68:	08009d4f 	.word	0x08009d4f
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c7d 	.word	0x08009c7d
 8009c74:	08009cf1 	.word	0x08009cf1
 8009c78:	08009d05 	.word	0x08009d05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c82:	f043 0301 	orr.w	r3, r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	18d1      	adds	r1, r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c9c:	f7ff ff5c 	bl	8009b58 <prvInsertTimerInActiveList>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d069      	beq.n	8009d7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d05e      	beq.n	8009d7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	441a      	add	r2, r3
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cce:	f7ff fe05 	bl	80098dc <xTimerGenericCommand>
 8009cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d14f      	bne.n	8009d7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61bb      	str	r3, [r7, #24]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf6:	f023 0301 	bic.w	r3, r3, #1
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d02:	e03a      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	617b      	str	r3, [r7, #20]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	18d1      	adds	r1, r2, r3
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d48:	f7ff ff06 	bl	8009b58 <prvInsertTimerInActiveList>
					break;
 8009d4c:	e015      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5e:	f000 fbdf 	bl	800a520 <vPortFree>
 8009d62:	e00a      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6a:	f023 0301 	bic.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d76:	e000      	b.n	8009d7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d7a:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <prvProcessReceivedCommands+0x1c0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1d39      	adds	r1, r7, #4
 8009d80:	2200      	movs	r2, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fc16 	bl	80085b4 <xQueueReceive>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f47f af2a 	bne.w	8009be4 <prvProcessReceivedCommands+0x8>
	}
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	3730      	adds	r7, #48	; 0x30
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000dd4 	.word	0x20000dd4

08009da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009da6:	e048      	b.n	8009e3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009da8:	4b2d      	ldr	r3, [pc, #180]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db2:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe f92f 	bl	8008024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d02e      	beq.n	8009e3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	4413      	add	r3, r2
 8009de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d90e      	bls.n	8009e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7fe f8d4 	bl	8007fb2 <vListInsert>
 8009e0a:	e016      	b.n	8009e3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	2300      	movs	r3, #0
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	2100      	movs	r1, #0
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f7ff fd60 	bl	80098dc <xTimerGenericCommand>
 8009e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	603b      	str	r3, [r7, #0]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1b1      	bne.n	8009da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e4a:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <prvSwitchTimerLists+0xc4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a04      	ldr	r2, [pc, #16]	; (8009e60 <prvSwitchTimerLists+0xc0>)
 8009e50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e52:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <prvSwitchTimerLists+0xc4>)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	6013      	str	r3, [r2, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000dcc 	.word	0x20000dcc
 8009e64:	20000dd0 	.word	0x20000dd0

08009e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e6e:	f000 f969 	bl	800a144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d120      	bne.n	8009ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e7a:	4814      	ldr	r0, [pc, #80]	; (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e7c:	f7fe f848 	bl	8007f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e80:	4813      	ldr	r0, [pc, #76]	; (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e82:	f7fe f845 	bl	8007f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <prvCheckForValidListAndQueue+0x6c>)
 8009e88:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <prvCheckForValidListAndQueue+0x64>)
 8009e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <prvCheckForValidListAndQueue+0x70>)
 8009e8e:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <prvCheckForValidListAndQueue+0x68>)
 8009e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e92:	2300      	movs	r3, #0
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <prvCheckForValidListAndQueue+0x74>)
 8009e98:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <prvCheckForValidListAndQueue+0x78>)
 8009e9a:	2110      	movs	r1, #16
 8009e9c:	200a      	movs	r0, #10
 8009e9e:	f7fe f953 	bl	8008148 <xQueueGenericCreateStatic>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4a08      	ldr	r2, [pc, #32]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ea8:	4b07      	ldr	r3, [pc, #28]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d005      	beq.n	8009ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <prvCheckForValidListAndQueue+0x60>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	490b      	ldr	r1, [pc, #44]	; (8009ee4 <prvCheckForValidListAndQueue+0x7c>)
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fd6c 	bl	8008994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ebc:	f000 f972 	bl	800a1a4 <vPortExitCritical>
}
 8009ec0:	bf00      	nop
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000dd4 	.word	0x20000dd4
 8009ecc:	20000da4 	.word	0x20000da4
 8009ed0:	20000db8 	.word	0x20000db8
 8009ed4:	20000dcc 	.word	0x20000dcc
 8009ed8:	20000dd0 	.word	0x20000dd0
 8009edc:	20000e80 	.word	0x20000e80
 8009ee0:	20000de0 	.word	0x20000de0
 8009ee4:	0800b528 	.word	0x0800b528

08009ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3b04      	subs	r3, #4
 8009ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3b04      	subs	r3, #4
 8009f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f023 0201 	bic.w	r2, r3, #1
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f18:	4a0c      	ldr	r2, [pc, #48]	; (8009f4c <pxPortInitialiseStack+0x64>)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b14      	subs	r3, #20
 8009f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f06f 0202 	mvn.w	r2, #2
 8009f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3b20      	subs	r3, #32
 8009f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	08009f51 	.word	0x08009f51

08009f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f5a:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <prvTaskExitError+0x54>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d00a      	beq.n	8009f7a <prvTaskExitError+0x2a>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	60fb      	str	r3, [r7, #12]
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <prvTaskExitError+0x28>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60bb      	str	r3, [r7, #8]
}
 8009f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f8e:	bf00      	nop
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d0fc      	beq.n	8009f90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f96:	bf00      	nop
 8009f98:	bf00      	nop
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	20000120 	.word	0x20000120
	...

08009fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <pxCurrentTCBConst2>)
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	6808      	ldr	r0, [r1, #0]
 8009fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	f380 8809 	msr	PSP, r0
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8811 	msr	BASEPRI, r0
 8009fca:	4770      	bx	lr
 8009fcc:	f3af 8000 	nop.w

08009fd0 <pxCurrentTCBConst2>:
 8009fd0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop

08009fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fd8:	4808      	ldr	r0, [pc, #32]	; (8009ffc <prvPortStartFirstTask+0x24>)
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	6800      	ldr	r0, [r0, #0]
 8009fde:	f380 8808 	msr	MSP, r0
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f380 8814 	msr	CONTROL, r0
 8009fea:	b662      	cpsie	i
 8009fec:	b661      	cpsie	f
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	df00      	svc	0
 8009ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009ffa:	bf00      	nop
 8009ffc:	e000ed08 	.word	0xe000ed08

0800a000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a006:	4b46      	ldr	r3, [pc, #280]	; (800a120 <xPortStartScheduler+0x120>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a46      	ldr	r2, [pc, #280]	; (800a124 <xPortStartScheduler+0x124>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10a      	bne.n	800a026 <xPortStartScheduler+0x26>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	613b      	str	r3, [r7, #16]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a026:	4b3e      	ldr	r3, [pc, #248]	; (800a120 <xPortStartScheduler+0x120>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <xPortStartScheduler+0x128>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10a      	bne.n	800a046 <xPortStartScheduler+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a046:	4b39      	ldr	r3, [pc, #228]	; (800a12c <xPortStartScheduler+0x12c>)
 800a048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	22ff      	movs	r2, #255	; 0xff
 800a056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4b31      	ldr	r3, [pc, #196]	; (800a130 <xPortStartScheduler+0x130>)
 800a06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a06e:	4b31      	ldr	r3, [pc, #196]	; (800a134 <xPortStartScheduler+0x134>)
 800a070:	2207      	movs	r2, #7
 800a072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a074:	e009      	b.n	800a08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a076:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <xPortStartScheduler+0x134>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	4a2d      	ldr	r2, [pc, #180]	; (800a134 <xPortStartScheduler+0x134>)
 800a07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a092:	2b80      	cmp	r3, #128	; 0x80
 800a094:	d0ef      	beq.n	800a076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a096:	4b27      	ldr	r3, [pc, #156]	; (800a134 <xPortStartScheduler+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1c3 0307 	rsb	r3, r3, #7
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d00a      	beq.n	800a0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60bb      	str	r3, [r7, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <xPortStartScheduler+0x134>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0ca:	4a1a      	ldr	r2, [pc, #104]	; (800a134 <xPortStartScheduler+0x134>)
 800a0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0d6:	4b18      	ldr	r3, [pc, #96]	; (800a138 <xPortStartScheduler+0x138>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a17      	ldr	r2, [pc, #92]	; (800a138 <xPortStartScheduler+0x138>)
 800a0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a14      	ldr	r2, [pc, #80]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0ee:	f000 f8dd 	bl	800a2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0f2:	4b12      	ldr	r3, [pc, #72]	; (800a13c <xPortStartScheduler+0x13c>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0f8:	f000 f8fc 	bl	800a2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0fc:	4b10      	ldr	r3, [pc, #64]	; (800a140 <xPortStartScheduler+0x140>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <xPortStartScheduler+0x140>)
 800a102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a108:	f7ff ff66 	bl	8009fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a10c:	f7ff f852 	bl	80091b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a110:	f7ff ff1e 	bl	8009f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	e000ed00 	.word	0xe000ed00
 800a124:	410fc271 	.word	0x410fc271
 800a128:	410fc270 	.word	0x410fc270
 800a12c:	e000e400 	.word	0xe000e400
 800a130:	20000ed0 	.word	0x20000ed0
 800a134:	20000ed4 	.word	0x20000ed4
 800a138:	e000ed20 	.word	0xe000ed20
 800a13c:	20000120 	.word	0x20000120
 800a140:	e000ef34 	.word	0xe000ef34

0800a144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	607b      	str	r3, [r7, #4]
}
 800a15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a15e:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <vPortEnterCritical+0x58>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <vPortEnterCritical+0x58>)
 800a166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <vPortEnterCritical+0x58>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d10f      	bne.n	800a190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a170:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <vPortEnterCritical+0x5c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <vPortEnterCritical+0x4c>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	603b      	str	r3, [r7, #0]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <vPortEnterCritical+0x4a>
	}
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	20000120 	.word	0x20000120
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1aa:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10a      	bne.n	800a1c8 <vPortExitCritical+0x24>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	607b      	str	r3, [r7, #4]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <vPortExitCritical+0x42>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	f383 8811 	msr	BASEPRI, r3
}
 800a1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000120 	.word	0x20000120
	...

0800a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a200:	f3ef 8009 	mrs	r0, PSP
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <pxCurrentTCBConst>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f01e 0f10 	tst.w	lr, #16
 800a210:	bf08      	it	eq
 800a212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a224:	f380 8811 	msr	BASEPRI, r0
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f7fe ffc0 	bl	80091b4 <vTaskSwitchContext>
 800a234:	f04f 0000 	mov.w	r0, #0
 800a238:	f380 8811 	msr	BASEPRI, r0
 800a23c:	bc09      	pop	{r0, r3}
 800a23e:	6819      	ldr	r1, [r3, #0]
 800a240:	6808      	ldr	r0, [r1, #0]
 800a242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a246:	f01e 0f10 	tst.w	lr, #16
 800a24a:	bf08      	it	eq
 800a24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a250:	f380 8809 	msr	PSP, r0
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w

0800a260 <pxCurrentTCBConst>:
 800a260:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop

0800a268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
}
 800a280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a282:	f7fe fedd 	bl	8009040 <xTaskIncrementTick>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <xPortSysTickHandler+0x40>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f383 8811 	msr	BASEPRI, r3
}
 800a29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <vPortSetupTimerInterrupt+0x38>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <vPortSetupTimerInterrupt+0x3c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a0a      	ldr	r2, [pc, #40]	; (800a2ec <vPortSetupTimerInterrupt+0x40>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	099b      	lsrs	r3, r3, #6
 800a2c8:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <vPortSetupTimerInterrupt+0x44>)
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ce:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	601a      	str	r2, [r3, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	e000e010 	.word	0xe000e010
 800a2e4:	e000e018 	.word	0xe000e018
 800a2e8:	20000004 	.word	0x20000004
 800a2ec:	10624dd3 	.word	0x10624dd3
 800a2f0:	e000e014 	.word	0xe000e014

0800a2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a304 <vPortEnableVFP+0x10>
 800a2f8:	6801      	ldr	r1, [r0, #0]
 800a2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2fe:	6001      	str	r1, [r0, #0]
 800a300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a302:	bf00      	nop
 800a304:	e000ed88 	.word	0xe000ed88

0800a308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a30e:	f3ef 8305 	mrs	r3, IPSR
 800a312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d914      	bls.n	800a344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a31a:	4a17      	ldr	r2, [pc, #92]	; (800a378 <vPortValidateInterruptPriority+0x70>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a324:	4b15      	ldr	r3, [pc, #84]	; (800a37c <vPortValidateInterruptPriority+0x74>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	7afa      	ldrb	r2, [r7, #11]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d20a      	bcs.n	800a344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a344:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <vPortValidateInterruptPriority+0x78>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <vPortValidateInterruptPriority+0x7c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d90a      	bls.n	800a36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	603b      	str	r3, [r7, #0]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <vPortValidateInterruptPriority+0x60>
	}
 800a36a:	bf00      	nop
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	e000e3f0 	.word	0xe000e3f0
 800a37c:	20000ed0 	.word	0x20000ed0
 800a380:	e000ed0c 	.word	0xe000ed0c
 800a384:	20000ed4 	.word	0x20000ed4

0800a388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	; 0x28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a394:	f7fe fd98 	bl	8008ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a398:	4b5b      	ldr	r3, [pc, #364]	; (800a508 <pvPortMalloc+0x180>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3a0:	f000 f920 	bl	800a5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3a4:	4b59      	ldr	r3, [pc, #356]	; (800a50c <pvPortMalloc+0x184>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 8093 	bne.w	800a4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01d      	beq.n	800a3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d014      	beq.n	800a3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f023 0307 	bic.w	r3, r3, #7
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	617b      	str	r3, [r7, #20]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d06e      	beq.n	800a4d8 <pvPortMalloc+0x150>
 800a3fa:	4b45      	ldr	r3, [pc, #276]	; (800a510 <pvPortMalloc+0x188>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d869      	bhi.n	800a4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a404:	4b43      	ldr	r3, [pc, #268]	; (800a514 <pvPortMalloc+0x18c>)
 800a406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a408:	4b42      	ldr	r3, [pc, #264]	; (800a514 <pvPortMalloc+0x18c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a40e:	e004      	b.n	800a41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d903      	bls.n	800a42c <pvPortMalloc+0xa4>
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f1      	bne.n	800a410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a42c:	4b36      	ldr	r3, [pc, #216]	; (800a508 <pvPortMalloc+0x180>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a432:	429a      	cmp	r2, r3
 800a434:	d050      	beq.n	800a4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2208      	movs	r2, #8
 800a43c:	4413      	add	r3, r2
 800a43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	2308      	movs	r3, #8
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	429a      	cmp	r2, r3
 800a456:	d91f      	bls.n	800a498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <pvPortMalloc+0xf8>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	613b      	str	r3, [r7, #16]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a492:	69b8      	ldr	r0, [r7, #24]
 800a494:	f000 f908 	bl	800a6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a498:	4b1d      	ldr	r3, [pc, #116]	; (800a510 <pvPortMalloc+0x188>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	4a1b      	ldr	r2, [pc, #108]	; (800a510 <pvPortMalloc+0x188>)
 800a4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <pvPortMalloc+0x188>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <pvPortMalloc+0x190>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d203      	bcs.n	800a4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4b2:	4b17      	ldr	r3, [pc, #92]	; (800a510 <pvPortMalloc+0x188>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a18      	ldr	r2, [pc, #96]	; (800a518 <pvPortMalloc+0x190>)
 800a4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	4b13      	ldr	r3, [pc, #76]	; (800a50c <pvPortMalloc+0x184>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <pvPortMalloc+0x194>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	4a11      	ldr	r2, [pc, #68]	; (800a51c <pvPortMalloc+0x194>)
 800a4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4d8:	f7fe fd04 	bl	8008ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <pvPortMalloc+0x174>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60fb      	str	r3, [r7, #12]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <pvPortMalloc+0x172>
	return pvReturn;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3728      	adds	r7, #40	; 0x28
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20001a98 	.word	0x20001a98
 800a50c:	20001aac 	.word	0x20001aac
 800a510:	20001a9c 	.word	0x20001a9c
 800a514:	20001a90 	.word	0x20001a90
 800a518:	20001aa0 	.word	0x20001aa0
 800a51c:	20001aa4 	.word	0x20001aa4

0800a520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04d      	beq.n	800a5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a532:	2308      	movs	r3, #8
 800a534:	425b      	negs	r3, r3
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <vPortFree+0xb8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4013      	ands	r3, r2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <vPortFree+0x44>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	60fb      	str	r3, [r7, #12]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <vPortFree+0x62>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60bb      	str	r3, [r7, #8]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <vPortFree+0xb8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d01e      	beq.n	800a5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11a      	bne.n	800a5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <vPortFree+0xb8>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	401a      	ands	r2, r3
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5a8:	f7fe fc8e 	bl	8008ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <vPortFree+0xbc>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4a09      	ldr	r2, [pc, #36]	; (800a5dc <vPortFree+0xbc>)
 800a5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ba:	6938      	ldr	r0, [r7, #16]
 800a5bc:	f000 f874 	bl	800a6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <vPortFree+0xc0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	4a06      	ldr	r2, [pc, #24]	; (800a5e0 <vPortFree+0xc0>)
 800a5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5ca:	f7fe fc8b 	bl	8008ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ce:	bf00      	nop
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20001aac 	.word	0x20001aac
 800a5dc:	20001a9c 	.word	0x20001a9c
 800a5e0:	20001aa8 	.word	0x20001aa8

0800a5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5f0:	4b27      	ldr	r3, [pc, #156]	; (800a690 <prvHeapInit+0xac>)
 800a5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00c      	beq.n	800a618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3307      	adds	r3, #7
 800a602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <prvHeapInit+0xac>)
 800a614:	4413      	add	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a61c:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <prvHeapInit+0xb0>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a622:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <prvHeapInit+0xb0>)
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4413      	add	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a630:	2208      	movs	r2, #8
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	1a9b      	subs	r3, r3, r2
 800a636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 0307 	bic.w	r3, r3, #7
 800a63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a15      	ldr	r2, [pc, #84]	; (800a698 <prvHeapInit+0xb4>)
 800a644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <prvHeapInit+0xb4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <prvHeapInit+0xb4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a664:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <prvHeapInit+0xb4>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <prvHeapInit+0xb8>)
 800a672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <prvHeapInit+0xbc>)
 800a67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <prvHeapInit+0xc0>)
 800a67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20000ed8 	.word	0x20000ed8
 800a694:	20001a90 	.word	0x20001a90
 800a698:	20001a98 	.word	0x20001a98
 800a69c:	20001aa0 	.word	0x20001aa0
 800a6a0:	20001a9c 	.word	0x20001a9c
 800a6a4:	20001aac 	.word	0x20001aac

0800a6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6b0:	4b28      	ldr	r3, [pc, #160]	; (800a754 <prvInsertBlockIntoFreeList+0xac>)
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	e002      	b.n	800a6bc <prvInsertBlockIntoFreeList+0x14>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d8f7      	bhi.n	800a6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d108      	bne.n	800a6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	441a      	add	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d118      	bne.n	800a730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	4b15      	ldr	r3, [pc, #84]	; (800a758 <prvInsertBlockIntoFreeList+0xb0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d00d      	beq.n	800a726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	441a      	add	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e008      	b.n	800a738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <prvInsertBlockIntoFreeList+0xb0>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	e003      	b.n	800a738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d002      	beq.n	800a746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20001a90 	.word	0x20001a90
 800a758:	20001a98 	.word	0x20001a98

0800a75c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a760:	2200      	movs	r2, #0
 800a762:	4912      	ldr	r1, [pc, #72]	; (800a7ac <MX_USB_DEVICE_Init+0x50>)
 800a764:	4812      	ldr	r0, [pc, #72]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a766:	f7fc f8df 	bl	8006928 <USBD_Init>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a770:	f7f6 fb5a 	bl	8000e28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a774:	490f      	ldr	r1, [pc, #60]	; (800a7b4 <MX_USB_DEVICE_Init+0x58>)
 800a776:	480e      	ldr	r0, [pc, #56]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a778:	f7fc f906 	bl	8006988 <USBD_RegisterClass>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a782:	f7f6 fb51 	bl	8000e28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a786:	490c      	ldr	r1, [pc, #48]	; (800a7b8 <MX_USB_DEVICE_Init+0x5c>)
 800a788:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a78a:	f7fc f827 	bl	80067dc <USBD_CDC_RegisterInterface>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a794:	f7f6 fb48 	bl	8000e28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a798:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a79a:	f7fc f91c 	bl	80069d6 <USBD_Start>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7a4:	f7f6 fb40 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7a8:	bf00      	nop
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000140 	.word	0x20000140
 800a7b0:	20001f00 	.word	0x20001f00
 800a7b4:	2000001c 	.word	0x2000001c
 800a7b8:	2000012c 	.word	0x2000012c

0800a7bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4905      	ldr	r1, [pc, #20]	; (800a7d8 <CDC_Init_FS+0x1c>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	; (800a7dc <CDC_Init_FS+0x20>)
 800a7c6:	f7fc f81e 	bl	8006806 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ca:	4905      	ldr	r1, [pc, #20]	; (800a7e0 <CDC_Init_FS+0x24>)
 800a7cc:	4803      	ldr	r0, [pc, #12]	; (800a7dc <CDC_Init_FS+0x20>)
 800a7ce:	f7fc f838 	bl	8006842 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200029d0 	.word	0x200029d0
 800a7dc:	20001f00 	.word	0x20001f00
 800a7e0:	200021d0 	.word	0x200021d0

0800a7e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
 800a800:	4613      	mov	r3, r2
 800a802:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b23      	cmp	r3, #35	; 0x23
 800a808:	f200 8098 	bhi.w	800a93c <CDC_Control_FS+0x148>
 800a80c:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <CDC_Control_FS+0x20>)
 800a80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a812:	bf00      	nop
 800a814:	0800a93d 	.word	0x0800a93d
 800a818:	0800a93d 	.word	0x0800a93d
 800a81c:	0800a93d 	.word	0x0800a93d
 800a820:	0800a93d 	.word	0x0800a93d
 800a824:	0800a93d 	.word	0x0800a93d
 800a828:	0800a93d 	.word	0x0800a93d
 800a82c:	0800a93d 	.word	0x0800a93d
 800a830:	0800a93d 	.word	0x0800a93d
 800a834:	0800a93d 	.word	0x0800a93d
 800a838:	0800a93d 	.word	0x0800a93d
 800a83c:	0800a93d 	.word	0x0800a93d
 800a840:	0800a93d 	.word	0x0800a93d
 800a844:	0800a93d 	.word	0x0800a93d
 800a848:	0800a93d 	.word	0x0800a93d
 800a84c:	0800a93d 	.word	0x0800a93d
 800a850:	0800a93d 	.word	0x0800a93d
 800a854:	0800a93d 	.word	0x0800a93d
 800a858:	0800a93d 	.word	0x0800a93d
 800a85c:	0800a93d 	.word	0x0800a93d
 800a860:	0800a93d 	.word	0x0800a93d
 800a864:	0800a93d 	.word	0x0800a93d
 800a868:	0800a93d 	.word	0x0800a93d
 800a86c:	0800a93d 	.word	0x0800a93d
 800a870:	0800a93d 	.word	0x0800a93d
 800a874:	0800a93d 	.word	0x0800a93d
 800a878:	0800a93d 	.word	0x0800a93d
 800a87c:	0800a93d 	.word	0x0800a93d
 800a880:	0800a93d 	.word	0x0800a93d
 800a884:	0800a93d 	.word	0x0800a93d
 800a888:	0800a93d 	.word	0x0800a93d
 800a88c:	0800a93d 	.word	0x0800a93d
 800a890:	0800a93d 	.word	0x0800a93d
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8e9 	.word	0x0800a8e9
 800a89c:	0800a93d 	.word	0x0800a93d
 800a8a0:	0800a93d 	.word	0x0800a93d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	3303      	adds	r3, #3
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	061b      	lsls	r3, r3, #24
 800a8c6:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	4b20      	ldr	r3, [pc, #128]	; (800a94c <CDC_Control_FS+0x158>)
 800a8cc:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	791a      	ldrb	r2, [r3, #4]
 800a8d2:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <CDC_Control_FS+0x158>)
 800a8d4:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	795a      	ldrb	r2, [r3, #5]
 800a8da:	4b1c      	ldr	r3, [pc, #112]	; (800a94c <CDC_Control_FS+0x158>)
 800a8dc:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	799a      	ldrb	r2, [r3, #6]
 800a8e2:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <CDC_Control_FS+0x158>)
 800a8e4:	719a      	strb	r2, [r3, #6]
		break;
 800a8e6:	e02a      	b.n	800a93e <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800a8e8:	4b18      	ldr	r3, [pc, #96]	; (800a94c <CDC_Control_FS+0x158>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800a8f2:	4b16      	ldr	r3, [pc, #88]	; (800a94c <CDC_Control_FS+0x158>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	0a1a      	lsrs	r2, r3, #8
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	b2d2      	uxtb	r2, r2
 800a8fe:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800a900:	4b12      	ldr	r3, [pc, #72]	; (800a94c <CDC_Control_FS+0x158>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	0c1a      	lsrs	r2, r3, #16
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3302      	adds	r3, #2
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <CDC_Control_FS+0x158>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	0e1a      	lsrs	r2, r3, #24
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	3303      	adds	r3, #3
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	3304      	adds	r3, #4
 800a920:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <CDC_Control_FS+0x158>)
 800a922:	7912      	ldrb	r2, [r2, #4]
 800a924:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	3305      	adds	r3, #5
 800a92a:	4a08      	ldr	r2, [pc, #32]	; (800a94c <CDC_Control_FS+0x158>)
 800a92c:	7952      	ldrb	r2, [r2, #5]
 800a92e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	3306      	adds	r3, #6
 800a934:	4a05      	ldr	r2, [pc, #20]	; (800a94c <CDC_Control_FS+0x158>)
 800a936:	7992      	ldrb	r2, [r2, #6]
 800a938:	701a      	strb	r2, [r3, #0]
		break;
 800a93a:	e000      	b.n	800a93e <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a93c:	bf00      	nop
	}

  return (USBD_OK);
 800a93e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000124 	.word	0x20000124

0800a950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4808      	ldr	r0, [pc, #32]	; (800a980 <CDC_Receive_FS+0x30>)
 800a95e:	f7fb ff70 	bl	8006842 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a962:	4807      	ldr	r0, [pc, #28]	; (800a980 <CDC_Receive_FS+0x30>)
 800a964:	f7fb ffb6 	bl	80068d4 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f6 f802 	bl	8000978 <CDC_ReceiveCallback>
  return (USBD_OK);
 800a974:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20001f00 	.word	0x20001f00

0800a984 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a994:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a99a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e00b      	b.n	800a9c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9aa:	887b      	ldrh	r3, [r7, #2]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4806      	ldr	r0, [pc, #24]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b2:	f7fb ff28 	bl	8006806 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b8:	f7fb ff5c 	bl	8006874 <USBD_CDC_TransmitPacket>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20001f00 	.word	0x20001f00

0800a9d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2212      	movs	r2, #18
 800aa04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20000160 	.word	0x20000160

0800aa18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2204      	movs	r2, #4
 800aa28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa2a:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	20000180 	.word	0x20000180

0800aa3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	4907      	ldr	r1, [pc, #28]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa52:	4808      	ldr	r0, [pc, #32]	; (800aa74 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa54:	f7fd f81b 	bl	8007a8e <USBD_GetString>
 800aa58:	e004      	b.n	800aa64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa5e:	4805      	ldr	r0, [pc, #20]	; (800aa74 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa60:	f7fd f815 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200031d0 	.word	0x200031d0
 800aa74:	0800b530 	.word	0x0800b530

0800aa78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	4904      	ldr	r1, [pc, #16]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa88:	4804      	ldr	r0, [pc, #16]	; (800aa9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa8a:	f7fd f800 	bl	8007a8e <USBD_GetString>
  return USBD_StrDesc;
 800aa8e:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200031d0 	.word	0x200031d0
 800aa9c:	0800b548 	.word	0x0800b548

0800aaa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	221a      	movs	r2, #26
 800aab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aab2:	f000 f855 	bl	800ab60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aab6:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000184 	.word	0x20000184

0800aac4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d105      	bne.n	800aae2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4907      	ldr	r1, [pc, #28]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aada:	4808      	ldr	r0, [pc, #32]	; (800aafc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aadc:	f7fc ffd7 	bl	8007a8e <USBD_GetString>
 800aae0:	e004      	b.n	800aaec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	4904      	ldr	r1, [pc, #16]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aae6:	4805      	ldr	r0, [pc, #20]	; (800aafc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aae8:	f7fc ffd1 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaec:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200031d0 	.word	0x200031d0
 800aafc:	0800b55c 	.word	0x0800b55c

0800ab00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d105      	bne.n	800ab1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab16:	4808      	ldr	r0, [pc, #32]	; (800ab38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab18:	f7fc ffb9 	bl	8007a8e <USBD_GetString>
 800ab1c:	e004      	b.n	800ab28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	4904      	ldr	r1, [pc, #16]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab22:	4805      	ldr	r0, [pc, #20]	; (800ab38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab24:	f7fc ffb3 	bl	8007a8e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	200031d0 	.word	0x200031d0
 800ab38:	0800b568 	.word	0x0800b568

0800ab3c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	220c      	movs	r2, #12
 800ab4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000174 	.word	0x20000174

0800ab60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab66:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <Get_SerialNum+0x44>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <Get_SerialNum+0x48>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab72:	4b0e      	ldr	r3, [pc, #56]	; (800abac <Get_SerialNum+0x4c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d009      	beq.n	800ab9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab86:	2208      	movs	r2, #8
 800ab88:	4909      	ldr	r1, [pc, #36]	; (800abb0 <Get_SerialNum+0x50>)
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f814 	bl	800abb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab90:	2204      	movs	r2, #4
 800ab92:	4908      	ldr	r1, [pc, #32]	; (800abb4 <Get_SerialNum+0x54>)
 800ab94:	68b8      	ldr	r0, [r7, #8]
 800ab96:	f000 f80f 	bl	800abb8 <IntToUnicode>
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	1fff7590 	.word	0x1fff7590
 800aba8:	1fff7594 	.word	0x1fff7594
 800abac:	1fff7598 	.word	0x1fff7598
 800abb0:	20000186 	.word	0x20000186
 800abb4:	20000196 	.word	0x20000196

0800abb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
 800abce:	e027      	b.n	800ac20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	0f1b      	lsrs	r3, r3, #28
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	d80b      	bhi.n	800abf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	0f1b      	lsrs	r3, r3, #28
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4619      	mov	r1, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	440b      	add	r3, r1
 800abe8:	3230      	adds	r2, #48	; 0x30
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e00a      	b.n	800ac06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	0f1b      	lsrs	r3, r3, #28
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4619      	mov	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	440b      	add	r3, r1
 800ac00:	3237      	adds	r2, #55	; 0x37
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	011b      	lsls	r3, r3, #4
 800ac0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	3301      	adds	r3, #1
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4413      	add	r3, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	75fb      	strb	r3, [r7, #23]
 800ac20:	7dfa      	ldrb	r2, [r7, #23]
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d3d3      	bcc.n	800abd0 <IntToUnicode+0x18>
  }
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac40:	f107 0314 	add.w	r3, r7, #20
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	609a      	str	r2, [r3, #8]
 800ac4c:	60da      	str	r2, [r3, #12]
 800ac4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac58:	d14e      	bne.n	800acf8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5e:	4a28      	ldr	r2, [pc, #160]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac60:	f043 0301 	orr.w	r3, r3, #1
 800ac64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac66:	4b26      	ldr	r3, [pc, #152]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac80:	2303      	movs	r3, #3
 800ac82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac84:	230a      	movs	r3, #10
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac88:	f107 0314 	add.w	r3, r7, #20
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac92:	f7f6 fd49 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9a:	4a19      	ldr	r2, [pc, #100]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aca2:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800aca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acae:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d114      	bne.n	800ace4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acba:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acbe:	4a10      	ldr	r2, [pc, #64]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acc4:	6593      	str	r3, [r2, #88]	; 0x58
 800acc6:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acce:	60bb      	str	r3, [r7, #8]
 800acd0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800acd2:	f7f8 f859 	bl	8002d88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800acd6:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acda:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ace0:	6593      	str	r3, [r2, #88]	; 0x58
 800ace2:	e001      	b.n	800ace8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ace4:	f7f8 f850 	bl	8002d88 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ace8:	2200      	movs	r2, #0
 800acea:	2105      	movs	r1, #5
 800acec:	2043      	movs	r0, #67	; 0x43
 800acee:	f7f6 fce4 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acf2:	2043      	movs	r0, #67	; 0x43
 800acf4:	f7f6 fcfd 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acf8:	bf00      	nop
 800acfa:	3728      	adds	r7, #40	; 0x28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fb fea6 	bl	8006a6c <USBD_LL_SetupStage>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	440b      	add	r3, r1
 800ad48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	4619      	mov	r1, r3
 800ad52:	f7fb fee0 	bl	8006b16 <USBD_LL_DataOutStage>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3348      	adds	r3, #72	; 0x48
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fb ff29 	bl	8006bdc <USBD_LL_DataInStage>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fc f83d 	bl	8006e20 <USBD_LL_SOF>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adb6:	2301      	movs	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d001      	beq.n	800adc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adc2:	f7f6 f831 	bl	8000e28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adcc:	7bfa      	ldrb	r2, [r7, #15]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7fb ffe7 	bl	8006da4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800addc:	4618      	mov	r0, r3
 800adde:	f7fb ff93 	bl	8006d08 <USBD_LL_Reset>
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fb ffd6 	bl	8006dc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae26:	f043 0306 	orr.w	r3, r3, #6
 800ae2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	e000ed00 	.word	0xe000ed00

0800ae38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae52:	f023 0301 	bic.w	r3, r3, #1
 800ae56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d007      	beq.n	800ae70 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae60:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a07      	ldr	r2, [pc, #28]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae66:	f023 0306 	bic.w	r3, r3, #6
 800ae6a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae6c:	f000 faf6 	bl	800b45c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fb ffba 	bl	8006df0 <USBD_LL_Resume>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	e000ed00 	.word	0xe000ed00

0800ae88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fc f806 	bl	8006eb0 <USBD_LL_IsoOUTIncomplete>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fb ffce 	bl	8006e64 <USBD_LL_IsoINIncomplete>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fc f80c 	bl	8006efc <USBD_LL_DevConnected>
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fc f809 	bl	8006f12 <USBD_LL_DevDisconnected>
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d13c      	bne.n	800af92 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af18:	4a20      	ldr	r2, [pc, #128]	; (800af9c <USBD_LL_Init+0x94>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <USBD_LL_Init+0x94>)
 800af24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af28:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <USBD_LL_Init+0x94>)
 800af2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <USBD_LL_Init+0x94>)
 800af32:	2206      	movs	r2, #6
 800af34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af36:	4b19      	ldr	r3, [pc, #100]	; (800af9c <USBD_LL_Init+0x94>)
 800af38:	2202      	movs	r2, #2
 800af3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <USBD_LL_Init+0x94>)
 800af3e:	2202      	movs	r2, #2
 800af40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af42:	4b16      	ldr	r3, [pc, #88]	; (800af9c <USBD_LL_Init+0x94>)
 800af44:	2200      	movs	r2, #0
 800af46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af48:	4b14      	ldr	r3, [pc, #80]	; (800af9c <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <USBD_LL_Init+0x94>)
 800af50:	2200      	movs	r2, #0
 800af52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <USBD_LL_Init+0x94>)
 800af56:	2200      	movs	r2, #0
 800af58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <USBD_LL_Init+0x94>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <USBD_LL_Init+0x94>)
 800af62:	2200      	movs	r2, #0
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <USBD_LL_Init+0x94>)
 800af68:	f7f6 fe0a 	bl	8001b80 <HAL_PCD_Init>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af72:	f7f5 ff59 	bl	8000e28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af76:	2180      	movs	r1, #128	; 0x80
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <USBD_LL_Init+0x94>)
 800af7a:	f7f7 fe6c 	bl	8002c56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af7e:	2240      	movs	r2, #64	; 0x40
 800af80:	2100      	movs	r1, #0
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <USBD_LL_Init+0x94>)
 800af84:	f7f7 fe20 	bl	8002bc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	2101      	movs	r1, #1
 800af8c:	4803      	ldr	r0, [pc, #12]	; (800af9c <USBD_LL_Init+0x94>)
 800af8e:	f7f7 fe1b 	bl	8002bc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200033d0 	.word	0x200033d0

0800afa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f6 ff06 	bl	8001dc8 <HAL_PCD_Start>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d816      	bhi.n	800aff4 <USBD_LL_Start+0x54>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <USBD_LL_Start+0x2c>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afe3 	.word	0x0800afe3
 800afd4:	0800afe9 	.word	0x0800afe9
 800afd8:	0800afef 	.word	0x0800afef
    case HAL_OK :
      usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	e00b      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	73fb      	strb	r3, [r7, #15]
    break;
 800afe6:	e008      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	e005      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	73fb      	strb	r3, [r7, #15]
    break;
 800aff2:	e002      	b.n	800affa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
    break;
 800aff8:	bf00      	nop
  }
  return usb_status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	4603      	mov	r3, r0
 800b014:	70fb      	strb	r3, [r7, #3]
 800b016:	460b      	mov	r3, r1
 800b018:	70bb      	strb	r3, [r7, #2]
 800b01a:	4613      	mov	r3, r2
 800b01c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b02c:	78bb      	ldrb	r3, [r7, #2]
 800b02e:	883a      	ldrh	r2, [r7, #0]
 800b030:	78f9      	ldrb	r1, [r7, #3]
 800b032:	f7f7 fac1 	bl	80025b8 <HAL_PCD_EP_Open>
 800b036:	4603      	mov	r3, r0
 800b038:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d817      	bhi.n	800b070 <USBD_LL_OpenEP+0x6c>
 800b040:	a201      	add	r2, pc, #4	; (adr r2, 800b048 <USBD_LL_OpenEP+0x44>)
 800b042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b046:	bf00      	nop
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b05f 	.word	0x0800b05f
 800b050:	0800b065 	.word	0x0800b065
 800b054:	0800b06b 	.word	0x0800b06b
    case HAL_OK :
      usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	e00b      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	73fb      	strb	r3, [r7, #15]
    break;
 800b062:	e008      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
    break;
 800b068:	e005      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	73fb      	strb	r3, [r7, #15]
    break;
 800b06e:	e002      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	73fb      	strb	r3, [r7, #15]
    break;
 800b074:	bf00      	nop
  }
  return usb_status;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b09a:	78fa      	ldrb	r2, [r7, #3]
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f7 faf2 	bl	8002688 <HAL_PCD_EP_Close>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d816      	bhi.n	800b0dc <USBD_LL_CloseEP+0x5c>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBD_LL_CloseEP+0x34>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0c5 	.word	0x0800b0c5
 800b0b8:	0800b0cb 	.word	0x0800b0cb
 800b0bc:	0800b0d1 	.word	0x0800b0d1
 800b0c0:	0800b0d7 	.word	0x0800b0d7
    case HAL_OK :
      usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c8:	e00b      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ce:	e008      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d4:	e005      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0da:	e002      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e0:	bf00      	nop
  }
  return usb_status;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b106:	78fa      	ldrb	r2, [r7, #3]
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f7 fb99 	bl	8002842 <HAL_PCD_EP_SetStall>
 800b110:	4603      	mov	r3, r0
 800b112:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b03      	cmp	r3, #3
 800b118:	d816      	bhi.n	800b148 <USBD_LL_StallEP+0x5c>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_LL_StallEP+0x34>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b131 	.word	0x0800b131
 800b124:	0800b137 	.word	0x0800b137
 800b128:	0800b13d 	.word	0x0800b13d
 800b12c:	0800b143 	.word	0x0800b143
    case HAL_OK :
      usb_status = USBD_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
    break;
 800b134:	e00b      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b136:	2303      	movs	r3, #3
 800b138:	73fb      	strb	r3, [r7, #15]
    break;
 800b13a:	e008      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
    break;
 800b140:	e005      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	73fb      	strb	r3, [r7, #15]
    break;
 800b146:	e002      	b.n	800b14e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b148:	2303      	movs	r3, #3
 800b14a:	73fb      	strb	r3, [r7, #15]
    break;
 800b14c:	bf00      	nop
  }
  return usb_status;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7f7 fbc5 	bl	8002906 <HAL_PCD_EP_ClrStall>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	2b03      	cmp	r3, #3
 800b184:	d816      	bhi.n	800b1b4 <USBD_LL_ClearStallEP+0x5c>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <USBD_LL_ClearStallEP+0x34>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b1a3 	.word	0x0800b1a3
 800b194:	0800b1a9 	.word	0x0800b1a9
 800b198:	0800b1af 	.word	0x0800b1af
    case HAL_OK :
      usb_status = USBD_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a0:	e00b      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a6:	e008      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ac:	e005      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b2:	e002      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b8:	bf00      	nop
  }
  return usb_status;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0b      	bge.n	800b1f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	333e      	adds	r3, #62	; 0x3e
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	e00b      	b.n	800b210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	1a9b      	subs	r3, r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b236:	78fa      	ldrb	r2, [r7, #3]
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f7 f997 	bl	800256e <HAL_PCD_SetAddress>
 800b240:	4603      	mov	r3, r0
 800b242:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d816      	bhi.n	800b278 <USBD_LL_SetUSBAddress+0x5c>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <USBD_LL_SetUSBAddress+0x34>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b261 	.word	0x0800b261
 800b254:	0800b267 	.word	0x0800b267
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b273 	.word	0x0800b273
    case HAL_OK :
      usb_status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e00b      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	e008      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b26c:	2301      	movs	r3, #1
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	e005      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	73fb      	strb	r3, [r7, #15]
    break;
 800b276:	e002      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b278:	2303      	movs	r3, #3
 800b27a:	73fb      	strb	r3, [r7, #15]
    break;
 800b27c:	bf00      	nop
  }
  return usb_status;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2a6:	7af9      	ldrb	r1, [r7, #11]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	f7f7 fa8c 	bl	80027c8 <HAL_PCD_EP_Transmit>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b2b4:	7dbb      	ldrb	r3, [r7, #22]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d816      	bhi.n	800b2e8 <USBD_LL_Transmit+0x60>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_LL_Transmit+0x38>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d1 	.word	0x0800b2d1
 800b2c4:	0800b2d7 	.word	0x0800b2d7
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2e3 	.word	0x0800b2e3
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
    break;
 800b2d4:	e00b      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
    break;
 800b2da:	e008      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e0:	e005      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e6:	e002      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	75fb      	strb	r3, [r7, #23]
    break;
 800b2ec:	bf00      	nop
  }
  return usb_status;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	607a      	str	r2, [r7, #4]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	460b      	mov	r3, r1
 800b306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b316:	7af9      	ldrb	r1, [r7, #11]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f7f7 f9fe 	bl	800271c <HAL_PCD_EP_Receive>
 800b320:	4603      	mov	r3, r0
 800b322:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b324:	7dbb      	ldrb	r3, [r7, #22]
 800b326:	2b03      	cmp	r3, #3
 800b328:	d816      	bhi.n	800b358 <USBD_LL_PrepareReceive+0x60>
 800b32a:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <USBD_LL_PrepareReceive+0x38>)
 800b32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b330:	0800b341 	.word	0x0800b341
 800b334:	0800b347 	.word	0x0800b347
 800b338:	0800b34d 	.word	0x0800b34d
 800b33c:	0800b353 	.word	0x0800b353
    case HAL_OK :
      usb_status = USBD_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	75fb      	strb	r3, [r7, #23]
    break;
 800b344:	e00b      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b346:	2303      	movs	r3, #3
 800b348:	75fb      	strb	r3, [r7, #23]
    break;
 800b34a:	e008      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
    break;
 800b350:	e005      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b352:	2303      	movs	r3, #3
 800b354:	75fb      	strb	r3, [r7, #23]
    break;
 800b356:	e002      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	75fb      	strb	r3, [r7, #23]
    break;
 800b35c:	bf00      	nop
  }
  return usb_status;
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b37a:	78fa      	ldrb	r2, [r7, #3]
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f7 fa0a 	bl	8002798 <HAL_PCD_EP_GetRxCount>
 800b384:	4603      	mov	r3, r0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <HAL_PCDEx_LPM_Callback+0x18>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d01f      	beq.n	800b3e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b3a6:	e03b      	b.n	800b420 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d007      	beq.n	800b3c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b3b0:	f000 f854 	bl	800b45c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3b4:	4b1c      	ldr	r3, [pc, #112]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	4a1b      	ldr	r2, [pc, #108]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3ba:	f023 0306 	bic.w	r3, r3, #6
 800b3be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6812      	ldr	r2, [r2, #0]
 800b3ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3d2:	f023 0301 	bic.w	r3, r3, #1
 800b3d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fb fd06 	bl	8006df0 <USBD_LL_Resume>
    break;
 800b3e4:	e01c      	b.n	800b420 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6812      	ldr	r2, [r2, #0]
 800b3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3f8:	f043 0301 	orr.w	r3, r3, #1
 800b3fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b404:	4618      	mov	r0, r3
 800b406:	f7fb fcdd 	bl	8006dc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d005      	beq.n	800b41e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	4a04      	ldr	r2, [pc, #16]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b418:	f043 0306 	orr.w	r3, r3, #6
 800b41c:	6113      	str	r3, [r2, #16]
    break;
 800b41e:	bf00      	nop
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	e000ed00 	.word	0xe000ed00

0800b42c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b434:	4b03      	ldr	r3, [pc, #12]	; (800b444 <USBD_static_malloc+0x18>)
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20001ab0 	.word	0x20001ab0

0800b448 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]

}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b460:	f7f4 ff22 	bl	80002a8 <SystemClock_Config>
}
 800b464:	bf00      	nop
 800b466:	bd80      	pop	{r7, pc}

0800b468 <__libc_init_array>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	4d0d      	ldr	r5, [pc, #52]	; (800b4a0 <__libc_init_array+0x38>)
 800b46c:	4c0d      	ldr	r4, [pc, #52]	; (800b4a4 <__libc_init_array+0x3c>)
 800b46e:	1b64      	subs	r4, r4, r5
 800b470:	10a4      	asrs	r4, r4, #2
 800b472:	2600      	movs	r6, #0
 800b474:	42a6      	cmp	r6, r4
 800b476:	d109      	bne.n	800b48c <__libc_init_array+0x24>
 800b478:	4d0b      	ldr	r5, [pc, #44]	; (800b4a8 <__libc_init_array+0x40>)
 800b47a:	4c0c      	ldr	r4, [pc, #48]	; (800b4ac <__libc_init_array+0x44>)
 800b47c:	f000 f82e 	bl	800b4dc <_init>
 800b480:	1b64      	subs	r4, r4, r5
 800b482:	10a4      	asrs	r4, r4, #2
 800b484:	2600      	movs	r6, #0
 800b486:	42a6      	cmp	r6, r4
 800b488:	d105      	bne.n	800b496 <__libc_init_array+0x2e>
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b490:	4798      	blx	r3
 800b492:	3601      	adds	r6, #1
 800b494:	e7ee      	b.n	800b474 <__libc_init_array+0xc>
 800b496:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49a:	4798      	blx	r3
 800b49c:	3601      	adds	r6, #1
 800b49e:	e7f2      	b.n	800b486 <__libc_init_array+0x1e>
 800b4a0:	0800b624 	.word	0x0800b624
 800b4a4:	0800b624 	.word	0x0800b624
 800b4a8:	0800b624 	.word	0x0800b624
 800b4ac:	0800b628 	.word	0x0800b628

0800b4b0 <memcpy>:
 800b4b0:	440a      	add	r2, r1
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4b8:	d100      	bne.n	800b4bc <memcpy+0xc>
 800b4ba:	4770      	bx	lr
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c6:	4291      	cmp	r1, r2
 800b4c8:	d1f9      	bne.n	800b4be <memcpy+0xe>
 800b4ca:	bd10      	pop	{r4, pc}

0800b4cc <memset>:
 800b4cc:	4402      	add	r2, r0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d100      	bne.n	800b4d6 <memset+0xa>
 800b4d4:	4770      	bx	lr
 800b4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4da:	e7f9      	b.n	800b4d0 <memset+0x4>

0800b4dc <_init>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	bf00      	nop
 800b4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e2:	bc08      	pop	{r3}
 800b4e4:	469e      	mov	lr, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <_fini>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr
