
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b794  0800b794  0001b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8c4  0800b8c4  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8c4  0800b8c4  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8c4  0800b8c4  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c8  0800b8c8  0001b8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800b8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000309c  200001a4  0800ba70  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003240  0800ba70  00023240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a93b  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000510f  00000000  00000000  0004ab0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  0004fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  000517f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e19  00000000  00000000  000531d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb46  00000000  00000000  00059ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd654  00000000  00000000  00079b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017718b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000742c  00000000  00000000  001771e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b77c 	.word	0x0800b77c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800b77c 	.word	0x0800b77c

080001d0 <CRCcalc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t CRCcalc(uint8_t* ptr, uint32_t len)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
 uint32_t i;
 uint16_t crc = 0xFFFF;  //crc16位寄存器初始�?
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	817b      	strh	r3, [r7, #10]

 while (len--)
 80001e0:	e01f      	b.n	8000222 <CRCcalc+0x52>
 {
  crc ^= *ptr++;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	1c5a      	adds	r2, r3, #1
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	b29a      	uxth	r2, r3
 80001ec:	897b      	ldrh	r3, [r7, #10]
 80001ee:	4053      	eors	r3, r2
 80001f0:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < 8; ++i)
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e011      	b.n	800021c <CRCcalc+0x4c>
  {
   if (crc & 1)
 80001f8:	897b      	ldrh	r3, [r7, #10]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d006      	beq.n	8000210 <CRCcalc+0x40>
    crc = (crc >> 1) ^ 0xA001; //多项�? POLY�?0x8005)的高低位交换值，这是由于其模型的�?些参数决定的
 8000202:	897b      	ldrh	r3, [r7, #10]
 8000204:	085b      	lsrs	r3, r3, #1
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <CRCcalc+0x6c>)
 800020a:	4053      	eors	r3, r2
 800020c:	817b      	strh	r3, [r7, #10]
 800020e:	e002      	b.n	8000216 <CRCcalc+0x46>
   else
    crc = (crc >> 1);
 8000210:	897b      	ldrh	r3, [r7, #10]
 8000212:	085b      	lsrs	r3, r3, #1
 8000214:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < 8; ++i)
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	3301      	adds	r3, #1
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	2b07      	cmp	r3, #7
 8000220:	d9ea      	bls.n	80001f8 <CRCcalc+0x28>
 while (len--)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	1e5a      	subs	r2, r3, #1
 8000226:	603a      	str	r2, [r7, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d1da      	bne.n	80001e2 <CRCcalc+0x12>
  }
 }

 return crc;
 800022c:	897b      	ldrh	r3, [r7, #10]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	ffffa001 	.word	0xffffa001

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f001 fa15 	bl	8001672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f868 	bl	800031c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 fa9a 	bl	8000784 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000250:	f000 f8ec 	bl	800042c <MX_TIM1_Init>
  MX_TIM5_Init();
 8000254:	f000 f9e6 	bl	8000624 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000258:	f000 f93a 	bl	80004d0 <MX_TIM2_Init>
  MX_TIM8_Init();
 800025c:	f000 fa38 	bl	80006d0 <MX_TIM8_Init>
  MX_TIM3_Init();
 8000260:	f000 f98a 	bl	8000578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000264:	213c      	movs	r1, #60	; 0x3c
 8000266:	481d      	ldr	r0, [pc, #116]	; (80002dc <main+0x9c>)
 8000268:	f004 fad8 	bl	800481c <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2104      	movs	r1, #4
 8000270:	481b      	ldr	r0, [pc, #108]	; (80002e0 <main+0xa0>)
 8000272:	f001 fd6b 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	4819      	ldr	r0, [pc, #100]	; (80002e4 <main+0xa4>)
 800027e:	f001 fd65 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000282:	4819      	ldr	r0, [pc, #100]	; (80002e8 <main+0xa8>)
 8000284:	f004 f9b4 	bl	80045f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000288:	4818      	ldr	r0, [pc, #96]	; (80002ec <main+0xac>)
 800028a:	f004 f9b1 	bl	80045f0 <HAL_TIM_Base_Start_IT>

  TIM5->CNT=750000;
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <main+0xb0>)
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <main+0xb4>)
 8000292:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT=750000;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	4a16      	ldr	r2, [pc, #88]	; (80002f4 <main+0xb4>)
 800029a:	625a      	str	r2, [r3, #36]	; 0x24

  //initiate USB
  MX_USB_DEVICE_Init();
 800029c:	f00a fbae 	bl	800a9fc <MX_USB_DEVICE_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002a0:	f007 fe5a 	bl	8007f58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002a4:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <main+0xb8>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4814      	ldr	r0, [pc, #80]	; (80002fc <main+0xbc>)
 80002aa:	f007 fe9f 	bl	8007fec <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a13      	ldr	r2, [pc, #76]	; (8000300 <main+0xc0>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <main+0xc4>)
 80002b6:	2100      	movs	r1, #0
 80002b8:	4813      	ldr	r0, [pc, #76]	; (8000308 <main+0xc8>)
 80002ba:	f007 fe97 	bl	8007fec <osThreadNew>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <main+0xcc>)
 80002c2:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <main+0xd0>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	4812      	ldr	r0, [pc, #72]	; (8000314 <main+0xd4>)
 80002ca:	f007 fe8f 	bl	8007fec <osThreadNew>
 80002ce:	4603      	mov	r3, r0
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <main+0xd8>)
 80002d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d4:	f007 fe64 	bl	8007fa0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002d8:	e7fe      	b.n	80002d8 <main+0x98>
 80002da:	bf00      	nop
 80002dc:	20001dac 	.word	0x20001dac
 80002e0:	48000400 	.word	0x48000400
 80002e4:	48001000 	.word	0x48001000
 80002e8:	20001e68 	.word	0x20001e68
 80002ec:	20001ec4 	.word	0x20001ec4
 80002f0:	40000c00 	.word	0x40000c00
 80002f4:	000b71b0 	.word	0x000b71b0
 80002f8:	0800b818 	.word	0x0800b818
 80002fc:	08000a35 	.word	0x08000a35
 8000300:	20001d50 	.word	0x20001d50
 8000304:	0800b83c 	.word	0x0800b83c
 8000308:	08000bb9 	.word	0x08000bb9
 800030c:	20001e54 	.word	0x20001e54
 8000310:	0800b860 	.word	0x0800b860
 8000314:	080010c1 	.word	0x080010c1
 8000318:	20001ebc 	.word	0x20001ebc

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b0b8      	sub	sp, #224	; 0xe0
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000326:	2244      	movs	r2, #68	; 0x44
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f00b fa1e 	bl	800b76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2288      	movs	r2, #136	; 0x88
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f00b fa10 	bl	800b76c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034c:	2310      	movs	r3, #16
 800034e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800036a:	2301      	movs	r3, #1
 800036c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000370:	2301      	movs	r3, #1
 8000372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000376:	2328      	movs	r3, #40	; 0x28
 8000378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800037c:	2307      	movs	r3, #7
 800037e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000388:	2302      	movs	r3, #2
 800038a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fe58 	bl	8003048 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800039e:	f000 fe97 	bl	80010d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2303      	movs	r3, #3
 80003aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003c4:	2104      	movs	r1, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fa24 	bl	8003814 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003d2:	f000 fe7d 	bl	80010d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003e2:	2301      	movs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003ea:	2318      	movs	r3, #24
 80003ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003ee:	2307      	movs	r3, #7
 80003f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fbe0 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800040e:	f000 fe5f 	bl	80010d0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000416:	f002 fdb1 	bl	8002f7c <HAL_PWREx_ControlVoltageScaling>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000420:	f000 fe56 	bl	80010d0 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	37e0      	adds	r7, #224	; 0xe0
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044a:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800044c:	4a1f      	ldr	r2, [pc, #124]	; (80004cc <MX_TIM1_Init+0xa0>)
 800044e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000452:	224f      	movs	r2, #79	; 0x4f
 8000454:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800045e:	2231      	movs	r2, #49	; 0x31
 8000460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000476:	f004 f863 	bl	8004540 <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000480:	f000 fe26 	bl	80010d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000492:	f004 fb70 	bl	8004b76 <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800049c:	f000 fe18 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_TIM1_Init+0x9c>)
 80004b2:	f004 fda9 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80004bc:	f000 fe08 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20001e68 	.word	0x20001e68
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2224      	movs	r2, #36	; 0x24
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f00b f944 	bl	800b76c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33888;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000504:	f248 4260 	movw	r2, #33888	; 0x8460
 8000508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM2_Init+0xa4>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000516:	2303      	movs	r3, #3
 8000518:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800051e:	2301      	movs	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800052e:	2301      	movs	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000542:	f004 f8c5 	bl	80046d0 <HAL_TIM_Encoder_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800054c:	f000 fdc0 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM2_Init+0xa4>)
 800055e:	f004 fd53 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000568:	f000 fdb2 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3730      	adds	r7, #48	; 0x30
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20001ec4 	.word	0x20001ec4

08000578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2224      	movs	r2, #36	; 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00b f8f0 	bl	800b76c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_TIM3_Init+0xa4>)
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_TIM3_Init+0xa8>)
 800059a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_TIM3_Init+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM3_Init+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM3_Init+0xa4>)
 80005aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM3_Init+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_TIM3_Init+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005bc:	2301      	movs	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM3_Init+0xa4>)
 80005e8:	f004 f872 	bl	80046d0 <HAL_TIM_Encoder_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80005f2:	f000 fd6d 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_TIM3_Init+0xa4>)
 8000604:	f004 fd00 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800060e:	f000 fd5f 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3730      	adds	r7, #48	; 0x30
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20001df8 	.word	0x20001df8
 8000620:	40000400 	.word	0x40000400

08000624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2224      	movs	r2, #36	; 0x24
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00b f89a 	bl	800b76c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_TIM5_Init+0xa8>)
 8000646:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_TIM5_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000656:	f248 4260 	movw	r2, #33888	; 0x8460
 800065a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM5_Init+0xa4>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000668:	2303      	movs	r3, #3
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000680:	2301      	movs	r3, #1
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000694:	f004 f81c 	bl	80046d0 <HAL_TIM_Encoder_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800069e:	f000 fd17 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_TIM5_Init+0xa4>)
 80006b0:	f004 fcaa 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006ba:	f000 fd09 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20001dac 	.word	0x20001dac
 80006cc:	40000c00 	.word	0x40000c00

080006d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2224      	movs	r2, #36	; 0x24
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b f844 	bl	800b76c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_TIM8_Init+0xac>)
 80006f0:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_TIM8_Init+0xb0>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_TIM8_Init+0xac>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_TIM8_Init+0xac>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM8_Init+0xac>)
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM8_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM8_Init+0xac>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM8_Init+0xac>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000732:	2301      	movs	r3, #1
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM8_Init+0xac>)
 8000746:	f003 ffc3 	bl	80046d0 <HAL_TIM_Encoder_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000750:	f000 fcbe 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM8_Init+0xac>)
 8000766:	f004 fc4f 	bl	8005008 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000770:	f000 fcae 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001d58 	.word	0x20001d58
 8000780:	40013400 	.word	0x40013400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <MX_GPIO_Init+0x1f0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a75      	ldr	r2, [pc, #468]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b73      	ldr	r3, [pc, #460]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b70      	ldr	r3, [pc, #448]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a6f      	ldr	r2, [pc, #444]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a69      	ldr	r2, [pc, #420]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b67      	ldr	r3, [pc, #412]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b64      	ldr	r3, [pc, #400]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a63      	ldr	r2, [pc, #396]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a5d      	ldr	r2, [pc, #372]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b58      	ldr	r3, [pc, #352]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a57      	ldr	r2, [pc, #348]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b55      	ldr	r3, [pc, #340]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XCLK_GPIO_Port, XCLK_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2104      	movs	r1, #4
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 fa8b 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2104      	movs	r1, #4
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <MX_GPIO_Init+0x1f4>)
 800083c:	f001 fa86 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	484d      	ldr	r0, [pc, #308]	; (800097c <MX_GPIO_Init+0x1f8>)
 8000848:	f001 fa80 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	484b      	ldr	r0, [pc, #300]	; (8000980 <MX_GPIO_Init+0x1fc>)
 8000852:	f001 fa7b 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 8000856:	2304      	movs	r3, #4
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 f8aa 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f001 f89d 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XDIR_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin;
 800088e:	2304      	movs	r3, #4
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XDIR_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4834      	ldr	r0, [pc, #208]	; (8000978 <MX_GPIO_Init+0x1f4>)
 80008a6:	f001 f88f 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	482e      	ldr	r0, [pc, #184]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008c4:	f001 f880 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin Z_E11_Pin Y__Pin Y_E13_Pin */
  GPIO_InitStruct.Pin = Z__Pin|Z_E11_Pin|Y__Pin|Y_E13_Pin;
 80008c8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <MX_GPIO_Init+0x200>)
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008de:	f001 f873 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : X__Pin */
  GPIO_InitStruct.Pin = X__Pin;
 80008e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_GPIO_Init+0x204>)
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X__GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008f8:	f001 f866 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_E15_Pin */
  GPIO_InitStruct.Pin = X_E15_Pin;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_E15_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_GPIO_Init+0x1f8>)
 8000912:	f001 f859 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_GPIO_Init+0x1fc>)
 800092e:	f001 f84b 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000932:	23c0      	movs	r3, #192	; 0xc0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000942:	2302      	movs	r3, #2
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <MX_GPIO_Init+0x1f4>)
 800094e:	f001 f83b 	bl	80019c8 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000952:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000956:	f001 fa43 	bl	8001de0 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 fffb 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f001 f814 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400
 800097c:	48001000 	.word	0x48001000
 8000980:	48000c00 	.word	0x48000c00
 8000984:	10310000 	.word	0x10310000
 8000988:	10110000 	.word	0x10110000

0800098c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d115      	bne.n	80009cc <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 80009aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009b2:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009ca:	601a      	str	r2, [r3, #0]
	}

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20001ec4 	.word	0x20001ec4
 80009dc:	20001dac 	.word	0x20001dac
 80009e0:	20001da4 	.word	0x20001da4
 80009e4:	200001c0 	.word	0x200001c0
 80009e8:	20001e58 	.word	0x20001e58

080009ec <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	  for (int i=0;i<=16;i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e00b      	b.n	8000a14 <CDC_ReceiveCallback+0x28>
	  {
		 rxbuf[i]=buf[i];
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <CDC_ReceiveCallback+0x40>)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i=0;i<=16;i++)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	ddf0      	ble.n	80009fc <CDC_ReceiveCallback+0x10>
	  }
	  k=0;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <CDC_ReceiveCallback+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20001cd0 	.word	0x20001cd0
 8000a30:	20000000 	.word	0x20000000

08000a34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a3c:	f009 ffde 	bl	800a9fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	484e      	ldr	r0, [pc, #312]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a46:	f001 f969 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <StartDefaultTask+0x24>
		  	  Xpos=0;
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <StartDefaultTask+0x150>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e002      	b.n	8000a5e <StartDefaultTask+0x2a>
	 	  }
	 	  else {
	 		  Xpos=1;
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <StartDefaultTask+0x150>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_RESET){
 8000a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a62:	4847      	ldr	r0, [pc, #284]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a64:	f001 f95a 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <StartDefaultTask+0x42>
	 		  Xneg=0;
 8000a6e:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <StartDefaultTask+0x154>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e002      	b.n	8000a7c <StartDefaultTask+0x48>
	 	  }
	 	  else  {
	 		  Xneg=1;
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <StartDefaultTask+0x154>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
	 	  }
		  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	483f      	ldr	r0, [pc, #252]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a82:	f001 f94b 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <StartDefaultTask+0x60>
			  Ypos=0;
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <StartDefaultTask+0x158>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <StartDefaultTask+0x66>
		 	  }
		 	  else {
		 	 Ypos=1;
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <StartDefaultTask+0x158>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
		 	  }
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9e:	4838      	ldr	r0, [pc, #224]	; (8000b80 <StartDefaultTask+0x14c>)
 8000aa0:	f001 f93c 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <StartDefaultTask+0x7e>
		 	 Yneg=0;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <StartDefaultTask+0x15c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e002      	b.n	8000ab8 <StartDefaultTask+0x84>
		 	  }
		 	  else  {
		 	 Yneg=1;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <StartDefaultTask+0x15c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abc:	4830      	ldr	r0, [pc, #192]	; (8000b80 <StartDefaultTask+0x14c>)
 8000abe:	f001 f92d 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <StartDefaultTask+0x9c>
		  	 Zpos=0;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <StartDefaultTask+0x160>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e002      	b.n	8000ad6 <StartDefaultTask+0xa2>
	 	  }
	 	  else {
	 		 Zpos=1;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <StartDefaultTask+0x160>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <StartDefaultTask+0x14c>)
 8000adc:	f001 f91e 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <StartDefaultTask+0xba>
		  	  Zneg=0;
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <StartDefaultTask+0x164>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e002      	b.n	8000af4 <StartDefaultTask+0xc0>
	 	  }
	 	  else  {
	 		 Zneg=1;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <StartDefaultTask+0x164>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
	 	  }


	 	  if(highMode>1) {
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <StartDefaultTask+0x168>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	dd0f      	ble.n	8000b1c <StartDefaultTask+0xe8>
		 	    xSpeed = 250U;
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <StartDefaultTask+0x16c>)
 8000afe:	22fa      	movs	r2, #250	; 0xfa
 8000b00:	701a      	strb	r2, [r3, #0]
		       ySpeed = 250U;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <StartDefaultTask+0x170>)
 8000b04:	22fa      	movs	r2, #250	; 0xfa
 8000b06:	701a      	strb	r2, [r3, #0]
		       xSen = 2U;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
		       ySen = 2U;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <StartDefaultTask+0x178>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
		       highMode = 1;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <StartDefaultTask+0x168>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e012      	b.n	8000b42 <StartDefaultTask+0x10e>
	 	  }else if (highMode < 1) {
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <StartDefaultTask+0x168>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dc0e      	bgt.n	8000b42 <StartDefaultTask+0x10e>


	 	    xSpeed = 50U;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <StartDefaultTask+0x16c>)
 8000b26:	2232      	movs	r2, #50	; 0x32
 8000b28:	701a      	strb	r2, [r3, #0]
	 	    ySpeed = 50U;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <StartDefaultTask+0x170>)
 8000b2c:	2232      	movs	r2, #50	; 0x32
 8000b2e:	701a      	strb	r2, [r3, #0]
	 	    xSen = 10U;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b32:	220a      	movs	r2, #10
 8000b34:	701a      	strb	r2, [r3, #0]
	 	    ySen = 10U;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <StartDefaultTask+0x178>)
 8000b38:	220a      	movs	r2, #10
 8000b3a:	701a      	strb	r2, [r3, #0]
	 	    highMode = 1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <StartDefaultTask+0x168>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000b42:	2108      	movs	r1, #8
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f001 f8e8 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d104      	bne.n	8000b5c <StartDefaultTask+0x128>
	 	      {
	 	  	    xPul = -(xSen);
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	425b      	negs	r3, r3
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <StartDefaultTask+0x17c>)
 8000b5a:	6013      	str	r3, [r2, #0]
	 	      }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	      {
//	 	        xPul = (xSen);
//	 	      }
	 	  if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f001 f8db 	bl	8001d1c <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d104      	bne.n	8000b76 <StartDefaultTask+0x142>
	 	  {
	 		  yPul = ySen;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <StartDefaultTask+0x178>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <StartDefaultTask+0x180>)
 8000b74:	601a      	str	r2, [r3, #0]
	 	  }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	  {
//	 		  yPul = -ySen;
//	 	  }
    osDelay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f007 faca 	bl	8008110 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000b7c:	e760      	b.n	8000a40 <StartDefaultTask+0xc>
 8000b7e:	bf00      	nop
 8000b80:	48001000 	.word	0x48001000
 8000b84:	20001eb4 	.word	0x20001eb4
 8000b88:	20001e48 	.word	0x20001e48
 8000b8c:	20001da8 	.word	0x20001da8
 8000b90:	20001e50 	.word	0x20001e50
 8000b94:	20001f10 	.word	0x20001f10
 8000b98:	20001d54 	.word	0x20001d54
 8000b9c:	200001c4 	.word	0x200001c4
 8000ba0:	20001f18 	.word	0x20001f18
 8000ba4:	20001f20 	.word	0x20001f20
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	20000005 	.word	0x20000005
 8000bb0:	20001f14 	.word	0x20001f14
 8000bb4:	20001f1c 	.word	0x20001f1c

08000bb8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int rec_state=0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
//	  }

  /* Infinite loop */
  for(;;)
  {
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8000bc4:	4b8d      	ldr	r3, [pc, #564]	; (8000dfc <StartTask02+0x244>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b8c      	ldr	r3, [pc, #560]	; (8000e00 <StartTask02+0x248>)
 8000bce:	601a      	str	r2, [r3, #0]
	  tim5Cnt=__HAL_TIM_GET_COUNTER(&htim5);
 8000bd0:	4b8c      	ldr	r3, [pc, #560]	; (8000e04 <StartTask02+0x24c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b8b      	ldr	r3, [pc, #556]	; (8000e08 <StartTask02+0x250>)
 8000bda:	601a      	str	r2, [r3, #0]

	  read=0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
	  control=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]

	  while (k < 16)
 8000be4:	e238      	b.n	8001058 <StartTask02+0x4a0>
	  {
		  uint8_t ch = rxbuf[k];
 8000be6:	4b89      	ldr	r3, [pc, #548]	; (8000e0c <StartTask02+0x254>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a89      	ldr	r2, [pc, #548]	; (8000e10 <StartTask02+0x258>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	76fb      	strb	r3, [r7, #27]
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	f200 822a 	bhi.w	800104e <StartTask02+0x496>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <StartTask02+0x48>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c15 	.word	0x08000c15
 8000c04:	08000c23 	.word	0x08000c23
 8000c08:	08000c49 	.word	0x08000c49
 8000c0c:	08000ca9 	.word	0x08000ca9
 8000c10:	08001021 	.word	0x08001021
		  switch (rec_state)
		  {
		  case START:
			  if (ch==0x22)
 8000c14:	7efb      	ldrb	r3, [r7, #27]
 8000c16:	2b22      	cmp	r3, #34	; 0x22
 8000c18:	f040 8218 	bne.w	800104c <StartTask02+0x494>
			  {
				  rec_state=CMD;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  break;
 8000c20:	e214      	b.n	800104c <StartTask02+0x494>
		  case CMD:
			  if (ch==0x30)
 8000c22:	7efb      	ldrb	r3, [r7, #27]
 8000c24:	2b30      	cmp	r3, #48	; 0x30
 8000c26:	d104      	bne.n	8000c32 <StartTask02+0x7a>
			  {
				  rec_state=ADDRESS;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
				  read=1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	623b      	str	r3, [r7, #32]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000c30:	e20d      	b.n	800104e <StartTask02+0x496>
			  else if (ch==0x66)
 8000c32:	7efb      	ldrb	r3, [r7, #27]
 8000c34:	2b66      	cmp	r3, #102	; 0x66
 8000c36:	d104      	bne.n	8000c42 <StartTask02+0x8a>
				  rec_state=ADDRESS;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
				  control=1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
			  break;
 8000c40:	e205      	b.n	800104e <StartTask02+0x496>
				  rec_state=START;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000c46:	e202      	b.n	800104e <StartTask02+0x496>
		  case ADDRESS:
			  if(ch==0x00)
 8000c48:	7efb      	ldrb	r3, [r7, #27]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d105      	bne.n	8000c5a <StartTask02+0xa2>
			  {
				  rec_state=DATA;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_1=1;
 8000c52:	4b70      	ldr	r3, [pc, #448]	; (8000e14 <StartTask02+0x25c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000c58:	e1f9      	b.n	800104e <StartTask02+0x496>
			  else if (ch==0x01)
 8000c5a:	7efb      	ldrb	r3, [r7, #27]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <StartTask02+0xb4>
				  rec_state=DATA;
 8000c60:	2303      	movs	r3, #3
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_2=1;
 8000c64:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <StartTask02+0x260>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
			  break;
 8000c6a:	e1f0      	b.n	800104e <StartTask02+0x496>
			  else if (ch==0x02)
 8000c6c:	7efb      	ldrb	r3, [r7, #27]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d105      	bne.n	8000c7e <StartTask02+0xc6>
				  rec_state=DATA;
 8000c72:	2303      	movs	r3, #3
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
				  PGsend=1;
 8000c76:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <StartTask02+0x264>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
			  break;
 8000c7c:	e1e7      	b.n	800104e <StartTask02+0x496>
			  else if (ch==0x03)
 8000c7e:	7efb      	ldrb	r3, [r7, #27]
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d105      	bne.n	8000c90 <StartTask02+0xd8>
				  rec_state=DATA;
 8000c84:	2303      	movs	r3, #3
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
				  spin=1;
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <StartTask02+0x268>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
			  break;
 8000c8e:	e1de      	b.n	800104e <StartTask02+0x496>
			  else if (ch==0x04)
 8000c90:	7efb      	ldrb	r3, [r7, #27]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d105      	bne.n	8000ca2 <StartTask02+0xea>
				  rec_state=DATA;
 8000c96:	2303      	movs	r3, #3
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
				  solder_push=1;
 8000c9a:	4b62      	ldr	r3, [pc, #392]	; (8000e24 <StartTask02+0x26c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
			  break;
 8000ca0:	e1d5      	b.n	800104e <StartTask02+0x496>
				  rec_state=START;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000ca6:	e1d2      	b.n	800104e <StartTask02+0x496>

		  case DATA:

			  if(	(read==1)	&&	(grating_scale_1==1)	)
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d11f      	bne.n	8000cee <StartTask02+0x136>
 8000cae:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <StartTask02+0x25c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d11b      	bne.n	8000cee <StartTask02+0x136>
			  {
				  opbuff[0]=0x22;
 8000cb6:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <StartTask02+0x270>)
 8000cb8:	2222      	movs	r2, #34	; 0x22
 8000cba:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x30;
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <StartTask02+0x270>)
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x00;
 8000cc2:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <StartTask02+0x270>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	709a      	strb	r2, [r3, #2]
				  *(int32_t*)&(opbuff[3]) = TIM5->CNT;
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <StartTask02+0x274>)
 8000cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ccc:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <StartTask02+0x278>)
 8000cce:	601a      	str	r2, [r3, #0]

				  unsigned short crc = CRCcalc(opbuff,6);
 8000cd0:	2106      	movs	r1, #6
 8000cd2:	4855      	ldr	r0, [pc, #340]	; (8000e28 <StartTask02+0x270>)
 8000cd4:	f7ff fa7c 	bl	80001d0 <CRCcalc>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	833b      	strh	r3, [r7, #24]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <StartTask02+0x27c>)
 8000cde:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000ce2:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	4850      	ldr	r0, [pc, #320]	; (8000e28 <StartTask02+0x270>)
 8000ce8:	f009 ff9c 	bl	800ac24 <CDC_Transmit_FS>
			  {
 8000cec:	e195      	b.n	800101a <StartTask02+0x462>
			  }
			  else if(	(read==1)	&&	(grating_scale_2==1)	)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d120      	bne.n	8000d36 <StartTask02+0x17e>
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <StartTask02+0x260>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d11c      	bne.n	8000d36 <StartTask02+0x17e>
			  {
				  opbuff[0]=0x22;
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <StartTask02+0x270>)
 8000cfe:	2222      	movs	r2, #34	; 0x22
 8000d00:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x30;
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <StartTask02+0x270>)
 8000d04:	2230      	movs	r2, #48	; 0x30
 8000d06:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x01;
 8000d08:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <StartTask02+0x270>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	709a      	strb	r2, [r3, #2]
				  *(int32_t*)&(opbuff[3]) = TIM2->CNT;
 8000d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <StartTask02+0x278>)
 8000d16:	601a      	str	r2, [r3, #0]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000d18:	2106      	movs	r1, #6
 8000d1a:	4843      	ldr	r0, [pc, #268]	; (8000e28 <StartTask02+0x270>)
 8000d1c:	f7ff fa58 	bl	80001d0 <CRCcalc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	82fb      	strh	r3, [r7, #22]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <StartTask02+0x27c>)
 8000d26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d2a:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	483e      	ldr	r0, [pc, #248]	; (8000e28 <StartTask02+0x270>)
 8000d30:	f009 ff78 	bl	800ac24 <CDC_Transmit_FS>
			  {
 8000d34:	e171      	b.n	800101a <StartTask02+0x462>
			  }
			  else if(	(control==1)	&&	(grating_scale_1==1)	)
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d12d      	bne.n	8000d98 <StartTask02+0x1e0>
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <StartTask02+0x25c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d129      	bne.n	8000d98 <StartTask02+0x1e0>
			  {
				  TIM5->CNT=750000;
 8000d44:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <StartTask02+0x274>)
 8000d46:	4a3c      	ldr	r2, [pc, #240]	; (8000e38 <StartTask02+0x280>)
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
				  opbuff[0]=0x22;
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <StartTask02+0x270>)
 8000d4c:	2222      	movs	r2, #34	; 0x22
 8000d4e:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x66;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <StartTask02+0x270>)
 8000d52:	2266      	movs	r2, #102	; 0x66
 8000d54:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x00;
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <StartTask02+0x270>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	709a      	strb	r2, [r3, #2]
				  opbuff[3]=0x00; opbuff[4]=0x00; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <StartTask02+0x270>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	70da      	strb	r2, [r3, #3]
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <StartTask02+0x270>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	711a      	strb	r2, [r3, #4]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <StartTask02+0x270>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <StartTask02+0x270>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	719a      	strb	r2, [r3, #6]
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <StartTask02+0x270>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	71da      	strb	r2, [r3, #7]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000d7a:	2106      	movs	r1, #6
 8000d7c:	482a      	ldr	r0, [pc, #168]	; (8000e28 <StartTask02+0x270>)
 8000d7e:	f7ff fa27 	bl	80001d0 <CRCcalc>
 8000d82:	4603      	mov	r3, r0
 8000d84:	82bb      	strh	r3, [r7, #20]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000d86:	4b2b      	ldr	r3, [pc, #172]	; (8000e34 <StartTask02+0x27c>)
 8000d88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000d8c:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4825      	ldr	r0, [pc, #148]	; (8000e28 <StartTask02+0x270>)
 8000d92:	f009 ff47 	bl	800ac24 <CDC_Transmit_FS>
			  {
 8000d96:	e140      	b.n	800101a <StartTask02+0x462>

			  }
			  else if(	(control==1)	&&	(grating_scale_2==1)	)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d14e      	bne.n	8000e3c <StartTask02+0x284>
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <StartTask02+0x260>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d14a      	bne.n	8000e3c <StartTask02+0x284>
			  {
				  TIM2->CNT=750000;
 8000da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <StartTask02+0x280>)
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
				  opbuff[0]=0x22;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <StartTask02+0x270>)
 8000db0:	2222      	movs	r2, #34	; 0x22
 8000db2:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x66;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <StartTask02+0x270>)
 8000db6:	2266      	movs	r2, #102	; 0x66
 8000db8:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x01;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <StartTask02+0x270>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	709a      	strb	r2, [r3, #2]
				  opbuff[3]=0x00; opbuff[4]=0x00; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <StartTask02+0x270>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	70da      	strb	r2, [r3, #3]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <StartTask02+0x270>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	711a      	strb	r2, [r3, #4]
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <StartTask02+0x270>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	715a      	strb	r2, [r3, #5]
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <StartTask02+0x270>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	719a      	strb	r2, [r3, #6]
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <StartTask02+0x270>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	71da      	strb	r2, [r3, #7]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000dde:	2106      	movs	r1, #6
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <StartTask02+0x270>)
 8000de2:	f7ff f9f5 	bl	80001d0 <CRCcalc>
 8000de6:	4603      	mov	r3, r0
 8000de8:	827b      	strh	r3, [r7, #18]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <StartTask02+0x27c>)
 8000dec:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000df0:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000df2:	2108      	movs	r1, #8
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <StartTask02+0x270>)
 8000df6:	f009 ff15 	bl	800ac24 <CDC_Transmit_FS>
			  {
 8000dfa:	e10e      	b.n	800101a <StartTask02+0x462>
 8000dfc:	20001ec4 	.word	0x20001ec4
 8000e00:	20001e44 	.word	0x20001e44
 8000e04:	20001dac 	.word	0x20001dac
 8000e08:	20001eb8 	.word	0x20001eb8
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20001cd0 	.word	0x20001cd0
 8000e14:	200001d4 	.word	0x200001d4
 8000e18:	200001d8 	.word	0x200001d8
 8000e1c:	20001ec0 	.word	0x20001ec0
 8000e20:	200001c8 	.word	0x200001c8
 8000e24:	200001cc 	.word	0x200001cc
 8000e28:	20001e60 	.word	0x20001e60
 8000e2c:	40000c00 	.word	0x40000c00
 8000e30:	20001e63 	.word	0x20001e63
 8000e34:	20001e66 	.word	0x20001e66
 8000e38:	000b71b0 	.word	0x000b71b0

			  }
			  else if(PGsend==1)
 8000e3c:	4b8b      	ldr	r3, [pc, #556]	; (800106c <StartTask02+0x4b4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d145      	bne.n	8000ed0 <StartTask02+0x318>
			  {
				  opbuff[0]=0x22;
 8000e44:	4b8a      	ldr	r3, [pc, #552]	; (8001070 <StartTask02+0x4b8>)
 8000e46:	2222      	movs	r2, #34	; 0x22
 8000e48:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x30;
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <StartTask02+0x4b8>)
 8000e4c:	2230      	movs	r2, #48	; 0x30
 8000e4e:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x02;
 8000e50:	4b87      	ldr	r3, [pc, #540]	; (8001070 <StartTask02+0x4b8>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	709a      	strb	r2, [r3, #2]
				  opbuff[3] =(Xpos<<0)	+	(Xneg<<1)	+	(Ypos<<2)	+	(Yneg<<3)	+ 	(Zpos<<4)	+	(Zneg<<5);
 8000e56:	4b87      	ldr	r3, [pc, #540]	; (8001074 <StartTask02+0x4bc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b86      	ldr	r3, [pc, #536]	; (8001078 <StartTask02+0x4c0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <StartTask02+0x4c4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4b83      	ldr	r3, [pc, #524]	; (8001080 <StartTask02+0x4c8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b81      	ldr	r3, [pc, #516]	; (8001084 <StartTask02+0x4cc>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <StartTask02+0x4d0>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	015b      	lsls	r3, r3, #5
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b76      	ldr	r3, [pc, #472]	; (8001070 <StartTask02+0x4b8>)
 8000e98:	70da      	strb	r2, [r3, #3]
				  opbuff[4]=0x00; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000e9a:	4b75      	ldr	r3, [pc, #468]	; (8001070 <StartTask02+0x4b8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	711a      	strb	r2, [r3, #4]
 8000ea0:	4b73      	ldr	r3, [pc, #460]	; (8001070 <StartTask02+0x4b8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	715a      	strb	r2, [r3, #5]
 8000ea6:	4b72      	ldr	r3, [pc, #456]	; (8001070 <StartTask02+0x4b8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	719a      	strb	r2, [r3, #6]
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <StartTask02+0x4b8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	71da      	strb	r2, [r3, #7]
				  unsigned short crc = CRCcalc(opbuff,6);
 8000eb2:	2106      	movs	r1, #6
 8000eb4:	486e      	ldr	r0, [pc, #440]	; (8001070 <StartTask02+0x4b8>)
 8000eb6:	f7ff f98b 	bl	80001d0 <CRCcalc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	81bb      	strh	r3, [r7, #12]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000ebe:	4b73      	ldr	r3, [pc, #460]	; (800108c <StartTask02+0x4d4>)
 8000ec0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ec4:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4869      	ldr	r0, [pc, #420]	; (8001070 <StartTask02+0x4b8>)
 8000eca:	f009 feab 	bl	800ac24 <CDC_Transmit_FS>
 8000ece:	e0a4      	b.n	800101a <StartTask02+0x462>
			  }
			  else if(spin==1)
 8000ed0:	4b6f      	ldr	r3, [pc, #444]	; (8001090 <StartTask02+0x4d8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d14e      	bne.n	8000f76 <StartTask02+0x3be>
			  {
				  spin_length= (int16_t)((rxbuf[k]) | (rxbuf[k+1]<<8));
 8000ed8:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <StartTask02+0x4dc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a6e      	ldr	r2, [pc, #440]	; (8001098 <StartTask02+0x4e0>)
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <StartTask02+0x4dc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	496b      	ldr	r1, [pc, #428]	; (8001098 <StartTask02+0x4e0>)
 8000eec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b21a      	sxth	r2, r3
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <StartTask02+0x4e4>)
 8000efe:	801a      	strh	r2, [r3, #0]
				  xPul=spin_length;
 8000f00:	4b66      	ldr	r3, [pc, #408]	; (800109c <StartTask02+0x4e4>)
 8000f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <StartTask02+0x4e8>)
 8000f0a:	601a      	str	r2, [r3, #0]
				  xSpeed = 50U;
 8000f0c:	4b65      	ldr	r3, [pc, #404]	; (80010a4 <StartTask02+0x4ec>)
 8000f0e:	2232      	movs	r2, #50	; 0x32
 8000f10:	701a      	strb	r2, [r3, #0]
				  opbuff[0]=0x22;
 8000f12:	4b57      	ldr	r3, [pc, #348]	; (8001070 <StartTask02+0x4b8>)
 8000f14:	2222      	movs	r2, #34	; 0x22
 8000f16:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x66;
 8000f18:	4b55      	ldr	r3, [pc, #340]	; (8001070 <StartTask02+0x4b8>)
 8000f1a:	2266      	movs	r2, #102	; 0x66
 8000f1c:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x03;
 8000f1e:	4b54      	ldr	r3, [pc, #336]	; (8001070 <StartTask02+0x4b8>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	709a      	strb	r2, [r3, #2]
				  opbuff[3]=rxbuf[k]; opbuff[4]=rxbuf[k+1]; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000f24:	4b5b      	ldr	r3, [pc, #364]	; (8001094 <StartTask02+0x4dc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <StartTask02+0x4e0>)
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b4f      	ldr	r3, [pc, #316]	; (8001070 <StartTask02+0x4b8>)
 8000f32:	70da      	strb	r2, [r3, #3]
 8000f34:	4b57      	ldr	r3, [pc, #348]	; (8001094 <StartTask02+0x4dc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a57      	ldr	r2, [pc, #348]	; (8001098 <StartTask02+0x4e0>)
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <StartTask02+0x4b8>)
 8000f44:	711a      	strb	r2, [r3, #4]
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <StartTask02+0x4b8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	715a      	strb	r2, [r3, #5]
 8000f4c:	4b48      	ldr	r3, [pc, #288]	; (8001070 <StartTask02+0x4b8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	719a      	strb	r2, [r3, #6]
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <StartTask02+0x4b8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	71da      	strb	r2, [r3, #7]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000f58:	2106      	movs	r1, #6
 8000f5a:	4845      	ldr	r0, [pc, #276]	; (8001070 <StartTask02+0x4b8>)
 8000f5c:	f7ff f938 	bl	80001d0 <CRCcalc>
 8000f60:	4603      	mov	r3, r0
 8000f62:	81fb      	strh	r3, [r7, #14]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000f64:	4b49      	ldr	r3, [pc, #292]	; (800108c <StartTask02+0x4d4>)
 8000f66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f6a:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4840      	ldr	r0, [pc, #256]	; (8001070 <StartTask02+0x4b8>)
 8000f70:	f009 fe58 	bl	800ac24 <CDC_Transmit_FS>
 8000f74:	e051      	b.n	800101a <StartTask02+0x462>

			  }
			  else if (solder_push==1)
 8000f76:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <StartTask02+0x4f0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d14d      	bne.n	800101a <StartTask02+0x462>
			  {

				push_length= (int16_t)((rxbuf[k]) | (rxbuf[k+1]<<8));
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <StartTask02+0x4dc>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <StartTask02+0x4e0>)
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b42      	ldr	r3, [pc, #264]	; (8001094 <StartTask02+0x4dc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4941      	ldr	r1, [pc, #260]	; (8001098 <StartTask02+0x4e0>)
 8000f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <StartTask02+0x4f4>)
 8000fa4:	801a      	strh	r2, [r3, #0]
				  yPul=push_length;
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <StartTask02+0x4f4>)
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <StartTask02+0x4f8>)
 8000fb0:	601a      	str	r2, [r3, #0]
				  ySpeed = 50U;
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <StartTask02+0x4fc>)
 8000fb4:	2232      	movs	r2, #50	; 0x32
 8000fb6:	701a      	strb	r2, [r3, #0]
				  opbuff[0]=0x22;
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <StartTask02+0x4b8>)
 8000fba:	2222      	movs	r2, #34	; 0x22
 8000fbc:	701a      	strb	r2, [r3, #0]
				  opbuff[1]=0x66;
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <StartTask02+0x4b8>)
 8000fc0:	2266      	movs	r2, #102	; 0x66
 8000fc2:	705a      	strb	r2, [r3, #1]
				  opbuff[2]=0x04;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <StartTask02+0x4b8>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	709a      	strb	r2, [r3, #2]
				  opbuff[3]=rxbuf[k]; opbuff[4]=rxbuf[k+1]; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <StartTask02+0x4dc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a32      	ldr	r2, [pc, #200]	; (8001098 <StartTask02+0x4e0>)
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <StartTask02+0x4b8>)
 8000fd8:	70da      	strb	r2, [r3, #3]
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <StartTask02+0x4dc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <StartTask02+0x4e0>)
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <StartTask02+0x4b8>)
 8000fea:	711a      	strb	r2, [r3, #4]
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <StartTask02+0x4b8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	715a      	strb	r2, [r3, #5]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <StartTask02+0x4b8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	719a      	strb	r2, [r3, #6]
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <StartTask02+0x4b8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	71da      	strb	r2, [r3, #7]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000ffe:	2106      	movs	r1, #6
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <StartTask02+0x4b8>)
 8001002:	f7ff f8e5 	bl	80001d0 <CRCcalc>
 8001006:	4603      	mov	r3, r0
 8001008:	823b      	strh	r3, [r7, #16]
				 *(int16_t*)&(opbuff[6]) = crc;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <StartTask02+0x4d4>)
 800100c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001010:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8001012:	2108      	movs	r1, #8
 8001014:	4816      	ldr	r0, [pc, #88]	; (8001070 <StartTask02+0x4b8>)
 8001016:	f009 fe05 	bl	800ac24 <CDC_Transmit_FS>
			  }
			  rec_state=CRC8;
 800101a:	2304      	movs	r3, #4
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 800101e:	e016      	b.n	800104e <StartTask02+0x496>
		  case CRC8:
			  grating_scale_1=0;
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <StartTask02+0x500>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
			  grating_scale_2=0;
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <StartTask02+0x504>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
			  PGsend=0;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <StartTask02+0x4b4>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
			  read=0;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
			  control=0;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
			  spin=0;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <StartTask02+0x4d8>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
			  solder_push=0;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <StartTask02+0x4f0>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

			  rec_state=START;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 800104a:	e000      	b.n	800104e <StartTask02+0x496>
			  break;
 800104c:	bf00      	nop
		  }
	  k++;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <StartTask02+0x4dc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <StartTask02+0x4dc>)
 8001056:	6013      	str	r3, [r2, #0]
	  while (k < 16)
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <StartTask02+0x4dc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	f67f adc2 	bls.w	8000be6 <StartTask02+0x2e>
	  }


    osDelay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 f854 	bl	8008110 <osDelay>
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8001068:	e5ac      	b.n	8000bc4 <StartTask02+0xc>
 800106a:	bf00      	nop
 800106c:	20001ec0 	.word	0x20001ec0
 8001070:	20001e60 	.word	0x20001e60
 8001074:	20001e48 	.word	0x20001e48
 8001078:	20001eb4 	.word	0x20001eb4
 800107c:	20001da8 	.word	0x20001da8
 8001080:	20001e50 	.word	0x20001e50
 8001084:	20001f10 	.word	0x20001f10
 8001088:	20001d54 	.word	0x20001d54
 800108c:	20001e66 	.word	0x20001e66
 8001090:	200001c8 	.word	0x200001c8
 8001094:	20000000 	.word	0x20000000
 8001098:	20001cd0 	.word	0x20001cd0
 800109c:	200001d2 	.word	0x200001d2
 80010a0:	20001f14 	.word	0x20001f14
 80010a4:	20001f18 	.word	0x20001f18
 80010a8:	200001cc 	.word	0x200001cc
 80010ac:	200001d0 	.word	0x200001d0
 80010b0:	20001f1c 	.word	0x20001f1c
 80010b4:	20001f20 	.word	0x20001f20
 80010b8:	200001d4 	.word	0x200001d4
 80010bc:	200001d8 	.word	0x200001d8

080010c0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f007 f821 	bl	8008110 <osDelay>
 80010ce:	e7fb      	b.n	80010c8 <StartTask03+0x8>

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_MspInit+0x4c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_MspInit+0x4c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_MspInit+0x4c>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_MspInit+0x4c>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6593      	str	r3, [r2, #88]	; 0x58
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_MspInit+0x4c>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	210f      	movs	r1, #15
 8001116:	f06f 0001 	mvn.w	r0, #1
 800111a:	f000 fc1e 	bl	800195a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_TIM_Base_MspInit+0x64>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d123      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_TIM_Base_MspInit+0x68>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_TIM_Base_MspInit+0x68>)
 8001144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001148:	6613      	str	r3, [r2, #96]	; 0x60
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_TIM_Base_MspInit+0x68>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2018      	movs	r0, #24
 800115c:	f000 fbfd 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001160:	2018      	movs	r0, #24
 8001162:	f000 fc16 	bl	8001992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2019      	movs	r0, #25
 800116c:	f000 fbf5 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001170:	2019      	movs	r0, #25
 8001172:	f000 fc0e 	bl	8001992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	201a      	movs	r0, #26
 800117c:	f000 fbed 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001180:	201a      	movs	r0, #26
 8001182:	f000 fc06 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40012c00 	.word	0x40012c00
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b090      	sub	sp, #64	; 0x40
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d14d      	bne.n	8001256 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a6d      	ldr	r2, [pc, #436]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a67      	ldr	r2, [pc, #412]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a61      	ldr	r2, [pc, #388]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001202:	2320      	movs	r3, #32
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001212:	2301      	movs	r3, #1
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f000 fbd2 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001224:	2308      	movs	r3, #8
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001234:	2301      	movs	r3, #1
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123c:	4619      	mov	r1, r3
 800123e:	484e      	ldr	r0, [pc, #312]	; (8001378 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001240:	f000 fbc2 	bl	80019c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2105      	movs	r1, #5
 8001248:	201c      	movs	r0, #28
 800124a:	f000 fb86 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800124e:	201c      	movs	r0, #28
 8001250:	f000 fb9f 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001254:	e089      	b.n	800136a <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM3)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a48      	ldr	r2, [pc, #288]	; (800137c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d128      	bne.n	80012b2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001260:	4b44      	ldr	r3, [pc, #272]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6593      	str	r3, [r2, #88]	; 0x58
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001290:	2318      	movs	r3, #24
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a0:	2302      	movs	r3, #2
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80012ac:	f000 fb8c 	bl	80019c8 <HAL_GPIO_Init>
}
 80012b0:	e05b      	b.n	800136a <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM5)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a33      	ldr	r2, [pc, #204]	; (8001384 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d129      	bne.n	8001310 <HAL_TIM_Encoder_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012fc:	2302      	movs	r3, #2
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f000 fb5d 	bl	80019c8 <HAL_GPIO_Init>
}
 800130e:	e02c      	b.n	800136a <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM8)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d127      	bne.n	800136a <HAL_TIM_Encoder_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001324:	6613      	str	r3, [r2, #96]	; 0x60
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800135a:	2303      	movs	r3, #3
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001366:	f000 fb2f 	bl	80019c8 <HAL_GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3740      	adds	r7, #64	; 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400
 800137c:	40000400 	.word	0x40000400
 8001380:	48001000 	.word	0x48001000
 8001384:	40000c00 	.word	0x40000c00
 8001388:	40013400 	.word	0x40013400
 800138c:	48000800 	.word	0x48000800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f9ac 	bl	800171c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013c4:	f008 fab2 	bl	800992c <xTaskGetSchedulerState>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013ce:	f009 f89b 	bl	800a508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80013de:	f003 faab 	bl	8004938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20001e68 	.word	0x20001e68

080013ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80013f0:	4847      	ldr	r0, [pc, #284]	; (8001510 <TIM1_UP_TIM16_IRQHandler+0x124>)
 80013f2:	f003 faa1 	bl	8004938 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	static int xcnt = 0;
	static int ycnt = 0;

	if (xSpeed > 1 && ((xcnt % xSpeed) == 0)) {
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <TIM1_UP_TIM16_IRQHandler+0x128>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d93b      	bls.n	8001476 <TIM1_UP_TIM16_IRQHandler+0x8a>
 80013fe:	4b46      	ldr	r3, [pc, #280]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a44      	ldr	r2, [pc, #272]	; (8001514 <TIM1_UP_TIM16_IRQHandler+0x128>)
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	fb93 f1f2 	sdiv	r1, r3, r2
 800140a:	fb02 f201 	mul.w	r2, r2, r1
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d130      	bne.n	8001476 <TIM1_UP_TIM16_IRQHandler+0x8a>
		if (spin_length != 0) {
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d02b      	beq.n	8001476 <TIM1_UP_TIM16_IRQHandler+0x8a>
//    		  int i=0;
			if (spin_length > 0 ) {
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd0e      	ble.n	8001446 <TIM1_UP_TIM16_IRQHandler+0x5a>
				HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2104      	movs	r1, #4
 800142c:	483c      	ldr	r0, [pc, #240]	; (8001520 <TIM1_UP_TIM16_IRQHandler+0x134>)
 800142e:	f000 fc8d 	bl	8001d4c <HAL_GPIO_WritePin>
				spin_length--;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	b29b      	uxth	r3, r3
 800143a:	3b01      	subs	r3, #1
 800143c:	b29b      	uxth	r3, r3
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001442:	801a      	strh	r2, [r3, #0]
 8001444:	e012      	b.n	800146c <TIM1_UP_TIM16_IRQHandler+0x80>
			} else if (spin_length < 0) {
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da0d      	bge.n	800146c <TIM1_UP_TIM16_IRQHandler+0x80>
				HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2104      	movs	r1, #4
 8001454:	4832      	ldr	r0, [pc, #200]	; (8001520 <TIM1_UP_TIM16_IRQHandler+0x134>)
 8001456:	f000 fc79 	bl	8001d4c <HAL_GPIO_WritePin>
				spin_length++;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	b29b      	uxth	r3, r3
 8001462:	3301      	adds	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <TIM1_UP_TIM16_IRQHandler+0x130>)
 800146a:	801a      	strh	r2, [r3, #0]
			}
			//  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
			HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 800146c:	2104      	movs	r1, #4
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f000 fc83 	bl	8001d7c <HAL_GPIO_TogglePin>
//    	    }
		} else {
			//  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
		}
	}
	xcnt++;
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 800147e:	6013      	str	r3, [r2, #0]
	if (ySpeed > 1 && ((ycnt % ySpeed) == 0)) {
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <TIM1_UP_TIM16_IRQHandler+0x138>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d93c      	bls.n	8001502 <TIM1_UP_TIM16_IRQHandler+0x116>
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a25      	ldr	r2, [pc, #148]	; (8001524 <TIM1_UP_TIM16_IRQHandler+0x138>)
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	fb93 f1f2 	sdiv	r1, r3, r2
 8001494:	fb02 f201 	mul.w	r2, r2, r1
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d131      	bne.n	8001502 <TIM1_UP_TIM16_IRQHandler+0x116>
		if (push_length != 0) {
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d02c      	beq.n	8001502 <TIM1_UP_TIM16_IRQHandler+0x116>
			// int i=0;
			if (push_length > 0) {
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dd0f      	ble.n	80014d2 <TIM1_UP_TIM16_IRQHandler+0xe6>
				HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	481d      	ldr	r0, [pc, #116]	; (8001530 <TIM1_UP_TIM16_IRQHandler+0x144>)
 80014ba:	f000 fc47 	bl	8001d4c <HAL_GPIO_WritePin>
				push_length--;
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	e013      	b.n	80014fa <TIM1_UP_TIM16_IRQHandler+0x10e>
			} else if (push_length < 0) {
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da0e      	bge.n	80014fa <TIM1_UP_TIM16_IRQHandler+0x10e>
				HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <TIM1_UP_TIM16_IRQHandler+0x144>)
 80014e4:	f000 fc32 	bl	8001d4c <HAL_GPIO_WritePin>
				push_length++;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <TIM1_UP_TIM16_IRQHandler+0x140>)
 80014f8:	801a      	strh	r2, [r3, #0]
			}
			// HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
			HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 80014fa:	2101      	movs	r1, #1
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <TIM1_UP_TIM16_IRQHandler+0x148>)
 80014fe:	f000 fc3d 	bl	8001d7c <HAL_GPIO_TogglePin>
//				}
		} else {
			//HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
		}
	}
	ycnt++;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 800150a:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20001e68 	.word	0x20001e68
 8001514:	20001f18 	.word	0x20001f18
 8001518:	200001dc 	.word	0x200001dc
 800151c:	200001d2 	.word	0x200001d2
 8001520:	48000400 	.word	0x48000400
 8001524:	20001f20 	.word	0x20001f20
 8001528:	200001e0 	.word	0x200001e0
 800152c:	200001d0 	.word	0x200001d0
 8001530:	48001000 	.word	0x48001000
 8001534:	48000c00 	.word	0x48000c00

08001538 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800153e:	f003 f9fb 	bl	8004938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001e68 	.word	0x20001e68

0800154c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <TIM2_IRQHandler+0x10>)
 8001552:	f003 f9f1 	bl	8004938 <HAL_TIM_IRQHandler>
//   	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
//   	  }
//     }
//     ycnt++;
  /* USER CODE END TIM2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20001ec4 	.word	0x20001ec4

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001564:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001568:	f000 fc22 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800156c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001570:	f000 fc1e 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001574:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001578:	f000 fc1a 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800157c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001580:	f000 fc16 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001584:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001588:	f000 fc12 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <OTG_FS_IRQHandler+0x10>)
 8001596:	f000 fd96 	bl	80020c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20002e38 	.word	0x20002e38

080015a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <SystemInit+0x5c>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a14      	ldr	r2, [pc, #80]	; (8001618 <SystemInit+0x5c>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <SystemInit+0x60>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <SystemInit+0x60>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <SystemInit+0x60>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <SystemInit+0x60>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0d      	ldr	r2, [pc, #52]	; (800161c <SystemInit+0x60>)
 80015e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <SystemInit+0x60>)
 80015f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <SystemInit+0x60>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <SystemInit+0x60>)
 8001600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <SystemInit+0x60>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	40021000 	.word	0x40021000

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001624:	f7ff ffca 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001628:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800162a:	e003      	b.n	8001634 <LoopCopyDataInit>

0800162c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800162e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001630:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001632:	3104      	adds	r1, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001638:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800163a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800163c:	d3f6      	bcc.n	800162c <CopyDataInit>
	ldr	r2, =_sbss
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001640:	e002      	b.n	8001648 <LoopFillZerobss>

08001642 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001642:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001644:	f842 3b04 	str.w	r3, [r2], #4

08001648 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <LoopForever+0x16>)
	cmp	r2, r3
 800164a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800164c:	d3f9      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164e:	f00a f85b 	bl	800b708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7fe fdf5 	bl	8000240 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001658:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800165c:	0800b8cc 	.word	0x0800b8cc
	ldr	r0, =_sdata
 8001660:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001664:	200001a4 	.word	0x200001a4
	ldr	r2, =_sbss
 8001668:	200001a4 	.word	0x200001a4
	ldr	r3, = _ebss
 800166c:	20003240 	.word	0x20003240

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>

08001672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f961 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f80e 	bl	80016a4 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e001      	b.n	8001698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001694:	f7ff fd22 	bl	80010dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001698:	79fb      	ldrb	r3, [r7, #7]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_InitTick+0x6c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d023      	beq.n	8001700 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_InitTick+0x70>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f96d 	bl	80019ae <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10f      	bne.n	80016fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d809      	bhi.n	80016f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f937 	bl	800195a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_InitTick+0x74>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e007      	b.n	8001704 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e004      	b.n	8001704 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e001      	b.n	8001704 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000010 	.word	0x20000010
 8001714:	20000008 	.word	0x20000008
 8001718:	2000000c 	.word	0x2000000c

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000010 	.word	0x20000010
 8001740:	20001f24 	.word	0x20001f24

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20001f24 	.word	0x20001f24

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000010 	.word	0x20000010

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e17f      	b.n	8001cd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8171 	beq.w	8001cd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d00b      	beq.n	8001a10 <HAL_GPIO_Init+0x48>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d007      	beq.n	8001a10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a04:	2b11      	cmp	r3, #17
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d130      	bne.n	8001a72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a46:	2201      	movs	r2, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	f003 0201 	and.w	r2, r3, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d118      	bne.n	8001ab0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a84:	2201      	movs	r2, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	08db      	lsrs	r3, r3, #3
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x128>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80ac 	beq.w	8001cd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6613      	str	r3, [r2, #96]	; 0x60
 8001b86:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b92:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x242>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x338>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x23e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x33c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x340>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x236>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x344>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x232>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x348>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x22e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_GPIO_Init+0x34c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x22a>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x244>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1c:	4937      	ldr	r1, [pc, #220]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c4e:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f ae78 	bne.w	80019d8 <HAL_GPIO_Init+0x10>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48000800 	.word	0x48000800
 8001d08:	48000c00 	.word	0x48000c00
 8001d0c:	48001000 	.word	0x48001000
 8001d10:	48001400 	.word	0x48001400
 8001d14:	48001800 	.word	0x48001800
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43d9      	mvns	r1, r3
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fbe8 	bl	80015a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6613      	str	r3, [r2, #96]	; 0x60
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4905      	ldr	r1, [pc, #20]	; (8001e1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000

08001e20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b08f      	sub	sp, #60	; 0x3c
 8001e24:	af0a      	add	r7, sp, #40	; 0x28
 8001e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e116      	b.n	8002060 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f009 f843 	bl	800aed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fa48 	bl	8005306 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	687e      	ldr	r6, [r7, #4]
 8001e7e:	466d      	mov	r5, sp
 8001e80:	f106 0410 	add.w	r4, r6, #16
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e94:	1d33      	adds	r3, r6, #4
 8001e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f003 f95b 	bl	8005154 <USB_CoreInit>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d7      	b.n	8002060 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fa36 	bl	8005328 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e04a      	b.n	8001f58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	333d      	adds	r3, #61	; 0x3d
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	333c      	adds	r3, #60	; 0x3c
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3342      	adds	r3, #66	; 0x42
 8001efe:	4602      	mov	r2, r0
 8001f00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	333f      	adds	r3, #63	; 0x3f
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3344      	adds	r3, #68	; 0x44
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	3348      	adds	r3, #72	; 0x48
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3350      	adds	r3, #80	; 0x50
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	3301      	adds	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3af      	bcc.n	8001ec2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e044      	b.n	8001ff2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3b5      	bcc.n	8001f68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	687e      	ldr	r6, [r7, #4]
 8002004:	466d      	mov	r5, sp
 8002006:	f106 0410 	add.w	r4, r6, #16
 800200a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002012:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002016:	e885 0003 	stmia.w	r5, {r0, r1}
 800201a:	1d33      	adds	r3, r6, #4
 800201c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201e:	6838      	ldr	r0, [r7, #0]
 8002020:	f003 f9ac 	bl	800537c <USB_DevInit>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e014      	b.n	8002060 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff62 	bl	8002f18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f004 f92e 	bl	80062ba <USB_DevDisconnect>

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002068 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_PCD_Start+0x1c>
 8002080:	2302      	movs	r3, #2
 8002082:	e01c      	b.n	80020be <HAL_PCD_Start+0x56>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 f91d 	bl	80052e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f8e2 	bl	8006278 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b590      	push	{r4, r7, lr}
 80020c8:	b08d      	sub	sp, #52	; 0x34
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 f9a0 	bl	8006422 <USB_GetMode>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 838f 	bne.w	8002808 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 f904 	bl	80062fc <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8385 	beq.w	8002806 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f004 f8fb 	bl	80062fc <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f002 0202 	and.w	r2, r2, #2
 800211e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f004 f8e9 	bl	80062fc <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d161      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0210 	bic.w	r2, r2, #16
 8002142:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	0c5b      	lsrs	r3, r3, #17
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	2b02      	cmp	r3, #2
 800216e:	d124      	bne.n	80021ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d035      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6a38      	ldr	r0, [r7, #32]
 8002190:	f003 ff4f 	bl	8006032 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a0:	441a      	add	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b2:	441a      	add	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	619a      	str	r2, [r3, #24]
 80021b8:	e016      	b.n	80021e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	0c5b      	lsrs	r3, r3, #17
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d110      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021cc:	2208      	movs	r2, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	6a38      	ldr	r0, [r7, #32]
 80021d2:	f003 ff2e 	bl	8006032 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e2:	441a      	add	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 f87d 	bl	80062fc <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800220c:	d16e      	bne.n	80022ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 f883 	bl	8006322 <USB_ReadDevAllOutEpInterrupt>
 800221c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800221e:	e062      	b.n	80022e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d057      	beq.n	80022da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f004 f8a8 	bl	800638a <USB_ReadDevOutEPInterrupt>
 800223a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	2301      	movs	r3, #1
 8002256:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fd82 	bl	8002d64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2308      	movs	r3, #8
 800227a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800227c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fdbe 	bl	8002e00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2310      	movs	r3, #16
 800229e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b6:	461a      	mov	r2, r3
 80022b8:	2320      	movs	r3, #32
 80022ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d199      	bne.n	8002220 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f803 	bl	80062fc <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002300:	f040 8087 	bne.w	8002412 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f824 	bl	8006356 <USB_ReadDevAllInEpInterrupt>
 800230e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002314:	e07a      	b.n	800240c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d06f      	beq.n	8002400 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 f84b 	bl	80063c6 <USB_ReadDevInEPInterrupt>
 8002330:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	2201      	movs	r2, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	69f9      	ldr	r1, [r7, #28]
 8002358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800235c:	4013      	ands	r3, r2
 800235e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236c:	461a      	mov	r2, r3
 800236e:	2301      	movs	r3, #1
 8002370:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f008 fe40 	bl	800affe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002394:	461a      	mov	r2, r3
 8002396:	2308      	movs	r3, #8
 8002398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b0:	461a      	mov	r2, r3
 80023b2:	2310      	movs	r3, #16
 80023b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023cc:	461a      	mov	r2, r3
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e8:	461a      	mov	r2, r3
 80023ea:	2302      	movs	r3, #2
 80023ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fc29 	bl	8002c52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d181      	bne.n	8002316 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 ff70 	bl	80062fc <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002426:	d122      	bne.n	800246e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800244e:	2100      	movs	r1, #0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f009 f8ed 	bl	800b630 <HAL_PCDEx_LPM_Callback>
 8002456:	e002      	b.n	800245e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f008 fe3d 	bl	800b0d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800246c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 ff42 	bl	80062fc <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002482:	d112      	bne.n	80024aa <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f008 fdf9 	bl	800b08c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ff24 	bl	80062fc <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024be:	d121      	bne.n	8002504 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d111      	bne.n	80024fe <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024f4:	2101      	movs	r1, #1
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f009 f89a 	bl	800b630 <HAL_PCDEx_LPM_Callback>
 80024fc:	e002      	b.n	8002504 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f008 fdc4 	bl	800b08c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fef7 	bl	80062fc <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002518:	f040 80c5 	bne.w	80026a6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2110      	movs	r1, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f86c 	bl	8005614 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002540:	e056      	b.n	80025f0 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254e:	461a      	mov	r2, r3
 8002550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002554:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002566:	0151      	lsls	r1, r2, #5
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	440a      	add	r2, r1
 800256c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002574:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002586:	0151      	lsls	r1, r2, #5
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	440a      	add	r2, r1
 800258c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002594:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	0151      	lsls	r1, r2, #5
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	440a      	add	r2, r1
 80025c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	0151      	lsls	r1, r2, #5
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	440a      	add	r2, r1
 80025e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	3301      	adds	r3, #1
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d3a3      	bcc.n	8002542 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002608:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800260c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f043 030b 	orr.w	r3, r3, #11
 800262a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263c:	f043 030b 	orr.w	r3, r3, #11
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	e015      	b.n	8002670 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002656:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800265a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800266a:	f043 030b 	orr.w	r3, r3, #11
 800266e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002682:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f003 fef7 	bl	8006484 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fe26 	bl	80062fc <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ba:	d124      	bne.n	8002706 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 febc 	bl	800643e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 f803 	bl	80056d6 <USB_GetDevSpeed>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681c      	ldr	r4, [r3, #0]
 80026dc:	f001 fa08 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4620      	mov	r0, r4
 80026ec:	f002 fd5e 	bl	80051ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f008 fcac 	bl	800b04e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002704:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fdf6 	bl	80062fc <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b08      	cmp	r3, #8
 8002718:	d10a      	bne.n	8002730 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f008 fc89 	bl	800b032 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f002 0208 	and.w	r2, r2, #8
 800272e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fde1 	bl	80062fc <USB_ReadInterrupts>
 800273a:	4603      	mov	r3, r0
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002744:	d10f      	bne.n	8002766 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4619      	mov	r1, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f008 fcfb 	bl	800b14c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fdc6 	bl	80062fc <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800277a:	d10f      	bne.n	800279c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f008 fcce 	bl	800b128 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800279a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 fdab 	bl	80062fc <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d10a      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f008 fcdc 	bl	800b170 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd95 	bl	80062fc <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d115      	bne.n	8002808 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f008 fccc 	bl	800b18c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	e000      	b.n	8002808 <HAL_PCD_IRQHandler+0x742>
      return;
 8002806:	bf00      	nop
    }
  }
}
 8002808:	3734      	adds	r7, #52	; 0x34
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}

0800280e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_PCD_SetAddress+0x1a>
 8002824:	2302      	movs	r3, #2
 8002826:	e013      	b.n	8002850 <HAL_PCD_SetAddress+0x42>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fcf3 	bl	800622c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	70fb      	strb	r3, [r7, #3]
 800286a:	460b      	mov	r3, r1
 800286c:	803b      	strh	r3, [r7, #0]
 800286e:	4613      	mov	r3, r2
 8002870:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800287a:	2b00      	cmp	r3, #0
 800287c:	da0f      	bge.n	800289e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	3338      	adds	r3, #56	; 0x38
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	705a      	strb	r2, [r3, #1]
 800289c:	e00f      	b.n	80028be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028ca:	883a      	ldrh	r2, [r7, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	78ba      	ldrb	r2, [r7, #2]
 80028d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028e8:	78bb      	ldrb	r3, [r7, #2]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d102      	bne.n	80028f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_EP_Open+0xaa>
 80028fe:	2302      	movs	r3, #2
 8002900:	e00e      	b.n	8002920 <HAL_PCD_EP_Open+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f002 feff 	bl	8005714 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800291e:	7afb      	ldrb	r3, [r7, #11]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da0f      	bge.n	800295c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	3338      	adds	r3, #56	; 0x38
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	705a      	strb	r2, [r3, #1]
 800295a:	e00f      	b.n	800297c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f003 020f 	and.w	r2, r3, #15
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_PCD_EP_Close+0x6e>
 8002992:	2302      	movs	r3, #2
 8002994:	e00e      	b.n	80029b4 <HAL_PCD_EP_Close+0x8c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 ff3d 	bl	8005824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	7afb      	ldrb	r3, [r7, #11]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6979      	ldr	r1, [r7, #20]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 f9ba 	bl	8005d94 <USB_EP0StartXfer>
 8002a20:	e005      	b.n	8002a2e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6979      	ldr	r1, [r7, #20]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 ffd7 	bl	80059dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3338      	adds	r3, #56	; 0x38
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 f965 	bl	8005d94 <USB_EP0StartXfer>
 8002aca:	e005      	b.n	8002ad8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 ff82 	bl	80059dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d901      	bls.n	8002b00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e04e      	b.n	8002b9e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da0f      	bge.n	8002b28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	705a      	strb	r2, [r3, #1]
 8002b26:	e00d      	b.n	8002b44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_PCD_EP_SetStall+0x82>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e01c      	b.n	8002b9e <HAL_PCD_EP_SetStall+0xbc>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 fa86 	bl	8006084 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f003 fc78 	bl	8006484 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e042      	b.n	8002c4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0f      	bge.n	8002bec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3338      	adds	r3, #56	; 0x38
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	705a      	strb	r2, [r3, #1]
 8002bea:	e00f      	b.n	8002c0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 020f 	and.w	r2, r3, #15
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_PCD_EP_ClrStall+0x86>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e00e      	b.n	8002c4a <HAL_PCD_EP_ClrStall+0xa4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 fa90 	bl	8006160 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b088      	sub	sp, #32
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3338      	adds	r3, #56	; 0x38
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d901      	bls.n	8002c8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d902      	bls.n	8002ca6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cae:	e026      	b.n	8002cfe <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d902      	bls.n	8002ccc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3303      	adds	r3, #3
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f003 f975 	bl	8005fd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	441a      	add	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d809      	bhi.n	8002d28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d203      	bcs.n	8002d28 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1c3      	bne.n	8002cb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d811      	bhi.n	8002d58 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d54:	4013      	ands	r3, r2
 8002d56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	333c      	adds	r3, #60	; 0x3c
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <PCD_EP_OutXfrComplete_int+0x98>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d124      	bne.n	8002de4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db0:	461a      	mov	r2, r3
 8002db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db6:	6093      	str	r3, [r2, #8]
 8002db8:	e01a      	b.n	8002df0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f008 f8f3 	bl	800afc8 <HAL_PCD_DataOutStageCallback>
 8002de2:	e005      	b.n	8002df0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f008 f8ec 	bl	800afc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	4f54310a 	.word	0x4f54310a

08002e00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	333c      	adds	r3, #60	; 0x3c
 8002e18:	3304      	adds	r3, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <PCD_EP_OutSetupPacket_int+0x64>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d90e      	bls.n	8002e54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f008 f8a5 	bl	800afa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	4f54300a 	.word	0x4f54300a

08002e68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
 8002e74:	4613      	mov	r3, r2
 8002e76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e86:	883b      	ldrh	r3, [r7, #0]
 8002e88:	0419      	lsls	r1, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
 8002e94:	e028      	b.n	8002ee8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e00d      	b.n	8002ec6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	3340      	adds	r3, #64	; 0x40
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3ec      	bcc.n	8002eaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ed0:	883b      	ldrh	r3, [r7, #0]
 8002ed2:	0418      	lsls	r0, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4302      	orrs	r2, r0
 8002ee0:	3340      	adds	r3, #64	; 0x40
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	f043 0303 	orr.w	r3, r3, #3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40007000 	.word	0x40007000

08002f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d130      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d038      	beq.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2232      	movs	r2, #50	; 0x32
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc0:	e002      	b.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd4:	d102      	bne.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f2      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d110      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e00f      	b.n	800300e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d007      	beq.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003004:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000
 8003020:	20000008 	.word	0x20000008
 8003024:	431bde83 	.word	0x431bde83

08003028 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_PWREx_EnableVddUSB+0x1c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003036:	6053      	str	r3, [r2, #4]
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40007000 	.word	0x40007000

08003048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e3d4      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305a:	4ba1      	ldr	r3, [pc, #644]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80e4 	beq.w	8003244 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_RCC_OscConfig+0x4a>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	f040 808b 	bne.w	80031a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8087 	bne.w	80031a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003092:	4b93      	ldr	r3, [pc, #588]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e3ac      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCC_OscConfig+0x7c>
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c2:	e005      	b.n	80030d0 <HAL_RCC_OscConfig+0x88>
 80030c4:	4b86      	ldr	r3, [pc, #536]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d223      	bcs.n	800311c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fd15 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e38d      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e8:	4b7d      	ldr	r3, [pc, #500]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b7a      	ldr	r3, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4977      	ldr	r1, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	4972      	ldr	r1, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
 800311a:	e025      	b.n	8003168 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6f      	ldr	r2, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	496a      	ldr	r1, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313a:	4b69      	ldr	r3, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4965      	ldr	r1, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fcd5 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e34d      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003168:	f000 fc36 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b5c      	ldr	r3, [pc, #368]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	495a      	ldr	r1, [pc, #360]	; (80032e4 <HAL_RCC_OscConfig+0x29c>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_OscConfig+0x2a0>)
 8003186:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003188:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCC_OscConfig+0x2a4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fa89 	bl	80016a4 <HAL_InitTick>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d052      	beq.n	8003242 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	e331      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d032      	beq.n	800320e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4c      	ldr	r2, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fac6 	bl	8001744 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031bc:	f7fe fac2 	bl	8001744 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e31a      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	493b      	ldr	r1, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f8:	4b39      	ldr	r3, [pc, #228]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	4936      	ldr	r1, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e01a      	b.n	8003244 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800321a:	f7fe fa93 	bl	8001744 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003222:	f7fe fa8f 	bl	8001744 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e2e7      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003234:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x1da>
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003242:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d074      	beq.n	800333a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x21a>
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d10e      	bne.n	800327a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d10b      	bne.n	800327a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d064      	beq.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d160      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e2c4      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x24a>
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800328a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e01d      	b.n	80032ce <HAL_RCC_OscConfig+0x286>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x26e>
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x286>
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a06      	ldr	r2, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x298>)
 80032c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01c      	beq.n	8003310 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fa35 	bl	8001744 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032dc:	e011      	b.n	8003302 <HAL_RCC_OscConfig+0x2ba>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	0800b884 	.word	0x0800b884
 80032e8:	20000008 	.word	0x20000008
 80032ec:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fa28 	bl	8001744 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e280      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003302:	4baf      	ldr	r3, [pc, #700]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2a8>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fa18 	bl	8001744 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fa14 	bl	8001744 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e26c      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332a:	4ba5      	ldr	r3, [pc, #660]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x2d0>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d060      	beq.n	8003408 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d005      	beq.n	8003358 <HAL_RCC_OscConfig+0x310>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d119      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d116      	bne.n	8003386 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	4b99      	ldr	r3, [pc, #612]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x328>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e249      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b93      	ldr	r3, [pc, #588]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4990      	ldr	r1, [pc, #576]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003380:	4313      	orrs	r3, r2
 8003382:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	e040      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d023      	beq.n	80033d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338e:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a8b      	ldr	r2, [pc, #556]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe f9d3 	bl	8001744 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a2:	f7fe f9cf 	bl	8001744 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e227      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b4:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b7f      	ldr	r3, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	497c      	ldr	r1, [pc, #496]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e018      	b.n	8003408 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a79      	ldr	r2, [pc, #484]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe f9af 	bl	8001744 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe f9ab 	bl	8001744 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e203      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fc:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d03c      	beq.n	800348e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01c      	beq.n	8003456 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe f98a 	bl	8001744 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe f986 	bl	8001744 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1de      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003446:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ef      	beq.n	8003434 <HAL_RCC_OscConfig+0x3ec>
 8003454:	e01b      	b.n	800348e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345c:	4a58      	ldr	r2, [pc, #352]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe f96d 	bl	8001744 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe f969 	bl	8001744 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e1c1      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003480:	4b4f      	ldr	r3, [pc, #316]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ef      	bne.n	800346e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80a6 	beq.w	80035e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a43      	ldr	r2, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
 80034b8:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_RCC_OscConfig+0x57c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d118      	bne.n	8003506 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x57c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x57c>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e0:	f7fe f930 	bl	8001744 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fe f92c 	bl	8001744 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e184      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fa:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x57c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x4d8>
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351e:	e024      	b.n	800356a <HAL_RCC_OscConfig+0x522>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d110      	bne.n	800354a <HAL_RCC_OscConfig+0x502>
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003548:	e00f      	b.n	800356a <HAL_RCC_OscConfig+0x522>
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe f8e7 	bl	8001744 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe f8e3 	bl	8001744 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e139      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_OscConfig+0x578>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ed      	beq.n	800357a <HAL_RCC_OscConfig+0x532>
 800359e:	e01a      	b.n	80035d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe f8d0 	bl	8001744 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe f8cc 	bl	8001744 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d906      	bls.n	80035c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e122      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c8:	4b90      	ldr	r3, [pc, #576]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e8      	bne.n	80035a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b8b      	ldr	r3, [pc, #556]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	4a8a      	ldr	r2, [pc, #552]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8108 	beq.w	8003802 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80d0 	bne.w	800379c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035fc:	4b83      	ldr	r3, [pc, #524]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0203 	and.w	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d130      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	3b01      	subs	r3, #1
 800361c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d127      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11f      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363c:	2a07      	cmp	r2, #7
 800363e:	bf14      	ite	ne
 8003640:	2201      	movne	r2, #1
 8003642:	2200      	moveq	r2, #0
 8003644:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	4293      	cmp	r3, r2
 8003648:	d113      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d109      	bne.n	8003672 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d06e      	beq.n	8003750 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d069      	beq.n	800374c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003678:	4b64      	ldr	r3, [pc, #400]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0b7      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003694:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5c      	ldr	r2, [pc, #368]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800369a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036a0:	f7fe f850 	bl	8001744 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe f84c 	bl	8001744 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0a4      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x7c8>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036e0:	0212      	lsls	r2, r2, #8
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0552      	lsls	r2, r2, #21
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
 80036f8:	0652      	lsls	r2, r2, #25
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003700:	0912      	lsrs	r2, r2, #4
 8003702:	0452      	lsls	r2, r2, #17
 8003704:	430a      	orrs	r2, r1
 8003706:	4941      	ldr	r1, [pc, #260]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800370c:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003724:	f7fe f80e 	bl	8001744 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe f80a 	bl	8001744 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e062      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374a:	e05a      	b.n	8003802 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e059      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d152      	bne.n	8003802 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800375c:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003774:	f7fd ffe6 	bl	8001744 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd ffe2 	bl	8001744 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e03a      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x734>
 800379a:	e032      	b.n	8003802 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d02d      	beq.n	80037fe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fd ffb5 	bl	8001744 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd ffb1 	bl	8001744 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e009      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x7c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x796>
 80037fc:	e001      	b.n	8003802 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	f99d808c 	.word	0xf99d808c

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0c8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d910      	bls.n	8003858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0207 	bic.w	r2, r3, #7
 800383e:	4961      	ldr	r1, [pc, #388]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b0      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d04c      	beq.n	80038fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b03      	cmp	r3, #3
 800386a:	d107      	bne.n	800387c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386c:	4b56      	ldr	r3, [pc, #344]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d121      	bne.n	80038bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e09e      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d107      	bne.n	8003894 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d115      	bne.n	80038bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e092      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389c:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e086      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e07e      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038bc:	4b42      	ldr	r3, [pc, #264]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	493f      	ldr	r1, [pc, #252]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ce:	f7fd ff39 	bl	8001744 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d6:	f7fd ff35 	bl	8001744 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e066      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 020c 	and.w	r2, r3, #12
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d1eb      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	492c      	ldr	r1, [pc, #176]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d210      	bcs.n	800394c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 0207 	bic.w	r2, r3, #7
 8003932:	4924      	ldr	r1, [pc, #144]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1b0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e036      	b.n	80039ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4918      	ldr	r1, [pc, #96]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4910      	ldr	r1, [pc, #64]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398a:	f000 f825 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 800398e:	4602      	mov	r2, r0
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	490c      	ldr	r1, [pc, #48]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	5ccb      	ldrb	r3, [r1, r3]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fe78 	bl	80016a4 <HAL_InitTick>
 80039b4:	4603      	mov	r3, r0
 80039b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80039b8:	7afb      	ldrb	r3, [r7, #11]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40022000 	.word	0x40022000
 80039c8:	40021000 	.word	0x40021000
 80039cc:	0800b884 	.word	0x0800b884
 80039d0:	20000008 	.word	0x20000008
 80039d4:	2000000c 	.word	0x2000000c

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x34>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d121      	bne.n	8003a4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d11e      	bne.n	8003a4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a0c:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	e005      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a34:	4a2b      	ldr	r2, [pc, #172]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10d      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e004      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_RCC_GetSysClockFreq+0x114>)
 8003a5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b0c      	cmp	r3, #12
 8003a64:	d134      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0xac>
 8003a7c:	e005      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a80:	617b      	str	r3, [r7, #20]
      break;
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_GetSysClockFreq+0x114>)
 8003a86:	617b      	str	r3, [r7, #20]
      break;
 8003a88:	e002      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	617b      	str	r3, [r7, #20]
      break;
 8003a8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	fb02 f203 	mul.w	r2, r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	0e5b      	lsrs	r3, r3, #25
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	0800b894 	.word	0x0800b894
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	007a1200 	.word	0x007a1200

08003af0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000008 	.word	0x20000008

08003b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b14:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b20:	f7ff fa1e 	bl	8002f60 <HAL_PWREx_GetVoltageRange>
 8003b24:	6178      	str	r0, [r7, #20]
 8003b26:	e014      	b.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff fa0e 	bl	8002f60 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b58:	d10b      	bne.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d919      	bls.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2ba0      	cmp	r3, #160	; 0xa0
 8003b64:	d902      	bls.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b66:	2302      	movs	r3, #2
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	e013      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e010      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d902      	bls.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b78:	2303      	movs	r3, #3
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e00a      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b80      	cmp	r3, #128	; 0x80
 8003b82:	d102      	bne.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b84:	2302      	movs	r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	e004      	b.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d101      	bne.n	8003b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b90:	2301      	movs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0207 	bic.w	r2, r3, #7
 8003b9c:	4909      	ldr	r1, [pc, #36]	; (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40022000 	.word	0x40022000

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d041      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bec:	d02a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bf2:	d824      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfe:	d81e      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c08:	d010      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c0c:	4b86      	ldr	r3, [pc, #536]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a85      	ldr	r2, [pc, #532]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e015      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fabb 	bl	800419c <RCCEx_PLLSAI1_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c2a:	e00c      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3320      	adds	r3, #32
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fba6 	bl	8004384 <RCCEx_PLLSAI2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	74fb      	strb	r3, [r7, #19]
      break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c4c:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	4973      	ldr	r1, [pc, #460]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c62:	e001      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d041      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c7c:	d02a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c82:	d824      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c88:	d008      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c8e:	d81e      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c98:	d010      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c9a:	e018      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c9c:	4b62      	ldr	r3, [pc, #392]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a61      	ldr	r2, [pc, #388]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa73 	bl	800419c <RCCEx_PLLSAI1_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cba:	e00c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fb5e 	bl	8004384 <RCCEx_PLLSAI2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cdc:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cea:	494f      	ldr	r1, [pc, #316]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a0 	beq.w	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a40      	ldr	r2, [pc, #256]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d48:	f7fd fcfc 	bl	8001744 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd fcf8 	bl	8001744 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	74fb      	strb	r3, [r7, #19]
        break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d15c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d019      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dc0:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fcb7 	bl	8001744 <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fd fcb3 	bl	8001744 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d902      	bls.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	74fb      	strb	r3, [r7, #19]
            break;
 8003df0:	e006      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ec      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e16:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e34:	7c7b      	ldrb	r3, [r7, #17]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b9e      	ldr	r3, [pc, #632]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	4a9d      	ldr	r2, [pc, #628]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e52:	4b98      	ldr	r3, [pc, #608]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f023 0203 	bic.w	r2, r3, #3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	4994      	ldr	r1, [pc, #592]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e74:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 020c 	bic.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	498c      	ldr	r1, [pc, #560]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e96:	4b87      	ldr	r3, [pc, #540]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	4983      	ldr	r1, [pc, #524]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb8:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	497b      	ldr	r1, [pc, #492]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eda:	4b76      	ldr	r3, [pc, #472]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	4972      	ldr	r1, [pc, #456]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003efc:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	496a      	ldr	r1, [pc, #424]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	4961      	ldr	r1, [pc, #388]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f40:	4b5c      	ldr	r3, [pc, #368]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	4959      	ldr	r1, [pc, #356]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f62:	4b54      	ldr	r3, [pc, #336]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	4950      	ldr	r1, [pc, #320]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	4948      	ldr	r1, [pc, #288]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa6:	4b43      	ldr	r3, [pc, #268]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	493f      	ldr	r1, [pc, #252]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d028      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a31      	ldr	r2, [pc, #196]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e011      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffe:	d10c      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f8c8 	bl	800419c <RCCEx_PLLSAI1_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	491f      	ldr	r1, [pc, #124]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004044:	d106      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004050:	60d3      	str	r3, [r2, #12]
 8004052:	e011      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f899 	bl	800419c <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004092:	4908      	ldr	r1, [pc, #32]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a2:	d109      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a02      	ldr	r2, [pc, #8]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ae:	60d3      	str	r3, [r2, #12]
 80040b0:	e014      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f867 	bl	800419c <RCCEx_PLLSAI1_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f6:	4928      	ldr	r1, [pc, #160]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004106:	d10d      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3304      	adds	r3, #4
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f844 	bl	800419c <RCCEx_PLLSAI1_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	74bb      	strb	r3, [r7, #18]
 8004122:	e011      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412c:	d10c      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3320      	adds	r3, #32
 8004132:	2102      	movs	r1, #2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f925 	bl	8004384 <RCCEx_PLLSAI2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004162:	490d      	ldr	r1, [pc, #52]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004186:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800418e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000

0800419c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041aa:	4b75      	ldr	r3, [pc, #468]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d018      	beq.n	80041e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041b6:	4b72      	ldr	r3, [pc, #456]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0203 	and.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d10d      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
       ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ce:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
       ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d047      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e044      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d018      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x86>
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d825      	bhi.n	8004240 <RCCEx_PLLSAI1_Config+0xa4>
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x62>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d009      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x74>
 80041fc:	e020      	b.n	8004240 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fe:	4b60      	ldr	r3, [pc, #384]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420e:	e01a      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004210:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e013      	b.n	800424a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004222:	4b57      	ldr	r3, [pc, #348]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422e:	4b54      	ldr	r3, [pc, #336]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423e:	e006      	b.n	800424e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e004      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004256:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	430b      	orrs	r3, r1
 800426c:	4944      	ldr	r1, [pc, #272]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d17d      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a40      	ldr	r2, [pc, #256]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fd fa5e 	bl	8001744 <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800428a:	e009      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428c:	f7fd fa5a 	bl	8001744 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d902      	bls.n	80042a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	73fb      	strb	r3, [r7, #15]
        break;
 800429e:	e005      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a0:	4b37      	ldr	r3, [pc, #220]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ef      	bne.n	800428c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d160      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d111      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b8:	4b31      	ldr	r3, [pc, #196]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6892      	ldr	r2, [r2, #8]
 80042c8:	0211      	lsls	r1, r2, #8
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	0912      	lsrs	r2, r2, #4
 80042d0:	0452      	lsls	r2, r2, #17
 80042d2:	430a      	orrs	r2, r1
 80042d4:	492a      	ldr	r1, [pc, #168]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
 80042da:	e027      	b.n	800432c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d112      	bne.n	8004308 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e2:	4b27      	ldr	r3, [pc, #156]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6892      	ldr	r2, [r2, #8]
 80042f2:	0211      	lsls	r1, r2, #8
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6912      	ldr	r2, [r2, #16]
 80042f8:	0852      	lsrs	r2, r2, #1
 80042fa:	3a01      	subs	r2, #1
 80042fc:	0552      	lsls	r2, r2, #21
 80042fe:	430a      	orrs	r2, r1
 8004300:	491f      	ldr	r1, [pc, #124]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	4313      	orrs	r3, r2
 8004304:	610b      	str	r3, [r1, #16]
 8004306:	e011      	b.n	800432c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	0211      	lsls	r1, r2, #8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6952      	ldr	r2, [r2, #20]
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	3a01      	subs	r2, #1
 8004322:	0652      	lsls	r2, r2, #25
 8004324:	430a      	orrs	r2, r1
 8004326:	4916      	ldr	r1, [pc, #88]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd fa04 	bl	8001744 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fd fa00 	bl	8001744 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
          break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ef      	beq.n	8004340 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4904      	ldr	r1, [pc, #16]	; (8004380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004392:	4b6a      	ldr	r3, [pc, #424]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800439e:	4b67      	ldr	r3, [pc, #412]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0203 	and.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d10d      	bne.n	80043ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
       ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043b6:	4b61      	ldr	r3, [pc, #388]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
       ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d047      	beq.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e044      	b.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d018      	beq.n	800440a <RCCEx_PLLSAI2_Config+0x86>
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d825      	bhi.n	8004428 <RCCEx_PLLSAI2_Config+0xa4>
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d002      	beq.n	80043e6 <RCCEx_PLLSAI2_Config+0x62>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d009      	beq.n	80043f8 <RCCEx_PLLSAI2_Config+0x74>
 80043e4:	e020      	b.n	8004428 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e6:	4b55      	ldr	r3, [pc, #340]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f6:	e01a      	b.n	800442e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	4b50      	ldr	r3, [pc, #320]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e013      	b.n	8004432 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800440a:	4b4c      	ldr	r3, [pc, #304]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004416:	4b49      	ldr	r3, [pc, #292]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004426:	e006      	b.n	8004436 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      break;
 800442c:	e004      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800442e:	bf00      	nop
 8004430:	e002      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004432:	bf00      	nop
 8004434:	e000      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004436:	bf00      	nop
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800443e:	4b3f      	ldr	r3, [pc, #252]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	430b      	orrs	r3, r1
 8004454:	4939      	ldr	r1, [pc, #228]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d167      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446c:	f7fd f96a 	bl	8001744 <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004472:	e009      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004474:	f7fd f966 	bl	8001744 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	73fb      	strb	r3, [r7, #15]
        break;
 8004486:	e005      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004488:	4b2c      	ldr	r3, [pc, #176]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ef      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d14a      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6892      	ldr	r2, [r2, #8]
 80044b0:	0211      	lsls	r1, r2, #8
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	0912      	lsrs	r2, r2, #4
 80044b8:	0452      	lsls	r2, r2, #17
 80044ba:	430a      	orrs	r2, r1
 80044bc:	491f      	ldr	r1, [pc, #124]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	614b      	str	r3, [r1, #20]
 80044c2:	e011      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6892      	ldr	r2, [r2, #8]
 80044d4:	0211      	lsls	r1, r2, #8
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6912      	ldr	r2, [r2, #16]
 80044da:	0852      	lsrs	r2, r2, #1
 80044dc:	3a01      	subs	r2, #1
 80044de:	0652      	lsls	r2, r2, #25
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4916      	ldr	r1, [pc, #88]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd f926 	bl	8001744 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044fc:	f7fd f922 	bl	8001744 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
          break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ef      	beq.n	80044fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4904      	ldr	r1, [pc, #16]	; (800453c <RCCEx_PLLSAI2_Config+0x1b8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fde0 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fbe8 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d018      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_TIM_Base_Start_IT+0xcc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_TIM_Base_Start_IT+0x76>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d115      	bne.n	8004692 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_TIM_Base_Start_IT+0xdc>)
 800466e:	4013      	ands	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d015      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0xb4>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d011      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004690:	e008      	b.n	80046a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e000      	b.n	80046a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	00010007 	.word	0x00010007

080046d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e097      	b.n	8004814 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fd4d 	bl	8001198 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f000 fb15 	bl	8004d54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4313      	orrs	r3, r2
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004770:	f023 030c 	bic.w	r3, r3, #12
 8004774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800477c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	4313      	orrs	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	031b      	lsls	r3, r3, #12
 80047a0:	4313      	orrs	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4313      	orrs	r3, r2
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004834:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800483c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004844:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d110      	bne.n	800486e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004852:	7b7b      	ldrb	r3, [r7, #13]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e069      	b.n	8004930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	e031      	b.n	80048d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d110      	bne.n	8004896 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d102      	bne.n	8004880 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800487a:	7b3b      	ldrb	r3, [r7, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d001      	beq.n	8004884 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e055      	b.n	8004930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004894:	e01d      	b.n	80048d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d108      	bne.n	80048ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a2:	7b7b      	ldrb	r3, [r7, #13]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048a8:	7b3b      	ldrb	r3, [r7, #12]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e03e      	b.n	8004930 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_TIM_Encoder_Start+0xc4>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d008      	beq.n	80048f0 <HAL_TIM_Encoder_Start+0xd4>
 80048de:	e00f      	b.n	8004900 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2201      	movs	r2, #1
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fb67 	bl	8004fbc <TIM_CCxChannelCmd>
      break;
 80048ee:	e016      	b.n	800491e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	2104      	movs	r1, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fb5f 	bl	8004fbc <TIM_CCxChannelCmd>
      break;
 80048fe:	e00e      	b.n	800491e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fb57 	bl	8004fbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2201      	movs	r2, #1
 8004914:	2104      	movs	r1, #4
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fb50 	bl	8004fbc <TIM_CCxChannelCmd>
      break;
 800491c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0201 	orr.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9cb 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9bd 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9ce 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0204 	mvn.w	r2, #4
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9a1 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f993 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f9a4 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0208 	mvn.w	r2, #8
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f977 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f969 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f97a 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0210 	mvn.w	r2, #16
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2208      	movs	r2, #8
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f94d 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f93f 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f950 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0201 	mvn.w	r2, #1
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fb ff68 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac6:	2b80      	cmp	r3, #128	; 0x80
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fb22 	bl	800512c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af6:	d10e      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d107      	bne.n	8004b16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb15 	bl	8005140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8fe 	bl	8004d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0220 	mvn.w	r2, #32
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fad5 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_ConfigClockSource+0x18>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0b5      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x184>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d03e      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xd4>
 8004bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd0:	f200 8087 	bhi.w	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	f000 8085 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x170>
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d87f      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004be2:	2b70      	cmp	r3, #112	; 0x70
 8004be4:	d01a      	beq.n	8004c1c <HAL_TIM_ConfigClockSource+0xa6>
 8004be6:	2b70      	cmp	r3, #112	; 0x70
 8004be8:	d87b      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004bea:	2b60      	cmp	r3, #96	; 0x60
 8004bec:	d050      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0x11a>
 8004bee:	2b60      	cmp	r3, #96	; 0x60
 8004bf0:	d877      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf2:	2b50      	cmp	r3, #80	; 0x50
 8004bf4:	d03c      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xfa>
 8004bf6:	2b50      	cmp	r3, #80	; 0x50
 8004bf8:	d873      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d058      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0x13a>
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d86f      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004c02:	2b30      	cmp	r3, #48	; 0x30
 8004c04:	d064      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004c06:	2b30      	cmp	r3, #48	; 0x30
 8004c08:	d86b      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d060      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d867      	bhi.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d05c      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x15a>
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d05a      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c1a:	e062      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f000 f9a6 	bl	8004f7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e04e      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f000 f98f 	bl	8004f7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c6c:	609a      	str	r2, [r3, #8]
      break;
 8004c6e:	e03b      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f000 f903 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2150      	movs	r1, #80	; 0x50
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f95c 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004c8e:	e02b      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f000 f922 	bl	8004ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2160      	movs	r1, #96	; 0x60
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f94c 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004cae:	e01b      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f000 f8e3 	bl	8004e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f93c 	bl	8004f46 <TIM_ITRx_SetConfig>
      break;
 8004cce:	e00b      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f933 	bl	8004f46 <TIM_ITRx_SetConfig>
        break;
 8004ce0:	e002      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a40      	ldr	r2, [pc, #256]	; (8004e68 <TIM_Base_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a3d      	ldr	r2, [pc, #244]	; (8004e6c <TIM_Base_SetConfig+0x118>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a3c      	ldr	r2, [pc, #240]	; (8004e70 <TIM_Base_SetConfig+0x11c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <TIM_Base_SetConfig+0x120>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <TIM_Base_SetConfig+0x124>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	; (8004e68 <TIM_Base_SetConfig+0x114>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2c      	ldr	r2, [pc, #176]	; (8004e6c <TIM_Base_SetConfig+0x118>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2b      	ldr	r2, [pc, #172]	; (8004e70 <TIM_Base_SetConfig+0x11c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <TIM_Base_SetConfig+0x120>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	; (8004e78 <TIM_Base_SetConfig+0x124>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a28      	ldr	r2, [pc, #160]	; (8004e7c <TIM_Base_SetConfig+0x128>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0x9a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <TIM_Base_SetConfig+0x130>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_Base_SetConfig+0x114>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00f      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a12      	ldr	r2, [pc, #72]	; (8004e78 <TIM_Base_SetConfig+0x124>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <TIM_Base_SetConfig+0x128>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	; (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a0f      	ldr	r2, [pc, #60]	; (8004e84 <TIM_Base_SetConfig+0x130>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 030a 	bic.w	r3, r3, #10
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	621a      	str	r2, [r3, #32]
}
 8004eda:	bf00      	nop
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0210 	bic.w	r2, r3, #16
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	031b      	lsls	r3, r3, #12
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f043 0307 	orr.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2201      	movs	r2, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1a      	ldr	r2, [r3, #32]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	401a      	ands	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e068      	b.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2e      	ldr	r2, [pc, #184]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800505a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005092:	d018      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1a      	ldr	r2, [pc, #104]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a13      	ldr	r2, [pc, #76]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10c      	bne.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40014000 	.word	0x40014000

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005154:	b084      	sub	sp, #16
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	f107 001c 	add.w	r0, r7, #28
 8005162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f9ce 	bl	8006514 <USB_CoreReset>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
 800518e:	e005      	b.n	800519c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a8:	b004      	add	sp, #16
 80051aa:	4770      	bx	lr

080051ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d165      	bne.n	800528c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a3e      	ldr	r2, [pc, #248]	; (80052bc <USB_SetTurnaroundTime+0x110>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d906      	bls.n	80051d6 <USB_SetTurnaroundTime+0x2a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a3d      	ldr	r2, [pc, #244]	; (80052c0 <USB_SetTurnaroundTime+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d0:	230f      	movs	r3, #15
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e05c      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <USB_SetTurnaroundTime+0x114>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d306      	bcc.n	80051ec <USB_SetTurnaroundTime+0x40>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <USB_SetTurnaroundTime+0x118>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d202      	bcs.n	80051ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e6:	230e      	movs	r3, #14
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e051      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a35      	ldr	r2, [pc, #212]	; (80052c4 <USB_SetTurnaroundTime+0x118>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d306      	bcc.n	8005202 <USB_SetTurnaroundTime+0x56>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <USB_SetTurnaroundTime+0x11c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d202      	bcs.n	8005202 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051fc:	230d      	movs	r3, #13
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e046      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a30      	ldr	r2, [pc, #192]	; (80052c8 <USB_SetTurnaroundTime+0x11c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d306      	bcc.n	8005218 <USB_SetTurnaroundTime+0x6c>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005212:	230c      	movs	r3, #12
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e03b      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0x82>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d802      	bhi.n	800522e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005228:	230b      	movs	r3, #11
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e030      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d906      	bls.n	8005244 <USB_SetTurnaroundTime+0x98>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523e:	230a      	movs	r3, #10
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e025      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xae>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005254:	2309      	movs	r3, #9
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e01a      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d306      	bcc.n	8005270 <USB_SetTurnaroundTime+0xc4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d802      	bhi.n	8005270 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526a:	2308      	movs	r3, #8
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e00f      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d906      	bls.n	8005286 <USB_SetTurnaroundTime+0xda>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d202      	bcs.n	8005286 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005280:	2307      	movs	r3, #7
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e004      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005286:	2306      	movs	r3, #6
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e001      	b.n	8005290 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800528c:	2309      	movs	r3, #9
 800528e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	00d8acbf 	.word	0x00d8acbf
 80052c0:	00e4e1c0 	.word	0x00e4e1c0
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	01067380 	.word	0x01067380
 80052cc:	011a499f 	.word	0x011a499f
 80052d0:	01312cff 	.word	0x01312cff
 80052d4:	014ca43f 	.word	0x014ca43f
 80052d8:	016e3600 	.word	0x016e3600
 80052dc:	01a6ab1f 	.word	0x01a6ab1f
 80052e0:	01e84800 	.word	0x01e84800

080052e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d106      	bne.n	8005354 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e00b      	b.n	800536c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	e001      	b.n	800536c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e003      	b.n	8005374 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800536c:	2032      	movs	r0, #50	; 0x32
 800536e:	f7fc f9f5 	bl	800175c <HAL_Delay>

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537c:	b084      	sub	sp, #16
 800537e:	b580      	push	{r7, lr}
 8005380:	b086      	sub	sp, #24
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e009      	b.n	80053b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3340      	adds	r3, #64	; 0x40
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	2200      	movs	r2, #0
 80053a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b0e      	cmp	r3, #14
 80053b4:	d9f2      	bls.n	800539c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11c      	bne.n	80053f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e005      	b.n	8005402 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005408:	461a      	mov	r2, r3
 800540a:	2300      	movs	r3, #0
 800540c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	4619      	mov	r1, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	461a      	mov	r2, r3
 800541e:	680b      	ldr	r3, [r1, #0]
 8005420:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005422:	2103      	movs	r1, #3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f93d 	bl	80056a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800542a:	2110      	movs	r1, #16
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8f1 	bl	8005614 <USB_FlushTxFifo>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f90f 	bl	8005660 <USB_FlushRxFifo>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	e043      	b.n	80054fe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548c:	d118      	bne.n	80054c0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a0:	461a      	mov	r2, r3
 80054a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e013      	b.n	80054d2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e008      	b.n	80054d2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	461a      	mov	r2, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	461a      	mov	r2, r3
 80054f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	3301      	adds	r3, #1
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3b7      	bcc.n	8005476 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e043      	b.n	8005594 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005522:	d118      	bne.n	8005556 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e013      	b.n	8005568 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e008      	b.n	8005568 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800558c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d3b7      	bcc.n	800550c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f043 0210 	orr.w	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <USB_DevInit+0x294>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f043 0208 	orr.w	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d107      	bne.n	80055fe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560a:	b004      	add	sp, #16
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	803c3800 	.word	0x803c3800

08005614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	f043 0220 	orr.w	r2, r3, #32
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a09      	ldr	r2, [pc, #36]	; (800565c <USB_FlushTxFifo+0x48>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b20      	cmp	r3, #32
 800564a:	d0f0      	beq.n	800562e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	00030d40 	.word	0x00030d40

08005660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2210      	movs	r2, #16
 8005670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <USB_FlushRxFifo+0x40>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e006      	b.n	8005692 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b10      	cmp	r3, #16
 800568e:	d0f0      	beq.n	8005672 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	00030d40 	.word	0x00030d40

080056a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b087      	sub	sp, #28
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0306 	and.w	r3, r3, #6
 80056ee:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d002      	beq.n	80056fc <USB_GetDevSpeed+0x26>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d102      	bne.n	8005702 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056fc:	2302      	movs	r3, #2
 80056fe:	75fb      	strb	r3, [r7, #23]
 8005700:	e001      	b.n	8005706 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005702:	230f      	movs	r3, #15
 8005704:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d13a      	bne.n	80057a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	2101      	movs	r1, #1
 8005742:	fa01 f303 	lsl.w	r3, r1, r3
 8005746:	b29b      	uxth	r3, r3
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800574e:	4313      	orrs	r3, r2
 8005750:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d155      	bne.n	8005814 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	78db      	ldrb	r3, [r3, #3]
 8005782:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005784:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	059b      	lsls	r3, r3, #22
 800578a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800578c:	4313      	orrs	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e036      	b.n	8005814 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11a      	bne.n	8005814 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057fa:	430b      	orrs	r3, r1
 80057fc:	4313      	orrs	r3, r2
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d161      	bne.n	8005904 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005856:	d11f      	bne.n	8005898 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005876:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005896:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b8:	4013      	ands	r3, r2
 80058ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	2101      	movs	r1, #1
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058dc:	4013      	ands	r3, r2
 80058de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	0159      	lsls	r1, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	440b      	add	r3, r1
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	4619      	mov	r1, r3
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <USB_DeactivateEndpoint+0x1b0>)
 80058fe:	4013      	ands	r3, r2
 8005900:	600b      	str	r3, [r1, #0]
 8005902:	e060      	b.n	80059c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591a:	d11f      	bne.n	800595c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800593a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	43db      	mvns	r3, r3
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4013      	ands	r3, r2
 800597e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2101      	movs	r1, #1
 8005992:	fa01 f303 	lsl.w	r3, r1, r3
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	43db      	mvns	r3, r3
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4013      	ands	r3, r2
 80059a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0159      	lsls	r1, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	4619      	mov	r1, r3
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <USB_DeactivateEndpoint+0x1b4>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	ec337800 	.word	0xec337800
 80059d8:	eff37800 	.word	0xeff37800

080059dc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	f040 810a 	bne.w	8005c0e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d132      	bne.n	8005a68 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a60:	0cdb      	lsrs	r3, r3, #19
 8005a62:	04db      	lsls	r3, r3, #19
 8005a64:	6113      	str	r3, [r2, #16]
 8005a66:	e074      	b.n	8005b52 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	0cdb      	lsrs	r3, r3, #19
 8005a84:	04db      	lsls	r3, r3, #19
 8005a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aa6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	440b      	add	r3, r1
 8005ac4:	1e59      	subs	r1, r3, #1
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ace:	04d9      	lsls	r1, r3, #19
 8005ad0:	4baf      	ldr	r3, [pc, #700]	; (8005d90 <USB_EPStartXfer+0x3b4>)
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	6939      	ldr	r1, [r7, #16]
 8005ad6:	0148      	lsls	r0, r1, #5
 8005ad8:	6979      	ldr	r1, [r7, #20]
 8005ada:	4401      	add	r1, r0
 8005adc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afa:	6939      	ldr	r1, [r7, #16]
 8005afc:	0148      	lsls	r0, r1, #5
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	4401      	add	r1, r0
 8005b02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b06:	4313      	orrs	r3, r2
 8005b08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	78db      	ldrb	r3, [r3, #3]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d11f      	bne.n	8005b52 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b50:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b70:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	78db      	ldrb	r3, [r3, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d015      	beq.n	8005ba6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8100 	beq.w	8005d84 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8005ba4:	e0ee      	b.n	8005d84 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d110      	bne.n	8005bd8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e00f      	b.n	8005bf8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68d9      	ldr	r1, [r3, #12]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9e2 	bl	8005fd0 <USB_WritePacket>
 8005c0c:	e0ba      	b.n	8005d84 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c28:	0cdb      	lsrs	r3, r3, #19
 8005c2a:	04db      	lsls	r3, r3, #19
 8005c2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d123      	bne.n	8005ca2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c70:	6939      	ldr	r1, [r7, #16]
 8005c72:	0148      	lsls	r0, r1, #5
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	4401      	add	r1, r0
 8005c78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c9e:	6113      	str	r3, [r2, #16]
 8005ca0:	e033      	b.n	8005d0a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4413      	add	r3, r2
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	89fb      	ldrh	r3, [r7, #14]
 8005cc8:	04d9      	lsls	r1, r3, #19
 8005cca:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <USB_EPStartXfer+0x3b4>)
 8005ccc:	400b      	ands	r3, r1
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	0148      	lsls	r0, r1, #5
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	4401      	add	r1, r0
 8005cd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	89f9      	ldrh	r1, [r7, #14]
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfa:	6939      	ldr	r1, [r7, #16]
 8005cfc:	0148      	lsls	r0, r1, #5
 8005cfe:	6979      	ldr	r1, [r7, #20]
 8005d00:	4401      	add	r1, r0
 8005d02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d128      	bne.n	8005d64 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d110      	bne.n	8005d44 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e00f      	b.n	8005d64 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	1ff80000 	.word	0x1ff80000

08005d94 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 80ab 	bne.w	8005f08 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d132      	bne.n	8005e20 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	0cdb      	lsrs	r3, r3, #19
 8005e1a:	04db      	lsls	r3, r3, #19
 8005e1c:	6113      	str	r3, [r2, #16]
 8005e1e:	e04e      	b.n	8005ebe <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	0cdb      	lsrs	r3, r3, #19
 8005e3c:	04db      	lsls	r3, r3, #19
 8005e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	0148      	lsls	r0, r1, #5
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	4401      	add	r1, r0
 8005eb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005edc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d06d      	beq.n	8005fc2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f02:	4313      	orrs	r3, r2
 8005f04:	634b      	str	r3, [r1, #52]	; 0x34
 8005f06:	e05c      	b.n	8005fc2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f22:	0cdb      	lsrs	r3, r3, #19
 8005f24:	04db      	lsls	r3, r3, #19
 8005f26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f4a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	0148      	lsls	r0, r1, #5
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	4401      	add	r1, r0
 8005f9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4611      	mov	r1, r2
 8005fdc:	461a      	mov	r2, r3
 8005fde:	460b      	mov	r3, r1
 8005fe0:	71fb      	strb	r3, [r7, #7]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005fee:	88bb      	ldrh	r3, [r7, #4]
 8005ff0:	3303      	adds	r3, #3
 8005ff2:	089b      	lsrs	r3, r3, #2
 8005ff4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e00f      	b.n	800601c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	031a      	lsls	r2, r3, #12
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006008:	461a      	mov	r2, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	3304      	adds	r3, #4
 8006014:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	3301      	adds	r3, #1
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	429a      	cmp	r2, r3
 8006022:	d3eb      	bcc.n	8005ffc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3724      	adds	r7, #36	; 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006032:	b480      	push	{r7}
 8006034:	b089      	sub	sp, #36	; 0x24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	4613      	mov	r3, r2
 800603e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	3303      	adds	r3, #3
 800604c:	089b      	lsrs	r3, r3, #2
 800604e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e00b      	b.n	800606e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	601a      	str	r2, [r3, #0]
    pDest++;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3304      	adds	r3, #4
 8006066:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	3301      	adds	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	d3ef      	bcc.n	8006056 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006076:	69fb      	ldr	r3, [r7, #28]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3724      	adds	r7, #36	; 0x24
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d12c      	bne.n	80060fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	db12      	blt.n	80060d8 <USB_EPSetStall+0x54>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00f      	beq.n	80060d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e02b      	b.n	8006152 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db12      	blt.n	8006132 <USB_EPSetStall+0xae>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00f      	beq.n	8006132 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006130:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006150:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d128      	bne.n	80061ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006196:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800619a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	78db      	ldrb	r3, [r3, #3]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d003      	beq.n	80061ac <USB_EPClearStall+0x4c>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d138      	bne.n	800621e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e027      	b.n	800621e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	78db      	ldrb	r3, [r3, #3]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d003      	beq.n	80061fe <USB_EPClearStall+0x9e>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	78db      	ldrb	r3, [r3, #3]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d10f      	bne.n	800621e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800624e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a6:	f023 0302 	bic.w	r3, r3, #2
 80062aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062d4:	f023 0303 	bic.w	r3, r3, #3
 80062d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e8:	f043 0302 	orr.w	r3, r3, #2
 80062ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4013      	ands	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	0c1b      	lsrs	r3, r3, #16
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	b29b      	uxth	r3, r3
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b8:	68bb      	ldr	r3, [r7, #8]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	01db      	lsls	r3, r3, #7
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4013      	ands	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006414:	68bb      	ldr	r3, [r7, #8]
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0301 	and.w	r3, r3, #1
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006458:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800645c:	f023 0307 	bic.w	r3, r3, #7
 8006460:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006474:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	333c      	adds	r3, #60	; 0x3c
 8006496:	3304      	adds	r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a1c      	ldr	r2, [pc, #112]	; (8006510 <USB_EP0_OutStart+0x8c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d90a      	bls.n	80064ba <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b4:	d101      	bne.n	80064ba <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e024      	b.n	8006504 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e8:	f043 0318 	orr.w	r3, r3, #24
 80064ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006500:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	4f54300a 	.word	0x4f54300a

08006514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <USB_CoreReset+0x64>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e01b      	b.n	800656a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	daf2      	bge.n	8006520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <USB_CoreReset+0x64>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e006      	b.n	800656a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d0f0      	beq.n	800654a <USB_CoreReset+0x36>

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	00030d40 	.word	0x00030d40

0800657c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006588:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800658c:	f005 f89e 	bl	800b6cc <USBD_static_malloc>
 8006590:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80065a0:	2302      	movs	r3, #2
 80065a2:	e066      	b.n	8006672 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7c1b      	ldrb	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d119      	bne.n	80065e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b8:	2202      	movs	r2, #2
 80065ba:	2181      	movs	r1, #129	; 0x81
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f004 fe71 	bl	800b2a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065cc:	2202      	movs	r2, #2
 80065ce:	2101      	movs	r1, #1
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f004 fe67 	bl	800b2a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2210      	movs	r2, #16
 80065e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80065e6:	e016      	b.n	8006616 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065e8:	2340      	movs	r3, #64	; 0x40
 80065ea:	2202      	movs	r2, #2
 80065ec:	2181      	movs	r1, #129	; 0x81
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f004 fe58 	bl	800b2a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065fa:	2340      	movs	r3, #64	; 0x40
 80065fc:	2202      	movs	r2, #2
 80065fe:	2101      	movs	r1, #1
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f004 fe4f 	bl	800b2a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2210      	movs	r2, #16
 8006612:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006616:	2308      	movs	r3, #8
 8006618:	2203      	movs	r2, #3
 800661a:	2182      	movs	r1, #130	; 0x82
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f004 fe41 	bl	800b2a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7c1b      	ldrb	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006656:	2101      	movs	r1, #1
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f004 ff9d 	bl	800b598 <USBD_LL_PrepareReceive>
 800665e:	e007      	b.n	8006670 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006666:	2340      	movs	r3, #64	; 0x40
 8006668:	2101      	movs	r1, #1
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f004 ff94 	bl	800b598 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006686:	2181      	movs	r1, #129	; 0x81
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f004 fe49 	bl	800b320 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006694:	2101      	movs	r1, #1
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f004 fe42 	bl	800b320 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80066a4:	2182      	movs	r1, #130	; 0x82
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f004 fe3a 	bl	800b320 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066d6:	4618      	mov	r0, r3
 80066d8:	f005 f806 	bl	800b6e8 <USBD_static_free>
    pdev->pClassData = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006700:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	e0af      	b.n	8006878 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006720:	2b00      	cmp	r3, #0
 8006722:	d03f      	beq.n	80067a4 <USBD_CDC_Setup+0xb4>
 8006724:	2b20      	cmp	r3, #32
 8006726:	f040 809f 	bne.w	8006868 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88db      	ldrh	r3, [r3, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02e      	beq.n	8006790 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b25b      	sxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	da16      	bge.n	800676a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006748:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	88d2      	ldrh	r2, [r2, #6]
 800674e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	2b07      	cmp	r3, #7
 8006756:	bf28      	it	cs
 8006758:	2307      	movcs	r3, #7
 800675a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	89fa      	ldrh	r2, [r7, #14]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fb43 	bl	8007dee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006768:	e085      	b.n	8006876 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785a      	ldrb	r2, [r3, #1]
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	88db      	ldrh	r3, [r3, #6]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006780:	6939      	ldr	r1, [r7, #16]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	88db      	ldrh	r3, [r3, #6]
 8006786:	461a      	mov	r2, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fb5c 	bl	8007e46 <USBD_CtlPrepareRx>
      break;
 800678e:	e072      	b.n	8006876 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	7850      	ldrb	r0, [r2, #1]
 800679c:	2200      	movs	r2, #0
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	4798      	blx	r3
      break;
 80067a2:	e068      	b.n	8006876 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	2b0b      	cmp	r3, #11
 80067aa:	d852      	bhi.n	8006852 <USBD_CDC_Setup+0x162>
 80067ac:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBD_CDC_Setup+0xc4>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	08006861 	.word	0x08006861
 80067bc:	08006853 	.word	0x08006853
 80067c0:	08006853 	.word	0x08006853
 80067c4:	08006853 	.word	0x08006853
 80067c8:	08006853 	.word	0x08006853
 80067cc:	08006853 	.word	0x08006853
 80067d0:	08006853 	.word	0x08006853
 80067d4:	08006853 	.word	0x08006853
 80067d8:	08006853 	.word	0x08006853
 80067dc:	0800680f 	.word	0x0800680f
 80067e0:	08006839 	.word	0x08006839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d107      	bne.n	8006800 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067f0:	f107 030a 	add.w	r3, r7, #10
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 faf8 	bl	8007dee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067fe:	e032      	b.n	8006866 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fa82 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	75fb      	strb	r3, [r7, #23]
          break;
 800680c:	e02b      	b.n	8006866 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800681a:	f107 030d 	add.w	r3, r7, #13
 800681e:	2201      	movs	r2, #1
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fae3 	bl	8007dee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006828:	e01d      	b.n	8006866 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fa6d 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	75fb      	strb	r3, [r7, #23]
          break;
 8006836:	e016      	b.n	8006866 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d00f      	beq.n	8006864 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fa60 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 800684c:	2303      	movs	r3, #3
 800684e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006850:	e008      	b.n	8006864 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 fa59 	bl	8007d0c <USBD_CtlError>
          ret = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	75fb      	strb	r3, [r7, #23]
          break;
 800685e:	e002      	b.n	8006866 <USBD_CDC_Setup+0x176>
          break;
 8006860:	bf00      	nop
 8006862:	e008      	b.n	8006876 <USBD_CDC_Setup+0x186>
          break;
 8006864:	bf00      	nop
      }
      break;
 8006866:	e006      	b.n	8006876 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fa4e 	bl	8007d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	bf00      	nop
  }

  return (uint8_t)ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e04f      	b.n	8006942 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3318      	adds	r3, #24
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d029      	beq.n	8006914 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	3318      	adds	r3, #24
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	78f9      	ldrb	r1, [r7, #3]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	460b      	mov	r3, r1
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	1a5b      	subs	r3, r3, r1
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4403      	add	r3, r0
 80068e0:	3344      	adds	r3, #68	; 0x44
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80068e8:	fb03 f301 	mul.w	r3, r3, r1
 80068ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d110      	bne.n	8006914 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	3318      	adds	r3, #24
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006906:	78f9      	ldrb	r1, [r7, #3]
 8006908:	2300      	movs	r3, #0
 800690a:	2200      	movs	r2, #0
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f004 fe0b 	bl	800b528 <USBD_LL_Transmit>
 8006912:	e015      	b.n	8006940 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	e015      	b.n	8006998 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f004 fe49 	bl	800b608 <USBD_LL_GetRxDataSize>
 8006976:	4602      	mov	r2, r0
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006992:	4611      	mov	r1, r2
 8006994:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e01b      	b.n	80069f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <USBD_CDC_EP0_RxReady+0x50>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d010      	beq.n	80069f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80069dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069e4:	b292      	uxth	r2, r2
 80069e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	22ff      	movs	r2, #255	; 0xff
 80069ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2243      	movs	r2, #67	; 0x43
 8006a08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006a0a:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	2000009c 	.word	0x2000009c

08006a1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2243      	movs	r2, #67	; 0x43
 8006a28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006a2a:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20000058 	.word	0x20000058

08006a3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2243      	movs	r2, #67	; 0x43
 8006a48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	200000e0 	.word	0x200000e0

08006a5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	220a      	movs	r2, #10
 8006a68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a6a:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	20000014 	.word	0x20000014

08006a7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e004      	b.n	8006a9a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e008      	b.n	8006ad6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e004      	b.n	8006b08 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b24:	2301      	movs	r3, #1
 8006b26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e01a      	b.n	8006b6c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d114      	bne.n	8006b6a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b5e:	2181      	movs	r1, #129	; 0x81
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f004 fce1 	bl	800b528 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e016      	b.n	8006bc0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7c1b      	ldrb	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f004 fcf6 	bl	800b598 <USBD_LL_PrepareReceive>
 8006bac:	e007      	b.n	8006bbe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f004 fced 	bl	800b598 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e01f      	b.n	8006c20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f004 fac7 	bl	800b1a8 <USBD_LL_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e016      	b.n	8006c6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f004 fade 	bl	800b240 <USBD_LL_Start>
 8006c84:	4603      	mov	r3, r0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ffba 	bl	8007c98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d01a      	beq.n	8006d7e <USBD_LL_SetupStage+0x72>
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d822      	bhi.n	8006d92 <USBD_LL_SetupStage+0x86>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <USBD_LL_SetupStage+0x4a>
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d00a      	beq.n	8006d6a <USBD_LL_SetupStage+0x5e>
 8006d54:	e01d      	b.n	8006d92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa62 	bl	8007228 <USBD_StdDevReq>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e020      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fac6 	bl	8007304 <USBD_StdItfReq>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e016      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb05 	bl	8007396 <USBD_StdEPReq>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e00c      	b.n	8006dac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f004 faf3 	bl	800b38c <USBD_LL_StallEP>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d138      	bne.n	8006e3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d14a      	bne.n	8006e72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d913      	bls.n	8006e10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	bf28      	it	cs
 8006e02:	4613      	movcs	r3, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 f839 	bl	8007e80 <USBD_CtlContinueRx>
 8006e0e:	e030      	b.n	8006e72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d10b      	bne.n	8006e34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 f834 	bl	8007ea2 <USBD_CtlSendStatus>
 8006e3a:	e01a      	b.n	8006e72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d114      	bne.n	8006e72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00e      	beq.n	8006e72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	7afa      	ldrb	r2, [r7, #11]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	4798      	blx	r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	e000      	b.n	8006e74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	460b      	mov	r3, r1
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d16b      	bne.n	8006f68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3314      	adds	r3, #20
 8006e94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d156      	bne.n	8006f4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d914      	bls.n	8006ed6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 ffae 	bl	8007e24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f004 fb62 	bl	800b598 <USBD_LL_PrepareReceive>
 8006ed4:	e03b      	b.n	8006f4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d11c      	bne.n	8006f1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d316      	bcc.n	8006f1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20f      	bcs.n	8006f1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006efc:	2200      	movs	r2, #0
 8006efe:	2100      	movs	r1, #0
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 ff8f 	bl	8007e24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2200      	movs	r2, #0
 8006f12:	2100      	movs	r1, #0
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f004 fb3f 	bl	800b598 <USBD_LL_PrepareReceive>
 8006f1a:	e018      	b.n	8006f4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d10b      	bne.n	8006f40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f004 fa22 	bl	800b38c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 ffbd 	bl	8007ec8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d122      	bne.n	8006f9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fe98 	bl	8006c8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f66:	e01a      	b.n	8006f9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d114      	bne.n	8006f9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00e      	beq.n	8006f9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	7afa      	ldrb	r2, [r7, #11]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4798      	blx	r3
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	e000      	b.n	8006fa0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e02f      	b.n	800703c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6852      	ldr	r2, [r2, #4]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	4611      	mov	r1, r2
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	2200      	movs	r2, #0
 800700a:	2100      	movs	r1, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f004 f949 	bl	800b2a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2240      	movs	r2, #64	; 0x40
 800701e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f004 f93b 	bl	800b2a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2240      	movs	r2, #64	; 0x40
 8007038:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007072:	b2da      	uxtb	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2204      	movs	r2, #4
 800707e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d106      	bne.n	80070b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e012      	b.n	80070fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d10b      	bne.n	80070fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	e014      	b.n	8007148 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d10d      	bne.n	8007146 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	4611      	mov	r1, r2
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	e014      	b.n	8007194 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d10d      	bne.n	8007192 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	4611      	mov	r1, r2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6852      	ldr	r2, [r2, #4]
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	4611      	mov	r1, r2
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
  }

  return USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007208:	8a3b      	ldrh	r3, [r7, #16]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	b21a      	sxth	r2, r3
 800720e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007212:	4313      	orrs	r3, r2
 8007214:	b21b      	sxth	r3, r3
 8007216:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007218:	89fb      	ldrh	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d005      	beq.n	800724e <USBD_StdDevReq+0x26>
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d853      	bhi.n	80072ee <USBD_StdDevReq+0xc6>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdDevReq+0x3a>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d14f      	bne.n	80072ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e04a      	b.n	80072f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b09      	cmp	r3, #9
 8007268:	d83b      	bhi.n	80072e2 <USBD_StdDevReq+0xba>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_StdDevReq+0x48>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	080072c5 	.word	0x080072c5
 8007274:	080072d9 	.word	0x080072d9
 8007278:	080072e3 	.word	0x080072e3
 800727c:	080072cf 	.word	0x080072cf
 8007280:	080072e3 	.word	0x080072e3
 8007284:	080072a3 	.word	0x080072a3
 8007288:	08007299 	.word	0x08007299
 800728c:	080072e3 	.word	0x080072e3
 8007290:	080072bb 	.word	0x080072bb
 8007294:	080072ad 	.word	0x080072ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9de 	bl	800765c <USBD_GetDescriptor>
          break;
 80072a0:	e024      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb6d 	bl	8007984 <USBD_SetAddress>
          break;
 80072aa:	e01f      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fbac 	bl	8007a0c <USBD_SetConfig>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
          break;
 80072b8:	e018      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc4b 	bl	8007b58 <USBD_GetConfig>
          break;
 80072c2:	e013      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc7c 	bl	8007bc4 <USBD_GetStatus>
          break;
 80072cc:	e00e      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fcab 	bl	8007c2c <USBD_SetFeature>
          break;
 80072d6:	e009      	b.n	80072ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fcba 	bl	8007c54 <USBD_ClrFeature>
          break;
 80072e0:	e004      	b.n	80072ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fd11 	bl	8007d0c <USBD_CtlError>
          break;
 80072ea:	bf00      	nop
      }
      break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd0b 	bl	8007d0c <USBD_CtlError>
      break;
 80072f6:	bf00      	nop
  }

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d005      	beq.n	800732a <USBD_StdItfReq+0x26>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d82f      	bhi.n	8007382 <USBD_StdItfReq+0x7e>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <USBD_StdItfReq+0x26>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d12b      	bne.n	8007382 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	2b02      	cmp	r3, #2
 8007336:	d81d      	bhi.n	8007374 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	889b      	ldrh	r3, [r3, #4]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b01      	cmp	r3, #1
 8007340:	d813      	bhi.n	800736a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	88db      	ldrh	r3, [r3, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d110      	bne.n	800737e <USBD_StdItfReq+0x7a>
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd9d 	bl	8007ea2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007368:	e009      	b.n	800737e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fccd 	bl	8007d0c <USBD_CtlError>
          break;
 8007372:	e004      	b.n	800737e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fcc8 	bl	8007d0c <USBD_CtlError>
          break;
 800737c:	e000      	b.n	8007380 <USBD_StdItfReq+0x7c>
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcc1 	bl	8007d0c <USBD_CtlError>
      break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	889b      	ldrh	r3, [r3, #4]
 80073a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d007      	beq.n	80073c6 <USBD_StdEPReq+0x30>
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	f200 8145 	bhi.w	8007646 <USBD_StdEPReq+0x2b0>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <USBD_StdEPReq+0x44>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	f040 8140 	bne.w	8007646 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
      break;
 80073d8:	e13a      	b.n	8007650 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	785b      	ldrb	r3, [r3, #1]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d007      	beq.n	80073f2 <USBD_StdEPReq+0x5c>
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f300 8129 	bgt.w	800763a <USBD_StdEPReq+0x2a4>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d07f      	beq.n	80074ec <USBD_StdEPReq+0x156>
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d03c      	beq.n	800746a <USBD_StdEPReq+0xd4>
 80073f0:	e123      	b.n	800763a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d002      	beq.n	8007404 <USBD_StdEPReq+0x6e>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d016      	beq.n	8007430 <USBD_StdEPReq+0x9a>
 8007402:	e02c      	b.n	800745e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <USBD_StdEPReq+0x90>
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b80      	cmp	r3, #128	; 0x80
 800740e:	d00a      	beq.n	8007426 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f003 ffb9 	bl	800b38c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f003 ffb5 	bl	800b38c <USBD_LL_StallEP>
 8007422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007424:	e020      	b.n	8007468 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc6f 	bl	8007d0c <USBD_CtlError>
              break;
 800742e:	e01b      	b.n	8007468 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10e      	bne.n	8007456 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <USBD_StdEPReq+0xc0>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d008      	beq.n	8007456 <USBD_StdEPReq+0xc0>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	88db      	ldrh	r3, [r3, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f003 ff9b 	bl	800b38c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fd23 	bl	8007ea2 <USBD_CtlSendStatus>

              break;
 800745c:	e004      	b.n	8007468 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc53 	bl	8007d0c <USBD_CtlError>
              break;
 8007466:	bf00      	nop
          }
          break;
 8007468:	e0ec      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d002      	beq.n	800747c <USBD_StdEPReq+0xe6>
 8007476:	2b03      	cmp	r3, #3
 8007478:	d016      	beq.n	80074a8 <USBD_StdEPReq+0x112>
 800747a:	e030      	b.n	80074de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <USBD_StdEPReq+0x108>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b80      	cmp	r3, #128	; 0x80
 8007486:	d00a      	beq.n	800749e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f003 ff7d 	bl	800b38c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007492:	2180      	movs	r1, #128	; 0x80
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f003 ff79 	bl	800b38c <USBD_LL_StallEP>
 800749a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800749c:	e025      	b.n	80074ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc33 	bl	8007d0c <USBD_CtlError>
              break;
 80074a6:	e020      	b.n	80074ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11b      	bne.n	80074e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f003 ff9a 	bl	800b3f8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fcec 	bl	8007ea2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc13 	bl	8007d0c <USBD_CtlError>
              break;
 80074e6:	e000      	b.n	80074ea <USBD_StdEPReq+0x154>
              break;
 80074e8:	bf00      	nop
          }
          break;
 80074ea:	e0ab      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <USBD_StdEPReq+0x168>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d032      	beq.n	8007562 <USBD_StdEPReq+0x1cc>
 80074fc:	e097      	b.n	800762e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <USBD_StdEPReq+0x17e>
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d004      	beq.n	8007514 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fbfd 	bl	8007d0c <USBD_CtlError>
                break;
 8007512:	e091      	b.n	8007638 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da0b      	bge.n	8007534 <USBD_StdEPReq+0x19e>
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	3310      	adds	r3, #16
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	e00b      	b.n	800754c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	3304      	adds	r3, #4
 800754c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2202      	movs	r2, #2
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fc47 	bl	8007dee <USBD_CtlSendData>
              break;
 8007560:	e06a      	b.n	8007638 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da11      	bge.n	800758e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d117      	bne.n	80075b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fbc0 	bl	8007d0c <USBD_CtlError>
                  break;
 800758c:	e054      	b.n	8007638 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbad 	bl	8007d0c <USBD_CtlError>
                  break;
 80075b2:	e041      	b.n	8007638 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da0b      	bge.n	80075d4 <USBD_StdEPReq+0x23e>
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	3310      	adds	r3, #16
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	e00b      	b.n	80075ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <USBD_StdEPReq+0x264>
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d103      	bne.n	8007602 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e00e      	b.n	8007620 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f003 ff2c 	bl	800b464 <USBD_LL_IsStallEP>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e002      	b.n	8007620 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2202      	movs	r2, #2
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fbe1 	bl	8007dee <USBD_CtlSendData>
              break;
 800762c:	e004      	b.n	8007638 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb6b 	bl	8007d0c <USBD_CtlError>
              break;
 8007636:	bf00      	nop
          }
          break;
 8007638:	e004      	b.n	8007644 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb65 	bl	8007d0c <USBD_CtlError>
          break;
 8007642:	bf00      	nop
      }
      break;
 8007644:	e004      	b.n	8007650 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb5f 	bl	8007d0c <USBD_CtlError>
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	2b0e      	cmp	r3, #14
 800767e:	f200 8152 	bhi.w	8007926 <USBD_GetDescriptor+0x2ca>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_GetDescriptor+0x2c>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076f9 	.word	0x080076f9
 800768c:	08007711 	.word	0x08007711
 8007690:	08007751 	.word	0x08007751
 8007694:	08007927 	.word	0x08007927
 8007698:	08007927 	.word	0x08007927
 800769c:	080078c7 	.word	0x080078c7
 80076a0:	080078f3 	.word	0x080078f3
 80076a4:	08007927 	.word	0x08007927
 80076a8:	08007927 	.word	0x08007927
 80076ac:	08007927 	.word	0x08007927
 80076b0:	08007927 	.word	0x08007927
 80076b4:	08007927 	.word	0x08007927
 80076b8:	08007927 	.word	0x08007927
 80076bc:	08007927 	.word	0x08007927
 80076c0:	080076c5 	.word	0x080076c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076e6:	e126      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb0e 	bl	8007d0c <USBD_CtlError>
        err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
      break;
 80076f6:	e11e      	b.n	8007936 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
      break;
 800770e:	e112      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7c1b      	ldrb	r3, [r3, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10d      	bne.n	8007734 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f107 0208 	add.w	r2, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3301      	adds	r3, #1
 800772e:	2202      	movs	r2, #2
 8007730:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007732:	e100      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f107 0208 	add.w	r2, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
      break;
 800774e:	e0f2      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b05      	cmp	r3, #5
 8007758:	f200 80ac 	bhi.w	80078b4 <USBD_GetDescriptor+0x258>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x108>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	0800777d 	.word	0x0800777d
 8007768:	080077b1 	.word	0x080077b1
 800776c:	080077e5 	.word	0x080077e5
 8007770:	08007819 	.word	0x08007819
 8007774:	0800784d 	.word	0x0800784d
 8007778:	08007881 	.word	0x08007881
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 0108 	add.w	r1, r7, #8
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779e:	e091      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fab2 	bl	8007d0c <USBD_CtlError>
            err++;
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	3301      	adds	r3, #1
 80077ac:	72fb      	strb	r3, [r7, #11]
          break;
 80077ae:	e089      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077d2:	e077      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa98 	bl	8007d0c <USBD_CtlError>
            err++;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	3301      	adds	r3, #1
 80077e0:	72fb      	strb	r3, [r7, #11]
          break;
 80077e2:	e06f      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	7c12      	ldrb	r2, [r2, #16]
 80077fc:	f107 0108 	add.w	r1, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007806:	e05d      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa7e 	bl	8007d0c <USBD_CtlError>
            err++;
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	3301      	adds	r3, #1
 8007814:	72fb      	strb	r3, [r7, #11]
          break;
 8007816:	e055      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	7c12      	ldrb	r2, [r2, #16]
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	4610      	mov	r0, r2
 8007836:	4798      	blx	r3
 8007838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800783a:	e043      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa64 	bl	8007d0c <USBD_CtlError>
            err++;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	3301      	adds	r3, #1
 8007848:	72fb      	strb	r3, [r7, #11]
          break;
 800784a:	e03b      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	7c12      	ldrb	r2, [r2, #16]
 8007864:	f107 0108 	add.w	r1, r7, #8
 8007868:	4610      	mov	r0, r2
 800786a:	4798      	blx	r3
 800786c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800786e:	e029      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa4a 	bl	8007d0c <USBD_CtlError>
            err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
          break;
 800787e:	e021      	b.n	80078c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078a2:	e00f      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa30 	bl	8007d0c <USBD_CtlError>
            err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
          break;
 80078b2:	e007      	b.n	80078c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa28 	bl	8007d0c <USBD_CtlError>
          err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80078c2:	bf00      	nop
      }
      break;
 80078c4:	e037      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7c1b      	ldrb	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	f107 0208 	add.w	r2, r7, #8
 80078da:	4610      	mov	r0, r2
 80078dc:	4798      	blx	r3
 80078de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078e0:	e029      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa11 	bl	8007d0c <USBD_CtlError>
        err++;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3301      	adds	r3, #1
 80078ee:	72fb      	strb	r3, [r7, #11]
      break;
 80078f0:	e021      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10d      	bne.n	8007916 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	4610      	mov	r0, r2
 8007908:	4798      	blx	r3
 800790a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	2207      	movs	r2, #7
 8007912:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007914:	e00f      	b.n	8007936 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9f7 	bl	8007d0c <USBD_CtlError>
        err++;
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	3301      	adds	r3, #1
 8007922:	72fb      	strb	r3, [r7, #11]
      break;
 8007924:	e007      	b.n	8007936 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9ef 	bl	8007d0c <USBD_CtlError>
      err++;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	3301      	adds	r3, #1
 8007932:	72fb      	strb	r3, [r7, #11]
      break;
 8007934:	bf00      	nop
  }

  if (err != 0U)
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11e      	bne.n	800797a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	88db      	ldrh	r3, [r3, #6]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007944:	893b      	ldrh	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88da      	ldrh	r2, [r3, #6]
 800794e:	893b      	ldrh	r3, [r7, #8]
 8007950:	4293      	cmp	r3, r2
 8007952:	bf28      	it	cs
 8007954:	4613      	movcs	r3, r2
 8007956:	b29b      	uxth	r3, r3
 8007958:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800795a:	893b      	ldrh	r3, [r7, #8]
 800795c:	461a      	mov	r2, r3
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa44 	bl	8007dee <USBD_CtlSendData>
 8007966:	e009      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9ce 	bl	8007d0c <USBD_CtlError>
 8007970:	e004      	b.n	800797c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa95 	bl	8007ea2 <USBD_CtlSendStatus>
 8007978:	e000      	b.n	800797c <USBD_GetDescriptor+0x320>
    return;
 800797a:	bf00      	nop
  }
}
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop

08007984 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	889b      	ldrh	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d131      	bne.n	80079fa <USBD_SetAddress+0x76>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88db      	ldrh	r3, [r3, #6]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d12d      	bne.n	80079fa <USBD_SetAddress+0x76>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	2b7f      	cmp	r3, #127	; 0x7f
 80079a4:	d829      	bhi.n	80079fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d104      	bne.n	80079c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9a3 	bl	8007d0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	e01d      	b.n	8007a04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	7bfa      	ldrb	r2, [r7, #15]
 80079cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f003 fd71 	bl	800b4bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa61 	bl	8007ea2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	e009      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f8:	e004      	b.n	8007a04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f985 	bl	8007d0c <USBD_CtlError>
  }
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b4c      	ldr	r3, [pc, #304]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a24:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d905      	bls.n	8007a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f96c 	bl	8007d0c <USBD_CtlError>
    return USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e088      	b.n	8007b4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d002      	beq.n	8007a4a <USBD_SetConfig+0x3e>
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d025      	beq.n	8007a94 <USBD_SetConfig+0x88>
 8007a48:	e071      	b.n	8007b2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01c      	beq.n	8007a8c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a52:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a5c:	4b3d      	ldr	r3, [pc, #244]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f91e 	bl	8006ca4 <USBD_SetClassConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f949 	bl	8007d0c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a7a:	e065      	b.n	8007b48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa10 	bl	8007ea2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2203      	movs	r2, #3
 8007a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a8a:	e05d      	b.n	8007b48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fa08 	bl	8007ea2 <USBD_CtlSendStatus>
      break;
 8007a92:	e059      	b.n	8007b48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a94:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <USBD_SetConfig+0x148>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d112      	bne.n	8007ac2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <USBD_SetConfig+0x148>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aae:	4b29      	ldr	r3, [pc, #164]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff f911 	bl	8006cdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f9f1 	bl	8007ea2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ac0:	e042      	b.n	8007b48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d02a      	beq.n	8007b26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff f8ff 	bl	8006cdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ade:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <USBD_SetConfig+0x148>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <USBD_SetConfig+0x148>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff f8d8 	bl	8006ca4 <USBD_SetClassConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f903 	bl	8007d0c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff f8e4 	bl	8006cdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b1c:	e014      	b.n	8007b48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9bf 	bl	8007ea2 <USBD_CtlSendStatus>
      break;
 8007b24:	e010      	b.n	8007b48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9bb 	bl	8007ea2 <USBD_CtlSendStatus>
      break;
 8007b2c:	e00c      	b.n	8007b48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f8eb 	bl	8007d0c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <USBD_SetConfig+0x148>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f8cd 	bl	8006cdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b42:	2303      	movs	r3, #3
 8007b44:	73fb      	strb	r3, [r7, #15]
      break;
 8007b46:	bf00      	nop
  }

  return ret;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	200001e4 	.word	0x200001e4

08007b58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	88db      	ldrh	r3, [r3, #6]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d004      	beq.n	8007b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f8cd 	bl	8007d0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b72:	e023      	b.n	8007bbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	dc02      	bgt.n	8007b86 <USBD_GetConfig+0x2e>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc03      	bgt.n	8007b8c <USBD_GetConfig+0x34>
 8007b84:	e015      	b.n	8007bb2 <USBD_GetConfig+0x5a>
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d00b      	beq.n	8007ba2 <USBD_GetConfig+0x4a>
 8007b8a:	e012      	b.n	8007bb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f927 	bl	8007dee <USBD_CtlSendData>
        break;
 8007ba0:	e00c      	b.n	8007bbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f91f 	bl	8007dee <USBD_CtlSendData>
        break;
 8007bb0:	e004      	b.n	8007bbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8a9 	bl	8007d0c <USBD_CtlError>
        break;
 8007bba:	bf00      	nop
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d81e      	bhi.n	8007c1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	88db      	ldrh	r3, [r3, #6]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d004      	beq.n	8007bee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f890 	bl	8007d0c <USBD_CtlError>
        break;
 8007bec:	e01a      	b.n	8007c24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 0202 	orr.w	r2, r3, #2
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f8eb 	bl	8007dee <USBD_CtlSendData>
      break;
 8007c18:	e004      	b.n	8007c24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f875 	bl	8007d0c <USBD_CtlError>
      break;
 8007c22:	bf00      	nop
  }
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d106      	bne.n	8007c4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f92b 	bl	8007ea2 <USBD_CtlSendStatus>
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d80b      	bhi.n	8007c84 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d10c      	bne.n	8007c8e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f910 	bl	8007ea2 <USBD_CtlSendStatus>
      }
      break;
 8007c82:	e004      	b.n	8007c8e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f840 	bl	8007d0c <USBD_CtlError>
      break;
 8007c8c:	e000      	b.n	8007c90 <USBD_ClrFeature+0x3c>
      break;
 8007c8e:	bf00      	nop
  }
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fa91 	bl	80071ea <SWAPBYTE>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fa84 	bl	80071ea <SWAPBYTE>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fa77 	bl	80071ea <SWAPBYTE>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	80da      	strh	r2, [r3, #6]
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f003 fb37 	bl	800b38c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f003 fb33 	bl	800b38c <USBD_LL_StallEP>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d036      	beq.n	8007db2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007d48:	6938      	ldr	r0, [r7, #16]
 8007d4a:	f000 f836 	bl	8007dba <USBD_GetLen>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	3301      	adds	r3, #1
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4413      	add	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4413      	add	r3, r2
 8007d74:	2203      	movs	r2, #3
 8007d76:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d7e:	e013      	b.n	8007da8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	613b      	str	r3, [r7, #16]
    idx++;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	3301      	adds	r3, #1
 8007d96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
    idx++;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e7      	bne.n	8007d80 <USBD_GetString+0x52>
 8007db0:	e000      	b.n	8007db4 <USBD_GetString+0x86>
    return;
 8007db2:	bf00      	nop
  }
}
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dca:	e005      	b.n	8007dd8 <USBD_GetLen+0x1e>
  {
    len++;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <USBD_GetLen+0x12>
  }

  return len;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	2100      	movs	r1, #0
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f003 fb87 	bl	800b528 <USBD_LL_Transmit>

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f003 fb76 	bl	800b528 <USBD_LL_Transmit>

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2203      	movs	r2, #3
 8007e56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	2100      	movs	r1, #0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f003 fb91 	bl	800b598 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f003 fb80 	bl	800b598 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2204      	movs	r2, #4
 8007eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f003 fb35 	bl	800b528 <USBD_LL_Transmit>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2205      	movs	r2, #5
 8007ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f003 fb5a 	bl	800b598 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <__NVIC_SetPriority>:
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db0a      	blt.n	8007f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	490c      	ldr	r1, [pc, #48]	; (8007f3c <__NVIC_SetPriority+0x4c>)
 8007f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0e:	0112      	lsls	r2, r2, #4
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	440b      	add	r3, r1
 8007f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f18:	e00a      	b.n	8007f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4908      	ldr	r1, [pc, #32]	; (8007f40 <__NVIC_SetPriority+0x50>)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	3b04      	subs	r3, #4
 8007f28:	0112      	lsls	r2, r2, #4
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	761a      	strb	r2, [r3, #24]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	e000e100 	.word	0xe000e100
 8007f40:	e000ed00 	.word	0xe000ed00

08007f44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f06f 0004 	mvn.w	r0, #4
 8007f4e:	f7ff ffcf 	bl	8007ef0 <__NVIC_SetPriority>
#endif
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	603b      	str	r3, [r7, #0]
  return(result);
 8007f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f6a:	f06f 0305 	mvn.w	r3, #5
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e00c      	b.n	8007f8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <osKernelInitialize+0x44>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <osKernelInitialize+0x44>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	e002      	b.n	8007f8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f8c:	687b      	ldr	r3, [r7, #4]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	200001e8 	.word	0x200001e8

08007fa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa6:	f3ef 8305 	mrs	r3, IPSR
 8007faa:	603b      	str	r3, [r7, #0]
  return(result);
 8007fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fb2:	f06f 0305 	mvn.w	r3, #5
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e010      	b.n	8007fdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <osKernelStart+0x48>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d109      	bne.n	8007fd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fc2:	f7ff ffbf 	bl	8007f44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <osKernelStart+0x48>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fcc:	f001 f866 	bl	800909c <vTaskStartScheduler>
      stat = osOK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e002      	b.n	8007fdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fdc:	687b      	ldr	r3, [r7, #4]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200001e8 	.word	0x200001e8

08007fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	; 0x38
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffc:	f3ef 8305 	mrs	r3, IPSR
 8008000:	617b      	str	r3, [r7, #20]
  return(result);
 8008002:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008004:	2b00      	cmp	r3, #0
 8008006:	d17e      	bne.n	8008106 <osThreadNew+0x11a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d07b      	beq.n	8008106 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800800e:	2380      	movs	r3, #128	; 0x80
 8008010:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008012:	2318      	movs	r3, #24
 8008014:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d045      	beq.n	80080b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osThreadNew+0x48>
        name = attr->name;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <osThreadNew+0x6e>
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2b38      	cmp	r3, #56	; 0x38
 800804c:	d805      	bhi.n	800805a <osThreadNew+0x6e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <osThreadNew+0x72>
        return (NULL);
 800805a:	2300      	movs	r3, #0
 800805c:	e054      	b.n	8008108 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	089b      	lsrs	r3, r3, #2
 800806c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00e      	beq.n	8008094 <osThreadNew+0xa8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b5b      	cmp	r3, #91	; 0x5b
 800807c:	d90a      	bls.n	8008094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d006      	beq.n	8008094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <osThreadNew+0xa8>
        mem = 1;
 800808e:	2301      	movs	r3, #1
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	e010      	b.n	80080b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10c      	bne.n	80080b6 <osThreadNew+0xca>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <osThreadNew+0xca>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <osThreadNew+0xca>
          mem = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e001      	b.n	80080b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d110      	bne.n	80080de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080c4:	9202      	str	r2, [sp, #8]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fe0c 	bl	8008cf0 <xTaskCreateStatic>
 80080d8:	4603      	mov	r3, r0
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	e013      	b.n	8008106 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d110      	bne.n	8008106 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fe57 	bl	8008daa <xTaskCreate>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d001      	beq.n	8008106 <osThreadNew+0x11a>
            hTask = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008106:	693b      	ldr	r3, [r7, #16]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008118:	f3ef 8305 	mrs	r3, IPSR
 800811c:	60bb      	str	r3, [r7, #8]
  return(result);
 800811e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <osDelay+0x1c>
    stat = osErrorISR;
 8008124:	f06f 0305 	mvn.w	r3, #5
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e007      	b.n	800813c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 ff7c 	bl	8009034 <vTaskDelay>
    }
  }

  return (stat);
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a07      	ldr	r2, [pc, #28]	; (8008174 <vApplicationGetIdleTaskMemory+0x2c>)
 8008158:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	4a06      	ldr	r2, [pc, #24]	; (8008178 <vApplicationGetIdleTaskMemory+0x30>)
 800815e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2280      	movs	r2, #128	; 0x80
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	200001ec 	.word	0x200001ec
 8008178:	20000248 	.word	0x20000248

0800817c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a07      	ldr	r2, [pc, #28]	; (80081a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800818c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a06      	ldr	r2, [pc, #24]	; (80081ac <vApplicationGetTimerTaskMemory+0x30>)
 8008192:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800819a:	601a      	str	r2, [r3, #0]
}
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	20000448 	.word	0x20000448
 80081ac:	200004a4 	.word	0x200004a4

080081b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f103 0208 	add.w	r2, r3, #8
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f103 0208 	add.w	r2, r3, #8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f103 0208 	add.w	r2, r3, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d103      	bne.n	8008272 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	e00c      	b.n	800828c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3308      	adds	r3, #8
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e002      	b.n	8008280 <vListInsert+0x2e>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	429a      	cmp	r2, r3
 800828a:	d2f6      	bcs.n	800827a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	601a      	str	r2, [r3, #0]
}
 80082b8:	bf00      	nop
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6892      	ldr	r2, [r2, #8]
 80082da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6852      	ldr	r2, [r2, #4]
 80082e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d103      	bne.n	80082f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	1e5a      	subs	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008342:	f002 f84f 	bl	800a3e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	441a      	add	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	3b01      	subs	r3, #1
 8008374:	68f9      	ldr	r1, [r7, #12]
 8008376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	441a      	add	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	22ff      	movs	r2, #255	; 0xff
 800838e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d114      	bne.n	80083c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01a      	beq.n	80083d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3310      	adds	r3, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f903 	bl	80095b0 <xTaskRemoveFromEventList>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d012      	beq.n	80083d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <xQueueGenericReset+0xcc>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	e009      	b.n	80083d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fef2 	bl	80081b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff feed 	bl	80081b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083d6:	f002 f835 	bl	800a444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083da:	2301      	movs	r3, #1
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed04 	.word	0xe000ed04

080083e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <xQueueGenericCreateStatic+0x52>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <xQueueGenericCreateStatic+0x56>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xQueueGenericCreateStatic+0x58>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	623b      	str	r3, [r7, #32]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <xQueueGenericCreateStatic+0x7e>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <xQueueGenericCreateStatic+0x82>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <xQueueGenericCreateStatic+0x84>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61fb      	str	r3, [r7, #28]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008486:	2350      	movs	r3, #80	; 0x50
 8008488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b50      	cmp	r3, #80	; 0x50
 800848e:	d00a      	beq.n	80084a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61bb      	str	r3, [r7, #24]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f805 	bl	80084d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3730      	adds	r7, #48	; 0x30
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e002      	b.n	80084fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008506:	2101      	movs	r1, #1
 8008508:	69b8      	ldr	r0, [r7, #24]
 800850a:	f7ff ff05 	bl	8008318 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08e      	sub	sp, #56	; 0x38
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800852e:	2300      	movs	r3, #0
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xQueueGenericSend+0x32>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <xQueueGenericSend+0x40>
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <xQueueGenericSend+0x44>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <xQueueGenericSend+0x46>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <xQueueGenericSend+0x60>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d103      	bne.n	800858e <xQueueGenericSend+0x6e>
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <xQueueGenericSend+0x72>
 800858e:	2301      	movs	r3, #1
 8008590:	e000      	b.n	8008594 <xQueueGenericSend+0x74>
 8008592:	2300      	movs	r3, #0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xQueueGenericSend+0x8e>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	623b      	str	r3, [r7, #32]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085ae:	f001 f9bd 	bl	800992c <xTaskGetSchedulerState>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <xQueueGenericSend+0x9e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <xQueueGenericSend+0xa2>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <xQueueGenericSend+0xa4>
 80085c2:	2300      	movs	r3, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <xQueueGenericSend+0xbe>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	61fb      	str	r3, [r7, #28]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085de:	f001 ff01 	bl	800a3e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d302      	bcc.n	80085f4 <xQueueGenericSend+0xd4>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d129      	bne.n	8008648 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085fa:	f000 fa0b 	bl	8008a14 <prvCopyDataToQueue>
 80085fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	3324      	adds	r3, #36	; 0x24
 800860c:	4618      	mov	r0, r3
 800860e:	f000 ffcf 	bl	80095b0 <xTaskRemoveFromEventList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d013      	beq.n	8008640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b3f      	ldr	r3, [pc, #252]	; (8008718 <xQueueGenericSend+0x1f8>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	e00a      	b.n	8008640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b39      	ldr	r3, [pc, #228]	; (8008718 <xQueueGenericSend+0x1f8>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008640:	f001 ff00 	bl	800a444 <vPortExitCritical>
				return pdPASS;
 8008644:	2301      	movs	r3, #1
 8008646:	e063      	b.n	8008710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800864e:	f001 fef9 	bl	800a444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008652:	2300      	movs	r3, #0
 8008654:	e05c      	b.n	8008710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4618      	mov	r0, r3
 8008662:	f001 f809 	bl	8009678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800866a:	f001 feeb 	bl	800a444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800866e:	f000 fd7b 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008672:	f001 feb7 	bl	800a3e4 <vPortEnterCritical>
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800867c:	b25b      	sxtb	r3, r3
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d103      	bne.n	800868c <xQueueGenericSend+0x16c>
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008692:	b25b      	sxtb	r3, r3
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d103      	bne.n	80086a2 <xQueueGenericSend+0x182>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a2:	f001 fecf 	bl	800a444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086a6:	1d3a      	adds	r2, r7, #4
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fff8 	bl	80096a4 <xTaskCheckForTimeOut>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d124      	bne.n	8008704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086bc:	f000 faa2 	bl	8008c04 <prvIsQueueFull>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3310      	adds	r3, #16
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 ff1e 	bl	8009510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d6:	f000 fa2d 	bl	8008b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086da:	f000 fd53 	bl	8009184 <xTaskResumeAll>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f47f af7c 	bne.w	80085de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <xQueueGenericSend+0x1f8>)
 80086e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	e772      	b.n	80085de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086fa:	f000 fa1b 	bl	8008b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086fe:	f000 fd41 	bl	8009184 <xTaskResumeAll>
 8008702:	e76c      	b.n	80085de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008706:	f000 fa15 	bl	8008b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800870a:	f000 fd3b 	bl	8009184 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800870e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008710:	4618      	mov	r0, r3
 8008712:	3738      	adds	r7, #56	; 0x38
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b090      	sub	sp, #64	; 0x40
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10a      	bne.n	800874a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <xQueueGenericSendFromISR+0x3c>
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <xQueueGenericSendFromISR+0x40>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <xQueueGenericSendFromISR+0x42>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d103      	bne.n	8008786 <xQueueGenericSendFromISR+0x6a>
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <xQueueGenericSendFromISR+0x6e>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericSendFromISR+0x70>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	623b      	str	r3, [r7, #32]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087a6:	f001 feff 	bl	800a5a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087aa:	f3ef 8211 	mrs	r2, BASEPRI
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	61fa      	str	r2, [r7, #28]
 80087c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d302      	bcc.n	80087d8 <xQueueGenericSendFromISR+0xbc>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d12f      	bne.n	8008838 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ee:	f000 f911 	bl	8008a14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d112      	bne.n	8008822 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b00      	cmp	r3, #0
 8008802:	d016      	beq.n	8008832 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	3324      	adds	r3, #36	; 0x24
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fed1 	bl	80095b0 <xTaskRemoveFromEventList>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00e      	beq.n	8008832 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00b      	beq.n	8008832 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e007      	b.n	8008832 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008826:	3301      	adds	r3, #1
 8008828:	b2db      	uxtb	r3, r3
 800882a:	b25a      	sxtb	r2, r3
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008832:	2301      	movs	r3, #1
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008836:	e001      	b.n	800883c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800884a:	4618      	mov	r0, r3
 800884c:	3740      	adds	r7, #64	; 0x40
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	; 0x30
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008860:	2300      	movs	r3, #0
 8008862:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <xQueueReceive+0x30>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	623b      	str	r3, [r7, #32]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d103      	bne.n	8008892 <xQueueReceive+0x3e>
 800888a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <xQueueReceive+0x42>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueReceive+0x44>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueReceive+0x5e>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61fb      	str	r3, [r7, #28]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088b2:	f001 f83b 	bl	800992c <xTaskGetSchedulerState>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <xQueueReceive+0x6e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <xQueueReceive+0x72>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <xQueueReceive+0x74>
 80088c6:	2300      	movs	r3, #0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <xQueueReceive+0x8e>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	61bb      	str	r3, [r7, #24]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088e2:	f001 fd7f 	bl	800a3e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01f      	beq.n	8008932 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088f2:	68b9      	ldr	r1, [r7, #8]
 80088f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f6:	f000 f8f7 	bl	8008ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	1e5a      	subs	r2, r3, #1
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00f      	beq.n	800892a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	3310      	adds	r3, #16
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fe4e 	bl	80095b0 <xTaskRemoveFromEventList>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800891a:	4b3d      	ldr	r3, [pc, #244]	; (8008a10 <xQueueReceive+0x1bc>)
 800891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800892a:	f001 fd8b 	bl	800a444 <vPortExitCritical>
				return pdPASS;
 800892e:	2301      	movs	r3, #1
 8008930:	e069      	b.n	8008a06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008938:	f001 fd84 	bl	800a444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800893c:	2300      	movs	r3, #0
 800893e:	e062      	b.n	8008a06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fe94 	bl	8009678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008950:	2301      	movs	r3, #1
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008954:	f001 fd76 	bl	800a444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008958:	f000 fc06 	bl	8009168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800895c:	f001 fd42 	bl	800a3e4 <vPortEnterCritical>
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008966:	b25b      	sxtb	r3, r3
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d103      	bne.n	8008976 <xQueueReceive+0x122>
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d103      	bne.n	800898c <xQueueReceive+0x138>
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800898c:	f001 fd5a 	bl	800a444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008990:	1d3a      	adds	r2, r7, #4
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	4611      	mov	r1, r2
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fe83 	bl	80096a4 <xTaskCheckForTimeOut>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d123      	bne.n	80089ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a6:	f000 f917 	bl	8008bd8 <prvIsQueueEmpty>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d017      	beq.n	80089e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	3324      	adds	r3, #36	; 0x24
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fda9 	bl	8009510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089c0:	f000 f8b8 	bl	8008b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089c4:	f000 fbde 	bl	8009184 <xTaskResumeAll>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d189      	bne.n	80088e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <xQueueReceive+0x1bc>)
 80089d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	e780      	b.n	80088e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089e2:	f000 f8a7 	bl	8008b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089e6:	f000 fbcd 	bl	8009184 <xTaskResumeAll>
 80089ea:	e77a      	b.n	80088e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ee:	f000 f8a1 	bl	8008b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089f2:	f000 fbc7 	bl	8009184 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f8:	f000 f8ee 	bl	8008bd8 <prvIsQueueEmpty>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f43f af6f 	beq.w	80088e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3730      	adds	r7, #48	; 0x30
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10d      	bne.n	8008a4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d14d      	bne.n	8008ad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 ff92 	bl	8009968 <xTaskPriorityDisinherit>
 8008a44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	609a      	str	r2, [r3, #8]
 8008a4c:	e043      	b.n	8008ad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d119      	bne.n	8008a88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6858      	ldr	r0, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	f002 fe76 	bl	800b750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	441a      	add	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d32b      	bcc.n	8008ad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	e026      	b.n	8008ad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68d8      	ldr	r0, [r3, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	461a      	mov	r2, r3
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	f002 fe5c 	bl	800b750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	425b      	negs	r3, r3
 8008aa2:	441a      	add	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d207      	bcs.n	8008ac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	425b      	negs	r3, r3
 8008abe:	441a      	add	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d105      	bne.n	8008ad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ade:	697b      	ldr	r3, [r7, #20]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d018      	beq.n	8008b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	441a      	add	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d303      	bcc.n	8008b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68d9      	ldr	r1, [r3, #12]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	461a      	mov	r2, r3
 8008b26:	6838      	ldr	r0, [r7, #0]
 8008b28:	f002 fe12 	bl	800b750 <memcpy>
	}
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b3c:	f001 fc52 	bl	800a3e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b48:	e011      	b.n	8008b6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d012      	beq.n	8008b78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3324      	adds	r3, #36	; 0x24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fd2a 	bl	80095b0 <xTaskRemoveFromEventList>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b62:	f000 fe01 	bl	8009768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dce9      	bgt.n	8008b4a <prvUnlockQueue+0x16>
 8008b76:	e000      	b.n	8008b7a <prvUnlockQueue+0x46>
					break;
 8008b78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	22ff      	movs	r2, #255	; 0xff
 8008b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b82:	f001 fc5f 	bl	800a444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b86:	f001 fc2d 	bl	800a3e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b92:	e011      	b.n	8008bb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d012      	beq.n	8008bc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3310      	adds	r3, #16
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fd05 	bl	80095b0 <xTaskRemoveFromEventList>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bac:	f000 fddc 	bl	8009768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dce9      	bgt.n	8008b94 <prvUnlockQueue+0x60>
 8008bc0:	e000      	b.n	8008bc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	22ff      	movs	r2, #255	; 0xff
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bcc:	f001 fc3a 	bl	800a444 <vPortExitCritical>
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008be0:	f001 fc00 	bl	800a3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e001      	b.n	8008bf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf6:	f001 fc25 	bl	800a444 <vPortExitCritical>

	return xReturn;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c0c:	f001 fbea 	bl	800a3e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d102      	bne.n	8008c22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	e001      	b.n	8008c26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c26:	f001 fc0d 	bl	800a444 <vPortExitCritical>

	return xReturn;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	e014      	b.n	8008c6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c44:	4a0f      	ldr	r2, [pc, #60]	; (8008c84 <vQueueAddToRegistry+0x50>)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c50:	490c      	ldr	r1, [pc, #48]	; (8008c84 <vQueueAddToRegistry+0x50>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c5a:	4a0a      	ldr	r2, [pc, #40]	; (8008c84 <vQueueAddToRegistry+0x50>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4413      	add	r3, r2
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c66:	e006      	b.n	8008c76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b07      	cmp	r3, #7
 8008c72:	d9e7      	bls.n	8008c44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20001f28 	.word	0x20001f28

08008c88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c98:	f001 fba4 	bl	800a3e4 <vPortEnterCritical>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca8:	d103      	bne.n	8008cb2 <vQueueWaitForMessageRestricted+0x2a>
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d103      	bne.n	8008cc8 <vQueueWaitForMessageRestricted+0x40>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc8:	f001 fbbc 	bl	800a444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	3324      	adds	r3, #36	; 0x24
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fc3b 	bl	8009558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f7ff ff26 	bl	8008b34 <prvUnlockQueue>
	}
 8008ce8:	bf00      	nop
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	; 0x38
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	623b      	str	r3, [r7, #32]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	61fb      	str	r3, [r7, #28]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d36:	235c      	movs	r3, #92	; 0x5c
 8008d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b5c      	cmp	r3, #92	; 0x5c
 8008d3e:	d00a      	beq.n	8008d56 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	61bb      	str	r3, [r7, #24]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01e      	beq.n	8008d9c <xTaskCreateStatic+0xac>
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d76:	2300      	movs	r3, #0
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	f107 0314 	add.w	r3, r7, #20
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f850 	bl	8008e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d96:	f000 f8dd 	bl	8008f54 <prvAddNewTaskToReadyList>
 8008d9a:	e001      	b.n	8008da0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008da0:	697b      	ldr	r3, [r7, #20]
	}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3728      	adds	r7, #40	; 0x28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b08c      	sub	sp, #48	; 0x30
 8008dae:	af04      	add	r7, sp, #16
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dba:	88fb      	ldrh	r3, [r7, #6]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f001 fc32 	bl	800a628 <pvPortMalloc>
 8008dc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00e      	beq.n	8008dea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dcc:	205c      	movs	r0, #92	; 0x5c
 8008dce:	f001 fc2b 	bl	800a628 <pvPortMalloc>
 8008dd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	631a      	str	r2, [r3, #48]	; 0x30
 8008de0:	e005      	b.n	8008dee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f001 fcec 	bl	800a7c0 <vPortFree>
 8008de8:	e001      	b.n	8008dee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d017      	beq.n	8008e24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	9302      	str	r3, [sp, #8]
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f80e 	bl	8008e34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e18:	69f8      	ldr	r0, [r7, #28]
 8008e1a:	f000 f89b 	bl	8008f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	e002      	b.n	8008e2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e24:	f04f 33ff 	mov.w	r3, #4294967295
 8008e28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	21a5      	movs	r1, #165	; 0xa5
 8008e4e:	f002 fc8d 	bl	800b76c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	617b      	str	r3, [r7, #20]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01f      	beq.n	8008ed2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e92:	2300      	movs	r3, #0
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	e012      	b.n	8008ebe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	7819      	ldrb	r1, [r3, #0]
 8008ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3334      	adds	r3, #52	; 0x34
 8008ea8:	460a      	mov	r2, r1
 8008eaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d006      	beq.n	8008ec6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2b0f      	cmp	r3, #15
 8008ec2:	d9e9      	bls.n	8008e98 <prvInitialiseNewTask+0x64>
 8008ec4:	e000      	b.n	8008ec8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008ec6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ed0:	e003      	b.n	8008eda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	2b37      	cmp	r3, #55	; 0x37
 8008ede:	d901      	bls.n	8008ee4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ee0:	2337      	movs	r3, #55	; 0x37
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff f978 	bl	80081f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	3318      	adds	r3, #24
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff f973 	bl	80081f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	68f9      	ldr	r1, [r7, #12]
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f001 f928 	bl	800a188 <pxPortInitialiseStack>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f4a:	bf00      	nop
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f5c:	f001 fa42 	bl	800a3e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f60:	4b2d      	ldr	r3, [pc, #180]	; (8009018 <prvAddNewTaskToReadyList+0xc4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3301      	adds	r3, #1
 8008f66:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <prvAddNewTaskToReadyList+0xc4>)
 8008f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f6a:	4b2c      	ldr	r3, [pc, #176]	; (800901c <prvAddNewTaskToReadyList+0xc8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d109      	bne.n	8008f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f72:	4a2a      	ldr	r2, [pc, #168]	; (800901c <prvAddNewTaskToReadyList+0xc8>)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f78:	4b27      	ldr	r3, [pc, #156]	; (8009018 <prvAddNewTaskToReadyList+0xc4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d110      	bne.n	8008fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f80:	f000 fc16 	bl	80097b0 <prvInitialiseTaskLists>
 8008f84:	e00d      	b.n	8008fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f86:	4b26      	ldr	r3, [pc, #152]	; (8009020 <prvAddNewTaskToReadyList+0xcc>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d109      	bne.n	8008fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f8e:	4b23      	ldr	r3, [pc, #140]	; (800901c <prvAddNewTaskToReadyList+0xc8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d802      	bhi.n	8008fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f9c:	4a1f      	ldr	r2, [pc, #124]	; (800901c <prvAddNewTaskToReadyList+0xc8>)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fa2:	4b20      	ldr	r3, [pc, #128]	; (8009024 <prvAddNewTaskToReadyList+0xd0>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <prvAddNewTaskToReadyList+0xd0>)
 8008faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <prvAddNewTaskToReadyList+0xd0>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <prvAddNewTaskToReadyList+0xd4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d903      	bls.n	8008fc8 <prvAddNewTaskToReadyList+0x74>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	4a18      	ldr	r2, [pc, #96]	; (8009028 <prvAddNewTaskToReadyList+0xd4>)
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4a15      	ldr	r2, [pc, #84]	; (800902c <prvAddNewTaskToReadyList+0xd8>)
 8008fd6:	441a      	add	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4619      	mov	r1, r3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	f7ff f913 	bl	800820a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fe4:	f001 fa2e 	bl	800a444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fe8:	4b0d      	ldr	r3, [pc, #52]	; (8009020 <prvAddNewTaskToReadyList+0xcc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00e      	beq.n	800900e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <prvAddNewTaskToReadyList+0xc8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d207      	bcs.n	800900e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <prvAddNewTaskToReadyList+0xdc>)
 8009000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000d78 	.word	0x20000d78
 800901c:	200008a4 	.word	0x200008a4
 8009020:	20000d84 	.word	0x20000d84
 8009024:	20000d94 	.word	0x20000d94
 8009028:	20000d80 	.word	0x20000d80
 800902c:	200008a8 	.word	0x200008a8
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d017      	beq.n	8009076 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <vTaskDelay+0x60>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <vTaskDelay+0x30>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60bb      	str	r3, [r7, #8]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009064:	f000 f880 	bl	8009168 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009068:	2100      	movs	r1, #0
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fcea 	bl	8009a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009070:	f000 f888 	bl	8009184 <xTaskResumeAll>
 8009074:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d107      	bne.n	800908c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <vTaskDelay+0x64>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000da0 	.word	0x20000da0
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	; 0x28
 80090a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090aa:	463a      	mov	r2, r7
 80090ac:	1d39      	adds	r1, r7, #4
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff f848 	bl	8008148 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	9202      	str	r2, [sp, #8]
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	2300      	movs	r3, #0
 80090c8:	460a      	mov	r2, r1
 80090ca:	4921      	ldr	r1, [pc, #132]	; (8009150 <vTaskStartScheduler+0xb4>)
 80090cc:	4821      	ldr	r0, [pc, #132]	; (8009154 <vTaskStartScheduler+0xb8>)
 80090ce:	f7ff fe0f 	bl	8008cf0 <xTaskCreateStatic>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4a20      	ldr	r2, [pc, #128]	; (8009158 <vTaskStartScheduler+0xbc>)
 80090d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090d8:	4b1f      	ldr	r3, [pc, #124]	; (8009158 <vTaskStartScheduler+0xbc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e001      	b.n	80090ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d102      	bne.n	80090f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090f0:	f000 fcfc 	bl	8009aec <xTimerCreateTimerTask>
 80090f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d116      	bne.n	800912a <vTaskStartScheduler+0x8e>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	613b      	str	r3, [r7, #16]
}
 800910e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009110:	4b12      	ldr	r3, [pc, #72]	; (800915c <vTaskStartScheduler+0xc0>)
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009118:	4b11      	ldr	r3, [pc, #68]	; (8009160 <vTaskStartScheduler+0xc4>)
 800911a:	2201      	movs	r2, #1
 800911c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800911e:	4b11      	ldr	r3, [pc, #68]	; (8009164 <vTaskStartScheduler+0xc8>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009124:	f001 f8bc 	bl	800a2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009128:	e00e      	b.n	8009148 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d10a      	bne.n	8009148 <vTaskStartScheduler+0xac>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <vTaskStartScheduler+0xaa>
}
 8009148:	bf00      	nop
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	0800b7b8 	.word	0x0800b7b8
 8009154:	08009781 	.word	0x08009781
 8009158:	20000d9c 	.word	0x20000d9c
 800915c:	20000d98 	.word	0x20000d98
 8009160:	20000d84 	.word	0x20000d84
 8009164:	20000d7c 	.word	0x20000d7c

08009168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <vTaskSuspendAll+0x18>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	4a03      	ldr	r2, [pc, #12]	; (8009180 <vTaskSuspendAll+0x18>)
 8009174:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009176:	bf00      	nop
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20000da0 	.word	0x20000da0

08009184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800918e:	2300      	movs	r3, #0
 8009190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009192:	4b42      	ldr	r3, [pc, #264]	; (800929c <xTaskResumeAll+0x118>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	603b      	str	r3, [r7, #0]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091b0:	f001 f918 	bl	800a3e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091b4:	4b39      	ldr	r3, [pc, #228]	; (800929c <xTaskResumeAll+0x118>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	4a38      	ldr	r2, [pc, #224]	; (800929c <xTaskResumeAll+0x118>)
 80091bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091be:	4b37      	ldr	r3, [pc, #220]	; (800929c <xTaskResumeAll+0x118>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d162      	bne.n	800928c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091c6:	4b36      	ldr	r3, [pc, #216]	; (80092a0 <xTaskResumeAll+0x11c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d05e      	beq.n	800928c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ce:	e02f      	b.n	8009230 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b34      	ldr	r3, [pc, #208]	; (80092a4 <xTaskResumeAll+0x120>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3318      	adds	r3, #24
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff f871 	bl	80082c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff f86c 	bl	80082c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4b2d      	ldr	r3, [pc, #180]	; (80092a8 <xTaskResumeAll+0x124>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <xTaskResumeAll+0x7c>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a2a      	ldr	r2, [pc, #168]	; (80092a8 <xTaskResumeAll+0x124>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a27      	ldr	r2, [pc, #156]	; (80092ac <xTaskResumeAll+0x128>)
 800920e:	441a      	add	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fff7 	bl	800820a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <xTaskResumeAll+0x12c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	429a      	cmp	r2, r3
 8009228:	d302      	bcc.n	8009230 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800922a:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <xTaskResumeAll+0x130>)
 800922c:	2201      	movs	r2, #1
 800922e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009230:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <xTaskResumeAll+0x120>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1cb      	bne.n	80091d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800923e:	f000 fb55 	bl	80098ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009242:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <xTaskResumeAll+0x134>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800924e:	f000 f847 	bl	80092e0 <xTaskIncrementTick>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009258:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <xTaskResumeAll+0x130>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f1      	bne.n	800924e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800926a:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <xTaskResumeAll+0x134>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009270:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <xTaskResumeAll+0x130>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <xTaskResumeAll+0x138>)
 800927e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800928c:	f001 f8da 	bl	800a444 <vPortExitCritical>

	return xAlreadyYielded;
 8009290:	68bb      	ldr	r3, [r7, #8]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000da0 	.word	0x20000da0
 80092a0:	20000d78 	.word	0x20000d78
 80092a4:	20000d38 	.word	0x20000d38
 80092a8:	20000d80 	.word	0x20000d80
 80092ac:	200008a8 	.word	0x200008a8
 80092b0:	200008a4 	.word	0x200008a4
 80092b4:	20000d8c 	.word	0x20000d8c
 80092b8:	20000d88 	.word	0x20000d88
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <xTaskGetTickCount+0x1c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092cc:	687b      	ldr	r3, [r7, #4]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	20000d7c 	.word	0x20000d7c

080092e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b4f      	ldr	r3, [pc, #316]	; (8009428 <xTaskIncrementTick+0x148>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 808f 	bne.w	8009412 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092f4:	4b4d      	ldr	r3, [pc, #308]	; (800942c <xTaskIncrementTick+0x14c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092fc:	4a4b      	ldr	r2, [pc, #300]	; (800942c <xTaskIncrementTick+0x14c>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d120      	bne.n	800934a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009308:	4b49      	ldr	r3, [pc, #292]	; (8009430 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <xTaskIncrementTick+0x48>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <xTaskIncrementTick+0x46>
 8009328:	4b41      	ldr	r3, [pc, #260]	; (8009430 <xTaskIncrementTick+0x150>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	4b41      	ldr	r3, [pc, #260]	; (8009434 <xTaskIncrementTick+0x154>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a3f      	ldr	r2, [pc, #252]	; (8009430 <xTaskIncrementTick+0x150>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4a3f      	ldr	r2, [pc, #252]	; (8009434 <xTaskIncrementTick+0x154>)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	4b3e      	ldr	r3, [pc, #248]	; (8009438 <xTaskIncrementTick+0x158>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	4a3d      	ldr	r2, [pc, #244]	; (8009438 <xTaskIncrementTick+0x158>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	f000 fad1 	bl	80098ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800934a:	4b3c      	ldr	r3, [pc, #240]	; (800943c <xTaskIncrementTick+0x15c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	429a      	cmp	r2, r3
 8009352:	d349      	bcc.n	80093e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009354:	4b36      	ldr	r3, [pc, #216]	; (8009430 <xTaskIncrementTick+0x150>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800935e:	4b37      	ldr	r3, [pc, #220]	; (800943c <xTaskIncrementTick+0x15c>)
 8009360:	f04f 32ff 	mov.w	r2, #4294967295
 8009364:	601a      	str	r2, [r3, #0]
					break;
 8009366:	e03f      	b.n	80093e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	4b31      	ldr	r3, [pc, #196]	; (8009430 <xTaskIncrementTick+0x150>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d203      	bcs.n	8009388 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009380:	4a2e      	ldr	r2, [pc, #184]	; (800943c <xTaskIncrementTick+0x15c>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009386:	e02f      	b.n	80093e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3304      	adds	r3, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f7fe ff99 	bl	80082c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	3318      	adds	r3, #24
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe ff90 	bl	80082c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <xTaskIncrementTick+0x160>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d903      	bls.n	80093b8 <xTaskIncrementTick+0xd8>
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	4a22      	ldr	r2, [pc, #136]	; (8009440 <xTaskIncrementTick+0x160>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4a1f      	ldr	r2, [pc, #124]	; (8009444 <xTaskIncrementTick+0x164>)
 80093c6:	441a      	add	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fe ff1b 	bl	800820a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <xTaskIncrementTick+0x168>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3b8      	bcc.n	8009354 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80093e2:	2301      	movs	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e6:	e7b5      	b.n	8009354 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <xTaskIncrementTick+0x168>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ee:	4915      	ldr	r1, [pc, #84]	; (8009444 <xTaskIncrementTick+0x164>)
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d901      	bls.n	8009404 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009404:	4b11      	ldr	r3, [pc, #68]	; (800944c <xTaskIncrementTick+0x16c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	e004      	b.n	800941c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <xTaskIncrementTick+0x170>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	4a0d      	ldr	r2, [pc, #52]	; (8009450 <xTaskIncrementTick+0x170>)
 800941a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800941c:	697b      	ldr	r3, [r7, #20]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000da0 	.word	0x20000da0
 800942c:	20000d7c 	.word	0x20000d7c
 8009430:	20000d30 	.word	0x20000d30
 8009434:	20000d34 	.word	0x20000d34
 8009438:	20000d90 	.word	0x20000d90
 800943c:	20000d98 	.word	0x20000d98
 8009440:	20000d80 	.word	0x20000d80
 8009444:	200008a8 	.word	0x200008a8
 8009448:	200008a4 	.word	0x200008a4
 800944c:	20000d8c 	.word	0x20000d8c
 8009450:	20000d88 	.word	0x20000d88

08009454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800945a:	4b28      	ldr	r3, [pc, #160]	; (80094fc <vTaskSwitchContext+0xa8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009462:	4b27      	ldr	r3, [pc, #156]	; (8009500 <vTaskSwitchContext+0xac>)
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009468:	e041      	b.n	80094ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800946a:	4b25      	ldr	r3, [pc, #148]	; (8009500 <vTaskSwitchContext+0xac>)
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009470:	4b24      	ldr	r3, [pc, #144]	; (8009504 <vTaskSwitchContext+0xb0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e010      	b.n	800949a <vTaskSwitchContext+0x46>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <vTaskSwitchContext+0x40>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <vTaskSwitchContext+0x3e>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3b01      	subs	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	491b      	ldr	r1, [pc, #108]	; (8009508 <vTaskSwitchContext+0xb4>)
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d0e4      	beq.n	8009478 <vTaskSwitchContext+0x24>
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a13      	ldr	r2, [pc, #76]	; (8009508 <vTaskSwitchContext+0xb4>)
 80094ba:	4413      	add	r3, r2
 80094bc:	60bb      	str	r3, [r7, #8]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	605a      	str	r2, [r3, #4]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3308      	adds	r3, #8
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d104      	bne.n	80094de <vTaskSwitchContext+0x8a>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	4a09      	ldr	r2, [pc, #36]	; (800950c <vTaskSwitchContext+0xb8>)
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4a06      	ldr	r2, [pc, #24]	; (8009504 <vTaskSwitchContext+0xb0>)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6013      	str	r3, [r2, #0]
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000da0 	.word	0x20000da0
 8009500:	20000d8c 	.word	0x20000d8c
 8009504:	20000d80 	.word	0x20000d80
 8009508:	200008a8 	.word	0x200008a8
 800950c:	200008a4 	.word	0x200008a4

08009510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <vTaskPlaceOnEventList+0x44>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3318      	adds	r3, #24
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fe fe87 	bl	8008252 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009544:	2101      	movs	r1, #1
 8009546:	6838      	ldr	r0, [r7, #0]
 8009548:	f000 fa7c 	bl	8009a44 <prvAddCurrentTaskToDelayedList>
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	200008a4 	.word	0x200008a4

08009558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	617b      	str	r3, [r7, #20]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vTaskPlaceOnEventListRestricted+0x54>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3318      	adds	r3, #24
 8009586:	4619      	mov	r1, r3
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7fe fe3e 	bl	800820a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009594:	f04f 33ff 	mov.w	r3, #4294967295
 8009598:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	68b8      	ldr	r0, [r7, #8]
 800959e:	f000 fa51 	bl	8009a44 <prvAddCurrentTaskToDelayedList>
	}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200008a4 	.word	0x200008a4

080095b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60fb      	str	r3, [r7, #12]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	3318      	adds	r3, #24
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fe6f 	bl	80082c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095e6:	4b1e      	ldr	r3, [pc, #120]	; (8009660 <xTaskRemoveFromEventList+0xb0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d11d      	bne.n	800962a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fe66 	bl	80082c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b19      	ldr	r3, [pc, #100]	; (8009664 <xTaskRemoveFromEventList+0xb4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskRemoveFromEventList+0x5c>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <xTaskRemoveFromEventList+0xb4>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a13      	ldr	r2, [pc, #76]	; (8009668 <xTaskRemoveFromEventList+0xb8>)
 800961a:	441a      	add	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe fdf1 	bl	800820a <vListInsertEnd>
 8009628:	e005      	b.n	8009636 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3318      	adds	r3, #24
 800962e:	4619      	mov	r1, r3
 8009630:	480e      	ldr	r0, [pc, #56]	; (800966c <xTaskRemoveFromEventList+0xbc>)
 8009632:	f7fe fdea 	bl	800820a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <xTaskRemoveFromEventList+0xc0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	429a      	cmp	r2, r3
 8009642:	d905      	bls.n	8009650 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <xTaskRemoveFromEventList+0xc4>)
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e001      	b.n	8009654 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009654:	697b      	ldr	r3, [r7, #20]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000da0 	.word	0x20000da0
 8009664:	20000d80 	.word	0x20000d80
 8009668:	200008a8 	.word	0x200008a8
 800966c:	20000d38 	.word	0x20000d38
 8009670:	200008a4 	.word	0x200008a4
 8009674:	20000d8c 	.word	0x20000d8c

08009678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <vTaskInternalSetTimeOutState+0x24>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <vTaskInternalSetTimeOutState+0x28>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	20000d90 	.word	0x20000d90
 80096a0:	20000d7c 	.word	0x20000d7c

080096a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	613b      	str	r3, [r7, #16]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096e6:	f000 fe7d 	bl	800a3e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <xTaskCheckForTimeOut+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009702:	d102      	bne.n	800970a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e023      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b15      	ldr	r3, [pc, #84]	; (8009764 <xTaskCheckForTimeOut+0xc0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d007      	beq.n	8009726 <xTaskCheckForTimeOut+0x82>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d302      	bcc.n	8009726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	61fb      	str	r3, [r7, #28]
 8009724:	e015      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	429a      	cmp	r2, r3
 800972e:	d20b      	bcs.n	8009748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff ff9b 	bl	8009678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	e004      	b.n	8009752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2200      	movs	r2, #0
 800974c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800974e:	2301      	movs	r3, #1
 8009750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009752:	f000 fe77 	bl	800a444 <vPortExitCritical>

	return xReturn;
 8009756:	69fb      	ldr	r3, [r7, #28]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3720      	adds	r7, #32
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000d7c 	.word	0x20000d7c
 8009764:	20000d90 	.word	0x20000d90

08009768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <vTaskMissedYield+0x14>)
 800976e:	2201      	movs	r2, #1
 8009770:	601a      	str	r2, [r3, #0]
}
 8009772:	bf00      	nop
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000d8c 	.word	0x20000d8c

08009780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009788:	f000 f852 	bl	8009830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <prvIdleTask+0x28>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d9f9      	bls.n	8009788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <prvIdleTask+0x2c>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097a4:	e7f0      	b.n	8009788 <prvIdleTask+0x8>
 80097a6:	bf00      	nop
 80097a8:	200008a8 	.word	0x200008a8
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	e00c      	b.n	80097d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4a12      	ldr	r2, [pc, #72]	; (8009810 <prvInitialiseTaskLists+0x60>)
 80097c8:	4413      	add	r3, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fcf0 	bl	80081b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3301      	adds	r3, #1
 80097d4:	607b      	str	r3, [r7, #4]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b37      	cmp	r3, #55	; 0x37
 80097da:	d9ef      	bls.n	80097bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097dc:	480d      	ldr	r0, [pc, #52]	; (8009814 <prvInitialiseTaskLists+0x64>)
 80097de:	f7fe fce7 	bl	80081b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097e2:	480d      	ldr	r0, [pc, #52]	; (8009818 <prvInitialiseTaskLists+0x68>)
 80097e4:	f7fe fce4 	bl	80081b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097e8:	480c      	ldr	r0, [pc, #48]	; (800981c <prvInitialiseTaskLists+0x6c>)
 80097ea:	f7fe fce1 	bl	80081b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097ee:	480c      	ldr	r0, [pc, #48]	; (8009820 <prvInitialiseTaskLists+0x70>)
 80097f0:	f7fe fcde 	bl	80081b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097f4:	480b      	ldr	r0, [pc, #44]	; (8009824 <prvInitialiseTaskLists+0x74>)
 80097f6:	f7fe fcdb 	bl	80081b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <prvInitialiseTaskLists+0x78>)
 80097fc:	4a05      	ldr	r2, [pc, #20]	; (8009814 <prvInitialiseTaskLists+0x64>)
 80097fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <prvInitialiseTaskLists+0x7c>)
 8009802:	4a05      	ldr	r2, [pc, #20]	; (8009818 <prvInitialiseTaskLists+0x68>)
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200008a8 	.word	0x200008a8
 8009814:	20000d08 	.word	0x20000d08
 8009818:	20000d1c 	.word	0x20000d1c
 800981c:	20000d38 	.word	0x20000d38
 8009820:	20000d4c 	.word	0x20000d4c
 8009824:	20000d64 	.word	0x20000d64
 8009828:	20000d30 	.word	0x20000d30
 800982c:	20000d34 	.word	0x20000d34

08009830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009836:	e019      	b.n	800986c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009838:	f000 fdd4 	bl	800a3e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800983c:	4b10      	ldr	r3, [pc, #64]	; (8009880 <prvCheckTasksWaitingTermination+0x50>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3304      	adds	r3, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fd3b 	bl	80082c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <prvCheckTasksWaitingTermination+0x54>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3b01      	subs	r3, #1
 8009854:	4a0b      	ldr	r2, [pc, #44]	; (8009884 <prvCheckTasksWaitingTermination+0x54>)
 8009856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3b01      	subs	r3, #1
 800985e:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 8009860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009862:	f000 fdef 	bl	800a444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f810 	bl	800988c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <prvCheckTasksWaitingTermination+0x58>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e1      	bne.n	8009838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000d4c 	.word	0x20000d4c
 8009884:	20000d78 	.word	0x20000d78
 8009888:	20000d60 	.word	0x20000d60

0800988c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800989a:	2b00      	cmp	r3, #0
 800989c:	d108      	bne.n	80098b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 ff8c 	bl	800a7c0 <vPortFree>
				vPortFree( pxTCB );
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 ff89 	bl	800a7c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098ae:	e018      	b.n	80098e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d103      	bne.n	80098c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 ff80 	bl	800a7c0 <vPortFree>
	}
 80098c0:	e00f      	b.n	80098e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d00a      	beq.n	80098e2 <prvDeleteTCB+0x56>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	60fb      	str	r3, [r7, #12]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <prvDeleteTCB+0x54>
	}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f2:	4b0c      	ldr	r3, [pc, #48]	; (8009924 <prvResetNextTaskUnblockTime+0x38>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <prvResetNextTaskUnblockTime+0x3c>)
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009904:	e008      	b.n	8009918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009906:	4b07      	ldr	r3, [pc, #28]	; (8009924 <prvResetNextTaskUnblockTime+0x38>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	4a04      	ldr	r2, [pc, #16]	; (8009928 <prvResetNextTaskUnblockTime+0x3c>)
 8009916:	6013      	str	r3, [r2, #0]
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	20000d30 	.word	0x20000d30
 8009928:	20000d98 	.word	0x20000d98

0800992c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <xTaskGetSchedulerState+0x34>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800993a:	2301      	movs	r3, #1
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	e008      	b.n	8009952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009940:	4b08      	ldr	r3, [pc, #32]	; (8009964 <xTaskGetSchedulerState+0x38>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d102      	bne.n	800994e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009948:	2302      	movs	r3, #2
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e001      	b.n	8009952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800994e:	2300      	movs	r3, #0
 8009950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009952:	687b      	ldr	r3, [r7, #4]
	}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20000d84 	.word	0x20000d84
 8009964:	20000da0 	.word	0x20000da0

08009968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d056      	beq.n	8009a2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800997e:	4b2e      	ldr	r3, [pc, #184]	; (8009a38 <xTaskPriorityDisinherit+0xd0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	d00a      	beq.n	800999e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
}
 800999a:	bf00      	nop
 800999c:	e7fe      	b.n	800999c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	60bb      	str	r3, [r7, #8]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d02c      	beq.n	8009a2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d128      	bne.n	8009a2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fc70 	bl	80082c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <xTaskPriorityDisinherit+0xd4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d903      	bls.n	8009a0c <xTaskPriorityDisinherit+0xa4>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <xTaskPriorityDisinherit+0xd4>)
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	4613      	mov	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4a09      	ldr	r2, [pc, #36]	; (8009a40 <xTaskPriorityDisinherit+0xd8>)
 8009a1a:	441a      	add	r2, r3
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4619      	mov	r1, r3
 8009a22:	4610      	mov	r0, r2
 8009a24:	f7fe fbf1 	bl	800820a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a2c:	697b      	ldr	r3, [r7, #20]
	}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200008a4 	.word	0x200008a4
 8009a3c:	20000d80 	.word	0x20000d80
 8009a40:	200008a8 	.word	0x200008a8

08009a44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a4e:	4b21      	ldr	r3, [pc, #132]	; (8009ad4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a54:	4b20      	ldr	r3, [pc, #128]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fc32 	bl	80082c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d10a      	bne.n	8009a7e <prvAddCurrentTaskToDelayedList+0x3a>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4819      	ldr	r0, [pc, #100]	; (8009adc <prvAddCurrentTaskToDelayedList+0x98>)
 8009a78:	f7fe fbc7 	bl	800820a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a7c:	e026      	b.n	8009acc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a86:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d209      	bcs.n	8009aaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f7fe fbd5 	bl	8008252 <vListInsert>
}
 8009aa8:	e010      	b.n	8009acc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f7fe fbcb 	bl	8008252 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d202      	bcs.n	8009acc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ac6:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6013      	str	r3, [r2, #0]
}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000d7c 	.word	0x20000d7c
 8009ad8:	200008a4 	.word	0x200008a4
 8009adc:	20000d64 	.word	0x20000d64
 8009ae0:	20000d34 	.word	0x20000d34
 8009ae4:	20000d30 	.word	0x20000d30
 8009ae8:	20000d98 	.word	0x20000d98

08009aec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08a      	sub	sp, #40	; 0x28
 8009af0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009af6:	f000 fb07 	bl	800a108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009afa:	4b1c      	ldr	r3, [pc, #112]	; (8009b6c <xTimerCreateTimerTask+0x80>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d021      	beq.n	8009b46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b0a:	1d3a      	adds	r2, r7, #4
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fb31 	bl	800817c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	9202      	str	r2, [sp, #8]
 8009b22:	9301      	str	r3, [sp, #4]
 8009b24:	2302      	movs	r3, #2
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	460a      	mov	r2, r1
 8009b2c:	4910      	ldr	r1, [pc, #64]	; (8009b70 <xTimerCreateTimerTask+0x84>)
 8009b2e:	4811      	ldr	r0, [pc, #68]	; (8009b74 <xTimerCreateTimerTask+0x88>)
 8009b30:	f7ff f8de 	bl	8008cf0 <xTaskCreateStatic>
 8009b34:	4603      	mov	r3, r0
 8009b36:	4a10      	ldr	r2, [pc, #64]	; (8009b78 <xTimerCreateTimerTask+0x8c>)
 8009b38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <xTimerCreateTimerTask+0x8c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b42:	2301      	movs	r3, #1
 8009b44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	613b      	str	r3, [r7, #16]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b62:	697b      	ldr	r3, [r7, #20]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000dd4 	.word	0x20000dd4
 8009b70:	0800b7c0 	.word	0x0800b7c0
 8009b74:	08009cb1 	.word	0x08009cb1
 8009b78:	20000dd8 	.word	0x20000dd8

08009b7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	; 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	623b      	str	r3, [r7, #32]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <xTimerGenericCommand+0x98>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d02a      	beq.n	8009c08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b05      	cmp	r3, #5
 8009bc2:	dc18      	bgt.n	8009bf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bc4:	f7ff feb2 	bl	800992c <xTaskGetSchedulerState>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d109      	bne.n	8009be2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <xTimerGenericCommand+0x98>)
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f107 0110 	add.w	r1, r7, #16
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bda:	f7fe fca1 	bl	8008520 <xQueueGenericSend>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24
 8009be0:	e012      	b.n	8009c08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009be2:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <xTimerGenericCommand+0x98>)
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	f107 0110 	add.w	r1, r7, #16
 8009bea:	2300      	movs	r3, #0
 8009bec:	2200      	movs	r2, #0
 8009bee:	f7fe fc97 	bl	8008520 <xQueueGenericSend>
 8009bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8009bf4:	e008      	b.n	8009c08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bf6:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <xTimerGenericCommand+0x98>)
 8009bf8:	6818      	ldr	r0, [r3, #0]
 8009bfa:	f107 0110 	add.w	r1, r7, #16
 8009bfe:	2300      	movs	r3, #0
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	f7fe fd8b 	bl	800871c <xQueueGenericSendFromISR>
 8009c06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3728      	adds	r7, #40	; 0x28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000dd4 	.word	0x20000dd4

08009c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af02      	add	r7, sp, #8
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c22:	4b22      	ldr	r3, [pc, #136]	; (8009cac <prvProcessExpiredTimer+0x94>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fb47 	bl	80082c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d022      	beq.n	8009c8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	18d1      	adds	r1, r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	6978      	ldr	r0, [r7, #20]
 8009c52:	f000 f8d1 	bl	8009df8 <prvInsertTimerInActiveList>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01f      	beq.n	8009c9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	2100      	movs	r1, #0
 8009c66:	6978      	ldr	r0, [r7, #20]
 8009c68:	f7ff ff88 	bl	8009b7c <xTimerGenericCommand>
 8009c6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d113      	bne.n	8009c9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c90:	f023 0301 	bic.w	r3, r3, #1
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	6978      	ldr	r0, [r7, #20]
 8009ca2:	4798      	blx	r3
}
 8009ca4:	bf00      	nop
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000dcc 	.word	0x20000dcc

08009cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 f857 	bl	8009d70 <prvGetNextExpireTime>
 8009cc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f803 	bl	8009cd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cce:	f000 f8d5 	bl	8009e7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cd2:	e7f1      	b.n	8009cb8 <prvTimerTask+0x8>

08009cd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cde:	f7ff fa43 	bl	8009168 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f866 	bl	8009db8 <prvSampleTimeNow>
 8009cec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d130      	bne.n	8009d56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <prvProcessTimerOrBlockTask+0x3c>
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d806      	bhi.n	8009d10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d02:	f7ff fa3f 	bl	8009184 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff ff85 	bl	8009c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d0e:	e024      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <prvProcessTimerOrBlockTask+0x90>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <prvProcessTimerOrBlockTask+0x50>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e000      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x52>
 8009d24:	2300      	movs	r3, #0
 8009d26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d28:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <prvProcessTimerOrBlockTask+0x94>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4619      	mov	r1, r3
 8009d36:	f7fe ffa7 	bl	8008c88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d3a:	f7ff fa23 	bl	8009184 <xTaskResumeAll>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d44:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <prvProcessTimerOrBlockTask+0x98>)
 8009d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	f3bf 8f6f 	isb	sy
}
 8009d54:	e001      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d56:	f7ff fa15 	bl	8009184 <xTaskResumeAll>
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000dd0 	.word	0x20000dd0
 8009d68:	20000dd4 	.word	0x20000dd4
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d78:	4b0e      	ldr	r3, [pc, #56]	; (8009db4 <prvGetNextExpireTime+0x44>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <prvGetNextExpireTime+0x16>
 8009d82:	2201      	movs	r2, #1
 8009d84:	e000      	b.n	8009d88 <prvGetNextExpireTime+0x18>
 8009d86:	2200      	movs	r2, #0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <prvGetNextExpireTime+0x44>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	e001      	b.n	8009da4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009da4:	68fb      	ldr	r3, [r7, #12]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20000dcc 	.word	0x20000dcc

08009db8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dc0:	f7ff fa7e 	bl	80092c0 <xTaskGetTickCount>
 8009dc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <prvSampleTimeNow+0x3c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d205      	bcs.n	8009ddc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dd0:	f000 f936 	bl	800a040 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e002      	b.n	8009de2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009de2:	4a04      	ldr	r2, [pc, #16]	; (8009df4 <prvSampleTimeNow+0x3c>)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000ddc 	.word	0x20000ddc

08009df8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d812      	bhi.n	8009e44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	1ad2      	subs	r2, r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d302      	bcc.n	8009e32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e01b      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e32:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <prvInsertTimerInActiveList+0x7c>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fe fa08 	bl	8008252 <vListInsert>
 8009e42:	e012      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d206      	bcs.n	8009e5a <prvInsertTimerInActiveList+0x62>
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d302      	bcc.n	8009e5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e007      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <prvInsertTimerInActiveList+0x80>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fe f9f4 	bl	8008252 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e6a:	697b      	ldr	r3, [r7, #20]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000dd0 	.word	0x20000dd0
 8009e78:	20000dcc 	.word	0x20000dcc

08009e7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08e      	sub	sp, #56	; 0x38
 8009e80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e82:	e0ca      	b.n	800a01a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da18      	bge.n	8009ebc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e8a:	1d3b      	adds	r3, r7, #4
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61fb      	str	r3, [r7, #28]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb2:	6850      	ldr	r0, [r2, #4]
 8009eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb6:	6892      	ldr	r2, [r2, #8]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f2c0 80aa 	blt.w	800a018 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe f9f5 	bl	80082c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eda:	463b      	mov	r3, r7
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff ff6b 	bl	8009db8 <prvSampleTimeNow>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b09      	cmp	r3, #9
 8009ee8:	f200 8097 	bhi.w	800a01a <prvProcessReceivedCommands+0x19e>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <prvProcessReceivedCommands+0x78>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f1d 	.word	0x08009f1d
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f91 	.word	0x08009f91
 8009f04:	08009fa5 	.word	0x08009fa5
 8009f08:	08009fef 	.word	0x08009fef
 8009f0c:	08009f1d 	.word	0x08009f1d
 8009f10:	08009f1d 	.word	0x08009f1d
 8009f14:	08009f91 	.word	0x08009f91
 8009f18:	08009fa5 	.word	0x08009fa5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	18d1      	adds	r1, r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3c:	f7ff ff5c 	bl	8009df8 <prvInsertTimerInActiveList>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d069      	beq.n	800a01a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d05e      	beq.n	800a01a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	441a      	add	r2, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f6e:	f7ff fe05 	bl	8009b7c <xTimerGenericCommand>
 8009f72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d14f      	bne.n	800a01a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61bb      	str	r3, [r7, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f96:	f023 0301 	bic.w	r3, r3, #1
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009fa2:	e03a      	b.n	800a01a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fb6:	68ba      	ldr	r2, [r7, #8]
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	617b      	str	r3, [r7, #20]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	18d1      	adds	r1, r2, r3
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fe8:	f7ff ff06 	bl	8009df8 <prvInsertTimerInActiveList>
					break;
 8009fec:	e015      	b.n	800a01a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffe:	f000 fbdf 	bl	800a7c0 <vPortFree>
 800a002:	e00a      	b.n	800a01a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a00a:	f023 0301 	bic.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a016:	e000      	b.n	800a01a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a018:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a01a:	4b08      	ldr	r3, [pc, #32]	; (800a03c <prvProcessReceivedCommands+0x1c0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	1d39      	adds	r1, r7, #4
 800a020:	2200      	movs	r2, #0
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fc16 	bl	8008854 <xQueueReceive>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f47f af2a 	bne.w	8009e84 <prvProcessReceivedCommands+0x8>
	}
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	3730      	adds	r7, #48	; 0x30
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20000dd4 	.word	0x20000dd4

0800a040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a046:	e048      	b.n	800a0da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a048:	4b2d      	ldr	r3, [pc, #180]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a052:	4b2b      	ldr	r3, [pc, #172]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3304      	adds	r3, #4
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe f92f 	bl	80082c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02e      	beq.n	800a0da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4413      	add	r3, r2
 800a084:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d90e      	bls.n	800a0ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a09a:	4b19      	ldr	r3, [pc, #100]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f7fe f8d4 	bl	8008252 <vListInsert>
 800a0aa:	e016      	b.n	800a0da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff fd60 	bl	8009b7c <xTimerGenericCommand>
 800a0bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10a      	bne.n	800a0da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	603b      	str	r3, [r7, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0da:	4b09      	ldr	r3, [pc, #36]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1b1      	bne.n	800a048 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0e4:	4b06      	ldr	r3, [pc, #24]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0ea:	4b06      	ldr	r3, [pc, #24]	; (800a104 <prvSwitchTimerLists+0xc4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a04      	ldr	r2, [pc, #16]	; (800a100 <prvSwitchTimerLists+0xc0>)
 800a0f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0f2:	4a04      	ldr	r2, [pc, #16]	; (800a104 <prvSwitchTimerLists+0xc4>)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20000dcc 	.word	0x20000dcc
 800a104:	20000dd0 	.word	0x20000dd0

0800a108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a10e:	f000 f969 	bl	800a3e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <prvCheckForValidListAndQueue+0x60>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d120      	bne.n	800a15c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a11a:	4814      	ldr	r0, [pc, #80]	; (800a16c <prvCheckForValidListAndQueue+0x64>)
 800a11c:	f7fe f848 	bl	80081b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a120:	4813      	ldr	r0, [pc, #76]	; (800a170 <prvCheckForValidListAndQueue+0x68>)
 800a122:	f7fe f845 	bl	80081b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a126:	4b13      	ldr	r3, [pc, #76]	; (800a174 <prvCheckForValidListAndQueue+0x6c>)
 800a128:	4a10      	ldr	r2, [pc, #64]	; (800a16c <prvCheckForValidListAndQueue+0x64>)
 800a12a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <prvCheckForValidListAndQueue+0x70>)
 800a12e:	4a10      	ldr	r2, [pc, #64]	; (800a170 <prvCheckForValidListAndQueue+0x68>)
 800a130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a132:	2300      	movs	r3, #0
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4b11      	ldr	r3, [pc, #68]	; (800a17c <prvCheckForValidListAndQueue+0x74>)
 800a138:	4a11      	ldr	r2, [pc, #68]	; (800a180 <prvCheckForValidListAndQueue+0x78>)
 800a13a:	2110      	movs	r1, #16
 800a13c:	200a      	movs	r0, #10
 800a13e:	f7fe f953 	bl	80083e8 <xQueueGenericCreateStatic>
 800a142:	4603      	mov	r3, r0
 800a144:	4a08      	ldr	r2, [pc, #32]	; (800a168 <prvCheckForValidListAndQueue+0x60>)
 800a146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a148:	4b07      	ldr	r3, [pc, #28]	; (800a168 <prvCheckForValidListAndQueue+0x60>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <prvCheckForValidListAndQueue+0x60>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	490b      	ldr	r1, [pc, #44]	; (800a184 <prvCheckForValidListAndQueue+0x7c>)
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fd6c 	bl	8008c34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a15c:	f000 f972 	bl	800a444 <vPortExitCritical>
}
 800a160:	bf00      	nop
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000dd4 	.word	0x20000dd4
 800a16c:	20000da4 	.word	0x20000da4
 800a170:	20000db8 	.word	0x20000db8
 800a174:	20000dcc 	.word	0x20000dcc
 800a178:	20000dd0 	.word	0x20000dd0
 800a17c:	20000e80 	.word	0x20000e80
 800a180:	20000de0 	.word	0x20000de0
 800a184:	0800b7c8 	.word	0x0800b7c8

0800a188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3b04      	subs	r3, #4
 800a198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f023 0201 	bic.w	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3b04      	subs	r3, #4
 800a1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1b8:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <pxPortInitialiseStack+0x64>)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3b14      	subs	r3, #20
 800a1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3b04      	subs	r3, #4
 800a1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f06f 0202 	mvn.w	r2, #2
 800a1d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3b20      	subs	r3, #32
 800a1dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	0800a1f1 	.word	0x0800a1f1

0800a1f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1fa:	4b12      	ldr	r3, [pc, #72]	; (800a244 <prvTaskExitError+0x54>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a202:	d00a      	beq.n	800a21a <prvTaskExitError+0x2a>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	60fb      	str	r3, [r7, #12]
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <prvTaskExitError+0x28>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	60bb      	str	r3, [r7, #8]
}
 800a22c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a22e:	bf00      	nop
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0fc      	beq.n	800a230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	20000124 	.word	0x20000124
	...

0800a250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <pxCurrentTCBConst2>)
 800a252:	6819      	ldr	r1, [r3, #0]
 800a254:	6808      	ldr	r0, [r1, #0]
 800a256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	f380 8809 	msr	PSP, r0
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f380 8811 	msr	BASEPRI, r0
 800a26a:	4770      	bx	lr
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst2>:
 800a270:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a278:	4808      	ldr	r0, [pc, #32]	; (800a29c <prvPortStartFirstTask+0x24>)
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	6800      	ldr	r0, [r0, #0]
 800a27e:	f380 8808 	msr	MSP, r0
 800a282:	f04f 0000 	mov.w	r0, #0
 800a286:	f380 8814 	msr	CONTROL, r0
 800a28a:	b662      	cpsie	i
 800a28c:	b661      	cpsie	f
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	df00      	svc	0
 800a298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a29a:	bf00      	nop
 800a29c:	e000ed08 	.word	0xe000ed08

0800a2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2a6:	4b46      	ldr	r3, [pc, #280]	; (800a3c0 <xPortStartScheduler+0x120>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a46      	ldr	r2, [pc, #280]	; (800a3c4 <xPortStartScheduler+0x124>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10a      	bne.n	800a2c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	613b      	str	r3, [r7, #16]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2c6:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <xPortStartScheduler+0x120>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a3f      	ldr	r2, [pc, #252]	; (800a3c8 <xPortStartScheduler+0x128>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d10a      	bne.n	800a2e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2e6:	4b39      	ldr	r3, [pc, #228]	; (800a3cc <xPortStartScheduler+0x12c>)
 800a2e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	22ff      	movs	r2, #255	; 0xff
 800a2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <xPortStartScheduler+0x130>)
 800a30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a30e:	4b31      	ldr	r3, [pc, #196]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a314:	e009      	b.n	800a32a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a316:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a2d      	ldr	r2, [pc, #180]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b80      	cmp	r3, #128	; 0x80
 800a334:	d0ef      	beq.n	800a316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a336:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1c3 0307 	rsb	r3, r3, #7
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d00a      	beq.n	800a358 <xPortStartScheduler+0xb8>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	60bb      	str	r3, [r7, #8]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a358:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a36a:	4a1a      	ldr	r2, [pc, #104]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a36c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	b2da      	uxtb	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a376:	4b18      	ldr	r3, [pc, #96]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a14      	ldr	r2, [pc, #80]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a38c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a38e:	f000 f8dd 	bl	800a54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <xPortStartScheduler+0x13c>)
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a398:	f000 f8fc 	bl	800a594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a39c:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <xPortStartScheduler+0x140>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0f      	ldr	r2, [pc, #60]	; (800a3e0 <xPortStartScheduler+0x140>)
 800a3a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3a8:	f7ff ff66 	bl	800a278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3ac:	f7ff f852 	bl	8009454 <vTaskSwitchContext>
	prvTaskExitError();
 800a3b0:	f7ff ff1e 	bl	800a1f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	e000ed00 	.word	0xe000ed00
 800a3c4:	410fc271 	.word	0x410fc271
 800a3c8:	410fc270 	.word	0x410fc270
 800a3cc:	e000e400 	.word	0xe000e400
 800a3d0:	20000ed0 	.word	0x20000ed0
 800a3d4:	20000ed4 	.word	0x20000ed4
 800a3d8:	e000ed20 	.word	0xe000ed20
 800a3dc:	20000124 	.word	0x20000124
 800a3e0:	e000ef34 	.word	0xe000ef34

0800a3e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	607b      	str	r3, [r7, #4]
}
 800a3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <vPortEnterCritical+0x58>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <vPortEnterCritical+0x58>)
 800a406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <vPortEnterCritical+0x58>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d10f      	bne.n	800a430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <vPortEnterCritical+0x5c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <vPortEnterCritical+0x4c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	603b      	str	r3, [r7, #0]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <vPortEnterCritical+0x4a>
	}
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000124 	.word	0x20000124
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a44a:	4b12      	ldr	r3, [pc, #72]	; (800a494 <vPortExitCritical+0x50>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <vPortExitCritical+0x24>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	607b      	str	r3, [r7, #4]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <vPortExitCritical+0x50>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <vPortExitCritical+0x50>)
 800a470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a472:	4b08      	ldr	r3, [pc, #32]	; (800a494 <vPortExitCritical+0x50>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d105      	bne.n	800a486 <vPortExitCritical+0x42>
 800a47a:	2300      	movs	r3, #0
 800a47c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	f383 8811 	msr	BASEPRI, r3
}
 800a484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000124 	.word	0x20000124
	...

0800a4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4a0:	f3ef 8009 	mrs	r0, PSP
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <pxCurrentTCBConst>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	f01e 0f10 	tst.w	lr, #16
 800a4b0:	bf08      	it	eq
 800a4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4c4:	f380 8811 	msr	BASEPRI, r0
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f7fe ffc0 	bl	8009454 <vTaskSwitchContext>
 800a4d4:	f04f 0000 	mov.w	r0, #0
 800a4d8:	f380 8811 	msr	BASEPRI, r0
 800a4dc:	bc09      	pop	{r0, r3}
 800a4de:	6819      	ldr	r1, [r3, #0]
 800a4e0:	6808      	ldr	r0, [r1, #0]
 800a4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e6:	f01e 0f10 	tst.w	lr, #16
 800a4ea:	bf08      	it	eq
 800a4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4f0:	f380 8809 	msr	PSP, r0
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w

0800a500 <pxCurrentTCBConst>:
 800a500:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop

0800a508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	607b      	str	r3, [r7, #4]
}
 800a520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a522:	f7fe fedd 	bl	80092e0 <xTaskIncrementTick>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <xPortSysTickHandler+0x40>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	2300      	movs	r3, #0
 800a536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f383 8811 	msr	BASEPRI, r3
}
 800a53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a54c:	b480      	push	{r7}
 800a54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <vPortSetupTimerInterrupt+0x34>)
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a556:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <vPortSetupTimerInterrupt+0x38>)
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <vPortSetupTimerInterrupt+0x3c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a0a      	ldr	r2, [pc, #40]	; (800a58c <vPortSetupTimerInterrupt+0x40>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	099b      	lsrs	r3, r3, #6
 800a568:	4a09      	ldr	r2, [pc, #36]	; (800a590 <vPortSetupTimerInterrupt+0x44>)
 800a56a:	3b01      	subs	r3, #1
 800a56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a56e:	4b04      	ldr	r3, [pc, #16]	; (800a580 <vPortSetupTimerInterrupt+0x34>)
 800a570:	2207      	movs	r2, #7
 800a572:	601a      	str	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	e000e010 	.word	0xe000e010
 800a584:	e000e018 	.word	0xe000e018
 800a588:	20000008 	.word	0x20000008
 800a58c:	10624dd3 	.word	0x10624dd3
 800a590:	e000e014 	.word	0xe000e014

0800a594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5a4 <vPortEnableVFP+0x10>
 800a598:	6801      	ldr	r1, [r0, #0]
 800a59a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a59e:	6001      	str	r1, [r0, #0]
 800a5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5a2:	bf00      	nop
 800a5a4:	e000ed88 	.word	0xe000ed88

0800a5a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5ae:	f3ef 8305 	mrs	r3, IPSR
 800a5b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	d914      	bls.n	800a5e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <vPortValidateInterruptPriority+0x70>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5c4:	4b15      	ldr	r3, [pc, #84]	; (800a61c <vPortValidateInterruptPriority+0x74>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	7afa      	ldrb	r2, [r7, #11]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d20a      	bcs.n	800a5e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	607b      	str	r3, [r7, #4]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5e4:	4b0e      	ldr	r3, [pc, #56]	; (800a620 <vPortValidateInterruptPriority+0x78>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <vPortValidateInterruptPriority+0x7c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d90a      	bls.n	800a60a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	603b      	str	r3, [r7, #0]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <vPortValidateInterruptPriority+0x60>
	}
 800a60a:	bf00      	nop
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	e000e3f0 	.word	0xe000e3f0
 800a61c:	20000ed0 	.word	0x20000ed0
 800a620:	e000ed0c 	.word	0xe000ed0c
 800a624:	20000ed4 	.word	0x20000ed4

0800a628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08a      	sub	sp, #40	; 0x28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a634:	f7fe fd98 	bl	8009168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a638:	4b5b      	ldr	r3, [pc, #364]	; (800a7a8 <pvPortMalloc+0x180>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a640:	f000 f920 	bl	800a884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a644:	4b59      	ldr	r3, [pc, #356]	; (800a7ac <pvPortMalloc+0x184>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4013      	ands	r3, r2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 8093 	bne.w	800a778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01d      	beq.n	800a694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a658:	2208      	movs	r2, #8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4413      	add	r3, r2
 800a65e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	2b00      	cmp	r3, #0
 800a668:	d014      	beq.n	800a694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f023 0307 	bic.w	r3, r3, #7
 800a670:	3308      	adds	r3, #8
 800a672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <pvPortMalloc+0x6c>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	617b      	str	r3, [r7, #20]
}
 800a690:	bf00      	nop
 800a692:	e7fe      	b.n	800a692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d06e      	beq.n	800a778 <pvPortMalloc+0x150>
 800a69a:	4b45      	ldr	r3, [pc, #276]	; (800a7b0 <pvPortMalloc+0x188>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d869      	bhi.n	800a778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6a4:	4b43      	ldr	r3, [pc, #268]	; (800a7b4 <pvPortMalloc+0x18c>)
 800a6a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6a8:	4b42      	ldr	r3, [pc, #264]	; (800a7b4 <pvPortMalloc+0x18c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ae:	e004      	b.n	800a6ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d903      	bls.n	800a6cc <pvPortMalloc+0xa4>
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f1      	bne.n	800a6b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6cc:	4b36      	ldr	r3, [pc, #216]	; (800a7a8 <pvPortMalloc+0x180>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d050      	beq.n	800a778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2208      	movs	r2, #8
 800a6dc:	4413      	add	r3, r2
 800a6de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	2308      	movs	r3, #8
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d91f      	bls.n	800a738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <pvPortMalloc+0xf8>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	613b      	str	r3, [r7, #16]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	1ad2      	subs	r2, r2, r3
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a732:	69b8      	ldr	r0, [r7, #24]
 800a734:	f000 f908 	bl	800a948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a738:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <pvPortMalloc+0x188>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <pvPortMalloc+0x188>)
 800a744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <pvPortMalloc+0x188>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <pvPortMalloc+0x190>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d203      	bcs.n	800a75a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a752:	4b17      	ldr	r3, [pc, #92]	; (800a7b0 <pvPortMalloc+0x188>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a18      	ldr	r2, [pc, #96]	; (800a7b8 <pvPortMalloc+0x190>)
 800a758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	4b13      	ldr	r3, [pc, #76]	; (800a7ac <pvPortMalloc+0x184>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	431a      	orrs	r2, r3
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <pvPortMalloc+0x194>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <pvPortMalloc+0x194>)
 800a776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a778:	f7fe fd04 	bl	8009184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00a      	beq.n	800a79c <pvPortMalloc+0x174>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60fb      	str	r3, [r7, #12]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <pvPortMalloc+0x172>
	return pvReturn;
 800a79c:	69fb      	ldr	r3, [r7, #28]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3728      	adds	r7, #40	; 0x28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20001a98 	.word	0x20001a98
 800a7ac:	20001aac 	.word	0x20001aac
 800a7b0:	20001a9c 	.word	0x20001a9c
 800a7b4:	20001a90 	.word	0x20001a90
 800a7b8:	20001aa0 	.word	0x20001aa0
 800a7bc:	20001aa4 	.word	0x20001aa4

0800a7c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d04d      	beq.n	800a86e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7d2:	2308      	movs	r3, #8
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4413      	add	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	4b24      	ldr	r3, [pc, #144]	; (800a878 <vPortFree+0xb8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <vPortFree+0x44>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <vPortFree+0x62>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	60bb      	str	r3, [r7, #8]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <vPortFree+0xb8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4013      	ands	r3, r2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d01e      	beq.n	800a86e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d11a      	bne.n	800a86e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <vPortFree+0xb8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	43db      	mvns	r3, r3
 800a842:	401a      	ands	r2, r3
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a848:	f7fe fc8e 	bl	8009168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <vPortFree+0xbc>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4413      	add	r3, r2
 800a856:	4a09      	ldr	r2, [pc, #36]	; (800a87c <vPortFree+0xbc>)
 800a858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a85a:	6938      	ldr	r0, [r7, #16]
 800a85c:	f000 f874 	bl	800a948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a860:	4b07      	ldr	r3, [pc, #28]	; (800a880 <vPortFree+0xc0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3301      	adds	r3, #1
 800a866:	4a06      	ldr	r2, [pc, #24]	; (800a880 <vPortFree+0xc0>)
 800a868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a86a:	f7fe fc8b 	bl	8009184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a86e:	bf00      	nop
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20001aac 	.word	0x20001aac
 800a87c:	20001a9c 	.word	0x20001a9c
 800a880:	20001aa8 	.word	0x20001aa8

0800a884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a88a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a88e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a890:	4b27      	ldr	r3, [pc, #156]	; (800a930 <prvHeapInit+0xac>)
 800a892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00c      	beq.n	800a8b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3307      	adds	r3, #7
 800a8a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f023 0307 	bic.w	r3, r3, #7
 800a8aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	4a1f      	ldr	r2, [pc, #124]	; (800a930 <prvHeapInit+0xac>)
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8bc:	4a1d      	ldr	r2, [pc, #116]	; (800a934 <prvHeapInit+0xb0>)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <prvHeapInit+0xb0>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0307 	bic.w	r3, r3, #7
 800a8de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4a15      	ldr	r2, [pc, #84]	; (800a938 <prvHeapInit+0xb4>)
 800a8e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8e6:	4b14      	ldr	r3, [pc, #80]	; (800a938 <prvHeapInit+0xb4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8ee:	4b12      	ldr	r3, [pc, #72]	; (800a938 <prvHeapInit+0xb4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <prvHeapInit+0xb4>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <prvHeapInit+0xb8>)
 800a912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4a09      	ldr	r2, [pc, #36]	; (800a940 <prvHeapInit+0xbc>)
 800a91a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <prvHeapInit+0xc0>)
 800a91e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	20000ed8 	.word	0x20000ed8
 800a934:	20001a90 	.word	0x20001a90
 800a938:	20001a98 	.word	0x20001a98
 800a93c:	20001aa0 	.word	0x20001aa0
 800a940:	20001a9c 	.word	0x20001a9c
 800a944:	20001aac 	.word	0x20001aac

0800a948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a950:	4b28      	ldr	r3, [pc, #160]	; (800a9f4 <prvInsertBlockIntoFreeList+0xac>)
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e002      	b.n	800a95c <prvInsertBlockIntoFreeList+0x14>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	429a      	cmp	r2, r3
 800a964:	d8f7      	bhi.n	800a956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	4413      	add	r3, r2
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	429a      	cmp	r2, r3
 800a976:	d108      	bne.n	800a98a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	441a      	add	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	441a      	add	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d118      	bne.n	800a9d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d00d      	beq.n	800a9c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	e008      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	e003      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d002      	beq.n	800a9e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20001a90 	.word	0x20001a90
 800a9f8:	20001a98 	.word	0x20001a98

0800a9fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa00:	2200      	movs	r2, #0
 800aa02:	4912      	ldr	r1, [pc, #72]	; (800aa4c <MX_USB_DEVICE_Init+0x50>)
 800aa04:	4812      	ldr	r0, [pc, #72]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa06:	f7fc f8df 	bl	8006bc8 <USBD_Init>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa10:	f7f6 fb5e 	bl	80010d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aa14:	490f      	ldr	r1, [pc, #60]	; (800aa54 <MX_USB_DEVICE_Init+0x58>)
 800aa16:	480e      	ldr	r0, [pc, #56]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa18:	f7fc f906 	bl	8006c28 <USBD_RegisterClass>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa22:	f7f6 fb55 	bl	80010d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa26:	490c      	ldr	r1, [pc, #48]	; (800aa58 <MX_USB_DEVICE_Init+0x5c>)
 800aa28:	4809      	ldr	r0, [pc, #36]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa2a:	f7fc f827 	bl	8006a7c <USBD_CDC_RegisterInterface>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa34:	f7f6 fb4c 	bl	80010d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa38:	4805      	ldr	r0, [pc, #20]	; (800aa50 <MX_USB_DEVICE_Init+0x54>)
 800aa3a:	f7fc f91c 	bl	8006c76 <USBD_Start>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa44:	f7f6 fb44 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa48:	bf00      	nop
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000144 	.word	0x20000144
 800aa50:	20001f68 	.word	0x20001f68
 800aa54:	20000020 	.word	0x20000020
 800aa58:	20000130 	.word	0x20000130

0800aa5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa60:	2200      	movs	r2, #0
 800aa62:	4905      	ldr	r1, [pc, #20]	; (800aa78 <CDC_Init_FS+0x1c>)
 800aa64:	4805      	ldr	r0, [pc, #20]	; (800aa7c <CDC_Init_FS+0x20>)
 800aa66:	f7fc f81e 	bl	8006aa6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa6a:	4905      	ldr	r1, [pc, #20]	; (800aa80 <CDC_Init_FS+0x24>)
 800aa6c:	4803      	ldr	r0, [pc, #12]	; (800aa7c <CDC_Init_FS+0x20>)
 800aa6e:	f7fc f838 	bl	8006ae2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20002438 	.word	0x20002438
 800aa7c:	20001f68 	.word	0x20001f68
 800aa80:	20002238 	.word	0x20002238

0800aa84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	2b23      	cmp	r3, #35	; 0x23
 800aaa8:	f200 8098 	bhi.w	800abdc <CDC_Control_FS+0x148>
 800aaac:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <CDC_Control_FS+0x20>)
 800aaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab2:	bf00      	nop
 800aab4:	0800abdd 	.word	0x0800abdd
 800aab8:	0800abdd 	.word	0x0800abdd
 800aabc:	0800abdd 	.word	0x0800abdd
 800aac0:	0800abdd 	.word	0x0800abdd
 800aac4:	0800abdd 	.word	0x0800abdd
 800aac8:	0800abdd 	.word	0x0800abdd
 800aacc:	0800abdd 	.word	0x0800abdd
 800aad0:	0800abdd 	.word	0x0800abdd
 800aad4:	0800abdd 	.word	0x0800abdd
 800aad8:	0800abdd 	.word	0x0800abdd
 800aadc:	0800abdd 	.word	0x0800abdd
 800aae0:	0800abdd 	.word	0x0800abdd
 800aae4:	0800abdd 	.word	0x0800abdd
 800aae8:	0800abdd 	.word	0x0800abdd
 800aaec:	0800abdd 	.word	0x0800abdd
 800aaf0:	0800abdd 	.word	0x0800abdd
 800aaf4:	0800abdd 	.word	0x0800abdd
 800aaf8:	0800abdd 	.word	0x0800abdd
 800aafc:	0800abdd 	.word	0x0800abdd
 800ab00:	0800abdd 	.word	0x0800abdd
 800ab04:	0800abdd 	.word	0x0800abdd
 800ab08:	0800abdd 	.word	0x0800abdd
 800ab0c:	0800abdd 	.word	0x0800abdd
 800ab10:	0800abdd 	.word	0x0800abdd
 800ab14:	0800abdd 	.word	0x0800abdd
 800ab18:	0800abdd 	.word	0x0800abdd
 800ab1c:	0800abdd 	.word	0x0800abdd
 800ab20:	0800abdd 	.word	0x0800abdd
 800ab24:	0800abdd 	.word	0x0800abdd
 800ab28:	0800abdd 	.word	0x0800abdd
 800ab2c:	0800abdd 	.word	0x0800abdd
 800ab30:	0800abdd 	.word	0x0800abdd
 800ab34:	0800ab45 	.word	0x0800ab45
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	0800abdd 	.word	0x0800abdd
 800ab40:	0800abdd 	.word	0x0800abdd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	021b      	lsls	r3, r3, #8
 800ab52:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	3302      	adds	r3, #2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	3303      	adds	r3, #3
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	061b      	lsls	r3, r3, #24
 800ab66:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b20      	ldr	r3, [pc, #128]	; (800abec <CDC_Control_FS+0x158>)
 800ab6c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	791a      	ldrb	r2, [r3, #4]
 800ab72:	4b1e      	ldr	r3, [pc, #120]	; (800abec <CDC_Control_FS+0x158>)
 800ab74:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	795a      	ldrb	r2, [r3, #5]
 800ab7a:	4b1c      	ldr	r3, [pc, #112]	; (800abec <CDC_Control_FS+0x158>)
 800ab7c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	799a      	ldrb	r2, [r3, #6]
 800ab82:	4b1a      	ldr	r3, [pc, #104]	; (800abec <CDC_Control_FS+0x158>)
 800ab84:	719a      	strb	r2, [r3, #6]
		break;
 800ab86:	e02a      	b.n	800abde <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800ab88:	4b18      	ldr	r3, [pc, #96]	; (800abec <CDC_Control_FS+0x158>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800ab92:	4b16      	ldr	r3, [pc, #88]	; (800abec <CDC_Control_FS+0x158>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	0a1a      	lsrs	r2, r3, #8
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b2d2      	uxtb	r2, r2
 800ab9e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800aba0:	4b12      	ldr	r3, [pc, #72]	; (800abec <CDC_Control_FS+0x158>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	0c1a      	lsrs	r2, r3, #16
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	3302      	adds	r3, #2
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800abae:	4b0f      	ldr	r3, [pc, #60]	; (800abec <CDC_Control_FS+0x158>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	0e1a      	lsrs	r2, r3, #24
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	3303      	adds	r3, #3
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4a0a      	ldr	r2, [pc, #40]	; (800abec <CDC_Control_FS+0x158>)
 800abc2:	7912      	ldrb	r2, [r2, #4]
 800abc4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	3305      	adds	r3, #5
 800abca:	4a08      	ldr	r2, [pc, #32]	; (800abec <CDC_Control_FS+0x158>)
 800abcc:	7952      	ldrb	r2, [r2, #5]
 800abce:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	3306      	adds	r3, #6
 800abd4:	4a05      	ldr	r2, [pc, #20]	; (800abec <CDC_Control_FS+0x158>)
 800abd6:	7992      	ldrb	r2, [r2, #6]
 800abd8:	701a      	strb	r2, [r3, #0]
		break;
 800abda:	e000      	b.n	800abde <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800abdc:	bf00      	nop
	}

  return (USBD_OK);
 800abde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	20000128 	.word	0x20000128

0800abf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4808      	ldr	r0, [pc, #32]	; (800ac20 <CDC_Receive_FS+0x30>)
 800abfe:	f7fb ff70 	bl	8006ae2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac02:	4807      	ldr	r0, [pc, #28]	; (800ac20 <CDC_Receive_FS+0x30>)
 800ac04:	f7fb ffb6 	bl	8006b74 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7f5 feec 	bl	80009ec <CDC_ReceiveCallback>
  return (USBD_OK);
 800ac14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20001f68 	.word	0x20001f68

0800ac24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac34:	4b0d      	ldr	r3, [pc, #52]	; (800ac6c <CDC_Transmit_FS+0x48>)
 800ac36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e00b      	b.n	800ac62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac4a:	887b      	ldrh	r3, [r7, #2]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	4806      	ldr	r0, [pc, #24]	; (800ac6c <CDC_Transmit_FS+0x48>)
 800ac52:	f7fb ff28 	bl	8006aa6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac56:	4805      	ldr	r0, [pc, #20]	; (800ac6c <CDC_Transmit_FS+0x48>)
 800ac58:	f7fb ff5c 	bl	8006b14 <USBD_CDC_TransmitPacket>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20001f68 	.word	0x20001f68

0800ac70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
	...

0800ac94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	6039      	str	r1, [r7, #0]
 800ac9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2212      	movs	r2, #18
 800aca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aca6:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	20000164 	.word	0x20000164

0800acb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2204      	movs	r2, #4
 800acc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acca:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	20000184 	.word	0x20000184

0800acdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	6039      	str	r1, [r7, #0]
 800ace6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	4907      	ldr	r1, [pc, #28]	; (800ad10 <USBD_FS_ProductStrDescriptor+0x34>)
 800acf2:	4808      	ldr	r0, [pc, #32]	; (800ad14 <USBD_FS_ProductStrDescriptor+0x38>)
 800acf4:	f7fd f81b 	bl	8007d2e <USBD_GetString>
 800acf8:	e004      	b.n	800ad04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	4904      	ldr	r1, [pc, #16]	; (800ad10 <USBD_FS_ProductStrDescriptor+0x34>)
 800acfe:	4805      	ldr	r0, [pc, #20]	; (800ad14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad00:	f7fd f815 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad04:	4b02      	ldr	r3, [pc, #8]	; (800ad10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20002c38 	.word	0x20002c38
 800ad14:	0800b7d0 	.word	0x0800b7d0

0800ad18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	6039      	str	r1, [r7, #0]
 800ad22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	4904      	ldr	r1, [pc, #16]	; (800ad38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad28:	4804      	ldr	r0, [pc, #16]	; (800ad3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad2a:	f7fd f800 	bl	8007d2e <USBD_GetString>
  return USBD_StrDesc;
 800ad2e:	4b02      	ldr	r3, [pc, #8]	; (800ad38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20002c38 	.word	0x20002c38
 800ad3c:	0800b7e8 	.word	0x0800b7e8

0800ad40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	6039      	str	r1, [r7, #0]
 800ad4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	221a      	movs	r2, #26
 800ad50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad52:	f000 f855 	bl	800ae00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad56:	4b02      	ldr	r3, [pc, #8]	; (800ad60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20000188 	.word	0x20000188

0800ad64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d105      	bne.n	800ad82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	4907      	ldr	r1, [pc, #28]	; (800ad98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad7a:	4808      	ldr	r0, [pc, #32]	; (800ad9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad7c:	f7fc ffd7 	bl	8007d2e <USBD_GetString>
 800ad80:	e004      	b.n	800ad8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4904      	ldr	r1, [pc, #16]	; (800ad98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad86:	4805      	ldr	r0, [pc, #20]	; (800ad9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad88:	f7fc ffd1 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad8c:	4b02      	ldr	r3, [pc, #8]	; (800ad98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20002c38 	.word	0x20002c38
 800ad9c:	0800b7fc 	.word	0x0800b7fc

0800ada0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d105      	bne.n	800adbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	4907      	ldr	r1, [pc, #28]	; (800add4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adb6:	4808      	ldr	r0, [pc, #32]	; (800add8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adb8:	f7fc ffb9 	bl	8007d2e <USBD_GetString>
 800adbc:	e004      	b.n	800adc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4904      	ldr	r1, [pc, #16]	; (800add4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adc2:	4805      	ldr	r0, [pc, #20]	; (800add8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adc4:	f7fc ffb3 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800adc8:	4b02      	ldr	r3, [pc, #8]	; (800add4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20002c38 	.word	0x20002c38
 800add8:	0800b808 	.word	0x0800b808

0800addc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	220c      	movs	r2, #12
 800adec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800adee:	4b03      	ldr	r3, [pc, #12]	; (800adfc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	20000178 	.word	0x20000178

0800ae00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <Get_SerialNum+0x44>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <Get_SerialNum+0x48>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae12:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <Get_SerialNum+0x4c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae26:	2208      	movs	r2, #8
 800ae28:	4909      	ldr	r1, [pc, #36]	; (800ae50 <Get_SerialNum+0x50>)
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 f814 	bl	800ae58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae30:	2204      	movs	r2, #4
 800ae32:	4908      	ldr	r1, [pc, #32]	; (800ae54 <Get_SerialNum+0x54>)
 800ae34:	68b8      	ldr	r0, [r7, #8]
 800ae36:	f000 f80f 	bl	800ae58 <IntToUnicode>
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	1fff7590 	.word	0x1fff7590
 800ae48:	1fff7594 	.word	0x1fff7594
 800ae4c:	1fff7598 	.word	0x1fff7598
 800ae50:	2000018a 	.word	0x2000018a
 800ae54:	2000019a 	.word	0x2000019a

0800ae58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	75fb      	strb	r3, [r7, #23]
 800ae6e:	e027      	b.n	800aec0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	0f1b      	lsrs	r3, r3, #28
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d80b      	bhi.n	800ae90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	0f1b      	lsrs	r3, r3, #28
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	4619      	mov	r1, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	440b      	add	r3, r1
 800ae88:	3230      	adds	r2, #48	; 0x30
 800ae8a:	b2d2      	uxtb	r2, r2
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e00a      	b.n	800aea6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	0f1b      	lsrs	r3, r3, #28
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	005b      	lsls	r3, r3, #1
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	440b      	add	r3, r1
 800aea0:	3237      	adds	r2, #55	; 0x37
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aeac:	7dfb      	ldrb	r3, [r7, #23]
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	3301      	adds	r3, #1
 800aebe:	75fb      	strb	r3, [r7, #23]
 800aec0:	7dfa      	ldrb	r2, [r7, #23]
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d3d3      	bcc.n	800ae70 <IntToUnicode+0x18>
  }
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	371c      	adds	r7, #28
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08a      	sub	sp, #40	; 0x28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aee0:	f107 0314 	add.w	r3, r7, #20
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	605a      	str	r2, [r3, #4]
 800aeea:	609a      	str	r2, [r3, #8]
 800aeec:	60da      	str	r2, [r3, #12]
 800aeee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aef8:	d14e      	bne.n	800af98 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aefa:	4b29      	ldr	r3, [pc, #164]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800aefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefe:	4a28      	ldr	r2, [pc, #160]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af00:	f043 0301 	orr.w	r3, r3, #1
 800af04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af06:	4b26      	ldr	r3, [pc, #152]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800af12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800af16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af18:	2302      	movs	r3, #2
 800af1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af20:	2303      	movs	r3, #3
 800af22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af24:	230a      	movs	r3, #10
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af28:	f107 0314 	add.w	r3, r7, #20
 800af2c:	4619      	mov	r1, r3
 800af2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af32:	f7f6 fd49 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af36:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af3a:	4a19      	ldr	r2, [pc, #100]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af42:	4b17      	ldr	r3, [pc, #92]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af4e:	4b14      	ldr	r3, [pc, #80]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d114      	bne.n	800af84 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af5e:	4a10      	ldr	r2, [pc, #64]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af64:	6593      	str	r3, [r2, #88]	; 0x58
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af6e:	60bb      	str	r3, [r7, #8]
 800af70:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800af72:	f7f8 f859 	bl	8003028 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af76:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7a:	4a09      	ldr	r2, [pc, #36]	; (800afa0 <HAL_PCD_MspInit+0xc8>)
 800af7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af80:	6593      	str	r3, [r2, #88]	; 0x58
 800af82:	e001      	b.n	800af88 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800af84:	f7f8 f850 	bl	8003028 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800af88:	2200      	movs	r2, #0
 800af8a:	2105      	movs	r1, #5
 800af8c:	2043      	movs	r0, #67	; 0x43
 800af8e:	f7f6 fce4 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af92:	2043      	movs	r0, #67	; 0x43
 800af94:	f7f6 fcfd 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af98:	bf00      	nop
 800af9a:	3728      	adds	r7, #40	; 0x28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	40021000 	.word	0x40021000

0800afa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7fb fea6 	bl	8006d0c <USBD_LL_SetupStage>
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4613      	mov	r3, r2
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	440b      	add	r3, r1
 800afe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	78fb      	ldrb	r3, [r7, #3]
 800aff0:	4619      	mov	r1, r3
 800aff2:	f7fb fee0 	bl	8006db6 <USBD_LL_DataOutStage>
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b010:	78fa      	ldrb	r2, [r7, #3]
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	4613      	mov	r3, r2
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	440b      	add	r3, r1
 800b01e:	3348      	adds	r3, #72	; 0x48
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	4619      	mov	r1, r3
 800b026:	f7fb ff29 	bl	8006e7c <USBD_LL_DataInStage>
}
 800b02a:	bf00      	nop
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b040:	4618      	mov	r0, r3
 800b042:	f7fc f83d 	bl	80070c0 <USBD_LL_SOF>
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b056:	2301      	movs	r3, #1
 800b058:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d001      	beq.n	800b066 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b062:	f7f6 f835 	bl	80010d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b06c:	7bfa      	ldrb	r2, [r7, #15]
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f7fb ffe7 	bl	8007044 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fb ff93 	bl	8006fa8 <USBD_LL_Reset>
}
 800b082:	bf00      	nop
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6812      	ldr	r2, [r2, #0]
 800b0a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fb ffd6 	bl	8007064 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d005      	beq.n	800b0cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <HAL_PCD_SuspendCallback+0x48>)
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	4a03      	ldr	r2, [pc, #12]	; (800b0d4 <HAL_PCD_SuspendCallback+0x48>)
 800b0c6:	f043 0306 	orr.w	r3, r3, #6
 800b0ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	e000ed00 	.word	0xe000ed00

0800b0d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0f2:	f023 0301 	bic.w	r3, r3, #1
 800b0f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d007      	beq.n	800b110 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b100:	4b08      	ldr	r3, [pc, #32]	; (800b124 <HAL_PCD_ResumeCallback+0x4c>)
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	4a07      	ldr	r2, [pc, #28]	; (800b124 <HAL_PCD_ResumeCallback+0x4c>)
 800b106:	f023 0306 	bic.w	r3, r3, #6
 800b10a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b10c:	f000 faf6 	bl	800b6fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b116:	4618      	mov	r0, r3
 800b118:	f7fb ffba 	bl	8007090 <USBD_LL_Resume>
}
 800b11c:	bf00      	nop
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	e000ed00 	.word	0xe000ed00

0800b128 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b13a:	78fa      	ldrb	r2, [r7, #3]
 800b13c:	4611      	mov	r1, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc f806 	bl	8007150 <USBD_LL_IsoOUTIncomplete>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	4611      	mov	r1, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f7fb ffce 	bl	8007104 <USBD_LL_IsoINIncomplete>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fc f80c 	bl	800719c <USBD_LL_DevConnected>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fc f809 	bl	80071b2 <USBD_LL_DevDisconnected>
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d13c      	bne.n	800b232 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1b8:	4a20      	ldr	r2, [pc, #128]	; (800b23c <USBD_LL_Init+0x94>)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a1e      	ldr	r2, [pc, #120]	; (800b23c <USBD_LL_Init+0x94>)
 800b1c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1c8:	4b1c      	ldr	r3, [pc, #112]	; (800b23c <USBD_LL_Init+0x94>)
 800b1ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <USBD_LL_Init+0x94>)
 800b1d2:	2206      	movs	r2, #6
 800b1d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1d6:	4b19      	ldr	r3, [pc, #100]	; (800b23c <USBD_LL_Init+0x94>)
 800b1d8:	2202      	movs	r2, #2
 800b1da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1dc:	4b17      	ldr	r3, [pc, #92]	; (800b23c <USBD_LL_Init+0x94>)
 800b1de:	2202      	movs	r2, #2
 800b1e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1e2:	4b16      	ldr	r3, [pc, #88]	; (800b23c <USBD_LL_Init+0x94>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1e8:	4b14      	ldr	r3, [pc, #80]	; (800b23c <USBD_LL_Init+0x94>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <USBD_LL_Init+0x94>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b1f4:	4b11      	ldr	r3, [pc, #68]	; (800b23c <USBD_LL_Init+0x94>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1fa:	4b10      	ldr	r3, [pc, #64]	; (800b23c <USBD_LL_Init+0x94>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b200:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <USBD_LL_Init+0x94>)
 800b202:	2200      	movs	r2, #0
 800b204:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b206:	480d      	ldr	r0, [pc, #52]	; (800b23c <USBD_LL_Init+0x94>)
 800b208:	f7f6 fe0a 	bl	8001e20 <HAL_PCD_Init>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d001      	beq.n	800b216 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b212:	f7f5 ff5d 	bl	80010d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b216:	2180      	movs	r1, #128	; 0x80
 800b218:	4808      	ldr	r0, [pc, #32]	; (800b23c <USBD_LL_Init+0x94>)
 800b21a:	f7f7 fe6c 	bl	8002ef6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b21e:	2240      	movs	r2, #64	; 0x40
 800b220:	2100      	movs	r1, #0
 800b222:	4806      	ldr	r0, [pc, #24]	; (800b23c <USBD_LL_Init+0x94>)
 800b224:	f7f7 fe20 	bl	8002e68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b228:	2280      	movs	r2, #128	; 0x80
 800b22a:	2101      	movs	r1, #1
 800b22c:	4803      	ldr	r0, [pc, #12]	; (800b23c <USBD_LL_Init+0x94>)
 800b22e:	f7f7 fe1b 	bl	8002e68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20002e38 	.word	0x20002e38

0800b240 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b256:	4618      	mov	r0, r3
 800b258:	f7f6 ff06 	bl	8002068 <HAL_PCD_Start>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d816      	bhi.n	800b294 <USBD_LL_Start+0x54>
 800b266:	a201      	add	r2, pc, #4	; (adr r2, 800b26c <USBD_LL_Start+0x2c>)
 800b268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b283 	.word	0x0800b283
 800b274:	0800b289 	.word	0x0800b289
 800b278:	0800b28f 	.word	0x0800b28f
    case HAL_OK :
      usb_status = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e00b      	b.n	800b29a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e008      	b.n	800b29a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e005      	b.n	800b29a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	e002      	b.n	800b29a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	bf00      	nop
  }
  return usb_status;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	70fb      	strb	r3, [r7, #3]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70bb      	strb	r3, [r7, #2]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2cc:	78bb      	ldrb	r3, [r7, #2]
 800b2ce:	883a      	ldrh	r2, [r7, #0]
 800b2d0:	78f9      	ldrb	r1, [r7, #3]
 800b2d2:	f7f7 fac1 	bl	8002858 <HAL_PCD_EP_Open>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d817      	bhi.n	800b310 <USBD_LL_OpenEP+0x6c>
 800b2e0:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <USBD_LL_OpenEP+0x44>)
 800b2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e6:	bf00      	nop
 800b2e8:	0800b2f9 	.word	0x0800b2f9
 800b2ec:	0800b2ff 	.word	0x0800b2ff
 800b2f0:	0800b305 	.word	0x0800b305
 800b2f4:	0800b30b 	.word	0x0800b30b
    case HAL_OK :
      usb_status = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fc:	e00b      	b.n	800b316 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	73fb      	strb	r3, [r7, #15]
    break;
 800b302:	e008      	b.n	800b316 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b304:	2301      	movs	r3, #1
 800b306:	73fb      	strb	r3, [r7, #15]
    break;
 800b308:	e005      	b.n	800b316 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b30a:	2303      	movs	r3, #3
 800b30c:	73fb      	strb	r3, [r7, #15]
    break;
 800b30e:	e002      	b.n	800b316 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b310:	2303      	movs	r3, #3
 800b312:	73fb      	strb	r3, [r7, #15]
    break;
 800b314:	bf00      	nop
  }
  return usb_status;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b33a:	78fa      	ldrb	r2, [r7, #3]
 800b33c:	4611      	mov	r1, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f7f7 faf2 	bl	8002928 <HAL_PCD_EP_Close>
 800b344:	4603      	mov	r3, r0
 800b346:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d816      	bhi.n	800b37c <USBD_LL_CloseEP+0x5c>
 800b34e:	a201      	add	r2, pc, #4	; (adr r2, 800b354 <USBD_LL_CloseEP+0x34>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b365 	.word	0x0800b365
 800b358:	0800b36b 	.word	0x0800b36b
 800b35c:	0800b371 	.word	0x0800b371
 800b360:	0800b377 	.word	0x0800b377
    case HAL_OK :
      usb_status = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
    break;
 800b368:	e00b      	b.n	800b382 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b36a:	2303      	movs	r3, #3
 800b36c:	73fb      	strb	r3, [r7, #15]
    break;
 800b36e:	e008      	b.n	800b382 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b370:	2301      	movs	r3, #1
 800b372:	73fb      	strb	r3, [r7, #15]
    break;
 800b374:	e005      	b.n	800b382 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b376:	2303      	movs	r3, #3
 800b378:	73fb      	strb	r3, [r7, #15]
    break;
 800b37a:	e002      	b.n	800b382 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	73fb      	strb	r3, [r7, #15]
    break;
 800b380:	bf00      	nop
  }
  return usb_status;
 800b382:	7bfb      	ldrb	r3, [r7, #15]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f7 fb99 	bl	8002ae2 <HAL_PCD_EP_SetStall>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	d816      	bhi.n	800b3e8 <USBD_LL_StallEP+0x5c>
 800b3ba:	a201      	add	r2, pc, #4	; (adr r2, 800b3c0 <USBD_LL_StallEP+0x34>)
 800b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3d7 	.word	0x0800b3d7
 800b3c8:	0800b3dd 	.word	0x0800b3dd
 800b3cc:	0800b3e3 	.word	0x0800b3e3
    case HAL_OK :
      usb_status = USBD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d4:	e00b      	b.n	800b3ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3da:	e008      	b.n	800b3ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e0:	e005      	b.n	800b3ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e6:	e002      	b.n	800b3ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ec:	bf00      	nop
  }
  return usb_status;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b412:	78fa      	ldrb	r2, [r7, #3]
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f7f7 fbc5 	bl	8002ba6 <HAL_PCD_EP_ClrStall>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	2b03      	cmp	r3, #3
 800b424:	d816      	bhi.n	800b454 <USBD_LL_ClearStallEP+0x5c>
 800b426:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <USBD_LL_ClearStallEP+0x34>)
 800b428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42c:	0800b43d 	.word	0x0800b43d
 800b430:	0800b443 	.word	0x0800b443
 800b434:	0800b449 	.word	0x0800b449
 800b438:	0800b44f 	.word	0x0800b44f
    case HAL_OK :
      usb_status = USBD_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
    break;
 800b440:	e00b      	b.n	800b45a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b442:	2303      	movs	r3, #3
 800b444:	73fb      	strb	r3, [r7, #15]
    break;
 800b446:	e008      	b.n	800b45a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b448:	2301      	movs	r3, #1
 800b44a:	73fb      	strb	r3, [r7, #15]
    break;
 800b44c:	e005      	b.n	800b45a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b44e:	2303      	movs	r3, #3
 800b450:	73fb      	strb	r3, [r7, #15]
    break;
 800b452:	e002      	b.n	800b45a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b454:	2303      	movs	r3, #3
 800b456:	73fb      	strb	r3, [r7, #15]
    break;
 800b458:	bf00      	nop
  }
  return usb_status;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da0b      	bge.n	800b498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	4613      	mov	r3, r2
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	1a9b      	subs	r3, r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	333e      	adds	r3, #62	; 0x3e
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	e00b      	b.n	800b4b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	440b      	add	r3, r1
 800b4aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4d6:	78fa      	ldrb	r2, [r7, #3]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f7 f997 	bl	800280e <HAL_PCD_SetAddress>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d816      	bhi.n	800b518 <USBD_LL_SetUSBAddress+0x5c>
 800b4ea:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <USBD_LL_SetUSBAddress+0x34>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b501 	.word	0x0800b501
 800b4f4:	0800b507 	.word	0x0800b507
 800b4f8:	0800b50d 	.word	0x0800b50d
 800b4fc:	0800b513 	.word	0x0800b513
    case HAL_OK :
      usb_status = USBD_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
    break;
 800b504:	e00b      	b.n	800b51e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b506:	2303      	movs	r3, #3
 800b508:	73fb      	strb	r3, [r7, #15]
    break;
 800b50a:	e008      	b.n	800b51e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]
    break;
 800b510:	e005      	b.n	800b51e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b512:	2303      	movs	r3, #3
 800b514:	73fb      	strb	r3, [r7, #15]
    break;
 800b516:	e002      	b.n	800b51e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	73fb      	strb	r3, [r7, #15]
    break;
 800b51c:	bf00      	nop
  }
  return usb_status;
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	607a      	str	r2, [r7, #4]
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	460b      	mov	r3, r1
 800b536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b538:	2300      	movs	r3, #0
 800b53a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b546:	7af9      	ldrb	r1, [r7, #11]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	f7f7 fa8c 	bl	8002a68 <HAL_PCD_EP_Transmit>
 800b550:	4603      	mov	r3, r0
 800b552:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b554:	7dbb      	ldrb	r3, [r7, #22]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d816      	bhi.n	800b588 <USBD_LL_Transmit+0x60>
 800b55a:	a201      	add	r2, pc, #4	; (adr r2, 800b560 <USBD_LL_Transmit+0x38>)
 800b55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b560:	0800b571 	.word	0x0800b571
 800b564:	0800b577 	.word	0x0800b577
 800b568:	0800b57d 	.word	0x0800b57d
 800b56c:	0800b583 	.word	0x0800b583
    case HAL_OK :
      usb_status = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	75fb      	strb	r3, [r7, #23]
    break;
 800b574:	e00b      	b.n	800b58e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b576:	2303      	movs	r3, #3
 800b578:	75fb      	strb	r3, [r7, #23]
    break;
 800b57a:	e008      	b.n	800b58e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b57c:	2301      	movs	r3, #1
 800b57e:	75fb      	strb	r3, [r7, #23]
    break;
 800b580:	e005      	b.n	800b58e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b582:	2303      	movs	r3, #3
 800b584:	75fb      	strb	r3, [r7, #23]
    break;
 800b586:	e002      	b.n	800b58e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	75fb      	strb	r3, [r7, #23]
    break;
 800b58c:	bf00      	nop
  }
  return usb_status;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5b6:	7af9      	ldrb	r1, [r7, #11]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	f7f7 f9fe 	bl	80029bc <HAL_PCD_EP_Receive>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b5c4:	7dbb      	ldrb	r3, [r7, #22]
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d816      	bhi.n	800b5f8 <USBD_LL_PrepareReceive+0x60>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <USBD_LL_PrepareReceive+0x38>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e1 	.word	0x0800b5e1
 800b5d4:	0800b5e7 	.word	0x0800b5e7
 800b5d8:	0800b5ed 	.word	0x0800b5ed
 800b5dc:	0800b5f3 	.word	0x0800b5f3
    case HAL_OK :
      usb_status = USBD_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	75fb      	strb	r3, [r7, #23]
    break;
 800b5e4:	e00b      	b.n	800b5fe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	75fb      	strb	r3, [r7, #23]
    break;
 800b5ea:	e008      	b.n	800b5fe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	75fb      	strb	r3, [r7, #23]
    break;
 800b5f0:	e005      	b.n	800b5fe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	75fb      	strb	r3, [r7, #23]
    break;
 800b5f6:	e002      	b.n	800b5fe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	75fb      	strb	r3, [r7, #23]
    break;
 800b5fc:	bf00      	nop
  }
  return usb_status;
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b61a:	78fa      	ldrb	r2, [r7, #3]
 800b61c:	4611      	mov	r1, r2
 800b61e:	4618      	mov	r0, r3
 800b620:	f7f7 fa0a 	bl	8002a38 <HAL_PCD_EP_GetRxCount>
 800b624:	4603      	mov	r3, r0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <HAL_PCDEx_LPM_Callback+0x18>
 800b642:	2b01      	cmp	r3, #1
 800b644:	d01f      	beq.n	800b686 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b646:	e03b      	b.n	800b6c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b650:	f000 f854 	bl	800b6fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b654:	4b1c      	ldr	r3, [pc, #112]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	4a1b      	ldr	r2, [pc, #108]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b65a:	f023 0306 	bic.w	r3, r3, #6
 800b65e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6812      	ldr	r2, [r2, #0]
 800b66e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b672:	f023 0301 	bic.w	r3, r3, #1
 800b676:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fb fd06 	bl	8007090 <USBD_LL_Resume>
    break;
 800b684:	e01c      	b.n	800b6c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b698:	f043 0301 	orr.w	r3, r3, #1
 800b69c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fb fcdd 	bl	8007064 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	4a04      	ldr	r2, [pc, #16]	; (800b6c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800b6b8:	f043 0306 	orr.w	r3, r3, #6
 800b6bc:	6113      	str	r3, [r2, #16]
    break;
 800b6be:	bf00      	nop
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed00 	.word	0xe000ed00

0800b6cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6d4:	4b03      	ldr	r3, [pc, #12]	; (800b6e4 <USBD_static_malloc+0x18>)
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20001ab0 	.word	0x20001ab0

0800b6e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]

}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b700:	f7f4 fe0c 	bl	800031c <SystemClock_Config>
}
 800b704:	bf00      	nop
 800b706:	bd80      	pop	{r7, pc}

0800b708 <__libc_init_array>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4d0d      	ldr	r5, [pc, #52]	; (800b740 <__libc_init_array+0x38>)
 800b70c:	4c0d      	ldr	r4, [pc, #52]	; (800b744 <__libc_init_array+0x3c>)
 800b70e:	1b64      	subs	r4, r4, r5
 800b710:	10a4      	asrs	r4, r4, #2
 800b712:	2600      	movs	r6, #0
 800b714:	42a6      	cmp	r6, r4
 800b716:	d109      	bne.n	800b72c <__libc_init_array+0x24>
 800b718:	4d0b      	ldr	r5, [pc, #44]	; (800b748 <__libc_init_array+0x40>)
 800b71a:	4c0c      	ldr	r4, [pc, #48]	; (800b74c <__libc_init_array+0x44>)
 800b71c:	f000 f82e 	bl	800b77c <_init>
 800b720:	1b64      	subs	r4, r4, r5
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	2600      	movs	r6, #0
 800b726:	42a6      	cmp	r6, r4
 800b728:	d105      	bne.n	800b736 <__libc_init_array+0x2e>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b730:	4798      	blx	r3
 800b732:	3601      	adds	r6, #1
 800b734:	e7ee      	b.n	800b714 <__libc_init_array+0xc>
 800b736:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73a:	4798      	blx	r3
 800b73c:	3601      	adds	r6, #1
 800b73e:	e7f2      	b.n	800b726 <__libc_init_array+0x1e>
 800b740:	0800b8c4 	.word	0x0800b8c4
 800b744:	0800b8c4 	.word	0x0800b8c4
 800b748:	0800b8c4 	.word	0x0800b8c4
 800b74c:	0800b8c8 	.word	0x0800b8c8

0800b750 <memcpy>:
 800b750:	440a      	add	r2, r1
 800b752:	4291      	cmp	r1, r2
 800b754:	f100 33ff 	add.w	r3, r0, #4294967295
 800b758:	d100      	bne.n	800b75c <memcpy+0xc>
 800b75a:	4770      	bx	lr
 800b75c:	b510      	push	{r4, lr}
 800b75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b762:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b766:	4291      	cmp	r1, r2
 800b768:	d1f9      	bne.n	800b75e <memcpy+0xe>
 800b76a:	bd10      	pop	{r4, pc}

0800b76c <memset>:
 800b76c:	4402      	add	r2, r0
 800b76e:	4603      	mov	r3, r0
 800b770:	4293      	cmp	r3, r2
 800b772:	d100      	bne.n	800b776 <memset+0xa>
 800b774:	4770      	bx	lr
 800b776:	f803 1b01 	strb.w	r1, [r3], #1
 800b77a:	e7f9      	b.n	800b770 <memset+0x4>

0800b77c <_init>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr

0800b788 <_fini>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr
