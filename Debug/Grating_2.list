
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b068  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b328  0800b328  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b328  0800b328  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b328  0800b328  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000361c  200001a0  0800b4d0  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037bc  0800b4d0  000237bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a743  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050fc  00000000  00000000  0004a913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0004fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  000515e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e19  00000000  00000000  00052fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8bc  00000000  00000000  00059dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd5f2  00000000  00000000  0007968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007404  00000000  00000000  00176cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1e0 	.word	0x0800b1e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800b1e0 	.word	0x0800b1e0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 ffd7 	bl	8001186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f866 	bl	80002a8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa98 	bl	8000710 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8ea 	bl	80003b8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80001e4:	f000 f9e4 	bl	80005b0 <MX_TIM5_Init>
  MX_TIM2_Init();
 80001e8:	f000 f938 	bl	800045c <MX_TIM2_Init>
  MX_TIM8_Init();
 80001ec:	f000 fa36 	bl	800065c <MX_TIM8_Init>
  MX_TIM3_Init();
 80001f0:	f000 f988 	bl	8000504 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80001f4:	213c      	movs	r1, #60	; 0x3c
 80001f6:	481c      	ldr	r0, [pc, #112]	; (8000268 <main+0x98>)
 80001f8:	f004 f89a 	bl	8004330 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2104      	movs	r1, #4
 8000200:	481a      	ldr	r0, [pc, #104]	; (800026c <main+0x9c>)
 8000202:	f001 fb2d 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <main+0xa0>)
 800020e:	f001 fb27 	bl	8001860 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000212:	4818      	ldr	r0, [pc, #96]	; (8000274 <main+0xa4>)
 8000214:	f003 ff76 	bl	8004104 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	4817      	ldr	r0, [pc, #92]	; (8000278 <main+0xa8>)
 800021a:	f003 ff73 	bl	8004104 <HAL_TIM_Base_Start_IT>

  TIM5->CNT=750000;
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <main+0xac>)
 8000220:	4a17      	ldr	r2, [pc, #92]	; (8000280 <main+0xb0>)
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT=750000;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	4a15      	ldr	r2, [pc, #84]	; (8000280 <main+0xb0>)
 800022a:	625a      	str	r2, [r3, #36]	; 0x24


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800022c:	f007 fbee 	bl	8007a0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <main+0xb4>)
 8000232:	2100      	movs	r1, #0
 8000234:	4814      	ldr	r0, [pc, #80]	; (8000288 <main+0xb8>)
 8000236:	f007 fc33 	bl	8007aa0 <osThreadNew>
 800023a:	4603      	mov	r3, r0
 800023c:	4a13      	ldr	r2, [pc, #76]	; (800028c <main+0xbc>)
 800023e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0xc0>)
 8000242:	2100      	movs	r1, #0
 8000244:	4813      	ldr	r0, [pc, #76]	; (8000294 <main+0xc4>)
 8000246:	f007 fc2b 	bl	8007aa0 <osThreadNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a12      	ldr	r2, [pc, #72]	; (8000298 <main+0xc8>)
 800024e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xcc>)
 8000252:	2100      	movs	r1, #0
 8000254:	4812      	ldr	r0, [pc, #72]	; (80002a0 <main+0xd0>)
 8000256:	f007 fc23 	bl	8007aa0 <osThreadNew>
 800025a:	4603      	mov	r3, r0
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <main+0xd4>)
 800025e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f007 fbf8 	bl	8007a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x94>
 8000266:	bf00      	nop
 8000268:	20001d34 	.word	0x20001d34
 800026c:	48000400 	.word	0x48000400
 8000270:	48001000 	.word	0x48001000
 8000274:	20001de8 	.word	0x20001de8
 8000278:	20001e40 	.word	0x20001e40
 800027c:	40000c00 	.word	0x40000c00
 8000280:	000b71b0 	.word	0x000b71b0
 8000284:	0800b27c 	.word	0x0800b27c
 8000288:	080009bd 	.word	0x080009bd
 800028c:	20001cd8 	.word	0x20001cd8
 8000290:	0800b2a0 	.word	0x0800b2a0
 8000294:	08000b41 	.word	0x08000b41
 8000298:	20001ddc 	.word	0x20001ddc
 800029c:	0800b2c4 	.word	0x0800b2c4
 80002a0:	08000c01 	.word	0x08000c01
 80002a4:	20001e3c 	.word	0x20001e3c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0b8      	sub	sp, #224	; 0xe0
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f00a ff8a 	bl	800b1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2288      	movs	r2, #136	; 0x88
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f00a ff7c 	bl	800b1d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d8:	2310      	movs	r3, #16
 80002da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ea:	2360      	movs	r3, #96	; 0x60
 80002ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000302:	2308      	movs	r3, #8
 8000304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000308:	2307      	movs	r3, #7
 800030a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800031e:	4618      	mov	r0, r3
 8000320:	f002 fc1c 	bl	8002b5c <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800032a:	f000 fc71 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f002 ffe8 	bl	8003328 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800035e:	f000 fc57 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000376:	2308      	movs	r3, #8
 8000378:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800037a:	2307      	movs	r3, #7
 800037c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800038a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038c:	463b      	mov	r3, r7
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f9a4 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800039a:	f000 fc39 	bl	8000c10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f002 fb75 	bl	8002a90 <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80003ac:	f000 fc30 	bl	8000c10 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	37e0      	adds	r7, #224	; 0xe0
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <MX_TIM1_Init+0xa0>)
 80003da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003de:	224f      	movs	r2, #79	; 0x4f
 80003e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003ea:	2231      	movs	r2, #49	; 0x31
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000400:	4814      	ldr	r0, [pc, #80]	; (8000454 <MX_TIM1_Init+0x9c>)
 8000402:	f003 fe27 	bl	8004054 <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800040c:	f000 fc00 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM1_Init+0x9c>)
 800041e:	f004 f934 	bl	800468a <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000428:	f000 fbf2 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_TIM1_Init+0x9c>)
 800043e:	f004 fb6d 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000448:	f000 fbe2 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20001de8 	.word	0x20001de8
 8000458:	40012c00 	.word	0x40012c00

0800045c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2224      	movs	r2, #36	; 0x24
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f00a feb0 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <MX_TIM2_Init+0xa4>)
 800047c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b1d      	ldr	r3, [pc, #116]	; (8000500 <MX_TIM2_Init+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33888;
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000490:	f248 4260 	movw	r2, #33888	; 0x8460
 8000494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_TIM2_Init+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_TIM2_Init+0xa4>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004a2:	2303      	movs	r3, #3
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004a6:	2300      	movs	r3, #0
 80004a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004b6:	2300      	movs	r3, #0
 80004b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004ba:	2301      	movs	r3, #1
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	4619      	mov	r1, r3
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <MX_TIM2_Init+0xa4>)
 80004ce:	f003 fe89 	bl	80041e4 <HAL_TIM_Encoder_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80004d8:	f000 fb9a 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_TIM2_Init+0xa4>)
 80004ea:	f004 fb17 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80004f4:	f000 fb8c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3730      	adds	r7, #48	; 0x30
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20001e40 	.word	0x20001e40

08000504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2224      	movs	r2, #36	; 0x24
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f00a fe5c 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <MX_TIM3_Init+0xa8>)
 8000526:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_TIM3_Init+0xa4>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM3_Init+0xa4>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000548:	2301      	movs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000560:	2301      	movs	r3, #1
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000574:	f003 fe36 	bl	80041e4 <HAL_TIM_Encoder_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800057e:	f000 fb47 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_TIM3_Init+0xa4>)
 8000590:	f004 fac4 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800059a:	f000 fb39 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20001d80 	.word	0x20001d80
 80005ac:	40000400 	.word	0x40000400

080005b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2224      	movs	r2, #36	; 0x24
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00a fe06 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <MX_TIM5_Init+0xa8>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005e2:	f248 4260 	movw	r2, #33888	; 0x8460
 80005e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_TIM5_Init+0xa4>)
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005f4:	2303      	movs	r3, #3
 80005f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005fc:	2301      	movs	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800060c:	2301      	movs	r3, #1
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_TIM5_Init+0xa4>)
 8000620:	f003 fde0 	bl	80041e4 <HAL_TIM_Encoder_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800062a:	f000 faf1 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_TIM5_Init+0xa4>)
 800063c:	f004 fa6e 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000646:	f000 fae3 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3730      	adds	r7, #48	; 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20001d34 	.word	0x20001d34
 8000658:	40000c00 	.word	0x40000c00

0800065c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2224      	movs	r2, #36	; 0x24
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00a fdb0 	bl	800b1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_TIM8_Init+0xac>)
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <MX_TIM8_Init+0xb0>)
 800067e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_TIM8_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_TIM8_Init+0xac>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_TIM8_Init+0xac>)
 800068e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000692:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_TIM8_Init+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM8_Init+0xac>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM8_Init+0xac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006be:	2301      	movs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_TIM8_Init+0xac>)
 80006d2:	f003 fd87 	bl	80041e4 <HAL_TIM_Encoder_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80006dc:	f000 fa98 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM8_Init+0xac>)
 80006f2:	f004 fa13 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80006fc:	f000 fa88 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20001ce0 	.word	0x20001ce0
 800070c:	40013400 	.word	0x40013400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b76      	ldr	r3, [pc, #472]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a75      	ldr	r2, [pc, #468]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b73      	ldr	r3, [pc, #460]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b70      	ldr	r3, [pc, #448]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a6f      	ldr	r2, [pc, #444]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b6d      	ldr	r3, [pc, #436]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a69      	ldr	r2, [pc, #420]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b67      	ldr	r3, [pc, #412]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b64      	ldr	r3, [pc, #400]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a63      	ldr	r2, [pc, #396]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b61      	ldr	r3, [pc, #388]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b5e      	ldr	r3, [pc, #376]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a5d      	ldr	r2, [pc, #372]	; (8000900 <MX_GPIO_Init+0x1f0>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b5b      	ldr	r3, [pc, #364]	; (8000900 <MX_GPIO_Init+0x1f0>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b58      	ldr	r3, [pc, #352]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a57      	ldr	r2, [pc, #348]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <MX_GPIO_Init+0x1f0>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XCLK_GPIO_Port, XCLK_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2104      	movs	r1, #4
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f001 f84f 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2104      	movs	r1, #4
 80007c6:	484f      	ldr	r0, [pc, #316]	; (8000904 <MX_GPIO_Init+0x1f4>)
 80007c8:	f001 f84a 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	484d      	ldr	r0, [pc, #308]	; (8000908 <MX_GPIO_Init+0x1f8>)
 80007d4:	f001 f844 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	484b      	ldr	r0, [pc, #300]	; (800090c <MX_GPIO_Init+0x1fc>)
 80007de:	f001 f83f 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 80007e2:	2304      	movs	r3, #4
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fe6e 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000800:	2308      	movs	r3, #8
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fe61 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : XDIR_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin;
 800081a:	2304      	movs	r3, #4
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XDIR_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4834      	ldr	r0, [pc, #208]	; (8000904 <MX_GPIO_Init+0x1f4>)
 8000832:	f000 fe53 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	482e      	ldr	r0, [pc, #184]	; (8000908 <MX_GPIO_Init+0x1f8>)
 8000850:	f000 fe44 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin Z_E11_Pin Y__Pin Y_E13_Pin */
  GPIO_InitStruct.Pin = Z__Pin|Z_E11_Pin|Y__Pin|Y_E13_Pin;
 8000854:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0x200>)
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4827      	ldr	r0, [pc, #156]	; (8000908 <MX_GPIO_Init+0x1f8>)
 800086a:	f000 fe37 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : X__Pin */
  GPIO_InitStruct.Pin = X__Pin;
 800086e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0x204>)
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X__GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x1f8>)
 8000884:	f000 fe2a 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : X_E15_Pin */
  GPIO_InitStruct.Pin = X_E15_Pin;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_E15_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	481a      	ldr	r0, [pc, #104]	; (8000908 <MX_GPIO_Init+0x1f8>)
 800089e:	f000 fe1d 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_GPIO_Init+0x1fc>)
 80008ba:	f000 fe0f 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <MX_GPIO_Init+0x1f4>)
 80008da:	f000 fdff 	bl	80014dc <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80008de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008e2:	f001 f807 	bl	80018f4 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f000 fdbf 	bl	800146e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 fdd8 	bl	80014a6 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400
 8000908:	48001000 	.word	0x48001000
 800090c:	48000c00 	.word	0x48000c00
 8000910:	10310000 	.word	0x10310000
 8000914:	10110000 	.word	0x10110000

08000918 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d115      	bne.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 8000936:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800093a:	461a      	mov	r2, r3
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800093e:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4413      	add	r3, r2
 8000952:	461a      	mov	r2, r3
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000956:	601a      	str	r2, [r3, #0]
	}

}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20001e40 	.word	0x20001e40
 8000968:	20001d34 	.word	0x20001d34
 800096c:	20001d2c 	.word	0x20001d2c
 8000970:	200001bc 	.word	0x200001bc
 8000974:	20001de0 	.word	0x20001de0

08000978 <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	  for (int i=0;i<=31;i++)
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e00c      	b.n	80009a2 <CDC_ReceiveCallback+0x2a>
	  {
		 rxbuf[i]=buf[i];
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b259      	sxtb	r1, r3
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <CDC_ReceiveCallback+0x40>)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	460a      	mov	r2, r1
 800099a:	701a      	strb	r2, [r3, #0]
	  for (int i=0;i<=31;i++)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b1f      	cmp	r3, #31
 80009a6:	ddef      	ble.n	8000988 <CDC_ReceiveCallback+0x10>
	  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20001cb8 	.word	0x20001cb8

080009bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009c4:	f009 fd72 	bl	800a4ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	484e      	ldr	r0, [pc, #312]	; (8000b08 <StartDefaultTask+0x14c>)
 80009ce:	f000 ff2f 	bl	8001830 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d103      	bne.n	80009e0 <StartDefaultTask+0x24>
		  	  Xpos=0;
 80009d8:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <StartDefaultTask+0x150>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e002      	b.n	80009e6 <StartDefaultTask+0x2a>
	 	  }
	 	  else {
	 		  Xpos=1;
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <StartDefaultTask+0x150>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_RESET){
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4847      	ldr	r0, [pc, #284]	; (8000b08 <StartDefaultTask+0x14c>)
 80009ec:	f000 ff20 	bl	8001830 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <StartDefaultTask+0x42>
	 		  Xneg=0;
 80009f6:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <StartDefaultTask+0x154>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e002      	b.n	8000a04 <StartDefaultTask+0x48>
	 	  }
	 	  else  {
	 		  Xneg=1;
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <StartDefaultTask+0x154>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
	 	  }
		  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	483f      	ldr	r0, [pc, #252]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a0a:	f000 ff11 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d103      	bne.n	8000a1c <StartDefaultTask+0x60>
			  Ypos=0;
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <StartDefaultTask+0x158>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e002      	b.n	8000a22 <StartDefaultTask+0x66>
		 	  }
		 	  else {
		 	 Ypos=1;
 8000a1c:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <StartDefaultTask+0x158>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
		 	  }
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a28:	f000 ff02 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d103      	bne.n	8000a3a <StartDefaultTask+0x7e>
		 	 Yneg=0;
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <StartDefaultTask+0x15c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e002      	b.n	8000a40 <StartDefaultTask+0x84>
		 	  }
		 	  else  {
		 	 Yneg=1;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <StartDefaultTask+0x15c>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
		 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	4830      	ldr	r0, [pc, #192]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a46:	f000 fef3 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <StartDefaultTask+0x9c>
		  	 Zpos=0;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <StartDefaultTask+0x160>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e002      	b.n	8000a5e <StartDefaultTask+0xa2>
	 	  }
	 	  else {
	 		 Zpos=1;
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <StartDefaultTask+0x160>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4829      	ldr	r0, [pc, #164]	; (8000b08 <StartDefaultTask+0x14c>)
 8000a64:	f000 fee4 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <StartDefaultTask+0xba>
		  	  Zneg=0;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <StartDefaultTask+0x164>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e002      	b.n	8000a7c <StartDefaultTask+0xc0>
	 	  }
	 	  else  {
	 		 Zneg=1;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <StartDefaultTask+0x164>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
	 	  }


	 	  if(highMode>1) {
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <StartDefaultTask+0x168>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	dd0f      	ble.n	8000aa4 <StartDefaultTask+0xe8>
		 	    xSpeed = 250U;
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <StartDefaultTask+0x16c>)
 8000a86:	22fa      	movs	r2, #250	; 0xfa
 8000a88:	701a      	strb	r2, [r3, #0]
		       ySpeed = 250U;
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <StartDefaultTask+0x170>)
 8000a8c:	22fa      	movs	r2, #250	; 0xfa
 8000a8e:	701a      	strb	r2, [r3, #0]
		       xSen = 2U;
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <StartDefaultTask+0x174>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
		       ySen = 2U;
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <StartDefaultTask+0x178>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	701a      	strb	r2, [r3, #0]
		       highMode = 1;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <StartDefaultTask+0x168>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e012      	b.n	8000aca <StartDefaultTask+0x10e>
	 	  }else if (highMode < 1) {
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <StartDefaultTask+0x168>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dc0e      	bgt.n	8000aca <StartDefaultTask+0x10e>


	 	    xSpeed = 50U;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <StartDefaultTask+0x16c>)
 8000aae:	2232      	movs	r2, #50	; 0x32
 8000ab0:	701a      	strb	r2, [r3, #0]
	 	    ySpeed = 50U;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <StartDefaultTask+0x170>)
 8000ab4:	2232      	movs	r2, #50	; 0x32
 8000ab6:	701a      	strb	r2, [r3, #0]
	 	    xSen = 10U;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <StartDefaultTask+0x174>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	701a      	strb	r2, [r3, #0]
	 	    ySen = 10U;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <StartDefaultTask+0x178>)
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	701a      	strb	r2, [r3, #0]
	 	    highMode = 1;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <StartDefaultTask+0x168>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000aca:	2108      	movs	r1, #8
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f000 feae 	bl	8001830 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <StartDefaultTask+0x128>
	 	      {
	 	  	    xPul = -(xSen);
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <StartDefaultTask+0x174>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	425b      	negs	r3, r3
 8000ae0:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <StartDefaultTask+0x17c>)
 8000ae2:	6013      	str	r3, [r2, #0]
	 	      }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	      {
//	 	        xPul = (xSen);
//	 	      }
	 	  if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f000 fea1 	bl	8001830 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d104      	bne.n	8000afe <StartDefaultTask+0x142>
	 	  {
	 		  yPul = ySen;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <StartDefaultTask+0x178>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <StartDefaultTask+0x180>)
 8000afc:	601a      	str	r2, [r3, #0]
	 	  }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	  {
//	 		  yPul = -ySen;
//	 	  }
    osDelay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f007 f860 	bl	8007bc4 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000b04:	e760      	b.n	80009c8 <StartDefaultTask+0xc>
 8000b06:	bf00      	nop
 8000b08:	48001000 	.word	0x48001000
 8000b0c:	20001e34 	.word	0x20001e34
 8000b10:	20001dd0 	.word	0x20001dd0
 8000b14:	20001d30 	.word	0x20001d30
 8000b18:	20001dd8 	.word	0x20001dd8
 8000b1c:	20001e8c 	.word	0x20001e8c
 8000b20:	20001cdc 	.word	0x20001cdc
 8000b24:	200001c0 	.word	0x200001c0
 8000b28:	20001e94 	.word	0x20001e94
 8000b2c:	20001e9c 	.word	0x20001e9c
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000001 	.word	0x20000001
 8000b38:	20001e90 	.word	0x20001e90
 8000b3c:	20001e98 	.word	0x20001e98

08000b40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int rec_state=0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
	  int8_t opbuff[8];
	  opbuff[0]=0x22;
 8000b4c:	2322      	movs	r3, #34	; 0x22
 8000b4e:	733b      	strb	r3, [r7, #12]
//	  }

  /* Infinite loop */
  for(;;)
  {
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <StartTask02+0xac>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <StartTask02+0xb0>)
 8000b5a:	601a      	str	r2, [r3, #0]
	  tim5Cnt=__HAL_TIM_GET_COUNTER(&htim5);
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <StartTask02+0xb4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <StartTask02+0xb8>)
 8000b66:	601a      	str	r2, [r3, #0]
	  size_t i = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
	  read=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
	  control=0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]

	  while (i < 32)
 8000b74:	e032      	b.n	8000bdc <StartTask02+0x9c>
	  {
		  uint8_t ch = rxbuf[i];
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <StartTask02+0xbc>)
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d826      	bhi.n	8000bd6 <StartTask02+0x96>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <StartTask02+0x50>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000bb1 	.word	0x08000bb1
 8000b98:	08000bd7 	.word	0x08000bd7
 8000b9c:	08000bd7 	.word	0x08000bd7
 8000ba0:	08000bd7 	.word	0x08000bd7
		  switch (rec_state)
		  {
		  case START:
			  if (ch==0x22)
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b22      	cmp	r3, #34	; 0x22
 8000ba8:	d112      	bne.n	8000bd0 <StartTask02+0x90>
			  {
				  rec_state=CMD;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  break;
 8000bae:	e00f      	b.n	8000bd0 <StartTask02+0x90>
		  case CMD:
			  if (ch==0x30)
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	2b30      	cmp	r3, #48	; 0x30
 8000bb4:	d104      	bne.n	8000bc0 <StartTask02+0x80>
			  {
				  rec_state=ADDRESS;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
				  read=1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
			  else if (ch==0x66)
			  {
				  rec_state=ADDRESS;
				  control=1;
			  }
			  break;
 8000bbe:	e009      	b.n	8000bd4 <StartTask02+0x94>
			  else if (ch==0x66)
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	2b66      	cmp	r3, #102	; 0x66
 8000bc4:	d106      	bne.n	8000bd4 <StartTask02+0x94>
				  rec_state=ADDRESS;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
				  control=1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
			  break;
 8000bce:	e001      	b.n	8000bd4 <StartTask02+0x94>
			  break;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <StartTask02+0x96>
			  break;
 8000bd4:	bf00      	nop
		  case DATA:
			  break;
		  case CRC:
			  break;
		  }
	  i++;
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
	  while (i < 32)
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	2b1f      	cmp	r3, #31
 8000be0:	d9c9      	bls.n	8000b76 <StartTask02+0x36>
	  }


    osDelay(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f006 ffee 	bl	8007bc4 <osDelay>
  {
 8000be8:	e7b2      	b.n	8000b50 <StartTask02+0x10>
 8000bea:	bf00      	nop
 8000bec:	20001e40 	.word	0x20001e40
 8000bf0:	20001dcc 	.word	0x20001dcc
 8000bf4:	20001d34 	.word	0x20001d34
 8000bf8:	20001e38 	.word	0x20001e38
 8000bfc:	20001cb8 	.word	0x20001cb8

08000c00 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f006 ffdb 	bl	8007bc4 <osDelay>
 8000c0e:	e7fb      	b.n	8000c08 <StartTask03+0x8>

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6593      	str	r3, [r2, #88]	; 0x58
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	210f      	movs	r1, #15
 8000c56:	f06f 0001 	mvn.w	r0, #1
 8000c5a:	f000 fc08 	bl	800146e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <HAL_TIM_Base_MspInit+0x64>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d123      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_TIM_Base_MspInit+0x68>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_TIM_Base_MspInit+0x68>)
 8000c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c88:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_TIM_Base_MspInit+0x68>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2018      	movs	r0, #24
 8000c9c:	f000 fbe7 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ca0:	2018      	movs	r0, #24
 8000ca2:	f000 fc00 	bl	80014a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 fbdf 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cb0:	2019      	movs	r0, #25
 8000cb2:	f000 fbf8 	bl	80014a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2105      	movs	r1, #5
 8000cba:	201a      	movs	r0, #26
 8000cbc:	f000 fbd7 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000cc0:	201a      	movs	r0, #26
 8000cc2:	f000 fbf0 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012c00 	.word	0x40012c00
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b090      	sub	sp, #64	; 0x40
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d14d      	bne.n	8000d96 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b6e      	ldr	r3, [pc, #440]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a6d      	ldr	r2, [pc, #436]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a67      	ldr	r2, [pc, #412]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b65      	ldr	r3, [pc, #404]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
 8000d40:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d42:	2320      	movs	r3, #32
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d52:	2301      	movs	r3, #1
 8000d54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fbbc 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d64:	2308      	movs	r3, #8
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d74:	2301      	movs	r3, #1
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	484e      	ldr	r0, [pc, #312]	; (8000eb8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8000d80:	f000 fbac 	bl	80014dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2105      	movs	r1, #5
 8000d88:	201c      	movs	r0, #28
 8000d8a:	f000 fb70 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fb89 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d94:	e089      	b.n	8000eaa <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <HAL_TIM_Encoder_MspInit+0x1e4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d128      	bne.n	8000df2 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da0:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	4a43      	ldr	r2, [pc, #268]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6593      	str	r3, [r2, #88]	; 0x58
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db8:	4b3e      	ldr	r3, [pc, #248]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000dbe:	f043 0310 	orr.w	r3, r3, #16
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000dd0:	2318      	movs	r3, #24
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000de0:	2302      	movs	r3, #2
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4835      	ldr	r0, [pc, #212]	; (8000ec0 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8000dec:	f000 fb76 	bl	80014dc <HAL_GPIO_Init>
}
 8000df0:	e05b      	b.n	8000eaa <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM5)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a33      	ldr	r2, [pc, #204]	; (8000ec4 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d129      	bne.n	8000e50 <HAL_TIM_Encoder_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e00:	4a2c      	ldr	r2, [pc, #176]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6593      	str	r3, [r2, #88]	; 0x58
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f000 fb47 	bl	80014dc <HAL_GPIO_Init>
}
 8000e4e:	e02c      	b.n	8000eaa <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM8)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d127      	bne.n	8000eaa <HAL_TIM_Encoder_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_TIM_Encoder_MspInit+0x1f4>)
 8000ea6:	f000 fb19 	bl	80014dc <HAL_GPIO_Init>
}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	; 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	48001000 	.word	0x48001000
 8000ec4:	40000c00 	.word	0x40000c00
 8000ec8:	40013400 	.word	0x40013400
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f996 	bl	8001230 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f04:	f008 fa6c 	bl	80093e0 <xTaskGetSchedulerState>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f0e:	f009 f853 	bl	8009fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f1e:	f003 fa95 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20001de8 	.word	0x20001de8

08000f2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	483c      	ldr	r0, [pc, #240]	; (8001024 <TIM1_UP_TIM16_IRQHandler+0xf8>)
 8000f32:	f003 fa8b 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
    static int xcnt = 0;
      static int ycnt = 0;

      if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d930      	bls.n	8000fa0 <TIM1_UP_TIM16_IRQHandler+0x74>
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a39      	ldr	r2, [pc, #228]	; (8001028 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4a:	fb02 f201 	mul.w	r2, r2, r1
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d125      	bne.n	8000fa0 <TIM1_UP_TIM16_IRQHandler+0x74>
    	  if(xPul!=0) {
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d021      	beq.n	8000fa0 <TIM1_UP_TIM16_IRQHandler+0x74>
    	    if(xPul>0) {
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dd0a      	ble.n	8000f7a <TIM1_UP_TIM16_IRQHandler+0x4e>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	4832      	ldr	r0, [pc, #200]	; (8001034 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000f6a:	f000 fc79 	bl	8001860 <HAL_GPIO_WritePin>
            xPul--;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4a2e      	ldr	r2, [pc, #184]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e00d      	b.n	8000f96 <TIM1_UP_TIM16_IRQHandler+0x6a>
          }
    	    else if(xPul<0) {
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da09      	bge.n	8000f96 <TIM1_UP_TIM16_IRQHandler+0x6a>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2104      	movs	r1, #4
 8000f86:	482b      	ldr	r0, [pc, #172]	; (8001034 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000f88:	f000 fc6a 	bl	8001860 <HAL_GPIO_WritePin>
            xPul++;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a27      	ldr	r2, [pc, #156]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000f94:	6013      	str	r3, [r2, #0]
          }
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
    	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 8000f96:	2104      	movs	r1, #4
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f000 fc78 	bl	8001890 <HAL_GPIO_TogglePin>
    	  }
    	  else {
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
    	  }
      }
      xcnt++;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000fa8:	6013      	str	r3, [r2, #0]
      if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d931      	bls.n	8001016 <TIM1_UP_TIM16_IRQHandler+0xea>
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a20      	ldr	r2, [pc, #128]	; (8001038 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fbe:	fb02 f201 	mul.w	r2, r2, r1
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d126      	bne.n	8001016 <TIM1_UP_TIM16_IRQHandler+0xea>
     	  if(yPul!=0) {
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d022      	beq.n	8001016 <TIM1_UP_TIM16_IRQHandler+0xea>
     	    if(yPul>0) {
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dd0b      	ble.n	8000ff0 <TIM1_UP_TIM16_IRQHandler+0xc4>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <TIM1_UP_TIM16_IRQHandler+0x118>)
 8000fe0:	f000 fc3e 	bl	8001860 <HAL_GPIO_WritePin>
     	      yPul--;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00e      	b.n	800100e <TIM1_UP_TIM16_IRQHandler+0xe2>
     	    }else if(yPul<0) {
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da0a      	bge.n	800100e <TIM1_UP_TIM16_IRQHandler+0xe2>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <TIM1_UP_TIM16_IRQHandler+0x118>)
 8001000:	f000 fc2e 	bl	8001860 <HAL_GPIO_WritePin>
     	      yPul++;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <TIM1_UP_TIM16_IRQHandler+0x114>)
 800100c:	6013      	str	r3, [r2, #0]
     	    }
     	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
     		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 800100e:	2101      	movs	r1, #1
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <TIM1_UP_TIM16_IRQHandler+0x11c>)
 8001012:	f000 fc3d 	bl	8001890 <HAL_GPIO_TogglePin>
     	  }else {
     	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
     	  }
       }
       ycnt++;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <TIM1_UP_TIM16_IRQHandler+0x110>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <TIM1_UP_TIM16_IRQHandler+0x110>)
 800101e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001de8 	.word	0x20001de8
 8001028:	20001e94 	.word	0x20001e94
 800102c:	200001c4 	.word	0x200001c4
 8001030:	20001e90 	.word	0x20001e90
 8001034:	48000400 	.word	0x48000400
 8001038:	20001e9c 	.word	0x20001e9c
 800103c:	200001c8 	.word	0x200001c8
 8001040:	20001e98 	.word	0x20001e98
 8001044:	48001000 	.word	0x48001000
 8001048:	48000c00 	.word	0x48000c00

0800104c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001052:	f003 f9fb 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20001de8 	.word	0x20001de8

08001060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM2_IRQHandler+0x10>)
 8001066:	f003 f9f1 	bl	800444c <HAL_TIM_IRQHandler>
//   	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
//   	  }
//     }
//     ycnt++;
  /* USER CODE END TIM2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20001e40 	.word	0x20001e40

08001074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001078:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800107c:	f000 fc22 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001080:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001084:	f000 fc1e 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001088:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800108c:	f000 fc1a 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001090:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001094:	f000 fc16 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001098:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800109c:	f000 fc12 	bl	80018c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <OTG_FS_IRQHandler+0x10>)
 80010aa:	f000 fd96 	bl	8001bda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200033b4 	.word	0x200033b4

080010b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <SystemInit+0x5c>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <SystemInit+0x5c>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SystemInit+0x60>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <SystemInit+0x60>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <SystemInit+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SystemInit+0x60>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <SystemInit+0x60>)
 80010fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001100:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001104:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SystemInit+0x60>)
 8001108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SystemInit+0x60>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <SystemInit+0x60>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SystemInit+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	40021000 	.word	0x40021000

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff ffca 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f00a f803 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff f833 	bl	80001d0 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800116c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001170:	0800b330 	.word	0x0800b330
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	200001a0 	.word	0x200001a0
	ldr	r2, =_sbss
 800117c:	200001a0 	.word	0x200001a0
	ldr	r3, = _ebss
 8001180:	200037bc 	.word	0x200037bc

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>

08001186 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 f961 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f80e 	bl	80011b8 <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e001      	b.n	80011ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a8:	f7ff fd38 	bl	8000c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_InitTick+0x6c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d023      	beq.n	8001214 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_InitTick+0x70>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f96d 	bl	80014c2 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d809      	bhi.n	8001208 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f937 	bl	800146e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0x74>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e007      	b.n	8001218 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e004      	b.n	8001218 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	e001      	b.n	8001218 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20000004 	.word	0x20000004
 800122c:	20000008 	.word	0x20000008

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20001ea0 	.word	0x20001ea0

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20001ea0 	.word	0x20001ea0

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff8e 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff29 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff3e 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff8e 	bl	80013ac <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5d 	bl	8001358 <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff31 	bl	800131c <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e17f      	b.n	80017ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8171 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d00b      	beq.n	8001524 <HAL_GPIO_Init+0x48>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001518:	2b11      	cmp	r3, #17
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d130      	bne.n	8001586 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155a:	2201      	movs	r2, #1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f003 0201 	and.w	r2, r3, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b03      	cmp	r3, #3
 8001590:	d118      	bne.n	80015c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x128>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b12      	cmp	r3, #18
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80ac 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_GPIO_Init+0x330>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_GPIO_Init+0x330>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_GPIO_Init+0x330>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_GPIO_Init+0x334>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x242>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x338>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x23e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_GPIO_Init+0x33c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x23a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_GPIO_Init+0x340>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x236>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_GPIO_Init+0x344>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x232>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4b      	ldr	r2, [pc, #300]	; (8001824 <HAL_GPIO_Init+0x348>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x22e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <HAL_GPIO_Init+0x34c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x22a>
 8001702:	2306      	movs	r3, #6
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001706:	2307      	movs	r3, #7
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171e:	2300      	movs	r3, #0
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_GPIO_Init+0x334>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_GPIO_Init+0x350>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001762:	4a32      	ldr	r2, [pc, #200]	; (800182c <HAL_GPIO_Init+0x350>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_GPIO_Init+0x350>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_GPIO_Init+0x350>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_GPIO_Init+0x350>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_GPIO_Init+0x350>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_GPIO_Init+0x350>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_GPIO_Init+0x350>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae78 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	48000400 	.word	0x48000400
 8001818:	48000800 	.word	0x48000800
 800181c:	48000c00 	.word	0x48000c00
 8001820:	48001000 	.word	0x48001000
 8001824:	48001400 	.word	0x48001400
 8001828:	48001800 	.word	0x48001800
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800187c:	e002      	b.n	8001884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43d9      	mvns	r1, r3
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	400b      	ands	r3, r1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fbe8 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6613      	str	r3, [r2, #96]	; 0x60
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4905      	ldr	r1, [pc, #20]	; (8001930 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000

08001934 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b08f      	sub	sp, #60	; 0x3c
 8001938:	af0a      	add	r7, sp, #40	; 0x28
 800193a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e116      	b.n	8001b74 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d106      	bne.n	8001966 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f008 ffeb 	bl	800a93c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 fa48 	bl	8004e1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	687e      	ldr	r6, [r7, #4]
 8001992:	466d      	mov	r5, sp
 8001994:	f106 0410 	add.w	r4, r6, #16
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a8:	1d33      	adds	r3, r6, #4
 80019aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f003 f95b 	bl	8004c68 <USB_CoreInit>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d7      	b.n	8001b74 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fa36 	bl	8004e3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e04a      	b.n	8001a6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	333d      	adds	r3, #61	; 0x3d
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	333c      	adds	r3, #60	; 0x3c
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	b298      	uxth	r0, r3
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3342      	adds	r3, #66	; 0x42
 8001a12:	4602      	mov	r2, r0
 8001a14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	333f      	adds	r3, #63	; 0x3f
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3344      	adds	r3, #68	; 0x44
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3350      	adds	r3, #80	; 0x50
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d3af      	bcc.n	80019d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e044      	b.n	8001b06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	3301      	adds	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3b5      	bcc.n	8001a7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	687e      	ldr	r6, [r7, #4]
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f106 0410 	add.w	r4, r6, #16
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b2e:	1d33      	adds	r3, r6, #4
 8001b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f003 f9ac 	bl	8004e90 <USB_DevInit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e014      	b.n	8001b74 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 ff62 	bl	8002a2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 f92e 	bl	8005dce <USB_DevDisconnect>

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_Start+0x1c>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e01c      	b.n	8001bd2 <HAL_PCD_Start+0x56>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 f91d 	bl	8004df8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 f8e2 	bl	8005d8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bda:	b590      	push	{r4, r7, lr}
 8001bdc:	b08d      	sub	sp, #52	; 0x34
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 f9a0 	bl	8005f36 <USB_GetMode>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 838f 	bne.w	800231c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 f904 	bl	8005e10 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8385 	beq.w	800231a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 f8fb 	bl	8005e10 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d107      	bne.n	8001c34 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f002 0202 	and.w	r2, r2, #2
 8001c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 f8e9 	bl	8005e10 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d161      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0210 	bic.w	r2, r2, #16
 8001c56:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	0c5b      	lsrs	r3, r3, #17
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d124      	bne.n	8001cce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d035      	beq.n	8001cfc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6a38      	ldr	r0, [r7, #32]
 8001ca4:	f003 ff4f 	bl	8005b46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb4:	441a      	add	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cc6:	441a      	add	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	619a      	str	r2, [r3, #24]
 8001ccc:	e016      	b.n	8001cfc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	0c5b      	lsrs	r3, r3, #17
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d110      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6a38      	ldr	r0, [r7, #32]
 8001ce6:	f003 ff2e 	bl	8005b46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf6:	441a      	add	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0210 	orr.w	r2, r2, #16
 8001d0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f87d 	bl	8005e10 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d20:	d16e      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 f883 	bl	8005e36 <USB_ReadDevAllOutEpInterrupt>
 8001d30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d32:	e062      	b.n	8001dfa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d057      	beq.n	8001dee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 f8a8 	bl	8005e9e <USB_ReadDevOutEPInterrupt>
 8001d4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d66:	461a      	mov	r2, r3
 8001d68:	2301      	movs	r3, #1
 8001d6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fd82 	bl	8002878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fdbe 	bl	8002914 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dae:	461a      	mov	r2, r3
 8001db0:	2310      	movs	r3, #16
 8001db2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2320      	movs	r3, #32
 8001dce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de6:	461a      	mov	r2, r3
 8001de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	3301      	adds	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d199      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 f803 	bl	8005e10 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e14:	f040 8087 	bne.w	8001f26 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f824 	bl	8005e6a <USB_ReadDevAllInEpInterrupt>
 8001e22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e28:	e07a      	b.n	8001f20 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d06f      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f84b 	bl	8005eda <USB_ReadDevInEPInterrupt>
 8001e44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	2201      	movs	r2, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69f9      	ldr	r1, [r7, #28]
 8001e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e70:	4013      	ands	r3, r2
 8001e72:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e80:	461a      	mov	r2, r3
 8001e82:	2301      	movs	r3, #1
 8001e84:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f008 fde8 	bl	800aa62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2308      	movs	r3, #8
 8001eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efc:	461a      	mov	r2, r3
 8001efe:	2302      	movs	r3, #2
 8001f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fc29 	bl	8002766 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	3301      	adds	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d181      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ff70 	bl	8005e10 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f3a:	d122      	bne.n	8001f82 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d108      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f62:	2100      	movs	r1, #0
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f009 f895 	bl	800b094 <HAL_PCDEx_LPM_Callback>
 8001f6a:	e002      	b.n	8001f72 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f008 fde5 	bl	800ab3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 ff42 	bl	8005e10 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f96:	d112      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f008 fda1 	bl	800aaf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ff24 	bl	8005e10 <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd2:	d121      	bne.n	8002018 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001fe2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d111      	bne.n	8002012 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002008:	2101      	movs	r1, #1
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f009 f842 	bl	800b094 <HAL_PCDEx_LPM_Callback>
 8002010:	e002      	b.n	8002018 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f008 fd6c 	bl	800aaf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fef7 	bl	8005e10 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202c:	f040 80c5 	bne.w	80021ba <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2110      	movs	r1, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f86c 	bl	8005128 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002054:	e056      	b.n	8002104 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002062:	461a      	mov	r2, r3
 8002064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002068:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800207a:	0151      	lsls	r1, r2, #5
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	440a      	add	r2, r1
 8002080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002088:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209a:	0151      	lsls	r1, r2, #5
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	440a      	add	r2, r1
 80020a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ce:	0151      	lsls	r1, r2, #5
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	440a      	add	r2, r1
 80020d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ee:	0151      	lsls	r1, r2, #5
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	440a      	add	r2, r1
 80020f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	3301      	adds	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210a:	429a      	cmp	r2, r3
 800210c:	d3a3      	bcc.n	8002056 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002120:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	2b00      	cmp	r3, #0
 8002128:	d016      	beq.n	8002158 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213a:	f043 030b 	orr.w	r3, r3, #11
 800213e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002150:	f043 030b 	orr.w	r3, r3, #11
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	e015      	b.n	8002184 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800216a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800216e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f043 030b 	orr.w	r3, r3, #11
 8002182:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002196:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f003 fef7 	bl	8005f98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fe26 	bl	8005e10 <USB_ReadInterrupts>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ce:	d124      	bne.n	800221a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 febc 	bl	8005f52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f803 	bl	80051ea <USB_GetDevSpeed>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681c      	ldr	r4, [r3, #0]
 80021f0:	f001 fa08 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 80021f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	4620      	mov	r0, r4
 8002200:	f002 fd5e 	bl	8004cc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f008 fc54 	bl	800aab2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fdf6 	bl	8005e10 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d10a      	bne.n	8002244 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f008 fc31 	bl	800aa96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f002 0208 	and.w	r2, r2, #8
 8002242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 fde1 	bl	8005e10 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002258:	d10f      	bne.n	800227a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f008 fca3 	bl	800abb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fdc6 	bl	8005e10 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800228e:	d10f      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	b2db      	uxtb	r3, r3
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f008 fc76 	bl	800ab8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fdab 	bl	8005e10 <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d10a      	bne.n	80022dc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f008 fc84 	bl	800abd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fd95 	bl	8005e10 <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d115      	bne.n	800231c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f008 fc74 	bl	800abf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e000      	b.n	800231c <HAL_PCD_IRQHandler+0x742>
      return;
 800231a:	bf00      	nop
    }
  }
}
 800231c:	3734      	adds	r7, #52	; 0x34
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_PCD_SetAddress+0x1a>
 8002338:	2302      	movs	r3, #2
 800233a:	e013      	b.n	8002364 <HAL_PCD_SetAddress+0x42>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fcf3 	bl	8005d40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	70fb      	strb	r3, [r7, #3]
 800237e:	460b      	mov	r3, r1
 8002380:	803b      	strh	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0f      	bge.n	80023b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3338      	adds	r3, #56	; 0x38
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	705a      	strb	r2, [r3, #1]
 80023b0:	e00f      	b.n	80023d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023de:	883a      	ldrh	r2, [r7, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	78ba      	ldrb	r2, [r7, #2]
 80023e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023fc:	78bb      	ldrb	r3, [r7, #2]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d102      	bne.n	8002408 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_EP_Open+0xaa>
 8002412:	2302      	movs	r3, #2
 8002414:	e00e      	b.n	8002434 <HAL_PCD_EP_Open+0xc8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 feff 	bl	8005228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002432:	7afb      	ldrb	r3, [r7, #11]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da0f      	bge.n	8002470 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3338      	adds	r3, #56	; 0x38
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	3304      	adds	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	705a      	strb	r2, [r3, #1]
 800246e:	e00f      	b.n	8002490 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 020f 	and.w	r2, r3, #15
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_PCD_EP_Close+0x6e>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e00e      	b.n	80024c8 <HAL_PCD_EP_Close+0x8c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 ff3d 	bl	8005338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	460b      	mov	r3, r1
 80024de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f9ba 	bl	80058a8 <USB_EP0StartXfer>
 8002534:	e005      	b.n	8002542 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	4618      	mov	r0, r3
 800253e:	f002 ffd7 	bl	80054f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	3338      	adds	r3, #56	; 0x38
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2201      	movs	r2, #1
 80025ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 f965 	bl	80058a8 <USB_EP0StartXfer>
 80025de:	e005      	b.n	80025ec <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 ff82 	bl	80054f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d901      	bls.n	8002614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04e      	b.n	80026b2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da0f      	bge.n	800263c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	3338      	adds	r3, #56	; 0x38
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	3304      	adds	r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	705a      	strb	r2, [r3, #1]
 800263a:	e00d      	b.n	8002658 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_PCD_EP_SetStall+0x82>
 8002674:	2302      	movs	r3, #2
 8002676:	e01c      	b.n	80026b2 <HAL_PCD_EP_SetStall+0xbc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fa86 	bl	8005b98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f003 fc78 	bl	8005f98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d901      	bls.n	80026d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e042      	b.n	800275e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da0f      	bge.n	8002700 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	3338      	adds	r3, #56	; 0x38
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	705a      	strb	r2, [r3, #1]
 80026fe:	e00f      	b.n	8002720 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_PCD_EP_ClrStall+0x86>
 800273c:	2302      	movs	r3, #2
 800273e:	e00e      	b.n	800275e <HAL_PCD_EP_ClrStall+0xa4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fa90 	bl	8005c74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b088      	sub	sp, #32
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	3338      	adds	r3, #56	; 0x38
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	3304      	adds	r3, #4
 800278c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	429a      	cmp	r2, r3
 8002798:	d901      	bls.n	800279e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e067      	b.n	800286e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d902      	bls.n	80027ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3303      	adds	r3, #3
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027c2:	e026      	b.n	8002812 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d902      	bls.n	80027e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3303      	adds	r3, #3
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68d9      	ldr	r1, [r3, #12]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f003 f975 	bl	8005ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	441a      	add	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	441a      	add	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	b29b      	uxth	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	429a      	cmp	r2, r3
 8002826:	d809      	bhi.n	800283c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002830:	429a      	cmp	r2, r3
 8002832:	d203      	bcs.n	800283c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1c3      	bne.n	80027c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	429a      	cmp	r2, r3
 8002846:	d811      	bhi.n	800286c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	43db      	mvns	r3, r3
 8002862:	6939      	ldr	r1, [r7, #16]
 8002864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002868:	4013      	ands	r3, r2
 800286a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	333c      	adds	r3, #60	; 0x3c
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <PCD_EP_OutXfrComplete_int+0x98>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d124      	bne.n	80028f8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ca:	6093      	str	r3, [r2, #8]
 80028cc:	e01a      	b.n	8002904 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2320      	movs	r3, #32
 80028e8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f008 f89b 	bl	800aa2c <HAL_PCD_DataOutStageCallback>
 80028f6:	e005      	b.n	8002904 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f008 f894 	bl	800aa2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	4f54310a 	.word	0x4f54310a

08002914 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	333c      	adds	r3, #60	; 0x3c
 800292c:	3304      	adds	r3, #4
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <PCD_EP_OutSetupPacket_int+0x64>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d90e      	bls.n	8002968 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002966:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f008 f84d 	bl	800aa08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	4f54300a 	.word	0x4f54300a

0800297c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
 8002988:	4613      	mov	r3, r2
 800298a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d107      	bne.n	80029aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800299a:	883b      	ldrh	r3, [r7, #0]
 800299c:	0419      	lsls	r1, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
 80029a8:	e028      	b.n	80029fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e00d      	b.n	80029da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	3340      	adds	r3, #64	; 0x40
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	3b01      	subs	r3, #1
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3ec      	bcc.n	80029be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029e4:	883b      	ldrh	r3, [r7, #0]
 80029e6:	0418      	lsls	r0, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4302      	orrs	r2, r0
 80029f4:	3340      	adds	r3, #64	; 0x40
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	f043 0303 	orr.w	r3, r3, #3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40007000 	.word	0x40007000

08002a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9e:	d130      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aac:	d038      	beq.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2232      	movs	r2, #50	; 0x32
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9b      	lsrs	r3, r3, #18
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad4:	e002      	b.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d102      	bne.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f2      	bne.n	8002ad6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	d110      	bne.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e00f      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0e:	d007      	beq.n	8002b20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000
 8002b34:	20000004 	.word	0x20000004
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4a:	6053      	str	r3, [r2, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e3d4      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4ba1      	ldr	r3, [pc, #644]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b9e      	ldr	r3, [pc, #632]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80e4 	beq.w	8002d58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4a>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	f040 808b 	bne.w	8002cb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 8087 	bne.w	8002cb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba6:	4b93      	ldr	r3, [pc, #588]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x62>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e3ac      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	4b8c      	ldr	r3, [pc, #560]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x7c>
 8002bce:	4b89      	ldr	r3, [pc, #548]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd6:	e005      	b.n	8002be4 <HAL_RCC_OscConfig+0x88>
 8002bd8:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d223      	bcs.n	8002c30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fd15 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e38d      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfc:	4b7d      	ldr	r3, [pc, #500]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7c      	ldr	r2, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c02:	f043 0308 	orr.w	r3, r3, #8
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b7a      	ldr	r3, [pc, #488]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4977      	ldr	r1, [pc, #476]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	4972      	ldr	r1, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
 8002c2e:	e025      	b.n	8002c7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c30:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6f      	ldr	r2, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	496a      	ldr	r1, [pc, #424]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4e:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4965      	ldr	r1, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 fcd5 	bl	800361c <RCC_SetFlashLatencyFromMSIRange>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e34d      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7c:	f000 fc36 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	495a      	ldr	r1, [pc, #360]	; (8002df8 <HAL_RCC_OscConfig+0x29c>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_OscConfig+0x2a0>)
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x2a4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fa89 	bl	80011b8 <HAL_InitTick>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d052      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	e331      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fac6 	bl	8001258 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fac2 	bl	8001258 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e31a      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	493b      	ldr	r1, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0c:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	4936      	ldr	r1, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
 8002d20:	e01a      	b.n	8002d58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d22:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fa93 	bl	8001258 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d36:	f7fe fa8f 	bl	8001258 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e2e7      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d48:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCC_OscConfig+0x1da>
 8002d54:	e000      	b.n	8002d58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d074      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x21a>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d10e      	bne.n	8002d8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d10b      	bne.n	8002d8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d064      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d160      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e2c4      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x24a>
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e01d      	b.n	8002de2 <HAL_RCC_OscConfig+0x286>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x26e>
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x286>
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x298>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe fa35 	bl	8001258 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df0:	e011      	b.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	0800b2e8 	.word	0x0800b2e8
 8002dfc:	20000004 	.word	0x20000004
 8002e00:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe fa28 	bl	8001258 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e280      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e16:	4baf      	ldr	r3, [pc, #700]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2a8>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fa18 	bl	8001258 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fa14 	bl	8001258 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e26c      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d0>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d060      	beq.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x310>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d116      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x328>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e249      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b93      	ldr	r3, [pc, #588]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	4990      	ldr	r1, [pc, #576]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e98:	e040      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d023      	beq.n	8002eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea2:	4b8c      	ldr	r3, [pc, #560]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a8b      	ldr	r2, [pc, #556]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f9d3 	bl	8001258 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f9cf 	bl	8001258 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e227      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	497c      	ldr	r1, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e018      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f9af 	bl	8001258 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe f9ab 	bl	8001258 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e203      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f10:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f30:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	4a67      	ldr	r2, [pc, #412]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f98a 	bl	8001258 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe f986 	bl	8001258 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1de      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5a:	4b5e      	ldr	r3, [pc, #376]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3ec>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f96d 	bl	8001258 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fe f969 	bl	8001258 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1c1      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ef      	bne.n	8002f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a6 	beq.w	80030fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fb4:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4a43      	ldr	r2, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f930 	bl	8001258 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fe f92c 	bl	8001258 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e184      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_RCC_OscConfig+0x57c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x4d8>
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003032:	e024      	b.n	800307e <HAL_RCC_OscConfig+0x522>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d110      	bne.n	800305e <HAL_RCC_OscConfig+0x502>
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a24      	ldr	r2, [pc, #144]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305c:	e00f      	b.n	800307e <HAL_RCC_OscConfig+0x522>
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe f8e7 	bl	8001258 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe f8e3 	bl	8001258 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e139      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ed      	beq.n	800308e <HAL_RCC_OscConfig+0x532>
 80030b2:	e01a      	b.n	80030ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe f8d0 	bl	8001258 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ba:	e00f      	b.n	80030dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe f8cc 	bl	8001258 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d906      	bls.n	80030dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e122      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030dc:	4b90      	ldr	r3, [pc, #576]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e8      	bne.n	80030bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a8a      	ldr	r2, [pc, #552]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8108 	beq.w	8003316 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b02      	cmp	r3, #2
 800310c:	f040 80d0 	bne.w	80032b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003110:	4b83      	ldr	r3, [pc, #524]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	429a      	cmp	r2, r3
 8003122:	d130      	bne.n	8003186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	3b01      	subs	r3, #1
 8003130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d127      	bne.n	8003186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11f      	bne.n	8003186 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003150:	2a07      	cmp	r2, #7
 8003152:	bf14      	ite	ne
 8003154:	2201      	movne	r2, #1
 8003156:	2200      	moveq	r2, #0
 8003158:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800315a:	4293      	cmp	r3, r2
 800315c:	d113      	bne.n	8003186 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	3b01      	subs	r3, #1
 800316c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d109      	bne.n	8003186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d06e      	beq.n	8003264 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d069      	beq.n	8003260 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800318c:	4b64      	ldr	r3, [pc, #400]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b7      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031a8:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80031ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b4:	f7fe f850 	bl	8001258 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe f84c 	bl	8001258 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0a4      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4b51      	ldr	r3, [pc, #324]	; (8003324 <HAL_RCC_OscConfig+0x7c8>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ea:	3a01      	subs	r2, #1
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f4:	0212      	lsls	r2, r2, #8
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031fc:	0852      	lsrs	r2, r2, #1
 80031fe:	3a01      	subs	r2, #1
 8003200:	0552      	lsls	r2, r2, #21
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003208:	0852      	lsrs	r2, r2, #1
 800320a:	3a01      	subs	r2, #1
 800320c:	0652      	lsls	r2, r2, #25
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003214:	0912      	lsrs	r2, r2, #4
 8003216:	0452      	lsls	r2, r2, #17
 8003218:	430a      	orrs	r2, r1
 800321a:	4941      	ldr	r1, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800322c:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a3b      	ldr	r2, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003238:	f7fe f80e 	bl	8001258 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f80a 	bl	8001258 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e062      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325e:	e05a      	b.n	8003316 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e059      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d152      	bne.n	8003316 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003288:	f7fd ffe6 	bl	8001258 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd ffe2 	bl	8001258 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e03a      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x734>
 80032ae:	e032      	b.n	8003316 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d02d      	beq.n	8003312 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032c2:	4b17      	ldr	r3, [pc, #92]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032d4:	f023 0303 	bic.w	r3, r3, #3
 80032d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 80032e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fd ffb5 	bl	8001258 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fd ffb1 	bl	8001258 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e009      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_OscConfig+0x7c4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x796>
 8003310:	e001      	b.n	8003316 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	f99d808c 	.word	0xf99d808c

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0c8      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4961      	ldr	r1, [pc, #388]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b0      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d04c      	beq.n	8003412 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d121      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e09e      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d115      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e092      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e086      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e07e      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 0203 	bic.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	493f      	ldr	r1, [pc, #252]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fd ff39 	bl	8001258 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ea:	f7fd ff35 	bl	8001258 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e066      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 020c 	and.w	r2, r3, #12
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	429a      	cmp	r2, r3
 8003410:	d1eb      	bne.n	80033ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	492c      	ldr	r1, [pc, #176]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d210      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4924      	ldr	r1, [pc, #144]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e036      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4918      	ldr	r1, [pc, #96]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4910      	ldr	r1, [pc, #64]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349e:	f000 f825 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490c      	ldr	r1, [pc, #48]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fe78 	bl	80011b8 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80034cc:	7afb      	ldrb	r3, [r7, #11]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800b2e8 	.word	0x0800b2e8
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fa:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x34>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d121      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d11e      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003520:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800352c:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e005      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800353c:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003548:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003550:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d102      	bne.n	800356a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e004      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d101      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_RCC_GetSysClockFreq+0x114>)
 8003572:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d134      	bne.n	80035e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0xa6>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d003      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0xac>
 8003590:	e005      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003594:	617b      	str	r3, [r7, #20]
      break;
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_GetSysClockFreq+0x114>)
 800359a:	617b      	str	r3, [r7, #20]
      break;
 800359c:	e002      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	617b      	str	r3, [r7, #20]
      break;
 80035a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	3301      	adds	r3, #1
 80035b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	fb02 f203 	mul.w	r2, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	0e5b      	lsrs	r3, r3, #25
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	3301      	adds	r3, #1
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035e4:	69bb      	ldr	r3, [r7, #24]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	; 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	0800b2f8 	.word	0x0800b2f8
 80035fc:	00f42400 	.word	0x00f42400
 8003600:	007a1200 	.word	0x007a1200

08003604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_RCC_GetHCLKFreq+0x14>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000004 	.word	0x20000004

0800361c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003624:	2300      	movs	r3, #0
 8003626:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003634:	f7ff fa1e 	bl	8002a74 <HAL_PWREx_GetVoltageRange>
 8003638:	6178      	str	r0, [r7, #20]
 800363a:	e014      	b.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	4a24      	ldr	r2, [pc, #144]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	; 0x58
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003654:	f7ff fa0e 	bl	8002a74 <HAL_PWREx_GetVoltageRange>
 8003658:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366c:	d10b      	bne.n	8003686 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d919      	bls.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2ba0      	cmp	r3, #160	; 0xa0
 8003678:	d902      	bls.n	8003680 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800367a:	2302      	movs	r3, #2
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e013      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003680:	2301      	movs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e010      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d902      	bls.n	8003692 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800368c:	2303      	movs	r3, #3
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	e00a      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d102      	bne.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003698:	2302      	movs	r3, #2
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	e004      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b70      	cmp	r3, #112	; 0x70
 80036a2:	d101      	bne.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036a4:	2301      	movs	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 0207 	bic.w	r2, r3, #7
 80036b0:	4909      	ldr	r1, [pc, #36]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40022000 	.word	0x40022000

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036e4:	2300      	movs	r3, #0
 80036e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036e8:	2300      	movs	r3, #0
 80036ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d041      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003700:	d02a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003702:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003706:	d824      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800370c:	d008      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800370e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003712:	d81e      	bhi.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800371e:	e018      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003720:	4b86      	ldr	r3, [pc, #536]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a85      	ldr	r2, [pc, #532]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372c:	e015      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fabb 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800373e:	e00c      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3320      	adds	r3, #32
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fba6 	bl	8003e98 <RCCEx_PLLSAI2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	74fb      	strb	r3, [r7, #19]
      break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003760:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	4973      	ldr	r1, [pc, #460]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d041      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003790:	d02a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003792:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003796:	d824      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800379e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a2:	d81e      	bhi.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ac:	d010      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ae:	e018      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b0:	4b62      	ldr	r3, [pc, #392]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037bc:	e015      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fa73 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ce:	e00c      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3320      	adds	r3, #32
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fb5e 	bl	8003e98 <RCCEx_PLLSAI2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037e0:	e003      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	74fb      	strb	r3, [r7, #19]
      break;
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10b      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037f0:	4b52      	ldr	r3, [pc, #328]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fe:	494f      	ldr	r1, [pc, #316]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a0 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	4a40      	ldr	r2, [pc, #256]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383e:	6593      	str	r3, [r2, #88]	; 0x58
 8003840:	4b3e      	ldr	r3, [pc, #248]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384c:	2301      	movs	r3, #1
 800384e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003850:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3a      	ldr	r2, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385c:	f7fd fcfc 	bl	8001258 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003862:	e009      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fd fcf8 	bl	8001258 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	74fb      	strb	r3, [r7, #19]
        break;
 8003876:	e005      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003878:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d15c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800388a:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01f      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d019      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d016      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd fcb7 	bl	8001258 <HAL_GetTick>
 80038ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ec:	e00b      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fd fcb3 	bl	8001258 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d902      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	74fb      	strb	r3, [r7, #19]
            break;
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ec      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	4904      	ldr	r1, [pc, #16]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	74bb      	strb	r3, [r7, #18]
 8003938:	e006      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003948:	7c7b      	ldrb	r3, [r7, #17]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b9e      	ldr	r3, [pc, #632]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	4a9d      	ldr	r2, [pc, #628]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003958:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003966:	4b98      	ldr	r3, [pc, #608]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f023 0203 	bic.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	4994      	ldr	r1, [pc, #592]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003988:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f023 020c 	bic.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	498c      	ldr	r1, [pc, #560]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039aa:	4b87      	ldr	r3, [pc, #540]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	4983      	ldr	r1, [pc, #524]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	497b      	ldr	r1, [pc, #492]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	4972      	ldr	r1, [pc, #456]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a10:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	496a      	ldr	r1, [pc, #424]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a32:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	4961      	ldr	r1, [pc, #388]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a54:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	4959      	ldr	r1, [pc, #356]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a76:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	4950      	ldr	r1, [pc, #320]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a98:	4b4b      	ldr	r3, [pc, #300]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	4948      	ldr	r1, [pc, #288]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	493f      	ldr	r1, [pc, #252]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d028      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	4937      	ldr	r1, [pc, #220]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
 8003b08:	e011      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f8c8 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d028      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	491f      	ldr	r1, [pc, #124]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b64:	60d3      	str	r3, [r2, #12]
 8003b66:	e011      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f899 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a02      	ldr	r2, [pc, #8]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc2:	60d3      	str	r3, [r2, #12]
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f867 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02f      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	4928      	ldr	r1, [pc, #160]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2102      	movs	r1, #2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f844 	bl	8003cb0 <RCCEx_PLLSAI1_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d014      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	74bb      	strb	r3, [r7, #18]
 8003c36:	e011      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3320      	adds	r3, #32
 8003c46:	2102      	movs	r1, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f925 	bl	8003e98 <RCCEx_PLLSAI2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	4904      	ldr	r1, [pc, #16]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ca2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000

08003cb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cbe:	4b75      	ldr	r3, [pc, #468]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d10d      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ce2:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d047      	beq.n	8003d86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e044      	b.n	8003d86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d018      	beq.n	8003d36 <RCCEx_PLLSAI1_Config+0x86>
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d825      	bhi.n	8003d54 <RCCEx_PLLSAI1_Config+0xa4>
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <RCCEx_PLLSAI1_Config+0x62>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d009      	beq.n	8003d24 <RCCEx_PLLSAI1_Config+0x74>
 8003d10:	e020      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d12:	4b60      	ldr	r3, [pc, #384]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11d      	bne.n	8003d5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d22:	e01a      	b.n	8003d5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d24:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d116      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d34:	e013      	b.n	8003d5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d36:	4b57      	ldr	r3, [pc, #348]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d42:	4b54      	ldr	r3, [pc, #336]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d52:	e006      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e004      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6819      	ldr	r1, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	4944      	ldr	r1, [pc, #272]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d17d      	bne.n	8003e88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d8c:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a40      	ldr	r2, [pc, #256]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fa5e 	bl	8001258 <HAL_GetTick>
 8003d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d9e:	e009      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da0:	f7fd fa5a 	bl	8001258 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	73fb      	strb	r3, [r7, #15]
        break;
 8003db2:	e005      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003db4:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1ef      	bne.n	8003da0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d160      	bne.n	8003e88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d111      	bne.n	8003df0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dcc:	4b31      	ldr	r3, [pc, #196]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6892      	ldr	r2, [r2, #8]
 8003ddc:	0211      	lsls	r1, r2, #8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	0912      	lsrs	r2, r2, #4
 8003de4:	0452      	lsls	r2, r2, #17
 8003de6:	430a      	orrs	r2, r1
 8003de8:	492a      	ldr	r1, [pc, #168]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
 8003dee:	e027      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d112      	bne.n	8003e1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df6:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	0211      	lsls	r1, r2, #8
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6912      	ldr	r2, [r2, #16]
 8003e0c:	0852      	lsrs	r2, r2, #1
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0552      	lsls	r2, r2, #21
 8003e12:	430a      	orrs	r2, r1
 8003e14:	491f      	ldr	r1, [pc, #124]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	610b      	str	r3, [r1, #16]
 8003e1a:	e011      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	0211      	lsls	r1, r2, #8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	4916      	ldr	r1, [pc, #88]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fa04 	bl	8001258 <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e52:	e009      	b.n	8003e68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e54:	f7fd fa00 	bl	8001258 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	73fb      	strb	r3, [r7, #15]
          break;
 8003e66:	e005      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ef      	beq.n	8003e54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	4904      	ldr	r1, [pc, #16]	; (8003e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000

08003e98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003eb2:	4b67      	ldr	r3, [pc, #412]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10d      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eca:	4b61      	ldr	r3, [pc, #388]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d047      	beq.n	8003f6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e044      	b.n	8003f6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d018      	beq.n	8003f1e <RCCEx_PLLSAI2_Config+0x86>
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d825      	bhi.n	8003f3c <RCCEx_PLLSAI2_Config+0xa4>
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d002      	beq.n	8003efa <RCCEx_PLLSAI2_Config+0x62>
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d009      	beq.n	8003f0c <RCCEx_PLLSAI2_Config+0x74>
 8003ef8:	e020      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003efa:	4b55      	ldr	r3, [pc, #340]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11d      	bne.n	8003f42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0a:	e01a      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f0c:	4b50      	ldr	r3, [pc, #320]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d116      	bne.n	8003f46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e013      	b.n	8003f46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f1e:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f2a:	4b49      	ldr	r3, [pc, #292]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f3a:	e006      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e004      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f42:	bf00      	nop
 8003f44:	e002      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10d      	bne.n	8003f6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f52:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	430b      	orrs	r3, r1
 8003f68:	4939      	ldr	r1, [pc, #228]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d167      	bne.n	8004044 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f74:	4b36      	ldr	r3, [pc, #216]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a35      	ldr	r2, [pc, #212]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fd f96a 	bl	8001258 <HAL_GetTick>
 8003f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f86:	e009      	b.n	8003f9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f88:	f7fd f966 	bl	8001258 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d902      	bls.n	8003f9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	73fb      	strb	r3, [r7, #15]
        break;
 8003f9a:	e005      	b.n	8003fa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ef      	bne.n	8003f88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d14a      	bne.n	8004044 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d111      	bne.n	8003fd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	0211      	lsls	r1, r2, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68d2      	ldr	r2, [r2, #12]
 8003fca:	0912      	lsrs	r2, r2, #4
 8003fcc:	0452      	lsls	r2, r2, #17
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	491f      	ldr	r1, [pc, #124]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	614b      	str	r3, [r1, #20]
 8003fd6:	e011      	b.n	8003ffc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6912      	ldr	r2, [r2, #16]
 8003fee:	0852      	lsrs	r2, r2, #1
 8003ff0:	3a01      	subs	r2, #1
 8003ff2:	0652      	lsls	r2, r2, #25
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	4916      	ldr	r1, [pc, #88]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd f926 	bl	8001258 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800400e:	e009      	b.n	8004024 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004010:	f7fd f922 	bl	8001258 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	73fb      	strb	r3, [r7, #15]
          break;
 8004022:	e005      	b.n	8004030 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4904      	ldr	r1, [pc, #16]	; (8004050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	4313      	orrs	r3, r2
 8004042:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc fdf6 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fbe8 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d001      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e04f      	b.n	80041bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004146:	d018      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_TIM_Base_Start_IT+0xc8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x76>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d115      	bne.n	80041a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004182:	4013      	ands	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d015      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0xb4>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d011      	beq.n	80041b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a4:	e008      	b.n	80041b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e000      	b.n	80041ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40013400 	.word	0x40013400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	00010007 	.word	0x00010007

080041e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e097      	b.n	8004328 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fc fd63 	bl	8000cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f000 fb15 	bl	8004868 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	4313      	orrs	r3, r2
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004284:	f023 030c 	bic.w	r3, r3, #12
 8004288:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	031b      	lsls	r3, r3, #12
 80042b4:	4313      	orrs	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4313      	orrs	r3, r2
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004348:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004350:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004358:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d110      	bne.n	8004382 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004366:	7b7b      	ldrb	r3, [r7, #13]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d001      	beq.n	8004370 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e069      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	e031      	b.n	80043e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d110      	bne.n	80043aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800438e:	7b3b      	ldrb	r3, [r7, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e055      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a8:	e01d      	b.n	80043e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d108      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d105      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	7b7b      	ldrb	r3, [r7, #13]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043bc:	7b3b      	ldrb	r3, [r7, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e03e      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_TIM_Encoder_Start+0xc4>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d008      	beq.n	8004404 <HAL_TIM_Encoder_Start+0xd4>
 80043f2:	e00f      	b.n	8004414 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fb67 	bl	8004ad0 <TIM_CCxChannelCmd>
      break;
 8004402:	e016      	b.n	8004432 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	2104      	movs	r1, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fb5f 	bl	8004ad0 <TIM_CCxChannelCmd>
      break;
 8004412:	e00e      	b.n	8004432 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fb57 	bl	8004ad0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	2104      	movs	r1, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb50 	bl	8004ad0 <TIM_CCxChannelCmd>
      break;
 8004430:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0202 	mvn.w	r2, #2
 8004478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9cb 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9bd 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f9ce 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0204 	mvn.w	r2, #4
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9a1 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f993 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9a4 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0208 	mvn.w	r2, #8
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f977 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f969 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f97a 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b10      	cmp	r3, #16
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f94d 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f93f 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f950 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0201 	mvn.w	r2, #1
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc f9a4 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb22 	bl	8004c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d10e      	bne.n	800462a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d107      	bne.n	800462a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb15 	bl	8004c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f8fe 	bl	8004852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b20      	cmp	r3, #32
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b20      	cmp	r3, #32
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0220 	mvn.w	r2, #32
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fad5 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_ConfigClockSource+0x18>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0b5      	b.n	800480e <HAL_TIM_ConfigClockSource+0x184>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046de:	d03e      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xd4>
 80046e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e4:	f200 8087 	bhi.w	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	f000 8085 	beq.w	80047fa <HAL_TIM_ConfigClockSource+0x170>
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d87f      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 80046f6:	2b70      	cmp	r3, #112	; 0x70
 80046f8:	d01a      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0xa6>
 80046fa:	2b70      	cmp	r3, #112	; 0x70
 80046fc:	d87b      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 80046fe:	2b60      	cmp	r3, #96	; 0x60
 8004700:	d050      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x11a>
 8004702:	2b60      	cmp	r3, #96	; 0x60
 8004704:	d877      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004706:	2b50      	cmp	r3, #80	; 0x50
 8004708:	d03c      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0xfa>
 800470a:	2b50      	cmp	r3, #80	; 0x50
 800470c:	d873      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d058      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0x13a>
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d86f      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004716:	2b30      	cmp	r3, #48	; 0x30
 8004718:	d064      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x15a>
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	d86b      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d060      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x15a>
 8004722:	2b20      	cmp	r3, #32
 8004724:	d867      	bhi.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d05c      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x15a>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d05a      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800472e:	e062      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6899      	ldr	r1, [r3, #8]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f000 f9a6 	bl	8004a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004752:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e04e      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f000 f98f 	bl	8004a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004780:	609a      	str	r2, [r3, #8]
      break;
 8004782:	e03b      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	461a      	mov	r2, r3
 8004792:	f000 f903 	bl	800499c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2150      	movs	r1, #80	; 0x50
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f95c 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80047a2:	e02b      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	461a      	mov	r2, r3
 80047b2:	f000 f922 	bl	80049fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2160      	movs	r1, #96	; 0x60
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f94c 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80047c2:	e01b      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f000 f8e3 	bl	800499c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2140      	movs	r1, #64	; 0x40
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f93c 	bl	8004a5a <TIM_ITRx_SetConfig>
      break;
 80047e2:	e00b      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 f933 	bl	8004a5a <TIM_ITRx_SetConfig>
        break;
 80047f4:	e002      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x172>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a40      	ldr	r2, [pc, #256]	; (800497c <TIM_Base_SetConfig+0x114>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d00f      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a3d      	ldr	r2, [pc, #244]	; (8004980 <TIM_Base_SetConfig+0x118>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <TIM_Base_SetConfig+0x11c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a3b      	ldr	r2, [pc, #236]	; (8004988 <TIM_Base_SetConfig+0x120>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3a      	ldr	r2, [pc, #232]	; (800498c <TIM_Base_SetConfig+0x124>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2f      	ldr	r2, [pc, #188]	; (800497c <TIM_Base_SetConfig+0x114>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d01b      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2c      	ldr	r2, [pc, #176]	; (8004980 <TIM_Base_SetConfig+0x118>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <TIM_Base_SetConfig+0x11c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <TIM_Base_SetConfig+0x120>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a29      	ldr	r2, [pc, #164]	; (800498c <TIM_Base_SetConfig+0x124>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a28      	ldr	r2, [pc, #160]	; (8004990 <TIM_Base_SetConfig+0x128>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <TIM_Base_SetConfig+0x12c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <TIM_Base_SetConfig+0x130>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <TIM_Base_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00f      	beq.n	8004960 <TIM_Base_SetConfig+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <TIM_Base_SetConfig+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0xf8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <TIM_Base_SetConfig+0x128>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0xf8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_Base_SetConfig+0x12c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0xf8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <TIM_Base_SetConfig+0x130>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d103      	bne.n	8004968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	615a      	str	r2, [r3, #20]
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 030a 	bic.w	r3, r3, #10
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0210 	bic.w	r2, r3, #16
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b085      	sub	sp, #20
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f043 0307 	orr.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e068      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2e      	ldr	r2, [pc, #184]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2d      	ldr	r2, [pc, #180]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d018      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800
 8004c24:	40000c00 	.word	0x40000c00
 8004c28:	40014000 	.word	0x40014000

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c68:	b084      	sub	sp, #16
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	f107 001c 	add.w	r0, r7, #28
 8004c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f001 f9ce 	bl	8006028 <USB_CoreReset>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca2:	e005      	b.n	8004cb0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr

08004cc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d165      	bne.n	8004da0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <USB_SetTurnaroundTime+0x110>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d906      	bls.n	8004cea <USB_SetTurnaroundTime+0x2a>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <USB_SetTurnaroundTime+0x114>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d202      	bcs.n	8004cea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ce4:	230f      	movs	r3, #15
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e05c      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <USB_SetTurnaroundTime+0x114>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d306      	bcc.n	8004d00 <USB_SetTurnaroundTime+0x40>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4a38      	ldr	r2, [pc, #224]	; (8004dd8 <USB_SetTurnaroundTime+0x118>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d202      	bcs.n	8004d00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cfa:	230e      	movs	r3, #14
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e051      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a35      	ldr	r2, [pc, #212]	; (8004dd8 <USB_SetTurnaroundTime+0x118>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d306      	bcc.n	8004d16 <USB_SetTurnaroundTime+0x56>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <USB_SetTurnaroundTime+0x11c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d202      	bcs.n	8004d16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d10:	230d      	movs	r3, #13
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e046      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <USB_SetTurnaroundTime+0x11c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d306      	bcc.n	8004d2c <USB_SetTurnaroundTime+0x6c>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <USB_SetTurnaroundTime+0x120>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d26:	230c      	movs	r3, #12
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e03b      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <USB_SetTurnaroundTime+0x120>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d906      	bls.n	8004d42 <USB_SetTurnaroundTime+0x82>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <USB_SetTurnaroundTime+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d802      	bhi.n	8004d42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d3c:	230b      	movs	r3, #11
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e030      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <USB_SetTurnaroundTime+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d906      	bls.n	8004d58 <USB_SetTurnaroundTime+0x98>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <USB_SetTurnaroundTime+0x128>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d802      	bhi.n	8004d58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d52:	230a      	movs	r3, #10
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e025      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <USB_SetTurnaroundTime+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d906      	bls.n	8004d6e <USB_SetTurnaroundTime+0xae>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4a22      	ldr	r2, [pc, #136]	; (8004dec <USB_SetTurnaroundTime+0x12c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d202      	bcs.n	8004d6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d68:	2309      	movs	r3, #9
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e01a      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <USB_SetTurnaroundTime+0x12c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d306      	bcc.n	8004d84 <USB_SetTurnaroundTime+0xc4>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <USB_SetTurnaroundTime+0x130>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d802      	bhi.n	8004d84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d7e:	2308      	movs	r3, #8
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e00f      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <USB_SetTurnaroundTime+0x130>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d906      	bls.n	8004d9a <USB_SetTurnaroundTime+0xda>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <USB_SetTurnaroundTime+0x134>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d202      	bcs.n	8004d9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d94:	2307      	movs	r3, #7
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e004      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e001      	b.n	8004da4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004da0:	2309      	movs	r3, #9
 8004da2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	00d8acbf 	.word	0x00d8acbf
 8004dd4:	00e4e1c0 	.word	0x00e4e1c0
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	01067380 	.word	0x01067380
 8004de0:	011a499f 	.word	0x011a499f
 8004de4:	01312cff 	.word	0x01312cff
 8004de8:	014ca43f 	.word	0x014ca43f
 8004dec:	016e3600 	.word	0x016e3600
 8004df0:	01a6ab1f 	.word	0x01a6ab1f
 8004df4:	01e84800 	.word	0x01e84800

08004df8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f043 0201 	orr.w	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d106      	bne.n	8004e68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	e00b      	b.n	8004e80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e001      	b.n	8004e80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e003      	b.n	8004e88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e80:	2032      	movs	r0, #50	; 0x32
 8004e82:	f7fc f9f5 	bl	8001270 <HAL_Delay>

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e90:	b084      	sub	sp, #16
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	e009      	b.n	8004ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3340      	adds	r3, #64	; 0x40
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b0e      	cmp	r3, #14
 8004ec8:	d9f2      	bls.n	8004eb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11c      	bne.n	8004f0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e005      	b.n	8004f16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f28:	4619      	mov	r1, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	461a      	mov	r2, r3
 8004f32:	680b      	ldr	r3, [r1, #0]
 8004f34:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f36:	2103      	movs	r1, #3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f93d 	bl	80051b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f3e:	2110      	movs	r1, #16
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8f1 	bl	8005128 <USB_FlushTxFifo>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f90f 	bl	8005174 <USB_FlushRxFifo>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	461a      	mov	r2, r3
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	461a      	mov	r2, r3
 8004f74:	2300      	movs	r3, #0
 8004f76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2300      	movs	r3, #0
 8004f82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	e043      	b.n	8005012 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa0:	d118      	bne.n	8004fd4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e013      	b.n	8004fe6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e008      	b.n	8004fe6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	461a      	mov	r2, r3
 8005006:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800500a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	3301      	adds	r3, #1
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d3b7      	bcc.n	8004f8a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e043      	b.n	80050a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005036:	d118      	bne.n	800506a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e013      	b.n	800507c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e008      	b.n	800507c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	461a      	mov	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	461a      	mov	r2, r3
 800509c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	3301      	adds	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d3b7      	bcc.n	8005020 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f043 0210 	orr.w	r2, r3, #16
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <USB_DevInit+0x294>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f043 0208 	orr.w	r2, r3, #8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800510a:	f043 0304 	orr.w	r3, r3, #4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511e:	b004      	add	sp, #16
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	803c3800 	.word	0x803c3800

08005128 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <USB_FlushTxFifo+0x48>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e006      	b.n	8005162 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b20      	cmp	r3, #32
 800515e:	d0f0      	beq.n	8005142 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	00030d40 	.word	0x00030d40

08005174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2210      	movs	r2, #16
 8005184:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <USB_FlushRxFifo+0x40>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d0f0      	beq.n	8005186 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b087      	sub	sp, #28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d002      	beq.n	8005210 <USB_GetDevSpeed+0x26>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b06      	cmp	r3, #6
 800520e:	d102      	bne.n	8005216 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005210:	2302      	movs	r3, #2
 8005212:	75fb      	strb	r3, [r7, #23]
 8005214:	e001      	b.n	800521a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005216:	230f      	movs	r3, #15
 8005218:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800521a:	7dfb      	ldrb	r3, [r7, #23]
}
 800521c:	4618      	mov	r0, r3
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d13a      	bne.n	80052ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	b29b      	uxth	r3, r3
 800525c:	68f9      	ldr	r1, [r7, #12]
 800525e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005262:	4313      	orrs	r3, r2
 8005264:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d155      	bne.n	8005328 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005298:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	059b      	lsls	r3, r3, #22
 800529e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052a0:	4313      	orrs	r3, r2
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e036      	b.n	8005328 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2101      	movs	r1, #1
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d8:	4313      	orrs	r3, r2
 80052da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11a      	bne.n	8005328 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	78db      	ldrb	r3, [r3, #3]
 800530c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800530e:	430b      	orrs	r3, r1
 8005310:	4313      	orrs	r3, r2
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005326:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d161      	bne.n	8005418 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536a:	d11f      	bne.n	80053ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800538a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053cc:	4013      	ands	r3, r2
 80053ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	68f9      	ldr	r1, [r7, #12]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f0:	4013      	ands	r3, r2
 80053f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	0159      	lsls	r1, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	440b      	add	r3, r1
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	4619      	mov	r1, r3
 8005410:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <USB_DeactivateEndpoint+0x1b0>)
 8005412:	4013      	ands	r3, r2
 8005414:	600b      	str	r3, [r1, #0]
 8005416:	e060      	b.n	80054da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	d11f      	bne.n	8005470 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	43db      	mvns	r3, r3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4013      	ands	r3, r2
 8005492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	43db      	mvns	r3, r3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4013      	ands	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0159      	lsls	r1, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	440b      	add	r3, r1
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <USB_DeactivateEndpoint+0x1b4>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	ec337800 	.word	0xec337800
 80054ec:	eff37800 	.word	0xeff37800

080054f0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b01      	cmp	r3, #1
 800550a:	f040 810a 	bne.w	8005722 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d132      	bne.n	800557c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	0cdb      	lsrs	r3, r3, #19
 8005576:	04db      	lsls	r3, r3, #19
 8005578:	6113      	str	r3, [r2, #16]
 800557a:	e074      	b.n	8005666 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	0cdb      	lsrs	r3, r3, #19
 8005598:	04db      	lsls	r3, r3, #19
 800559a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6959      	ldr	r1, [r3, #20]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	440b      	add	r3, r1
 80055d8:	1e59      	subs	r1, r3, #1
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	fbb1 f3f3 	udiv	r3, r1, r3
 80055e2:	04d9      	lsls	r1, r3, #19
 80055e4:	4baf      	ldr	r3, [pc, #700]	; (80058a4 <USB_EPStartXfer+0x3b4>)
 80055e6:	400b      	ands	r3, r1
 80055e8:	6939      	ldr	r1, [r7, #16]
 80055ea:	0148      	lsls	r0, r1, #5
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	4401      	add	r1, r0
 80055f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055f4:	4313      	orrs	r3, r2
 80055f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560e:	6939      	ldr	r1, [r7, #16]
 8005610:	0148      	lsls	r0, r1, #5
 8005612:	6979      	ldr	r1, [r7, #20]
 8005614:	4401      	add	r1, r0
 8005616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800561a:	4313      	orrs	r3, r2
 800561c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	78db      	ldrb	r3, [r3, #3]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d11f      	bne.n	8005666 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005640:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005644:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005664:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005684:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	78db      	ldrb	r3, [r3, #3]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d015      	beq.n	80056ba <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 8100 	beq.w	8005898 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b4:	4313      	orrs	r3, r2
 80056b6:	634b      	str	r3, [r1, #52]	; 0x34
 80056b8:	e0ee      	b.n	8005898 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d110      	bne.n	80056ec <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e00f      	b.n	800570c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	68d9      	ldr	r1, [r3, #12]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	b29b      	uxth	r3, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9e2 	bl	8005ae4 <USB_WritePacket>
 8005720:	e0ba      	b.n	8005898 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	0cdb      	lsrs	r3, r3, #19
 800573e:	04db      	lsls	r3, r3, #19
 8005740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005760:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005764:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d123      	bne.n	80057b6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005784:	6939      	ldr	r1, [r7, #16]
 8005786:	0148      	lsls	r0, r1, #5
 8005788:	6979      	ldr	r1, [r7, #20]
 800578a:	4401      	add	r1, r0
 800578c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005790:	4313      	orrs	r3, r2
 8005792:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b2:	6113      	str	r3, [r2, #16]
 80057b4:	e033      	b.n	800581e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	4413      	add	r3, r2
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	89fb      	ldrh	r3, [r7, #14]
 80057dc:	04d9      	lsls	r1, r3, #19
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <USB_EPStartXfer+0x3b4>)
 80057e0:	400b      	ands	r3, r1
 80057e2:	6939      	ldr	r1, [r7, #16]
 80057e4:	0148      	lsls	r0, r1, #5
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	4401      	add	r1, r0
 80057ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ee:	4313      	orrs	r3, r2
 80057f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	89f9      	ldrh	r1, [r7, #14]
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	6939      	ldr	r1, [r7, #16]
 8005810:	0148      	lsls	r0, r1, #5
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	4401      	add	r1, r0
 8005816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	78db      	ldrb	r3, [r3, #3]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d128      	bne.n	8005878 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d110      	bne.n	8005858 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e00f      	b.n	8005878 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005896:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	1ff80000 	.word	0x1ff80000

080058a8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 80ab 	bne.w	8005a1c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d132      	bne.n	8005934 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	0cdb      	lsrs	r3, r3, #19
 800592e:	04db      	lsls	r3, r3, #19
 8005930:	6113      	str	r3, [r2, #16]
 8005932:	e04e      	b.n	80059d2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594e:	0cdb      	lsrs	r3, r3, #19
 8005950:	04db      	lsls	r3, r3, #19
 8005952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005972:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005976:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	0148      	lsls	r0, r1, #5
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	4401      	add	r1, r0
 80059ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ce:	4313      	orrs	r3, r2
 80059d0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d06d      	beq.n	8005ad6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a16:	4313      	orrs	r3, r2
 8005a18:	634b      	str	r3, [r1, #52]	; 0x34
 8005a1a:	e05c      	b.n	8005ad6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a36:	0cdb      	lsrs	r3, r3, #19
 8005a38:	04db      	lsls	r3, r3, #19
 8005a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	460b      	mov	r3, r1
 8005af4:	71fb      	strb	r3, [r7, #7]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	3303      	adds	r3, #3
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e00f      	b.n	8005b30 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	031a      	lsls	r2, r3, #12
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	3304      	adds	r3, #4
 8005b28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3eb      	bcc.n	8005b10 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3724      	adds	r7, #36	; 0x24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b089      	sub	sp, #36	; 0x24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	3303      	adds	r3, #3
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e00b      	b.n	8005b82 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3ef      	bcc.n	8005b6a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3724      	adds	r7, #36	; 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12c      	bne.n	8005c0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db12      	blt.n	8005bec <USB_EPSetStall+0x54>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00f      	beq.n	8005bec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	e02b      	b.n	8005c66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	db12      	blt.n	8005c46 <USB_EPSetStall+0xae>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d128      	bne.n	8005ce2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	78db      	ldrb	r3, [r3, #3]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <USB_EPClearStall+0x4c>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d138      	bne.n	8005d32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	e027      	b.n	8005d32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	78db      	ldrb	r3, [r3, #3]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d003      	beq.n	8005d12 <USB_EPClearStall+0x9e>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d10f      	bne.n	8005d32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d74:	68f9      	ldr	r1, [r7, #12]
 8005d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dba:	f023 0302 	bic.w	r3, r3, #2
 8005dbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005de8:	f023 0303 	bic.w	r3, r3, #3
 8005dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	b29b      	uxth	r3, r3
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	01db      	lsls	r3, r3, #7
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4013      	ands	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f28:	68bb      	ldr	r3, [r7, #8]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0301 	and.w	r3, r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	333c      	adds	r3, #60	; 0x3c
 8005faa:	3304      	adds	r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a1c      	ldr	r2, [pc, #112]	; (8006024 <USB_EP0_OutStart+0x8c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d90a      	bls.n	8005fce <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc8:	d101      	bne.n	8005fce <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e024      	b.n	8006018 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffc:	f043 0318 	orr.w	r3, r3, #24
 8006000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006014:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	4f54300a 	.word	0x4f54300a

08006028 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_CoreReset+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01b      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	daf2      	bge.n	8006034 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <USB_CoreReset+0x64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e006      	b.n	800607e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d0f0      	beq.n	800605e <USB_CoreReset+0x36>

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	00030d40 	.word	0x00030d40

08006090 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800609c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060a0:	f005 f846 	bl	800b130 <USBD_static_malloc>
 80060a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060b4:	2302      	movs	r3, #2
 80060b6:	e066      	b.n	8006186 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	7c1b      	ldrb	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d119      	bne.n	80060fc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060cc:	2202      	movs	r2, #2
 80060ce:	2181      	movs	r1, #129	; 0x81
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f004 fe19 	bl	800ad08 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e0:	2202      	movs	r2, #2
 80060e2:	2101      	movs	r1, #1
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f004 fe0f 	bl	800ad08 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2210      	movs	r2, #16
 80060f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060fa:	e016      	b.n	800612a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	2202      	movs	r2, #2
 8006100:	2181      	movs	r1, #129	; 0x81
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f004 fe00 	bl	800ad08 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800610e:	2340      	movs	r3, #64	; 0x40
 8006110:	2202      	movs	r2, #2
 8006112:	2101      	movs	r1, #1
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f004 fdf7 	bl	800ad08 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2210      	movs	r2, #16
 8006126:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800612a:	2308      	movs	r3, #8
 800612c:	2203      	movs	r2, #3
 800612e:	2182      	movs	r1, #130	; 0x82
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f004 fde9 	bl	800ad08 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7c1b      	ldrb	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616a:	2101      	movs	r1, #1
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f004 ff45 	bl	800affc <USBD_LL_PrepareReceive>
 8006172:	e007      	b.n	8006184 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	2101      	movs	r1, #1
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f004 ff3c 	bl	800affc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800619a:	2181      	movs	r1, #129	; 0x81
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f004 fdf1 	bl	800ad84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061a8:	2101      	movs	r1, #1
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f004 fdea 	bl	800ad84 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061b8:	2182      	movs	r1, #130	; 0x82
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f004 fde2 	bl	800ad84 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 ffae 	bl	800b14c <USBD_static_free>
    pdev->pClassData = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006214:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	e0af      	b.n	800638c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03f      	beq.n	80062b8 <USBD_CDC_Setup+0xb4>
 8006238:	2b20      	cmp	r3, #32
 800623a:	f040 809f 	bne.w	800637c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	88db      	ldrh	r3, [r3, #6]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d02e      	beq.n	80062a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	b25b      	sxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	da16      	bge.n	800627e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800625c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	88d2      	ldrh	r2, [r2, #6]
 8006262:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	88db      	ldrh	r3, [r3, #6]
 8006268:	2b07      	cmp	r3, #7
 800626a:	bf28      	it	cs
 800626c:	2307      	movcs	r3, #7
 800626e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	89fa      	ldrh	r2, [r7, #14]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fb13 	bl	80078a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800627c:	e085      	b.n	800638a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	785a      	ldrb	r2, [r3, #1]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006294:	6939      	ldr	r1, [r7, #16]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	461a      	mov	r2, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 fb2c 	bl	80078fa <USBD_CtlPrepareRx>
      break;
 80062a2:	e072      	b.n	800638a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	7850      	ldrb	r0, [r2, #1]
 80062b0:	2200      	movs	r2, #0
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	4798      	blx	r3
      break;
 80062b6:	e068      	b.n	800638a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b0b      	cmp	r3, #11
 80062be:	d852      	bhi.n	8006366 <USBD_CDC_Setup+0x162>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <USBD_CDC_Setup+0xc4>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	08006375 	.word	0x08006375
 80062d0:	08006367 	.word	0x08006367
 80062d4:	08006367 	.word	0x08006367
 80062d8:	08006367 	.word	0x08006367
 80062dc:	08006367 	.word	0x08006367
 80062e0:	08006367 	.word	0x08006367
 80062e4:	08006367 	.word	0x08006367
 80062e8:	08006367 	.word	0x08006367
 80062ec:	08006367 	.word	0x08006367
 80062f0:	08006323 	.word	0x08006323
 80062f4:	0800634d 	.word	0x0800634d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b03      	cmp	r3, #3
 8006302:	d107      	bne.n	8006314 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006304:	f107 030a 	add.w	r3, r7, #10
 8006308:	2202      	movs	r2, #2
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fac8 	bl	80078a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006312:	e032      	b.n	800637a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fa52 	bl	80077c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	75fb      	strb	r3, [r7, #23]
          break;
 8006320:	e02b      	b.n	800637a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b03      	cmp	r3, #3
 800632c:	d107      	bne.n	800633e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800632e:	f107 030d 	add.w	r3, r7, #13
 8006332:	2201      	movs	r2, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fab3 	bl	80078a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800633c:	e01d      	b.n	800637a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fa3d 	bl	80077c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006346:	2303      	movs	r3, #3
 8006348:	75fb      	strb	r3, [r7, #23]
          break;
 800634a:	e016      	b.n	800637a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d00f      	beq.n	8006378 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fa30 	bl	80077c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006364:	e008      	b.n	8006378 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fa29 	bl	80077c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	75fb      	strb	r3, [r7, #23]
          break;
 8006372:	e002      	b.n	800637a <USBD_CDC_Setup+0x176>
          break;
 8006374:	bf00      	nop
 8006376:	e008      	b.n	800638a <USBD_CDC_Setup+0x186>
          break;
 8006378:	bf00      	nop
      }
      break;
 800637a:	e006      	b.n	800638a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fa1e 	bl	80077c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	bf00      	nop
  }

  return (uint8_t)ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e04f      	b.n	8006456 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3318      	adds	r3, #24
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d029      	beq.n	8006428 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	3318      	adds	r3, #24
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	78f9      	ldrb	r1, [r7, #3]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	460b      	mov	r3, r1
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	1a5b      	subs	r3, r3, r1
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	3344      	adds	r3, #68	; 0x44
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063fc:	fb03 f301 	mul.w	r3, r3, r1
 8006400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006402:	2b00      	cmp	r3, #0
 8006404:	d110      	bne.n	8006428 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	3318      	adds	r3, #24
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800641a:	78f9      	ldrb	r1, [r7, #3]
 800641c:	2300      	movs	r3, #0
 800641e:	2200      	movs	r2, #0
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f004 fdb3 	bl	800af8c <USBD_LL_Transmit>
 8006426:	e015      	b.n	8006454 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006470:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	e015      	b.n	80064ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f004 fdf1 	bl	800b06c <USBD_LL_GetRxDataSize>
 800648a:	4602      	mov	r2, r0
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064a6:	4611      	mov	r1, r2
 80064a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e01b      	b.n	8006506 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <USBD_CDC_EP0_RxReady+0x50>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064de:	2bff      	cmp	r3, #255	; 0xff
 80064e0:	d010      	beq.n	8006504 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064f8:	b292      	uxth	r2, r2
 80064fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2243      	movs	r2, #67	; 0x43
 800651c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800651e:	4b03      	ldr	r3, [pc, #12]	; (800652c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000098 	.word	0x20000098

08006530 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2243      	movs	r2, #67	; 0x43
 800653c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000054 	.word	0x20000054

08006550 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2243      	movs	r2, #67	; 0x43
 800655c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	200000dc 	.word	0x200000dc

08006570 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	220a      	movs	r2, #10
 800657c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800657e:	4b03      	ldr	r3, [pc, #12]	; (800658c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20000010 	.word	0x20000010

08006590 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e004      	b.n	80065ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e008      	b.n	80065ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800660e:	2303      	movs	r3, #3
 8006610:	e004      	b.n	800661c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	e016      	b.n	8006674 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f004 fcce 	bl	800affc <USBD_LL_PrepareReceive>
 8006660:	e007      	b.n	8006672 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f004 fcc5 	bl	800affc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	e01f      	b.n	80066d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	79fa      	ldrb	r2, [r7, #7]
 80066c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f004 fa9f 	bl	800ac0c <USBD_LL_Init>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e016      	b.n	8006722 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f107 020e 	add.w	r2, r7, #14
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	4602      	mov	r2, r0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f004 fab6 	bl	800aca4 <USBD_LL_Start>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
  }

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ffba 	bl	800774c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d01a      	beq.n	8006832 <USBD_LL_SetupStage+0x72>
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d822      	bhi.n	8006846 <USBD_LL_SetupStage+0x86>
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <USBD_LL_SetupStage+0x4a>
 8006804:	2b01      	cmp	r3, #1
 8006806:	d00a      	beq.n	800681e <USBD_LL_SetupStage+0x5e>
 8006808:	e01d      	b.n	8006846 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa62 	bl	8006cdc <USBD_StdDevReq>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]
      break;
 800681c:	e020      	b.n	8006860 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fac6 	bl	8006db8 <USBD_StdItfReq>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e016      	b.n	8006860 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb05 	bl	8006e4a <USBD_StdEPReq>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e00c      	b.n	8006860 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006850:	b2db      	uxtb	r3, r3
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f004 facb 	bl	800adf0 <USBD_LL_StallEP>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
      break;
 800685e:	bf00      	nop
  }

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	460b      	mov	r3, r1
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d138      	bne.n	80068f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006884:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800688c:	2b03      	cmp	r3, #3
 800688e:	d14a      	bne.n	8006926 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d913      	bls.n	80068c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	1ad2      	subs	r2, r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bf28      	it	cs
 80068b6:	4613      	movcs	r3, r2
 80068b8:	461a      	mov	r2, r3
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 f839 	bl	8007934 <USBD_CtlContinueRx>
 80068c2:	e030      	b.n	8006926 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d10b      	bne.n	80068e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f001 f834 	bl	8007956 <USBD_CtlSendStatus>
 80068ee:	e01a      	b.n	8006926 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d114      	bne.n	8006926 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	7afa      	ldrb	r2, [r7, #11]
 8006912:	4611      	mov	r1, r2
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	4798      	blx	r3
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	e000      	b.n	8006928 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	460b      	mov	r3, r1
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d16b      	bne.n	8006a1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3314      	adds	r3, #20
 8006948:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006950:	2b02      	cmp	r3, #2
 8006952:	d156      	bne.n	8006a02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d914      	bls.n	800698a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	461a      	mov	r2, r3
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 ffae 	bl	80078d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800697c:	2300      	movs	r3, #0
 800697e:	2200      	movs	r2, #0
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f004 fb3a 	bl	800affc <USBD_LL_PrepareReceive>
 8006988:	e03b      	b.n	8006a02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d11c      	bne.n	80069d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800699e:	429a      	cmp	r2, r3
 80069a0:	d316      	bcc.n	80069d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d20f      	bcs.n	80069d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 ff8f 	bl	80078d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069c2:	2300      	movs	r3, #0
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f004 fb17 	bl	800affc <USBD_LL_PrepareReceive>
 80069ce:	e018      	b.n	8006a02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d10b      	bne.n	80069f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069f4:	2180      	movs	r1, #128	; 0x80
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f004 f9fa 	bl	800adf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 ffbd 	bl	800797c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d122      	bne.n	8006a52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff fe98 	bl	8006742 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a1a:	e01a      	b.n	8006a52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d114      	bne.n	8006a52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	7afa      	ldrb	r2, [r7, #11]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	4798      	blx	r3
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	e000      	b.n	8006a54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e02f      	b.n	8006af0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00f      	beq.n	8006aba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6852      	ldr	r2, [r2, #4]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	2200      	movs	r2, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f004 f921 	bl	800ad08 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2240      	movs	r2, #64	; 0x40
 8006ad2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f004 f913 	bl	800ad08 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2240      	movs	r2, #64	; 0x40
 8006aec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2204      	movs	r2, #4
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d106      	bne.n	8006b66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e012      	b.n	8006bb0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d10b      	bne.n	8006bae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e014      	b.n	8006bfc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d10d      	bne.n	8006bfa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e014      	b.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d10d      	bne.n	8006c46 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	4611      	mov	r1, r2
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6852      	ldr	r2, [r2, #4]
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	4611      	mov	r1, r2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
  }

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cbc:	8a3b      	ldrh	r3, [r7, #16]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	b21a      	sxth	r2, r3
 8006cc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d005      	beq.n	8006d02 <USBD_StdDevReq+0x26>
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d853      	bhi.n	8006da2 <USBD_StdDevReq+0xc6>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <USBD_StdDevReq+0x3a>
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d14f      	bne.n	8006da2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
      break;
 8006d14:	e04a      	b.n	8006dac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b09      	cmp	r3, #9
 8006d1c:	d83b      	bhi.n	8006d96 <USBD_StdDevReq+0xba>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <USBD_StdDevReq+0x48>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006d97 	.word	0x08006d97
 8006d30:	08006d83 	.word	0x08006d83
 8006d34:	08006d97 	.word	0x08006d97
 8006d38:	08006d57 	.word	0x08006d57
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d97 	.word	0x08006d97
 8006d44:	08006d6f 	.word	0x08006d6f
 8006d48:	08006d61 	.word	0x08006d61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9de 	bl	8007110 <USBD_GetDescriptor>
          break;
 8006d54:	e024      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb6d 	bl	8007438 <USBD_SetAddress>
          break;
 8006d5e:	e01f      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fbac 	bl	80074c0 <USBD_SetConfig>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d6c:	e018      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fc4b 	bl	800760c <USBD_GetConfig>
          break;
 8006d76:	e013      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fc7c 	bl	8007678 <USBD_GetStatus>
          break;
 8006d80:	e00e      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fcab 	bl	80076e0 <USBD_SetFeature>
          break;
 8006d8a:	e009      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fcba 	bl	8007708 <USBD_ClrFeature>
          break;
 8006d94:	e004      	b.n	8006da0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fd11 	bl	80077c0 <USBD_CtlError>
          break;
 8006d9e:	bf00      	nop
      }
      break;
 8006da0:	e004      	b.n	8006dac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fd0b 	bl	80077c0 <USBD_CtlError>
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop

08006db8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d005      	beq.n	8006dde <USBD_StdItfReq+0x26>
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d82f      	bhi.n	8006e36 <USBD_StdItfReq+0x7e>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <USBD_StdItfReq+0x26>
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d12b      	bne.n	8006e36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d81d      	bhi.n	8006e28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	889b      	ldrh	r3, [r3, #4]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d813      	bhi.n	8006e1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d110      	bne.n	8006e32 <USBD_StdItfReq+0x7a>
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10d      	bne.n	8006e32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fd9d 	bl	8007956 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e1c:	e009      	b.n	8006e32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fccd 	bl	80077c0 <USBD_CtlError>
          break;
 8006e26:	e004      	b.n	8006e32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fcc8 	bl	80077c0 <USBD_CtlError>
          break;
 8006e30:	e000      	b.n	8006e34 <USBD_StdItfReq+0x7c>
          break;
 8006e32:	bf00      	nop
      }
      break;
 8006e34:	e004      	b.n	8006e40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fcc1 	bl	80077c0 <USBD_CtlError>
      break;
 8006e3e:	bf00      	nop
  }

  return ret;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	889b      	ldrh	r3, [r3, #4]
 8006e5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d007      	beq.n	8006e7a <USBD_StdEPReq+0x30>
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	f200 8145 	bhi.w	80070fa <USBD_StdEPReq+0x2b0>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <USBD_StdEPReq+0x44>
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	f040 8140 	bne.w	80070fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8c:	e13a      	b.n	8007104 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d007      	beq.n	8006ea6 <USBD_StdEPReq+0x5c>
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	f300 8129 	bgt.w	80070ee <USBD_StdEPReq+0x2a4>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d07f      	beq.n	8006fa0 <USBD_StdEPReq+0x156>
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d03c      	beq.n	8006f1e <USBD_StdEPReq+0xd4>
 8006ea4:	e123      	b.n	80070ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d002      	beq.n	8006eb8 <USBD_StdEPReq+0x6e>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d016      	beq.n	8006ee4 <USBD_StdEPReq+0x9a>
 8006eb6:	e02c      	b.n	8006f12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <USBD_StdEPReq+0x90>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d00a      	beq.n	8006eda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f003 ff91 	bl	800adf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ece:	2180      	movs	r1, #128	; 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f003 ff8d 	bl	800adf0 <USBD_LL_StallEP>
 8006ed6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ed8:	e020      	b.n	8006f1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc6f 	bl	80077c0 <USBD_CtlError>
              break;
 8006ee2:	e01b      	b.n	8006f1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10e      	bne.n	8006f0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <USBD_StdEPReq+0xc0>
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d008      	beq.n	8006f0a <USBD_StdEPReq+0xc0>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	88db      	ldrh	r3, [r3, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f003 ff73 	bl	800adf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fd23 	bl	8007956 <USBD_CtlSendStatus>

              break;
 8006f10:	e004      	b.n	8006f1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc53 	bl	80077c0 <USBD_CtlError>
              break;
 8006f1a:	bf00      	nop
          }
          break;
 8006f1c:	e0ec      	b.n	80070f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d002      	beq.n	8006f30 <USBD_StdEPReq+0xe6>
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d016      	beq.n	8006f5c <USBD_StdEPReq+0x112>
 8006f2e:	e030      	b.n	8006f92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <USBD_StdEPReq+0x108>
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b80      	cmp	r3, #128	; 0x80
 8006f3a:	d00a      	beq.n	8006f52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f003 ff55 	bl	800adf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f003 ff51 	bl	800adf0 <USBD_LL_StallEP>
 8006f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f50:	e025      	b.n	8006f9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc33 	bl	80077c0 <USBD_CtlError>
              break;
 8006f5a:	e020      	b.n	8006f9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	885b      	ldrh	r3, [r3, #2]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11b      	bne.n	8006f9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f003 ff72 	bl	800ae5c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fcec 	bl	8007956 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006f90:	e004      	b.n	8006f9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fc13 	bl	80077c0 <USBD_CtlError>
              break;
 8006f9a:	e000      	b.n	8006f9e <USBD_StdEPReq+0x154>
              break;
 8006f9c:	bf00      	nop
          }
          break;
 8006f9e:	e0ab      	b.n	80070f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <USBD_StdEPReq+0x168>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d032      	beq.n	8007016 <USBD_StdEPReq+0x1cc>
 8006fb0:	e097      	b.n	80070e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <USBD_StdEPReq+0x17e>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d004      	beq.n	8006fc8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fbfd 	bl	80077c0 <USBD_CtlError>
                break;
 8006fc6:	e091      	b.n	80070ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da0b      	bge.n	8006fe8 <USBD_StdEPReq+0x19e>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	3310      	adds	r3, #16
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	e00b      	b.n	8007000 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3304      	adds	r3, #4
 8007000:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2202      	movs	r2, #2
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fc47 	bl	80078a2 <USBD_CtlSendData>
              break;
 8007014:	e06a      	b.n	80070ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	da11      	bge.n	8007042 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3324      	adds	r3, #36	; 0x24
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d117      	bne.n	8007068 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fbc0 	bl	80077c0 <USBD_CtlError>
                  break;
 8007040:	e054      	b.n	80070ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	f003 020f 	and.w	r2, r3, #15
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fbad 	bl	80077c0 <USBD_CtlError>
                  break;
 8007066:	e041      	b.n	80070ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da0b      	bge.n	8007088 <USBD_StdEPReq+0x23e>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	3310      	adds	r3, #16
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	e00b      	b.n	80070a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	3304      	adds	r3, #4
 80070a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <USBD_StdEPReq+0x264>
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d103      	bne.n	80070b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e00e      	b.n	80070d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f003 ff04 	bl	800aec8 <USBD_LL_IsStallEP>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e002      	b.n	80070d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2202      	movs	r2, #2
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fbe1 	bl	80078a2 <USBD_CtlSendData>
              break;
 80070e0:	e004      	b.n	80070ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb6b 	bl	80077c0 <USBD_CtlError>
              break;
 80070ea:	bf00      	nop
          }
          break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb65 	bl	80077c0 <USBD_CtlError>
          break;
 80070f6:	bf00      	nop
      }
      break;
 80070f8:	e004      	b.n	8007104 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb5f 	bl	80077c0 <USBD_CtlError>
      break;
 8007102:	bf00      	nop
  }

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	2b0e      	cmp	r3, #14
 8007132:	f200 8152 	bhi.w	80073da <USBD_GetDescriptor+0x2ca>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_GetDescriptor+0x2c>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	080071ad 	.word	0x080071ad
 8007140:	080071c5 	.word	0x080071c5
 8007144:	08007205 	.word	0x08007205
 8007148:	080073db 	.word	0x080073db
 800714c:	080073db 	.word	0x080073db
 8007150:	0800737b 	.word	0x0800737b
 8007154:	080073a7 	.word	0x080073a7
 8007158:	080073db 	.word	0x080073db
 800715c:	080073db 	.word	0x080073db
 8007160:	080073db 	.word	0x080073db
 8007164:	080073db 	.word	0x080073db
 8007168:	080073db 	.word	0x080073db
 800716c:	080073db 	.word	0x080073db
 8007170:	080073db 	.word	0x080073db
 8007174:	08007179 	.word	0x08007179
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800719a:	e126      	b.n	80073ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fb0e 	bl	80077c0 <USBD_CtlError>
        err++;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	3301      	adds	r3, #1
 80071a8:	72fb      	strb	r3, [r7, #11]
      break;
 80071aa:	e11e      	b.n	80073ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7c12      	ldrb	r2, [r2, #16]
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	4610      	mov	r0, r2
 80071be:	4798      	blx	r3
 80071c0:	60f8      	str	r0, [r7, #12]
      break;
 80071c2:	e112      	b.n	80073ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7c1b      	ldrb	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10d      	bne.n	80071e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	f107 0208 	add.w	r2, r7, #8
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	2202      	movs	r2, #2
 80071e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071e6:	e100      	b.n	80073ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f107 0208 	add.w	r2, r7, #8
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	2202      	movs	r2, #2
 8007200:	701a      	strb	r2, [r3, #0]
      break;
 8007202:	e0f2      	b.n	80073ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	885b      	ldrh	r3, [r3, #2]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b05      	cmp	r3, #5
 800720c:	f200 80ac 	bhi.w	8007368 <USBD_GetDescriptor+0x258>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <USBD_GetDescriptor+0x108>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007231 	.word	0x08007231
 800721c:	08007265 	.word	0x08007265
 8007220:	08007299 	.word	0x08007299
 8007224:	080072cd 	.word	0x080072cd
 8007228:	08007301 	.word	0x08007301
 800722c:	08007335 	.word	0x08007335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7c12      	ldrb	r2, [r2, #16]
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007252:	e091      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fab2 	bl	80077c0 <USBD_CtlError>
            err++;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	3301      	adds	r3, #1
 8007260:	72fb      	strb	r3, [r7, #11]
          break;
 8007262:	e089      	b.n	8007378 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007286:	e077      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa98 	bl	80077c0 <USBD_CtlError>
            err++;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	3301      	adds	r3, #1
 8007294:	72fb      	strb	r3, [r7, #11]
          break;
 8007296:	e06f      	b.n	8007378 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	7c12      	ldrb	r2, [r2, #16]
 80072b0:	f107 0108 	add.w	r1, r7, #8
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ba:	e05d      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa7e 	bl	80077c0 <USBD_CtlError>
            err++;
 80072c4:	7afb      	ldrb	r3, [r7, #11]
 80072c6:	3301      	adds	r3, #1
 80072c8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ca:	e055      	b.n	8007378 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7c12      	ldrb	r2, [r2, #16]
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ee:	e043      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa64 	bl	80077c0 <USBD_CtlError>
            err++;
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	3301      	adds	r3, #1
 80072fc:	72fb      	strb	r3, [r7, #11]
          break;
 80072fe:	e03b      	b.n	8007378 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00b      	beq.n	8007324 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007322:	e029      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa4a 	bl	80077c0 <USBD_CtlError>
            err++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
          break;
 8007332:	e021      	b.n	8007378 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007356:	e00f      	b.n	8007378 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa30 	bl	80077c0 <USBD_CtlError>
            err++;
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	3301      	adds	r3, #1
 8007364:	72fb      	strb	r3, [r7, #11]
          break;
 8007366:	e007      	b.n	8007378 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa28 	bl	80077c0 <USBD_CtlError>
          err++;
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	3301      	adds	r3, #1
 8007374:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007376:	bf00      	nop
      }
      break;
 8007378:	e037      	b.n	80073ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7c1b      	ldrb	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	f107 0208 	add.w	r2, r7, #8
 800738e:	4610      	mov	r0, r2
 8007390:	4798      	blx	r3
 8007392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007394:	e029      	b.n	80073ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa11 	bl	80077c0 <USBD_CtlError>
        err++;
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	3301      	adds	r3, #1
 80073a2:	72fb      	strb	r3, [r7, #11]
      break;
 80073a4:	e021      	b.n	80073ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	7c1b      	ldrb	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10d      	bne.n	80073ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	f107 0208 	add.w	r2, r7, #8
 80073ba:	4610      	mov	r0, r2
 80073bc:	4798      	blx	r3
 80073be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	2207      	movs	r2, #7
 80073c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073c8:	e00f      	b.n	80073ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f9f7 	bl	80077c0 <USBD_CtlError>
        err++;
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	3301      	adds	r3, #1
 80073d6:	72fb      	strb	r3, [r7, #11]
      break;
 80073d8:	e007      	b.n	80073ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9ef 	bl	80077c0 <USBD_CtlError>
      err++;
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	3301      	adds	r3, #1
 80073e6:	72fb      	strb	r3, [r7, #11]
      break;
 80073e8:	bf00      	nop
  }

  if (err != 0U)
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d11e      	bne.n	800742e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d016      	beq.n	8007426 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00e      	beq.n	800741c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	88da      	ldrh	r2, [r3, #6]
 8007402:	893b      	ldrh	r3, [r7, #8]
 8007404:	4293      	cmp	r3, r2
 8007406:	bf28      	it	cs
 8007408:	4613      	movcs	r3, r2
 800740a:	b29b      	uxth	r3, r3
 800740c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800740e:	893b      	ldrh	r3, [r7, #8]
 8007410:	461a      	mov	r2, r3
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fa44 	bl	80078a2 <USBD_CtlSendData>
 800741a:	e009      	b.n	8007430 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9ce 	bl	80077c0 <USBD_CtlError>
 8007424:	e004      	b.n	8007430 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa95 	bl	8007956 <USBD_CtlSendStatus>
 800742c:	e000      	b.n	8007430 <USBD_GetDescriptor+0x320>
    return;
 800742e:	bf00      	nop
  }
}
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	889b      	ldrh	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d131      	bne.n	80074ae <USBD_SetAddress+0x76>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12d      	bne.n	80074ae <USBD_SetAddress+0x76>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b7f      	cmp	r3, #127	; 0x7f
 8007458:	d829      	bhi.n	80074ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d104      	bne.n	800747c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f9a3 	bl	80077c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	e01d      	b.n	80074b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7bfa      	ldrb	r2, [r7, #15]
 8007480:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f003 fd49 	bl	800af20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa61 	bl	8007956 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d004      	beq.n	80074a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a2:	e009      	b.n	80074b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ac:	e004      	b.n	80074b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f985 	bl	80077c0 <USBD_CtlError>
  }
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	4b4c      	ldr	r3, [pc, #304]	; (8007608 <USBD_SetConfig+0x148>)
 80074d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <USBD_SetConfig+0x148>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d905      	bls.n	80074ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f96c 	bl	80077c0 <USBD_CtlError>
    return USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e088      	b.n	80075fe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <USBD_SetConfig+0x3e>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d025      	beq.n	8007548 <USBD_SetConfig+0x88>
 80074fc:	e071      	b.n	80075e2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80074fe:	4b42      	ldr	r3, [pc, #264]	; (8007608 <USBD_SetConfig+0x148>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01c      	beq.n	8007540 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007506:	4b40      	ldr	r3, [pc, #256]	; (8007608 <USBD_SetConfig+0x148>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007510:	4b3d      	ldr	r3, [pc, #244]	; (8007608 <USBD_SetConfig+0x148>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff f91e 	bl	8006758 <USBD_SetClassConfig>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f949 	bl	80077c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800752e:	e065      	b.n	80075fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa10 	bl	8007956 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2203      	movs	r2, #3
 800753a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800753e:	e05d      	b.n	80075fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa08 	bl	8007956 <USBD_CtlSendStatus>
      break;
 8007546:	e059      	b.n	80075fc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007548:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <USBD_SetConfig+0x148>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d112      	bne.n	8007576 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007558:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <USBD_SetConfig+0x148>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007562:	4b29      	ldr	r3, [pc, #164]	; (8007608 <USBD_SetConfig+0x148>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff f911 	bl	8006790 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f9f1 	bl	8007956 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007574:	e042      	b.n	80075fc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <USBD_SetConfig+0x148>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d02a      	beq.n	80075da <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff f8ff 	bl	8006790 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <USBD_SetConfig+0x148>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800759c:	4b1a      	ldr	r3, [pc, #104]	; (8007608 <USBD_SetConfig+0x148>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff f8d8 	bl	8006758 <USBD_SetClassConfig>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00f      	beq.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f903 	bl	80077c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f8e4 	bl	8006790 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075d0:	e014      	b.n	80075fc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f9bf 	bl	8007956 <USBD_CtlSendStatus>
      break;
 80075d8:	e010      	b.n	80075fc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9bb 	bl	8007956 <USBD_CtlSendStatus>
      break;
 80075e0:	e00c      	b.n	80075fc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8eb 	bl	80077c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075ea:	4b07      	ldr	r3, [pc, #28]	; (8007608 <USBD_SetConfig+0x148>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff f8cd 	bl	8006790 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
      break;
 80075fa:	bf00      	nop
  }

  return ret;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200001cc 	.word	0x200001cc

0800760c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	88db      	ldrh	r3, [r3, #6]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d004      	beq.n	8007628 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8cd 	bl	80077c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007626:	e023      	b.n	8007670 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	dc02      	bgt.n	800763a <USBD_GetConfig+0x2e>
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc03      	bgt.n	8007640 <USBD_GetConfig+0x34>
 8007638:	e015      	b.n	8007666 <USBD_GetConfig+0x5a>
 800763a:	2b03      	cmp	r3, #3
 800763c:	d00b      	beq.n	8007656 <USBD_GetConfig+0x4a>
 800763e:	e012      	b.n	8007666 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3308      	adds	r3, #8
 800764a:	2201      	movs	r2, #1
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f927 	bl	80078a2 <USBD_CtlSendData>
        break;
 8007654:	e00c      	b.n	8007670 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3304      	adds	r3, #4
 800765a:	2201      	movs	r2, #1
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f91f 	bl	80078a2 <USBD_CtlSendData>
        break;
 8007664:	e004      	b.n	8007670 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8a9 	bl	80077c0 <USBD_CtlError>
        break;
 800766e:	bf00      	nop
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007688:	b2db      	uxtb	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	2b02      	cmp	r3, #2
 800768e:	d81e      	bhi.n	80076ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	88db      	ldrh	r3, [r3, #6]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d004      	beq.n	80076a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f890 	bl	80077c0 <USBD_CtlError>
        break;
 80076a0:	e01a      	b.n	80076d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f043 0202 	orr.w	r2, r3, #2
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	330c      	adds	r3, #12
 80076c2:	2202      	movs	r2, #2
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f8eb 	bl	80078a2 <USBD_CtlSendData>
      break;
 80076cc:	e004      	b.n	80076d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f875 	bl	80077c0 <USBD_CtlError>
      break;
 80076d6:	bf00      	nop
  }
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d106      	bne.n	8007700 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f92b 	bl	8007956 <USBD_CtlSendStatus>
  }
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	2b02      	cmp	r3, #2
 800771e:	d80b      	bhi.n	8007738 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10c      	bne.n	8007742 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f910 	bl	8007956 <USBD_CtlSendStatus>
      }
      break;
 8007736:	e004      	b.n	8007742 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f840 	bl	80077c0 <USBD_CtlError>
      break;
 8007740:	e000      	b.n	8007744 <USBD_ClrFeature+0x3c>
      break;
 8007742:	bf00      	nop
  }
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fa91 	bl	8006c9e <SWAPBYTE>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fa84 	bl	8006c9e <SWAPBYTE>
 8007796:	4603      	mov	r3, r0
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff fa77 	bl	8006c9e <SWAPBYTE>
 80077b0:	4603      	mov	r3, r0
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	80da      	strh	r2, [r3, #6]
}
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f003 fb0f 	bl	800adf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077d2:	2100      	movs	r1, #0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f003 fb0b 	bl	800adf0 <USBD_LL_StallEP>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d036      	beq.n	8007866 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077fc:	6938      	ldr	r0, [r7, #16]
 80077fe:	f000 f836 	bl	800786e <USBD_GetLen>
 8007802:	4603      	mov	r3, r0
 8007804:	3301      	adds	r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	4413      	add	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	7812      	ldrb	r2, [r2, #0]
 800781a:	701a      	strb	r2, [r3, #0]
  idx++;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	3301      	adds	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	4413      	add	r3, r2
 8007828:	2203      	movs	r2, #3
 800782a:	701a      	strb	r2, [r3, #0]
  idx++;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	3301      	adds	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007832:	e013      	b.n	800785c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	7812      	ldrb	r2, [r2, #0]
 800783e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3301      	adds	r3, #1
 8007844:	613b      	str	r3, [r7, #16]
    idx++;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	3301      	adds	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
    idx++;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	3301      	adds	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e7      	bne.n	8007834 <USBD_GetString+0x52>
 8007864:	e000      	b.n	8007868 <USBD_GetString+0x86>
    return;
 8007866:	bf00      	nop
  }
}
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800787e:	e005      	b.n	800788c <USBD_GetLen+0x1e>
  {
    len++;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	3301      	adds	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	3301      	adds	r3, #1
 800788a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f5      	bne.n	8007880 <USBD_GetLen+0x12>
  }

  return len;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	2100      	movs	r1, #0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f003 fb5f 	bl	800af8c <USBD_LL_Transmit>

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f003 fb4e 	bl	800af8c <USBD_LL_Transmit>

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2203      	movs	r2, #3
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f003 fb69 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f003 fb58 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007966:	2300      	movs	r3, #0
 8007968:	2200      	movs	r2, #0
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f003 fb0d 	bl	800af8c <USBD_LL_Transmit>

  return USBD_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2205      	movs	r2, #5
 8007988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800798c:	2300      	movs	r3, #0
 800798e:	2200      	movs	r2, #0
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f003 fb32 	bl	800affc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <__NVIC_SetPriority>:
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	db0a      	blt.n	80079ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	490c      	ldr	r1, [pc, #48]	; (80079f0 <__NVIC_SetPriority+0x4c>)
 80079be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c2:	0112      	lsls	r2, r2, #4
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	440b      	add	r3, r1
 80079c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079cc:	e00a      	b.n	80079e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	4908      	ldr	r1, [pc, #32]	; (80079f4 <__NVIC_SetPriority+0x50>)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	3b04      	subs	r3, #4
 80079dc:	0112      	lsls	r2, r2, #4
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	440b      	add	r3, r1
 80079e2:	761a      	strb	r2, [r3, #24]
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	e000e100 	.word	0xe000e100
 80079f4:	e000ed00 	.word	0xe000ed00

080079f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80079fc:	2100      	movs	r1, #0
 80079fe:	f06f 0004 	mvn.w	r0, #4
 8007a02:	f7ff ffcf 	bl	80079a4 <__NVIC_SetPriority>
#endif
}
 8007a06:	bf00      	nop
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a12:	f3ef 8305 	mrs	r3, IPSR
 8007a16:	603b      	str	r3, [r7, #0]
  return(result);
 8007a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a1e:	f06f 0305 	mvn.w	r3, #5
 8007a22:	607b      	str	r3, [r7, #4]
 8007a24:	e00c      	b.n	8007a40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <osKernelInitialize+0x44>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a2e:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <osKernelInitialize+0x44>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	607b      	str	r3, [r7, #4]
 8007a38:	e002      	b.n	8007a40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a40:	687b      	ldr	r3, [r7, #4]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200001d0 	.word	0x200001d0

08007a54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a5a:	f3ef 8305 	mrs	r3, IPSR
 8007a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a66:	f06f 0305 	mvn.w	r3, #5
 8007a6a:	607b      	str	r3, [r7, #4]
 8007a6c:	e010      	b.n	8007a90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <osKernelStart+0x48>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d109      	bne.n	8007a8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a76:	f7ff ffbf 	bl	80079f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a7a:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <osKernelStart+0x48>)
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a80:	f001 f866 	bl	8008b50 <vTaskStartScheduler>
      stat = osOK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	607b      	str	r3, [r7, #4]
 8007a88:	e002      	b.n	8007a90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a90:	687b      	ldr	r3, [r7, #4]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200001d0 	.word	0x200001d0

08007aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab0:	f3ef 8305 	mrs	r3, IPSR
 8007ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d17e      	bne.n	8007bba <osThreadNew+0x11a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d07b      	beq.n	8007bba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ac6:	2318      	movs	r3, #24
 8007ac8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d045      	beq.n	8007b66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <osThreadNew+0x48>
        name = attr->name;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <osThreadNew+0x6e>
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b38      	cmp	r3, #56	; 0x38
 8007b00:	d805      	bhi.n	8007b0e <osThreadNew+0x6e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <osThreadNew+0x72>
        return (NULL);
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e054      	b.n	8007bbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	089b      	lsrs	r3, r3, #2
 8007b20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00e      	beq.n	8007b48 <osThreadNew+0xa8>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b5b      	cmp	r3, #91	; 0x5b
 8007b30:	d90a      	bls.n	8007b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d006      	beq.n	8007b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <osThreadNew+0xa8>
        mem = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e010      	b.n	8007b6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10c      	bne.n	8007b6a <osThreadNew+0xca>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d108      	bne.n	8007b6a <osThreadNew+0xca>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <osThreadNew+0xca>
          mem = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61bb      	str	r3, [r7, #24]
 8007b64:	e001      	b.n	8007b6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d110      	bne.n	8007b92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b78:	9202      	str	r2, [sp, #8]
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6a3a      	ldr	r2, [r7, #32]
 8007b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fe0c 	bl	80087a4 <xTaskCreateStatic>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	e013      	b.n	8007bba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d110      	bne.n	8007bba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f107 0310 	add.w	r3, r7, #16
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fe57 	bl	800885e <xTaskCreate>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d001      	beq.n	8007bba <osThreadNew+0x11a>
            hTask = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bba:	693b      	ldr	r3, [r7, #16]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3728      	adds	r7, #40	; 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bcc:	f3ef 8305 	mrs	r3, IPSR
 8007bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <osDelay+0x1c>
    stat = osErrorISR;
 8007bd8:	f06f 0305 	mvn.w	r3, #5
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e007      	b.n	8007bf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 ff7c 	bl	8008ae8 <vTaskDelay>
    }
  }

  return (stat);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <vApplicationGetIdleTaskMemory+0x30>)
 8007c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2280      	movs	r2, #128	; 0x80
 8007c18:	601a      	str	r2, [r3, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	200001d4 	.word	0x200001d4
 8007c2c:	20000230 	.word	0x20000230

08007c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a06      	ldr	r2, [pc, #24]	; (8007c60 <vApplicationGetTimerTaskMemory+0x30>)
 8007c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c4e:	601a      	str	r2, [r3, #0]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20000430 	.word	0x20000430
 8007c60:	2000048c 	.word	0x2000048c

08007c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f103 0208 	add.w	r2, r3, #8
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f103 0208 	add.w	r2, r3, #8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f103 0208 	add.w	r2, r3, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	601a      	str	r2, [r3, #0]
}
 8007cfa:	bf00      	nop
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d103      	bne.n	8007d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e00c      	b.n	8007d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e002      	b.n	8007d34 <vListInsert+0x2e>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d2f6      	bcs.n	8007d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	601a      	str	r2, [r3, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6892      	ldr	r2, [r2, #8]
 8007d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6852      	ldr	r2, [r2, #4]
 8007d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d103      	bne.n	8007dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	1e5a      	subs	r2, r3, #1
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007df6:	f002 f84d 	bl	8009e94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	441a      	add	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	3b01      	subs	r3, #1
 8007e28:	68f9      	ldr	r1, [r7, #12]
 8007e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	22ff      	movs	r2, #255	; 0xff
 8007e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	22ff      	movs	r2, #255	; 0xff
 8007e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d114      	bne.n	8007e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01a      	beq.n	8007e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3310      	adds	r3, #16
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 f903 	bl	8009064 <xTaskRemoveFromEventList>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d012      	beq.n	8007e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <xQueueGenericReset+0xcc>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	e009      	b.n	8007e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3310      	adds	r3, #16
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fef2 	bl	8007c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff feed 	bl	8007c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e8a:	f002 f833 	bl	8009ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e8e:	2301      	movs	r3, #1
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	; 0x38
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <xQueueGenericCreateStatic+0x52>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <xQueueGenericCreateStatic+0x56>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <xQueueGenericCreateStatic+0x58>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	623b      	str	r3, [r7, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <xQueueGenericCreateStatic+0x7e>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <xQueueGenericCreateStatic+0x82>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericCreateStatic+0x84>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	61fb      	str	r3, [r7, #28]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f3a:	2350      	movs	r3, #80	; 0x50
 8007f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b50      	cmp	r3, #80	; 0x50
 8007f42:	d00a      	beq.n	8007f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	61bb      	str	r3, [r7, #24]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f805 	bl	8007f8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3730      	adds	r7, #48	; 0x30
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d103      	bne.n	8007fa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e002      	b.n	8007fae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fba:	2101      	movs	r1, #1
 8007fbc:	69b8      	ldr	r0, [r7, #24]
 8007fbe:	f7ff ff05 	bl	8007dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08e      	sub	sp, #56	; 0x38
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueGenericSend+0x32>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <xQueueGenericSend+0x40>
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <xQueueGenericSend+0x44>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <xQueueGenericSend+0x46>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xQueueGenericSend+0x60>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x6e>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <xQueueGenericSend+0x72>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueGenericSend+0x74>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xQueueGenericSend+0x8e>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	623b      	str	r3, [r7, #32]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008062:	f001 f9bd 	bl	80093e0 <xTaskGetSchedulerState>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <xQueueGenericSend+0x9e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <xQueueGenericSend+0xa2>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericSend+0xa4>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericSend+0xbe>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	61fb      	str	r3, [r7, #28]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008092:	f001 feff 	bl	8009e94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	429a      	cmp	r2, r3
 80080a0:	d302      	bcc.n	80080a8 <xQueueGenericSend+0xd4>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d129      	bne.n	80080fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ae:	f000 fa0b 	bl	80084c8 <prvCopyDataToQueue>
 80080b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	3324      	adds	r3, #36	; 0x24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 ffcf 	bl	8009064 <xTaskRemoveFromEventList>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d013      	beq.n	80080f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080cc:	4b3f      	ldr	r3, [pc, #252]	; (80081cc <xQueueGenericSend+0x1f8>)
 80080ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	e00a      	b.n	80080f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <xQueueGenericSend+0x1f8>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080f4:	f001 fefe 	bl	8009ef4 <vPortExitCritical>
				return pdPASS;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e063      	b.n	80081c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d103      	bne.n	800810a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008102:	f001 fef7 	bl	8009ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008106:	2300      	movs	r3, #0
 8008108:	e05c      	b.n	80081c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008110:	f107 0314 	add.w	r3, r7, #20
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f809 	bl	800912c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800811e:	f001 fee9 	bl	8009ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008122:	f000 fd7b 	bl	8008c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008126:	f001 feb5 	bl	8009e94 <vPortEnterCritical>
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008130:	b25b      	sxtb	r3, r3
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d103      	bne.n	8008140 <xQueueGenericSend+0x16c>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008146:	b25b      	sxtb	r3, r3
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d103      	bne.n	8008156 <xQueueGenericSend+0x182>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008156:	f001 fecd 	bl	8009ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800815a:	1d3a      	adds	r2, r7, #4
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fff8 	bl	8009158 <xTaskCheckForTimeOut>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d124      	bne.n	80081b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800816e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008170:	f000 faa2 	bl	80086b8 <prvIsQueueFull>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d018      	beq.n	80081ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	3310      	adds	r3, #16
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ff1e 	bl	8008fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800818a:	f000 fa2d 	bl	80085e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800818e:	f000 fd53 	bl	8008c38 <xTaskResumeAll>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f af7c 	bne.w	8008092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800819a:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <xQueueGenericSend+0x1f8>)
 800819c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	e772      	b.n	8008092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ae:	f000 fa1b 	bl	80085e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081b2:	f000 fd41 	bl	8008c38 <xTaskResumeAll>
 80081b6:	e76c      	b.n	8008092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ba:	f000 fa15 	bl	80085e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081be:	f000 fd3b 	bl	8008c38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3738      	adds	r7, #56	; 0x38
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b090      	sub	sp, #64	; 0x40
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081fa:	bf00      	nop
 80081fc:	e7fe      	b.n	80081fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d103      	bne.n	800820c <xQueueGenericSendFromISR+0x3c>
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <xQueueGenericSendFromISR+0x40>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <xQueueGenericSendFromISR+0x42>
 8008210:	2300      	movs	r3, #0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d103      	bne.n	800823a <xQueueGenericSendFromISR+0x6a>
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <xQueueGenericSendFromISR+0x6e>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueGenericSendFromISR+0x70>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800825a:	f001 fefd 	bl	800a058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800825e:	f3ef 8211 	mrs	r2, BASEPRI
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	61fa      	str	r2, [r7, #28]
 8008274:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008276:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <xQueueGenericSendFromISR+0xbc>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d12f      	bne.n	80082ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082a2:	f000 f911 	bl	80084c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d112      	bne.n	80082d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d016      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	3324      	adds	r3, #36	; 0x24
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fed1 	bl	8009064 <xTaskRemoveFromEventList>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e007      	b.n	80082e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082da:	3301      	adds	r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	b25a      	sxtb	r2, r3
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80082ea:	e001      	b.n	80082f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3740      	adds	r7, #64	; 0x40
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	; 0x30
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <xQueueReceive+0x30>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	623b      	str	r3, [r7, #32]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueReceive+0x3e>
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <xQueueReceive+0x42>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueReceive+0x44>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xQueueReceive+0x5e>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61fb      	str	r3, [r7, #28]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008366:	f001 f83b 	bl	80093e0 <xTaskGetSchedulerState>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <xQueueReceive+0x6e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <xQueueReceive+0x72>
 8008376:	2301      	movs	r3, #1
 8008378:	e000      	b.n	800837c <xQueueReceive+0x74>
 800837a:	2300      	movs	r3, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <xQueueReceive+0x8e>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	61bb      	str	r3, [r7, #24]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008396:	f001 fd7d 	bl	8009e94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01f      	beq.n	80083e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f000 f8f7 	bl	800859c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	1e5a      	subs	r2, r3, #1
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	3310      	adds	r3, #16
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fe4e 	bl	8009064 <xTaskRemoveFromEventList>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083ce:	4b3d      	ldr	r3, [pc, #244]	; (80084c4 <xQueueReceive+0x1bc>)
 80083d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083de:	f001 fd89 	bl	8009ef4 <vPortExitCritical>
				return pdPASS;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e069      	b.n	80084ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083ec:	f001 fd82 	bl	8009ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e062      	b.n	80084ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083fa:	f107 0310 	add.w	r3, r7, #16
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fe94 	bl	800912c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008408:	f001 fd74 	bl	8009ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800840c:	f000 fc06 	bl	8008c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008410:	f001 fd40 	bl	8009e94 <vPortEnterCritical>
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008420:	d103      	bne.n	800842a <xQueueReceive+0x122>
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008430:	b25b      	sxtb	r3, r3
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d103      	bne.n	8008440 <xQueueReceive+0x138>
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008440:	f001 fd58 	bl	8009ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008444:	1d3a      	adds	r2, r7, #4
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fe83 	bl	8009158 <xTaskCheckForTimeOut>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d123      	bne.n	80084a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845a:	f000 f917 	bl	800868c <prvIsQueueEmpty>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d017      	beq.n	8008494 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	3324      	adds	r3, #36	; 0x24
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fda9 	bl	8008fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008474:	f000 f8b8 	bl	80085e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008478:	f000 fbde 	bl	8008c38 <xTaskResumeAll>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d189      	bne.n	8008396 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <xQueueReceive+0x1bc>)
 8008484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	e780      	b.n	8008396 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 f8a7 	bl	80085e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800849a:	f000 fbcd 	bl	8008c38 <xTaskResumeAll>
 800849e:	e77a      	b.n	8008396 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a2:	f000 f8a1 	bl	80085e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084a6:	f000 fbc7 	bl	8008c38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ac:	f000 f8ee 	bl	800868c <prvIsQueueEmpty>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f43f af6f 	beq.w	8008396 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3730      	adds	r7, #48	; 0x30
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10d      	bne.n	8008502 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d14d      	bne.n	800858a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 ff92 	bl	800941c <xTaskPriorityDisinherit>
 80084f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	e043      	b.n	800858a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d119      	bne.n	800853c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6858      	ldr	r0, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	461a      	mov	r2, r3
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	f002 fe4e 	bl	800b1b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	441a      	add	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	429a      	cmp	r2, r3
 8008530:	d32b      	bcc.n	800858a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	e026      	b.n	800858a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68d8      	ldr	r0, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	461a      	mov	r2, r3
 8008546:	68b9      	ldr	r1, [r7, #8]
 8008548:	f002 fe34 	bl	800b1b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	425b      	negs	r3, r3
 8008556:	441a      	add	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d207      	bcs.n	8008578 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	425b      	negs	r3, r3
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d105      	bne.n	800858a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	3b01      	subs	r3, #1
 8008588:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008592:	697b      	ldr	r3, [r7, #20]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d018      	beq.n	80085e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	441a      	add	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d303      	bcc.n	80085d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68d9      	ldr	r1, [r3, #12]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	461a      	mov	r2, r3
 80085da:	6838      	ldr	r0, [r7, #0]
 80085dc:	f002 fdea 	bl	800b1b4 <memcpy>
	}
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085f0:	f001 fc50 	bl	8009e94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085fc:	e011      	b.n	8008622 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d012      	beq.n	800862c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3324      	adds	r3, #36	; 0x24
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fd2a 	bl	8009064 <xTaskRemoveFromEventList>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008616:	f000 fe01 	bl	800921c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	3b01      	subs	r3, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dce9      	bgt.n	80085fe <prvUnlockQueue+0x16>
 800862a:	e000      	b.n	800862e <prvUnlockQueue+0x46>
					break;
 800862c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008636:	f001 fc5d 	bl	8009ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800863a:	f001 fc2b 	bl	8009e94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008644:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008646:	e011      	b.n	800866c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d012      	beq.n	8008676 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3310      	adds	r3, #16
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fd05 	bl	8009064 <xTaskRemoveFromEventList>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008660:	f000 fddc 	bl	800921c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	3b01      	subs	r3, #1
 8008668:	b2db      	uxtb	r3, r3
 800866a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800866c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	dce9      	bgt.n	8008648 <prvUnlockQueue+0x60>
 8008674:	e000      	b.n	8008678 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008676:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	22ff      	movs	r2, #255	; 0xff
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008680:	f001 fc38 	bl	8009ef4 <vPortExitCritical>
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008694:	f001 fbfe 	bl	8009e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e001      	b.n	80086aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086aa:	f001 fc23 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 80086ae:	68fb      	ldr	r3, [r7, #12]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c0:	f001 fbe8 	bl	8009e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d102      	bne.n	80086d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e001      	b.n	80086da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086da:	f001 fc0b 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e014      	b.n	8008722 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086f8:	4a0f      	ldr	r2, [pc, #60]	; (8008738 <vQueueAddToRegistry+0x50>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10b      	bne.n	800871c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008704:	490c      	ldr	r1, [pc, #48]	; (8008738 <vQueueAddToRegistry+0x50>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800870e:	4a0a      	ldr	r2, [pc, #40]	; (8008738 <vQueueAddToRegistry+0x50>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4413      	add	r3, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800871a:	e006      	b.n	800872a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b07      	cmp	r3, #7
 8008726:	d9e7      	bls.n	80086f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20001ea4 	.word	0x20001ea4

0800873c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800874c:	f001 fba2 	bl	8009e94 <vPortEnterCritical>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008756:	b25b      	sxtb	r3, r3
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d103      	bne.n	8008766 <vQueueWaitForMessageRestricted+0x2a>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876c:	b25b      	sxtb	r3, r3
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d103      	bne.n	800877c <vQueueWaitForMessageRestricted+0x40>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800877c:	f001 fbba 	bl	8009ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	2b00      	cmp	r3, #0
 8008786:	d106      	bne.n	8008796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3324      	adds	r3, #36	; 0x24
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fc3b 	bl	800900c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008796:	6978      	ldr	r0, [r7, #20]
 8008798:	f7ff ff26 	bl	80085e8 <prvUnlockQueue>
	}
 800879c:	bf00      	nop
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08e      	sub	sp, #56	; 0x38
 80087a8:	af04      	add	r7, sp, #16
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	623b      	str	r3, [r7, #32]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10a      	bne.n	80087ea <xTaskCreateStatic+0x46>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	61fb      	str	r3, [r7, #28]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087ea:	235c      	movs	r3, #92	; 0x5c
 80087ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b5c      	cmp	r3, #92	; 0x5c
 80087f2:	d00a      	beq.n	800880a <xTaskCreateStatic+0x66>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	61bb      	str	r3, [r7, #24]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800880a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d01e      	beq.n	8008850 <xTaskCreateStatic+0xac>
 8008812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01b      	beq.n	8008850 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008820:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2202      	movs	r2, #2
 8008826:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800882a:	2300      	movs	r3, #0
 800882c:	9303      	str	r3, [sp, #12]
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	9302      	str	r3, [sp, #8]
 8008832:	f107 0314 	add.w	r3, r7, #20
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	68b9      	ldr	r1, [r7, #8]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f850 	bl	80088e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800884a:	f000 f8dd 	bl	8008a08 <prvAddNewTaskToReadyList>
 800884e:	e001      	b.n	8008854 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008854:	697b      	ldr	r3, [r7, #20]
	}
 8008856:	4618      	mov	r0, r3
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800885e:	b580      	push	{r7, lr}
 8008860:	b08c      	sub	sp, #48	; 0x30
 8008862:	af04      	add	r7, sp, #16
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fc30 	bl	800a0d8 <pvPortMalloc>
 8008878:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008880:	205c      	movs	r0, #92	; 0x5c
 8008882:	f001 fc29 	bl	800a0d8 <pvPortMalloc>
 8008886:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
 8008894:	e005      	b.n	80088a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008896:	6978      	ldr	r0, [r7, #20]
 8008898:	f001 fcea 	bl	800a270 <vPortFree>
 800889c:	e001      	b.n	80088a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d017      	beq.n	80088d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088b0:	88fa      	ldrh	r2, [r7, #6]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 f80e 	bl	80088e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088cc:	69f8      	ldr	r0, [r7, #28]
 80088ce:	f000 f89b 	bl	8008a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80088d2:	2301      	movs	r3, #1
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	e002      	b.n	80088de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80088d8:	f04f 33ff 	mov.w	r3, #4294967295
 80088dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088de:	69bb      	ldr	r3, [r7, #24]
	}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3720      	adds	r7, #32
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	461a      	mov	r2, r3
 8008900:	21a5      	movs	r1, #165	; 0xa5
 8008902:	f002 fc65 	bl	800b1d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008910:	3b01      	subs	r3, #1
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <prvInitialiseNewTask+0x58>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	617b      	str	r3, [r7, #20]
}
 800893c:	bf00      	nop
 800893e:	e7fe      	b.n	800893e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01f      	beq.n	8008986 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e012      	b.n	8008972 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	7819      	ldrb	r1, [r3, #0]
 8008954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	3334      	adds	r3, #52	; 0x34
 800895c:	460a      	mov	r2, r1
 800895e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d006      	beq.n	800897a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	3301      	adds	r3, #1
 8008970:	61fb      	str	r3, [r7, #28]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2b0f      	cmp	r3, #15
 8008976:	d9e9      	bls.n	800894c <prvInitialiseNewTask+0x64>
 8008978:	e000      	b.n	800897c <prvInitialiseNewTask+0x94>
			{
				break;
 800897a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008984:	e003      	b.n	800898e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	2b37      	cmp	r3, #55	; 0x37
 8008992:	d901      	bls.n	8008998 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008994:	2337      	movs	r3, #55	; 0x37
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800899c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	2200      	movs	r2, #0
 80089a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff f978 	bl	8007ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	3318      	adds	r3, #24
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff f973 	bl	8007ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	2200      	movs	r2, #0
 80089d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	68f9      	ldr	r1, [r7, #12]
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f001 f928 	bl	8009c3c <pxPortInitialiseStack>
 80089ec:	4602      	mov	r2, r0
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089fe:	bf00      	nop
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a10:	f001 fa40 	bl	8009e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a14:	4b2d      	ldr	r3, [pc, #180]	; (8008acc <prvAddNewTaskToReadyList+0xc4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	4a2c      	ldr	r2, [pc, #176]	; (8008acc <prvAddNewTaskToReadyList+0xc4>)
 8008a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <prvAddNewTaskToReadyList+0xc8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a26:	4a2a      	ldr	r2, [pc, #168]	; (8008ad0 <prvAddNewTaskToReadyList+0xc8>)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a2c:	4b27      	ldr	r3, [pc, #156]	; (8008acc <prvAddNewTaskToReadyList+0xc4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d110      	bne.n	8008a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a34:	f000 fc16 	bl	8009264 <prvInitialiseTaskLists>
 8008a38:	e00d      	b.n	8008a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a3a:	4b26      	ldr	r3, [pc, #152]	; (8008ad4 <prvAddNewTaskToReadyList+0xcc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a42:	4b23      	ldr	r3, [pc, #140]	; (8008ad0 <prvAddNewTaskToReadyList+0xc8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d802      	bhi.n	8008a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <prvAddNewTaskToReadyList+0xc8>)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a56:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <prvAddNewTaskToReadyList+0xd0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ad8 <prvAddNewTaskToReadyList+0xd0>)
 8008a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a60:	4b1d      	ldr	r3, [pc, #116]	; (8008ad8 <prvAddNewTaskToReadyList+0xd0>)
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6c:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <prvAddNewTaskToReadyList+0xd4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d903      	bls.n	8008a7c <prvAddNewTaskToReadyList+0x74>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	4a18      	ldr	r2, [pc, #96]	; (8008adc <prvAddNewTaskToReadyList+0xd4>)
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <prvAddNewTaskToReadyList+0xd8>)
 8008a8a:	441a      	add	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7ff f913 	bl	8007cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a98:	f001 fa2c 	bl	8009ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <prvAddNewTaskToReadyList+0xcc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00e      	beq.n	8008ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <prvAddNewTaskToReadyList+0xc8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d207      	bcs.n	8008ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ab2:	4b0c      	ldr	r3, [pc, #48]	; (8008ae4 <prvAddNewTaskToReadyList+0xdc>)
 8008ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000d60 	.word	0x20000d60
 8008ad0:	2000088c 	.word	0x2000088c
 8008ad4:	20000d6c 	.word	0x20000d6c
 8008ad8:	20000d7c 	.word	0x20000d7c
 8008adc:	20000d68 	.word	0x20000d68
 8008ae0:	20000890 	.word	0x20000890
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008afa:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <vTaskDelay+0x60>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <vTaskDelay+0x30>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b18:	f000 f880 	bl	8008c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fcea 	bl	80094f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b24:	f000 f888 	bl	8008c38 <xTaskResumeAll>
 8008b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d107      	bne.n	8008b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b30:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <vTaskDelay+0x64>)
 8008b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000d88 	.word	0x20000d88
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	; 0x28
 8008b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b5e:	463a      	mov	r2, r7
 8008b60:	1d39      	adds	r1, r7, #4
 8008b62:	f107 0308 	add.w	r3, r7, #8
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff f848 	bl	8007bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	9202      	str	r2, [sp, #8]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	4921      	ldr	r1, [pc, #132]	; (8008c04 <vTaskStartScheduler+0xb4>)
 8008b80:	4821      	ldr	r0, [pc, #132]	; (8008c08 <vTaskStartScheduler+0xb8>)
 8008b82:	f7ff fe0f 	bl	80087a4 <xTaskCreateStatic>
 8008b86:	4603      	mov	r3, r0
 8008b88:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <vTaskStartScheduler+0xbc>)
 8008b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	; (8008c0c <vTaskStartScheduler+0xbc>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b94:	2301      	movs	r3, #1
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	e001      	b.n	8008b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d102      	bne.n	8008baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ba4:	f000 fcfc 	bl	80095a0 <xTimerCreateTimerTask>
 8008ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d116      	bne.n	8008bde <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	613b      	str	r3, [r7, #16]
}
 8008bc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008bc4:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <vTaskStartScheduler+0xc0>)
 8008bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <vTaskStartScheduler+0xc4>)
 8008bce:	2201      	movs	r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008bd2:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <vTaskStartScheduler+0xc8>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008bd8:	f001 f8ba 	bl	8009d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bdc:	e00e      	b.n	8008bfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d10a      	bne.n	8008bfc <vTaskStartScheduler+0xac>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <vTaskStartScheduler+0xaa>
}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	0800b21c 	.word	0x0800b21c
 8008c08:	08009235 	.word	0x08009235
 8008c0c:	20000d84 	.word	0x20000d84
 8008c10:	20000d80 	.word	0x20000d80
 8008c14:	20000d6c 	.word	0x20000d6c
 8008c18:	20000d64 	.word	0x20000d64

08008c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <vTaskSuspendAll+0x18>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	4a03      	ldr	r2, [pc, #12]	; (8008c34 <vTaskSuspendAll+0x18>)
 8008c28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c2a:	bf00      	nop
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	20000d88 	.word	0x20000d88

08008c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c46:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <xTaskResumeAll+0x118>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	603b      	str	r3, [r7, #0]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c64:	f001 f916 	bl	8009e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c68:	4b39      	ldr	r3, [pc, #228]	; (8008d50 <xTaskResumeAll+0x118>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a38      	ldr	r2, [pc, #224]	; (8008d50 <xTaskResumeAll+0x118>)
 8008c70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c72:	4b37      	ldr	r3, [pc, #220]	; (8008d50 <xTaskResumeAll+0x118>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d162      	bne.n	8008d40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c7a:	4b36      	ldr	r3, [pc, #216]	; (8008d54 <xTaskResumeAll+0x11c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d05e      	beq.n	8008d40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c82:	e02f      	b.n	8008ce4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c84:	4b34      	ldr	r3, [pc, #208]	; (8008d58 <xTaskResumeAll+0x120>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3318      	adds	r3, #24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff f871 	bl	8007d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff f86c 	bl	8007d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <xTaskResumeAll+0x124>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d903      	bls.n	8008cb4 <xTaskResumeAll+0x7c>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <xTaskResumeAll+0x124>)
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4a27      	ldr	r2, [pc, #156]	; (8008d60 <xTaskResumeAll+0x128>)
 8008cc2:	441a      	add	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f7fe fff7 	bl	8007cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4b23      	ldr	r3, [pc, #140]	; (8008d64 <xTaskResumeAll+0x12c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008cde:	4b22      	ldr	r3, [pc, #136]	; (8008d68 <xTaskResumeAll+0x130>)
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ce4:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <xTaskResumeAll+0x120>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1cb      	bne.n	8008c84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cf2:	f000 fb55 	bl	80093a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <xTaskResumeAll+0x134>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f000 f847 	bl	8008d94 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <xTaskResumeAll+0x130>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1f1      	bne.n	8008d02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d1e:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <xTaskResumeAll+0x134>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <xTaskResumeAll+0x130>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d009      	beq.n	8008d40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <xTaskResumeAll+0x138>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d40:	f001 f8d8 	bl	8009ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8008d44:	68bb      	ldr	r3, [r7, #8]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000d88 	.word	0x20000d88
 8008d54:	20000d60 	.word	0x20000d60
 8008d58:	20000d20 	.word	0x20000d20
 8008d5c:	20000d68 	.word	0x20000d68
 8008d60:	20000890 	.word	0x20000890
 8008d64:	2000088c 	.word	0x2000088c
 8008d68:	20000d74 	.word	0x20000d74
 8008d6c:	20000d70 	.word	0x20000d70
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <xTaskGetTickCount+0x1c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d80:	687b      	ldr	r3, [r7, #4]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000d64 	.word	0x20000d64

08008d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d9e:	4b4f      	ldr	r3, [pc, #316]	; (8008edc <xTaskIncrementTick+0x148>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 808f 	bne.w	8008ec6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008da8:	4b4d      	ldr	r3, [pc, #308]	; (8008ee0 <xTaskIncrementTick+0x14c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3301      	adds	r3, #1
 8008dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008db0:	4a4b      	ldr	r2, [pc, #300]	; (8008ee0 <xTaskIncrementTick+0x14c>)
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d120      	bne.n	8008dfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dbc:	4b49      	ldr	r3, [pc, #292]	; (8008ee4 <xTaskIncrementTick+0x150>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <xTaskIncrementTick+0x48>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	603b      	str	r3, [r7, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <xTaskIncrementTick+0x46>
 8008ddc:	4b41      	ldr	r3, [pc, #260]	; (8008ee4 <xTaskIncrementTick+0x150>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	4b41      	ldr	r3, [pc, #260]	; (8008ee8 <xTaskIncrementTick+0x154>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a3f      	ldr	r2, [pc, #252]	; (8008ee4 <xTaskIncrementTick+0x150>)
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	4a3f      	ldr	r2, [pc, #252]	; (8008ee8 <xTaskIncrementTick+0x154>)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <xTaskIncrementTick+0x158>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a3d      	ldr	r2, [pc, #244]	; (8008eec <xTaskIncrementTick+0x158>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	f000 fad1 	bl	80093a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dfe:	4b3c      	ldr	r3, [pc, #240]	; (8008ef0 <xTaskIncrementTick+0x15c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d349      	bcc.n	8008e9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e08:	4b36      	ldr	r3, [pc, #216]	; (8008ee4 <xTaskIncrementTick+0x150>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e12:	4b37      	ldr	r3, [pc, #220]	; (8008ef0 <xTaskIncrementTick+0x15c>)
 8008e14:	f04f 32ff 	mov.w	r2, #4294967295
 8008e18:	601a      	str	r2, [r3, #0]
					break;
 8008e1a:	e03f      	b.n	8008e9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e1c:	4b31      	ldr	r3, [pc, #196]	; (8008ee4 <xTaskIncrementTick+0x150>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d203      	bcs.n	8008e3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e34:	4a2e      	ldr	r2, [pc, #184]	; (8008ef0 <xTaskIncrementTick+0x15c>)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e3a:	e02f      	b.n	8008e9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe ff99 	bl	8007d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	3318      	adds	r3, #24
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe ff90 	bl	8007d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <xTaskIncrementTick+0x160>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d903      	bls.n	8008e6c <xTaskIncrementTick+0xd8>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	4a22      	ldr	r2, [pc, #136]	; (8008ef4 <xTaskIncrementTick+0x160>)
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4a1f      	ldr	r2, [pc, #124]	; (8008ef8 <xTaskIncrementTick+0x164>)
 8008e7a:	441a      	add	r2, r3
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7fe ff1b 	bl	8007cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <xTaskIncrementTick+0x168>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d3b8      	bcc.n	8008e08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e9a:	e7b5      	b.n	8008e08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e9c:	4b17      	ldr	r3, [pc, #92]	; (8008efc <xTaskIncrementTick+0x168>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea2:	4915      	ldr	r1, [pc, #84]	; (8008ef8 <xTaskIncrementTick+0x164>)
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d901      	bls.n	8008eb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008eb8:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <xTaskIncrementTick+0x16c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e004      	b.n	8008ed0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <xTaskIncrementTick+0x170>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4a0d      	ldr	r2, [pc, #52]	; (8008f04 <xTaskIncrementTick+0x170>)
 8008ece:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ed0:	697b      	ldr	r3, [r7, #20]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20000d88 	.word	0x20000d88
 8008ee0:	20000d64 	.word	0x20000d64
 8008ee4:	20000d18 	.word	0x20000d18
 8008ee8:	20000d1c 	.word	0x20000d1c
 8008eec:	20000d78 	.word	0x20000d78
 8008ef0:	20000d80 	.word	0x20000d80
 8008ef4:	20000d68 	.word	0x20000d68
 8008ef8:	20000890 	.word	0x20000890
 8008efc:	2000088c 	.word	0x2000088c
 8008f00:	20000d74 	.word	0x20000d74
 8008f04:	20000d70 	.word	0x20000d70

08008f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f0e:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <vTaskSwitchContext+0xa8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f16:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <vTaskSwitchContext+0xac>)
 8008f18:	2201      	movs	r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f1c:	e041      	b.n	8008fa2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <vTaskSwitchContext+0xac>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f24:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <vTaskSwitchContext+0xb0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	e010      	b.n	8008f4e <vTaskSwitchContext+0x46>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	607b      	str	r3, [r7, #4]
}
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <vTaskSwitchContext+0x3e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	491b      	ldr	r1, [pc, #108]	; (8008fbc <vTaskSwitchContext+0xb4>)
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0e4      	beq.n	8008f2c <vTaskSwitchContext+0x24>
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <vTaskSwitchContext+0xb4>)
 8008f6e:	4413      	add	r3, r2
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	605a      	str	r2, [r3, #4]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3308      	adds	r3, #8
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d104      	bne.n	8008f92 <vTaskSwitchContext+0x8a>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <vTaskSwitchContext+0xb8>)
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	4a06      	ldr	r2, [pc, #24]	; (8008fb8 <vTaskSwitchContext+0xb0>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6013      	str	r3, [r2, #0]
}
 8008fa2:	bf00      	nop
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20000d88 	.word	0x20000d88
 8008fb4:	20000d74 	.word	0x20000d74
 8008fb8:	20000d68 	.word	0x20000d68
 8008fbc:	20000890 	.word	0x20000890
 8008fc0:	2000088c 	.word	0x2000088c

08008fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60fb      	str	r3, [r7, #12]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fea:	4b07      	ldr	r3, [pc, #28]	; (8009008 <vTaskPlaceOnEventList+0x44>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3318      	adds	r3, #24
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7fe fe87 	bl	8007d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	6838      	ldr	r0, [r7, #0]
 8008ffc:	f000 fa7c 	bl	80094f8 <prvAddCurrentTaskToDelayedList>
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	2000088c 	.word	0x2000088c

0800900c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	617b      	str	r3, [r7, #20]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <vTaskPlaceOnEventListRestricted+0x54>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3318      	adds	r3, #24
 800903a:	4619      	mov	r1, r3
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7fe fe3e 	bl	8007cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009048:	f04f 33ff 	mov.w	r3, #4294967295
 800904c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	68b8      	ldr	r0, [r7, #8]
 8009052:	f000 fa51 	bl	80094f8 <prvAddCurrentTaskToDelayedList>
	}
 8009056:	bf00      	nop
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000088c 	.word	0x2000088c

08009064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60fb      	str	r3, [r7, #12]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	3318      	adds	r3, #24
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fe6f 	bl	8007d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800909a:	4b1e      	ldr	r3, [pc, #120]	; (8009114 <xTaskRemoveFromEventList+0xb0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d11d      	bne.n	80090de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fe66 	bl	8007d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b0:	4b19      	ldr	r3, [pc, #100]	; (8009118 <xTaskRemoveFromEventList+0xb4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d903      	bls.n	80090c0 <xTaskRemoveFromEventList+0x5c>
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	4a16      	ldr	r2, [pc, #88]	; (8009118 <xTaskRemoveFromEventList+0xb4>)
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4a13      	ldr	r2, [pc, #76]	; (800911c <xTaskRemoveFromEventList+0xb8>)
 80090ce:	441a      	add	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f7fe fdf1 	bl	8007cbe <vListInsertEnd>
 80090dc:	e005      	b.n	80090ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3318      	adds	r3, #24
 80090e2:	4619      	mov	r1, r3
 80090e4:	480e      	ldr	r0, [pc, #56]	; (8009120 <xTaskRemoveFromEventList+0xbc>)
 80090e6:	f7fe fdea 	bl	8007cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ee:	4b0d      	ldr	r3, [pc, #52]	; (8009124 <xTaskRemoveFromEventList+0xc0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d905      	bls.n	8009104 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <xTaskRemoveFromEventList+0xc4>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e001      	b.n	8009108 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009108:	697b      	ldr	r3, [r7, #20]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000d88 	.word	0x20000d88
 8009118:	20000d68 	.word	0x20000d68
 800911c:	20000890 	.word	0x20000890
 8009120:	20000d20 	.word	0x20000d20
 8009124:	2000088c 	.word	0x2000088c
 8009128:	20000d74 	.word	0x20000d74

0800912c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <vTaskInternalSetTimeOutState+0x24>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <vTaskInternalSetTimeOutState+0x28>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	605a      	str	r2, [r3, #4]
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000d78 	.word	0x20000d78
 8009154:	20000d64 	.word	0x20000d64

08009158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	613b      	str	r3, [r7, #16]
}
 800917a:	bf00      	nop
 800917c:	e7fe      	b.n	800917c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60fb      	str	r3, [r7, #12]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800919a:	f000 fe7b 	bl	8009e94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800919e:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <xTaskCheckForTimeOut+0xbc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d102      	bne.n	80091be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091b8:	2300      	movs	r3, #0
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	e023      	b.n	8009206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <xTaskCheckForTimeOut+0xc0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d007      	beq.n	80091da <xTaskCheckForTimeOut+0x82>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d302      	bcc.n	80091da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	e015      	b.n	8009206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d20b      	bcs.n	80091fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff9b 	bl	800912c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	e004      	b.n	8009206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009206:	f000 fe75 	bl	8009ef4 <vPortExitCritical>

	return xReturn;
 800920a:	69fb      	ldr	r3, [r7, #28]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3720      	adds	r7, #32
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000d64 	.word	0x20000d64
 8009218:	20000d78 	.word	0x20000d78

0800921c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009220:	4b03      	ldr	r3, [pc, #12]	; (8009230 <vTaskMissedYield+0x14>)
 8009222:	2201      	movs	r2, #1
 8009224:	601a      	str	r2, [r3, #0]
}
 8009226:	bf00      	nop
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	20000d74 	.word	0x20000d74

08009234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800923c:	f000 f852 	bl	80092e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <prvIdleTask+0x28>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d9f9      	bls.n	800923c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009248:	4b05      	ldr	r3, [pc, #20]	; (8009260 <prvIdleTask+0x2c>)
 800924a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009258:	e7f0      	b.n	800923c <prvIdleTask+0x8>
 800925a:	bf00      	nop
 800925c:	20000890 	.word	0x20000890
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800926a:	2300      	movs	r3, #0
 800926c:	607b      	str	r3, [r7, #4]
 800926e:	e00c      	b.n	800928a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4a12      	ldr	r2, [pc, #72]	; (80092c4 <prvInitialiseTaskLists+0x60>)
 800927c:	4413      	add	r3, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fcf0 	bl	8007c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3301      	adds	r3, #1
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b37      	cmp	r3, #55	; 0x37
 800928e:	d9ef      	bls.n	8009270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009290:	480d      	ldr	r0, [pc, #52]	; (80092c8 <prvInitialiseTaskLists+0x64>)
 8009292:	f7fe fce7 	bl	8007c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009296:	480d      	ldr	r0, [pc, #52]	; (80092cc <prvInitialiseTaskLists+0x68>)
 8009298:	f7fe fce4 	bl	8007c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800929c:	480c      	ldr	r0, [pc, #48]	; (80092d0 <prvInitialiseTaskLists+0x6c>)
 800929e:	f7fe fce1 	bl	8007c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092a2:	480c      	ldr	r0, [pc, #48]	; (80092d4 <prvInitialiseTaskLists+0x70>)
 80092a4:	f7fe fcde 	bl	8007c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092a8:	480b      	ldr	r0, [pc, #44]	; (80092d8 <prvInitialiseTaskLists+0x74>)
 80092aa:	f7fe fcdb 	bl	8007c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <prvInitialiseTaskLists+0x78>)
 80092b0:	4a05      	ldr	r2, [pc, #20]	; (80092c8 <prvInitialiseTaskLists+0x64>)
 80092b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <prvInitialiseTaskLists+0x7c>)
 80092b6:	4a05      	ldr	r2, [pc, #20]	; (80092cc <prvInitialiseTaskLists+0x68>)
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000890 	.word	0x20000890
 80092c8:	20000cf0 	.word	0x20000cf0
 80092cc:	20000d04 	.word	0x20000d04
 80092d0:	20000d20 	.word	0x20000d20
 80092d4:	20000d34 	.word	0x20000d34
 80092d8:	20000d4c 	.word	0x20000d4c
 80092dc:	20000d18 	.word	0x20000d18
 80092e0:	20000d1c 	.word	0x20000d1c

080092e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092ea:	e019      	b.n	8009320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092ec:	f000 fdd2 	bl	8009e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f0:	4b10      	ldr	r3, [pc, #64]	; (8009334 <prvCheckTasksWaitingTermination+0x50>)
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fd3b 	bl	8007d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009302:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <prvCheckTasksWaitingTermination+0x54>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3b01      	subs	r3, #1
 8009308:	4a0b      	ldr	r2, [pc, #44]	; (8009338 <prvCheckTasksWaitingTermination+0x54>)
 800930a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <prvCheckTasksWaitingTermination+0x58>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3b01      	subs	r3, #1
 8009312:	4a0a      	ldr	r2, [pc, #40]	; (800933c <prvCheckTasksWaitingTermination+0x58>)
 8009314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009316:	f000 fded 	bl	8009ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f810 	bl	8009340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009320:	4b06      	ldr	r3, [pc, #24]	; (800933c <prvCheckTasksWaitingTermination+0x58>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e1      	bne.n	80092ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000d34 	.word	0x20000d34
 8009338:	20000d60 	.word	0x20000d60
 800933c:	20000d48 	.word	0x20000d48

08009340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800934e:	2b00      	cmp	r3, #0
 8009350:	d108      	bne.n	8009364 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ff8a 	bl	800a270 <vPortFree>
				vPortFree( pxTCB );
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 ff87 	bl	800a270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009362:	e018      	b.n	8009396 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800936a:	2b01      	cmp	r3, #1
 800936c:	d103      	bne.n	8009376 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 ff7e 	bl	800a270 <vPortFree>
	}
 8009374:	e00f      	b.n	8009396 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800937c:	2b02      	cmp	r3, #2
 800937e:	d00a      	beq.n	8009396 <prvDeleteTCB+0x56>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <prvDeleteTCB+0x54>
	}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <prvResetNextTaskUnblockTime+0x38>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d104      	bne.n	80093ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <prvResetNextTaskUnblockTime+0x3c>)
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093b8:	e008      	b.n	80093cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <prvResetNextTaskUnblockTime+0x38>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4a04      	ldr	r2, [pc, #16]	; (80093dc <prvResetNextTaskUnblockTime+0x3c>)
 80093ca:	6013      	str	r3, [r2, #0]
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	20000d18 	.word	0x20000d18
 80093dc:	20000d80 	.word	0x20000d80

080093e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <xTaskGetSchedulerState+0x34>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093ee:	2301      	movs	r3, #1
 80093f0:	607b      	str	r3, [r7, #4]
 80093f2:	e008      	b.n	8009406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093f4:	4b08      	ldr	r3, [pc, #32]	; (8009418 <xTaskGetSchedulerState+0x38>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093fc:	2302      	movs	r3, #2
 80093fe:	607b      	str	r3, [r7, #4]
 8009400:	e001      	b.n	8009406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009402:	2300      	movs	r3, #0
 8009404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009406:	687b      	ldr	r3, [r7, #4]
	}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	20000d6c 	.word	0x20000d6c
 8009418:	20000d88 	.word	0x20000d88

0800941c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d056      	beq.n	80094e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009432:	4b2e      	ldr	r3, [pc, #184]	; (80094ec <xTaskPriorityDisinherit+0xd0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	429a      	cmp	r2, r3
 800943a:	d00a      	beq.n	8009452 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60fb      	str	r3, [r7, #12]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	60bb      	str	r3, [r7, #8]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	1e5a      	subs	r2, r3, #1
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009482:	429a      	cmp	r2, r3
 8009484:	d02c      	beq.n	80094e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800948a:	2b00      	cmp	r3, #0
 800948c:	d128      	bne.n	80094e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	3304      	adds	r3, #4
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fc70 	bl	8007d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <xTaskPriorityDisinherit+0xd4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d903      	bls.n	80094c0 <xTaskPriorityDisinherit+0xa4>
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <xTaskPriorityDisinherit+0xd4>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <xTaskPriorityDisinherit+0xd8>)
 80094ce:	441a      	add	r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fbf1 	bl	8007cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094e0:	697b      	ldr	r3, [r7, #20]
	}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	2000088c 	.word	0x2000088c
 80094f0:	20000d68 	.word	0x20000d68
 80094f4:	20000890 	.word	0x20000890

080094f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009502:	4b21      	ldr	r3, [pc, #132]	; (8009588 <prvAddCurrentTaskToDelayedList+0x90>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009508:	4b20      	ldr	r3, [pc, #128]	; (800958c <prvAddCurrentTaskToDelayedList+0x94>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3304      	adds	r3, #4
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fc32 	bl	8007d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d10a      	bne.n	8009532 <prvAddCurrentTaskToDelayedList+0x3a>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009522:	4b1a      	ldr	r3, [pc, #104]	; (800958c <prvAddCurrentTaskToDelayedList+0x94>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4819      	ldr	r0, [pc, #100]	; (8009590 <prvAddCurrentTaskToDelayedList+0x98>)
 800952c:	f7fe fbc7 	bl	8007cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009530:	e026      	b.n	8009580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <prvAddCurrentTaskToDelayedList+0x94>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	429a      	cmp	r2, r3
 8009548:	d209      	bcs.n	800955e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800954a:	4b12      	ldr	r3, [pc, #72]	; (8009594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b0f      	ldr	r3, [pc, #60]	; (800958c <prvAddCurrentTaskToDelayedList+0x94>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7fe fbd5 	bl	8007d06 <vListInsert>
}
 800955c:	e010      	b.n	8009580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800955e:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvAddCurrentTaskToDelayedList+0x94>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe fbcb 	bl	8007d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	429a      	cmp	r2, r3
 8009578:	d202      	bcs.n	8009580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800957a:	4a08      	ldr	r2, [pc, #32]	; (800959c <prvAddCurrentTaskToDelayedList+0xa4>)
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000d64 	.word	0x20000d64
 800958c:	2000088c 	.word	0x2000088c
 8009590:	20000d4c 	.word	0x20000d4c
 8009594:	20000d1c 	.word	0x20000d1c
 8009598:	20000d18 	.word	0x20000d18
 800959c:	20000d80 	.word	0x20000d80

080095a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	; 0x28
 80095a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095aa:	f000 fb07 	bl	8009bbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ae:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <xTimerCreateTimerTask+0x80>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d021      	beq.n	80095fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095be:	1d3a      	adds	r2, r7, #4
 80095c0:	f107 0108 	add.w	r1, r7, #8
 80095c4:	f107 030c 	add.w	r3, r7, #12
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fb31 	bl	8007c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	9202      	str	r2, [sp, #8]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	2302      	movs	r3, #2
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	460a      	mov	r2, r1
 80095e0:	4910      	ldr	r1, [pc, #64]	; (8009624 <xTimerCreateTimerTask+0x84>)
 80095e2:	4811      	ldr	r0, [pc, #68]	; (8009628 <xTimerCreateTimerTask+0x88>)
 80095e4:	f7ff f8de 	bl	80087a4 <xTaskCreateStatic>
 80095e8:	4603      	mov	r3, r0
 80095ea:	4a10      	ldr	r2, [pc, #64]	; (800962c <xTimerCreateTimerTask+0x8c>)
 80095ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <xTimerCreateTimerTask+0x8c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095f6:	2301      	movs	r3, #1
 80095f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	613b      	str	r3, [r7, #16]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009616:	697b      	ldr	r3, [r7, #20]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000dbc 	.word	0x20000dbc
 8009624:	0800b224 	.word	0x0800b224
 8009628:	08009765 	.word	0x08009765
 800962c:	20000dc0 	.word	0x20000dc0

08009630 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08a      	sub	sp, #40	; 0x28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800963e:	2300      	movs	r3, #0
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	623b      	str	r3, [r7, #32]
}
 800965a:	bf00      	nop
 800965c:	e7fe      	b.n	800965c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800965e:	4b1a      	ldr	r3, [pc, #104]	; (80096c8 <xTimerGenericCommand+0x98>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d02a      	beq.n	80096bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b05      	cmp	r3, #5
 8009676:	dc18      	bgt.n	80096aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009678:	f7ff feb2 	bl	80093e0 <xTaskGetSchedulerState>
 800967c:	4603      	mov	r3, r0
 800967e:	2b02      	cmp	r3, #2
 8009680:	d109      	bne.n	8009696 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <xTimerGenericCommand+0x98>)
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f107 0110 	add.w	r1, r7, #16
 800968a:	2300      	movs	r3, #0
 800968c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800968e:	f7fe fca1 	bl	8007fd4 <xQueueGenericSend>
 8009692:	6278      	str	r0, [r7, #36]	; 0x24
 8009694:	e012      	b.n	80096bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <xTimerGenericCommand+0x98>)
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f107 0110 	add.w	r1, r7, #16
 800969e:	2300      	movs	r3, #0
 80096a0:	2200      	movs	r2, #0
 80096a2:	f7fe fc97 	bl	8007fd4 <xQueueGenericSend>
 80096a6:	6278      	str	r0, [r7, #36]	; 0x24
 80096a8:	e008      	b.n	80096bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <xTimerGenericCommand+0x98>)
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	f107 0110 	add.w	r1, r7, #16
 80096b2:	2300      	movs	r3, #0
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	f7fe fd8b 	bl	80081d0 <xQueueGenericSendFromISR>
 80096ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000dbc 	.word	0x20000dbc

080096cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d6:	4b22      	ldr	r3, [pc, #136]	; (8009760 <prvProcessExpiredTimer+0x94>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe fb47 	bl	8007d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d022      	beq.n	800973e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	699a      	ldr	r2, [r3, #24]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	18d1      	adds	r1, r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	683a      	ldr	r2, [r7, #0]
 8009704:	6978      	ldr	r0, [r7, #20]
 8009706:	f000 f8d1 	bl	80098ac <prvInsertTimerInActiveList>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01f      	beq.n	8009750 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009710:	2300      	movs	r3, #0
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	2100      	movs	r1, #0
 800971a:	6978      	ldr	r0, [r7, #20]
 800971c:	f7ff ff88 	bl	8009630 <xTimerGenericCommand>
 8009720:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d113      	bne.n	8009750 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60fb      	str	r3, [r7, #12]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	b2da      	uxtb	r2, r3
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	6978      	ldr	r0, [r7, #20]
 8009756:	4798      	blx	r3
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000db4 	.word	0x20000db4

08009764 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800976c:	f107 0308 	add.w	r3, r7, #8
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f857 	bl	8009824 <prvGetNextExpireTime>
 8009776:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4619      	mov	r1, r3
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f803 	bl	8009788 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009782:	f000 f8d5 	bl	8009930 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009786:	e7f1      	b.n	800976c <prvTimerTask+0x8>

08009788 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009792:	f7ff fa43 	bl	8008c1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f866 	bl	800986c <prvSampleTimeNow>
 80097a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d130      	bne.n	800980a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <prvProcessTimerOrBlockTask+0x3c>
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d806      	bhi.n	80097c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097b6:	f7ff fa3f 	bl	8008c38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ff85 	bl	80096cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097c2:	e024      	b.n	800980e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097ca:	4b13      	ldr	r3, [pc, #76]	; (8009818 <prvProcessTimerOrBlockTask+0x90>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <prvProcessTimerOrBlockTask+0x50>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <prvProcessTimerOrBlockTask+0x52>
 80097d8:	2300      	movs	r3, #0
 80097da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097dc:	4b0f      	ldr	r3, [pc, #60]	; (800981c <prvProcessTimerOrBlockTask+0x94>)
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	f7fe ffa7 	bl	800873c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097ee:	f7ff fa23 	bl	8008c38 <xTaskResumeAll>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <prvProcessTimerOrBlockTask+0x98>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
}
 8009808:	e001      	b.n	800980e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800980a:	f7ff fa15 	bl	8008c38 <xTaskResumeAll>
}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000db8 	.word	0x20000db8
 800981c:	20000dbc 	.word	0x20000dbc
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800982c:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <prvGetNextExpireTime+0x44>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <prvGetNextExpireTime+0x16>
 8009836:	2201      	movs	r2, #1
 8009838:	e000      	b.n	800983c <prvGetNextExpireTime+0x18>
 800983a:	2200      	movs	r2, #0
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d105      	bne.n	8009854 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009848:	4b07      	ldr	r3, [pc, #28]	; (8009868 <prvGetNextExpireTime+0x44>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	e001      	b.n	8009858 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009858:	68fb      	ldr	r3, [r7, #12]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	20000db4 	.word	0x20000db4

0800986c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009874:	f7ff fa7e 	bl	8008d74 <xTaskGetTickCount>
 8009878:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800987a:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <prvSampleTimeNow+0x3c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	429a      	cmp	r2, r3
 8009882:	d205      	bcs.n	8009890 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009884:	f000 f936 	bl	8009af4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e002      	b.n	8009896 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009896:	4a04      	ldr	r2, [pc, #16]	; (80098a8 <prvSampleTimeNow+0x3c>)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800989c:	68fb      	ldr	r3, [r7, #12]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000dc4 	.word	0x20000dc4

080098ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d812      	bhi.n	80098f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d302      	bcc.n	80098e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	e01b      	b.n	800991e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098e6:	4b10      	ldr	r3, [pc, #64]	; (8009928 <prvInsertTimerInActiveList+0x7c>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f7fe fa08 	bl	8007d06 <vListInsert>
 80098f6:	e012      	b.n	800991e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d206      	bcs.n	800990e <prvInsertTimerInActiveList+0x62>
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d302      	bcc.n	800990e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009908:	2301      	movs	r3, #1
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e007      	b.n	800991e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <prvInsertTimerInActiveList+0x80>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fe f9f4 	bl	8007d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800991e:	697b      	ldr	r3, [r7, #20]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20000db8 	.word	0x20000db8
 800992c:	20000db4 	.word	0x20000db4

08009930 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08e      	sub	sp, #56	; 0x38
 8009934:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009936:	e0ca      	b.n	8009ace <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	da18      	bge.n	8009970 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800993e:	1d3b      	adds	r3, r7, #4
 8009940:	3304      	adds	r3, #4
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	61fb      	str	r3, [r7, #28]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009966:	6850      	ldr	r0, [r2, #4]
 8009968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996a:	6892      	ldr	r2, [r2, #8]
 800996c:	4611      	mov	r1, r2
 800996e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f2c0 80aa 	blt.w	8009acc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	3304      	adds	r3, #4
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe f9f5 	bl	8007d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800998e:	463b      	mov	r3, r7
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff ff6b 	bl	800986c <prvSampleTimeNow>
 8009996:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b09      	cmp	r3, #9
 800999c:	f200 8097 	bhi.w	8009ace <prvProcessReceivedCommands+0x19e>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <prvProcessReceivedCommands+0x78>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	08009a45 	.word	0x08009a45
 80099b8:	08009a59 	.word	0x08009a59
 80099bc:	08009aa3 	.word	0x08009aa3
 80099c0:	080099d1 	.word	0x080099d1
 80099c4:	080099d1 	.word	0x080099d1
 80099c8:	08009a45 	.word	0x08009a45
 80099cc:	08009a59 	.word	0x08009a59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	18d1      	adds	r1, r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f0:	f7ff ff5c 	bl	80098ac <prvInsertTimerInActiveList>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d069      	beq.n	8009ace <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d05e      	beq.n	8009ace <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	441a      	add	r2, r3
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a22:	f7ff fe05 	bl	8009630 <xTimerGenericCommand>
 8009a26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d14f      	bne.n	8009ace <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	61bb      	str	r3, [r7, #24]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a56:	e03a      	b.n	8009ace <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	617b      	str	r3, [r7, #20]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	18d1      	adds	r1, r2, r3
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a9c:	f7ff ff06 	bl	80098ac <prvInsertTimerInActiveList>
					break;
 8009aa0:	e015      	b.n	8009ace <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab2:	f000 fbdd 	bl	800a270 <vPortFree>
 8009ab6:	e00a      	b.n	8009ace <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009abe:	f023 0301 	bic.w	r3, r3, #1
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009aca:	e000      	b.n	8009ace <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009acc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <prvProcessReceivedCommands+0x1c0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	1d39      	adds	r1, r7, #4
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fc16 	bl	8008308 <xQueueReceive>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f47f af2a 	bne.w	8009938 <prvProcessReceivedCommands+0x8>
	}
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3730      	adds	r7, #48	; 0x30
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000dbc 	.word	0x20000dbc

08009af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009afa:	e048      	b.n	8009b8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009afc:	4b2d      	ldr	r3, [pc, #180]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe f92f 	bl	8007d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d02e      	beq.n	8009b8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4413      	add	r3, r2
 8009b38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d90e      	bls.n	8009b60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b4e:	4b19      	ldr	r3, [pc, #100]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4619      	mov	r1, r3
 8009b58:	4610      	mov	r0, r2
 8009b5a:	f7fe f8d4 	bl	8007d06 <vListInsert>
 8009b5e:	e016      	b.n	8009b8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b60:	2300      	movs	r3, #0
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	2100      	movs	r1, #0
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff fd60 	bl	8009630 <xTimerGenericCommand>
 8009b70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	603b      	str	r3, [r7, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1b1      	bne.n	8009afc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b98:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b9e:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <prvSwitchTimerLists+0xc4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a04      	ldr	r2, [pc, #16]	; (8009bb4 <prvSwitchTimerLists+0xc0>)
 8009ba4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ba6:	4a04      	ldr	r2, [pc, #16]	; (8009bb8 <prvSwitchTimerLists+0xc4>)
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	6013      	str	r3, [r2, #0]
}
 8009bac:	bf00      	nop
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000db4 	.word	0x20000db4
 8009bb8:	20000db8 	.word	0x20000db8

08009bbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bc2:	f000 f967 	bl	8009e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bc6:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <prvCheckForValidListAndQueue+0x60>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d120      	bne.n	8009c10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bce:	4814      	ldr	r0, [pc, #80]	; (8009c20 <prvCheckForValidListAndQueue+0x64>)
 8009bd0:	f7fe f848 	bl	8007c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bd4:	4813      	ldr	r0, [pc, #76]	; (8009c24 <prvCheckForValidListAndQueue+0x68>)
 8009bd6:	f7fe f845 	bl	8007c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <prvCheckForValidListAndQueue+0x6c>)
 8009bdc:	4a10      	ldr	r2, [pc, #64]	; (8009c20 <prvCheckForValidListAndQueue+0x64>)
 8009bde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009be0:	4b12      	ldr	r3, [pc, #72]	; (8009c2c <prvCheckForValidListAndQueue+0x70>)
 8009be2:	4a10      	ldr	r2, [pc, #64]	; (8009c24 <prvCheckForValidListAndQueue+0x68>)
 8009be4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009be6:	2300      	movs	r3, #0
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <prvCheckForValidListAndQueue+0x74>)
 8009bec:	4a11      	ldr	r2, [pc, #68]	; (8009c34 <prvCheckForValidListAndQueue+0x78>)
 8009bee:	2110      	movs	r1, #16
 8009bf0:	200a      	movs	r0, #10
 8009bf2:	f7fe f953 	bl	8007e9c <xQueueGenericCreateStatic>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <prvCheckForValidListAndQueue+0x60>)
 8009bfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <prvCheckForValidListAndQueue+0x60>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <prvCheckForValidListAndQueue+0x60>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	490b      	ldr	r1, [pc, #44]	; (8009c38 <prvCheckForValidListAndQueue+0x7c>)
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe fd6c 	bl	80086e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c10:	f000 f970 	bl	8009ef4 <vPortExitCritical>
}
 8009c14:	bf00      	nop
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000dbc 	.word	0x20000dbc
 8009c20:	20000d8c 	.word	0x20000d8c
 8009c24:	20000da0 	.word	0x20000da0
 8009c28:	20000db4 	.word	0x20000db4
 8009c2c:	20000db8 	.word	0x20000db8
 8009c30:	20000e68 	.word	0x20000e68
 8009c34:	20000dc8 	.word	0x20000dc8
 8009c38:	0800b22c 	.word	0x0800b22c

08009c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3b04      	subs	r3, #4
 8009c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3b04      	subs	r3, #4
 8009c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f023 0201 	bic.w	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3b04      	subs	r3, #4
 8009c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c6c:	4a0c      	ldr	r2, [pc, #48]	; (8009ca0 <pxPortInitialiseStack+0x64>)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3b14      	subs	r3, #20
 8009c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3b04      	subs	r3, #4
 8009c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f06f 0202 	mvn.w	r2, #2
 8009c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3b20      	subs	r3, #32
 8009c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	08009ca5 	.word	0x08009ca5

08009ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <prvTaskExitError+0x54>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d00a      	beq.n	8009cce <prvTaskExitError+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	60fb      	str	r3, [r7, #12]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <prvTaskExitError+0x28>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	60bb      	str	r3, [r7, #8]
}
 8009ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ce2:	bf00      	nop
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0fc      	beq.n	8009ce4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cea:	bf00      	nop
 8009cec:	bf00      	nop
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20000120 	.word	0x20000120
 8009cfc:	00000000 	.word	0x00000000

08009d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <pxCurrentTCBConst2>)
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	f380 8809 	msr	PSP, r0
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f04f 0000 	mov.w	r0, #0
 8009d16:	f380 8811 	msr	BASEPRI, r0
 8009d1a:	4770      	bx	lr
 8009d1c:	f3af 8000 	nop.w

08009d20 <pxCurrentTCBConst2>:
 8009d20:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop

08009d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d28:	4808      	ldr	r0, [pc, #32]	; (8009d4c <prvPortStartFirstTask+0x24>)
 8009d2a:	6800      	ldr	r0, [r0, #0]
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	f380 8808 	msr	MSP, r0
 8009d32:	f04f 0000 	mov.w	r0, #0
 8009d36:	f380 8814 	msr	CONTROL, r0
 8009d3a:	b662      	cpsie	i
 8009d3c:	b661      	cpsie	f
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	df00      	svc	0
 8009d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d4a:	bf00      	nop
 8009d4c:	e000ed08 	.word	0xe000ed08

08009d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d56:	4b46      	ldr	r3, [pc, #280]	; (8009e70 <xPortStartScheduler+0x120>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a46      	ldr	r2, [pc, #280]	; (8009e74 <xPortStartScheduler+0x124>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d10a      	bne.n	8009d76 <xPortStartScheduler+0x26>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	613b      	str	r3, [r7, #16]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d76:	4b3e      	ldr	r3, [pc, #248]	; (8009e70 <xPortStartScheduler+0x120>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a3f      	ldr	r2, [pc, #252]	; (8009e78 <xPortStartScheduler+0x128>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d10a      	bne.n	8009d96 <xPortStartScheduler+0x46>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60fb      	str	r3, [r7, #12]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d96:	4b39      	ldr	r3, [pc, #228]	; (8009e7c <xPortStartScheduler+0x12c>)
 8009d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b31      	ldr	r3, [pc, #196]	; (8009e80 <xPortStartScheduler+0x130>)
 8009dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dbe:	4b31      	ldr	r3, [pc, #196]	; (8009e84 <xPortStartScheduler+0x134>)
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dc4:	e009      	b.n	8009dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009dc6:	4b2f      	ldr	r3, [pc, #188]	; (8009e84 <xPortStartScheduler+0x134>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4a2d      	ldr	r2, [pc, #180]	; (8009e84 <xPortStartScheduler+0x134>)
 8009dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d0ef      	beq.n	8009dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009de6:	4b27      	ldr	r3, [pc, #156]	; (8009e84 <xPortStartScheduler+0x134>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f1c3 0307 	rsb	r3, r3, #7
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d00a      	beq.n	8009e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	60bb      	str	r3, [r7, #8]
}
 8009e04:	bf00      	nop
 8009e06:	e7fe      	b.n	8009e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e08:	4b1e      	ldr	r3, [pc, #120]	; (8009e84 <xPortStartScheduler+0x134>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <xPortStartScheduler+0x134>)
 8009e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <xPortStartScheduler+0x134>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e1a:	4a1a      	ldr	r2, [pc, #104]	; (8009e84 <xPortStartScheduler+0x134>)
 8009e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e26:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <xPortStartScheduler+0x138>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a17      	ldr	r2, [pc, #92]	; (8009e88 <xPortStartScheduler+0x138>)
 8009e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <xPortStartScheduler+0x138>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a14      	ldr	r2, [pc, #80]	; (8009e88 <xPortStartScheduler+0x138>)
 8009e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e3e:	f000 f8dd 	bl	8009ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e42:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <xPortStartScheduler+0x13c>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e48:	f000 f8fc 	bl	800a044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <xPortStartScheduler+0x140>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <xPortStartScheduler+0x140>)
 8009e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e58:	f7ff ff66 	bl	8009d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e5c:	f7ff f854 	bl	8008f08 <vTaskSwitchContext>
	prvTaskExitError();
 8009e60:	f7ff ff20 	bl	8009ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	e000ed00 	.word	0xe000ed00
 8009e74:	410fc271 	.word	0x410fc271
 8009e78:	410fc270 	.word	0x410fc270
 8009e7c:	e000e400 	.word	0xe000e400
 8009e80:	20000eb8 	.word	0x20000eb8
 8009e84:	20000ebc 	.word	0x20000ebc
 8009e88:	e000ed20 	.word	0xe000ed20
 8009e8c:	20000120 	.word	0x20000120
 8009e90:	e000ef34 	.word	0xe000ef34

08009e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <vPortEnterCritical+0x58>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	4a0d      	ldr	r2, [pc, #52]	; (8009eec <vPortEnterCritical+0x58>)
 8009eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009eb8:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <vPortEnterCritical+0x58>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d10f      	bne.n	8009ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ec0:	4b0b      	ldr	r3, [pc, #44]	; (8009ef0 <vPortEnterCritical+0x5c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00a      	beq.n	8009ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <vPortEnterCritical+0x4a>
	}
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000120 	.word	0x20000120
 8009ef0:	e000ed04 	.word	0xe000ed04

08009ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009efa:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <vPortExitCritical+0x50>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10a      	bne.n	8009f18 <vPortExitCritical+0x24>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	607b      	str	r3, [r7, #4]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <vPortExitCritical+0x50>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4a09      	ldr	r2, [pc, #36]	; (8009f44 <vPortExitCritical+0x50>)
 8009f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f22:	4b08      	ldr	r3, [pc, #32]	; (8009f44 <vPortExitCritical+0x50>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <vPortExitCritical+0x42>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	f383 8811 	msr	BASEPRI, r3
}
 8009f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000120 	.word	0x20000120
	...

08009f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f50:	f3ef 8009 	mrs	r0, PSP
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <pxCurrentTCBConst>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	f01e 0f10 	tst.w	lr, #16
 8009f60:	bf08      	it	eq
 8009f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f74:	f380 8811 	msr	BASEPRI, r0
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f7fe ffc2 	bl	8008f08 <vTaskSwitchContext>
 8009f84:	f04f 0000 	mov.w	r0, #0
 8009f88:	f380 8811 	msr	BASEPRI, r0
 8009f8c:	bc09      	pop	{r0, r3}
 8009f8e:	6819      	ldr	r1, [r3, #0]
 8009f90:	6808      	ldr	r0, [r1, #0]
 8009f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f96:	f01e 0f10 	tst.w	lr, #16
 8009f9a:	bf08      	it	eq
 8009f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fa0:	f380 8809 	msr	PSP, r0
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	f3af 8000 	nop.w

08009fb0 <pxCurrentTCBConst>:
 8009fb0:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	607b      	str	r3, [r7, #4]
}
 8009fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fd2:	f7fe fedf 	bl	8008d94 <xTaskIncrementTick>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <xPortSysTickHandler+0x40>)
 8009fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	f383 8811 	msr	BASEPRI, r3
}
 8009fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a000:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <vPortSetupTimerInterrupt+0x34>)
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a006:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <vPortSetupTimerInterrupt+0x38>)
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <vPortSetupTimerInterrupt+0x3c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <vPortSetupTimerInterrupt+0x40>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	099b      	lsrs	r3, r3, #6
 800a018:	4a09      	ldr	r2, [pc, #36]	; (800a040 <vPortSetupTimerInterrupt+0x44>)
 800a01a:	3b01      	subs	r3, #1
 800a01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <vPortSetupTimerInterrupt+0x34>)
 800a020:	2207      	movs	r2, #7
 800a022:	601a      	str	r2, [r3, #0]
}
 800a024:	bf00      	nop
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	e000e010 	.word	0xe000e010
 800a034:	e000e018 	.word	0xe000e018
 800a038:	20000004 	.word	0x20000004
 800a03c:	10624dd3 	.word	0x10624dd3
 800a040:	e000e014 	.word	0xe000e014

0800a044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a054 <vPortEnableVFP+0x10>
 800a048:	6801      	ldr	r1, [r0, #0]
 800a04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a04e:	6001      	str	r1, [r0, #0]
 800a050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a052:	bf00      	nop
 800a054:	e000ed88 	.word	0xe000ed88

0800a058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a05e:	f3ef 8305 	mrs	r3, IPSR
 800a062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b0f      	cmp	r3, #15
 800a068:	d914      	bls.n	800a094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a06a:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <vPortValidateInterruptPriority+0x70>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a074:	4b15      	ldr	r3, [pc, #84]	; (800a0cc <vPortValidateInterruptPriority+0x74>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	7afa      	ldrb	r2, [r7, #11]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d20a      	bcs.n	800a094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a094:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <vPortValidateInterruptPriority+0x78>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <vPortValidateInterruptPriority+0x7c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d90a      	bls.n	800a0ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	603b      	str	r3, [r7, #0]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <vPortValidateInterruptPriority+0x60>
	}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	e000e3f0 	.word	0xe000e3f0
 800a0cc:	20000eb8 	.word	0x20000eb8
 800a0d0:	e000ed0c 	.word	0xe000ed0c
 800a0d4:	20000ebc 	.word	0x20000ebc

0800a0d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	; 0x28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0e4:	f7fe fd9a 	bl	8008c1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0e8:	4b5b      	ldr	r3, [pc, #364]	; (800a258 <pvPortMalloc+0x180>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0f0:	f000 f920 	bl	800a334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0f4:	4b59      	ldr	r3, [pc, #356]	; (800a25c <pvPortMalloc+0x184>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 8093 	bne.w	800a228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d01d      	beq.n	800a144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a108:	2208      	movs	r2, #8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	2b00      	cmp	r3, #0
 800a118:	d014      	beq.n	800a144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f023 0307 	bic.w	r3, r3, #7
 800a120:	3308      	adds	r3, #8
 800a122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f003 0307 	and.w	r3, r3, #7
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <pvPortMalloc+0x6c>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	617b      	str	r3, [r7, #20]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d06e      	beq.n	800a228 <pvPortMalloc+0x150>
 800a14a:	4b45      	ldr	r3, [pc, #276]	; (800a260 <pvPortMalloc+0x188>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d869      	bhi.n	800a228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a154:	4b43      	ldr	r3, [pc, #268]	; (800a264 <pvPortMalloc+0x18c>)
 800a156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a158:	4b42      	ldr	r3, [pc, #264]	; (800a264 <pvPortMalloc+0x18c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a15e:	e004      	b.n	800a16a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d903      	bls.n	800a17c <pvPortMalloc+0xa4>
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1f1      	bne.n	800a160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a17c:	4b36      	ldr	r3, [pc, #216]	; (800a258 <pvPortMalloc+0x180>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a182:	429a      	cmp	r2, r3
 800a184:	d050      	beq.n	800a228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2208      	movs	r2, #8
 800a18c:	4413      	add	r3, r2
 800a18e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d91f      	bls.n	800a1e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00a      	beq.n	800a1d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	613b      	str	r3, [r7, #16]
}
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1e2:	69b8      	ldr	r0, [r7, #24]
 800a1e4:	f000 f908 	bl	800a3f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <pvPortMalloc+0x188>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	4a1b      	ldr	r2, [pc, #108]	; (800a260 <pvPortMalloc+0x188>)
 800a1f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1f6:	4b1a      	ldr	r3, [pc, #104]	; (800a260 <pvPortMalloc+0x188>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b1b      	ldr	r3, [pc, #108]	; (800a268 <pvPortMalloc+0x190>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d203      	bcs.n	800a20a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a202:	4b17      	ldr	r3, [pc, #92]	; (800a260 <pvPortMalloc+0x188>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a18      	ldr	r2, [pc, #96]	; (800a268 <pvPortMalloc+0x190>)
 800a208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <pvPortMalloc+0x184>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	431a      	orrs	r2, r3
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a21e:	4b13      	ldr	r3, [pc, #76]	; (800a26c <pvPortMalloc+0x194>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	4a11      	ldr	r2, [pc, #68]	; (800a26c <pvPortMalloc+0x194>)
 800a226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a228:	f7fe fd06 	bl	8008c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <pvPortMalloc+0x174>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60fb      	str	r3, [r7, #12]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <pvPortMalloc+0x172>
	return pvReturn;
 800a24c:	69fb      	ldr	r3, [r7, #28]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3728      	adds	r7, #40	; 0x28
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20001a80 	.word	0x20001a80
 800a25c:	20001a94 	.word	0x20001a94
 800a260:	20001a84 	.word	0x20001a84
 800a264:	20001a78 	.word	0x20001a78
 800a268:	20001a88 	.word	0x20001a88
 800a26c:	20001a8c 	.word	0x20001a8c

0800a270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d04d      	beq.n	800a31e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a282:	2308      	movs	r3, #8
 800a284:	425b      	negs	r3, r3
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4413      	add	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	4b24      	ldr	r3, [pc, #144]	; (800a328 <vPortFree+0xb8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4013      	ands	r3, r2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10a      	bne.n	800a2b4 <vPortFree+0x44>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00a      	beq.n	800a2d2 <vPortFree+0x62>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	60bb      	str	r3, [r7, #8]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <vPortFree+0xb8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01e      	beq.n	800a31e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d11a      	bne.n	800a31e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	4b0e      	ldr	r3, [pc, #56]	; (800a328 <vPortFree+0xb8>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	43db      	mvns	r3, r3
 800a2f2:	401a      	ands	r2, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2f8:	f7fe fc90 	bl	8008c1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	4b0a      	ldr	r3, [pc, #40]	; (800a32c <vPortFree+0xbc>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4413      	add	r3, r2
 800a306:	4a09      	ldr	r2, [pc, #36]	; (800a32c <vPortFree+0xbc>)
 800a308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a30a:	6938      	ldr	r0, [r7, #16]
 800a30c:	f000 f874 	bl	800a3f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <vPortFree+0xc0>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	4a06      	ldr	r2, [pc, #24]	; (800a330 <vPortFree+0xc0>)
 800a318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a31a:	f7fe fc8d 	bl	8008c38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a31e:	bf00      	nop
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20001a94 	.word	0x20001a94
 800a32c:	20001a84 	.word	0x20001a84
 800a330:	20001a90 	.word	0x20001a90

0800a334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a33a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a33e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a340:	4b27      	ldr	r3, [pc, #156]	; (800a3e0 <prvHeapInit+0xac>)
 800a342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0307 	bic.w	r3, r3, #7
 800a35a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <prvHeapInit+0xac>)
 800a364:	4413      	add	r3, r2
 800a366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a36c:	4a1d      	ldr	r2, [pc, #116]	; (800a3e4 <prvHeapInit+0xb0>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <prvHeapInit+0xb0>)
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a380:	2208      	movs	r2, #8
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1a9b      	subs	r3, r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <prvHeapInit+0xb4>)
 800a394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <prvHeapInit+0xb4>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2200      	movs	r2, #0
 800a39c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <prvHeapInit+0xb4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <prvHeapInit+0xb4>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <prvHeapInit+0xb8>)
 800a3c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <prvHeapInit+0xbc>)
 800a3ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <prvHeapInit+0xc0>)
 800a3ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	20000ec0 	.word	0x20000ec0
 800a3e4:	20001a78 	.word	0x20001a78
 800a3e8:	20001a80 	.word	0x20001a80
 800a3ec:	20001a88 	.word	0x20001a88
 800a3f0:	20001a84 	.word	0x20001a84
 800a3f4:	20001a94 	.word	0x20001a94

0800a3f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a400:	4b28      	ldr	r3, [pc, #160]	; (800a4a4 <prvInsertBlockIntoFreeList+0xac>)
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e002      	b.n	800a40c <prvInsertBlockIntoFreeList+0x14>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	429a      	cmp	r2, r3
 800a414:	d8f7      	bhi.n	800a406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	4413      	add	r3, r2
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	d108      	bne.n	800a43a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	441a      	add	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	441a      	add	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d118      	bne.n	800a480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d00d      	beq.n	800a476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	441a      	add	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	e008      	b.n	800a488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a476:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	e003      	b.n	800a488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d002      	beq.n	800a496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20001a78 	.word	0x20001a78
 800a4a8:	20001a80 	.word	0x20001a80

0800a4ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	4912      	ldr	r1, [pc, #72]	; (800a4fc <MX_USB_DEVICE_Init+0x50>)
 800a4b4:	4812      	ldr	r0, [pc, #72]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4b6:	f7fc f8e1 	bl	800667c <USBD_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4c0:	f7f6 fba6 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4c4:	490f      	ldr	r1, [pc, #60]	; (800a504 <MX_USB_DEVICE_Init+0x58>)
 800a4c6:	480e      	ldr	r0, [pc, #56]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4c8:	f7fc f908 	bl	80066dc <USBD_RegisterClass>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a4d2:	f7f6 fb9d 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a4d6:	490c      	ldr	r1, [pc, #48]	; (800a508 <MX_USB_DEVICE_Init+0x5c>)
 800a4d8:	4809      	ldr	r0, [pc, #36]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4da:	f7fc f859 	bl	8006590 <USBD_CDC_RegisterInterface>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4e4:	f7f6 fb94 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4e8:	4805      	ldr	r0, [pc, #20]	; (800a500 <MX_USB_DEVICE_Init+0x54>)
 800a4ea:	f7fc f91e 	bl	800672a <USBD_Start>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4f4:	f7f6 fb8c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4f8:	bf00      	nop
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000140 	.word	0x20000140
 800a500:	20001ee4 	.word	0x20001ee4
 800a504:	2000001c 	.word	0x2000001c
 800a508:	2000012c 	.word	0x2000012c

0800a50c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a510:	2200      	movs	r2, #0
 800a512:	4905      	ldr	r1, [pc, #20]	; (800a528 <CDC_Init_FS+0x1c>)
 800a514:	4805      	ldr	r0, [pc, #20]	; (800a52c <CDC_Init_FS+0x20>)
 800a516:	f7fc f850 	bl	80065ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a51a:	4905      	ldr	r1, [pc, #20]	; (800a530 <CDC_Init_FS+0x24>)
 800a51c:	4803      	ldr	r0, [pc, #12]	; (800a52c <CDC_Init_FS+0x20>)
 800a51e:	f7fc f86a 	bl	80065f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a524:	4618      	mov	r0, r3
 800a526:	bd80      	pop	{r7, pc}
 800a528:	200029b4 	.word	0x200029b4
 800a52c:	20001ee4 	.word	0x20001ee4
 800a530:	200021b4 	.word	0x200021b4

0800a534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
 800a550:	4613      	mov	r3, r2
 800a552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b23      	cmp	r3, #35	; 0x23
 800a558:	f200 8098 	bhi.w	800a68c <CDC_Control_FS+0x148>
 800a55c:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <CDC_Control_FS+0x20>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a68d 	.word	0x0800a68d
 800a568:	0800a68d 	.word	0x0800a68d
 800a56c:	0800a68d 	.word	0x0800a68d
 800a570:	0800a68d 	.word	0x0800a68d
 800a574:	0800a68d 	.word	0x0800a68d
 800a578:	0800a68d 	.word	0x0800a68d
 800a57c:	0800a68d 	.word	0x0800a68d
 800a580:	0800a68d 	.word	0x0800a68d
 800a584:	0800a68d 	.word	0x0800a68d
 800a588:	0800a68d 	.word	0x0800a68d
 800a58c:	0800a68d 	.word	0x0800a68d
 800a590:	0800a68d 	.word	0x0800a68d
 800a594:	0800a68d 	.word	0x0800a68d
 800a598:	0800a68d 	.word	0x0800a68d
 800a59c:	0800a68d 	.word	0x0800a68d
 800a5a0:	0800a68d 	.word	0x0800a68d
 800a5a4:	0800a68d 	.word	0x0800a68d
 800a5a8:	0800a68d 	.word	0x0800a68d
 800a5ac:	0800a68d 	.word	0x0800a68d
 800a5b0:	0800a68d 	.word	0x0800a68d
 800a5b4:	0800a68d 	.word	0x0800a68d
 800a5b8:	0800a68d 	.word	0x0800a68d
 800a5bc:	0800a68d 	.word	0x0800a68d
 800a5c0:	0800a68d 	.word	0x0800a68d
 800a5c4:	0800a68d 	.word	0x0800a68d
 800a5c8:	0800a68d 	.word	0x0800a68d
 800a5cc:	0800a68d 	.word	0x0800a68d
 800a5d0:	0800a68d 	.word	0x0800a68d
 800a5d4:	0800a68d 	.word	0x0800a68d
 800a5d8:	0800a68d 	.word	0x0800a68d
 800a5dc:	0800a68d 	.word	0x0800a68d
 800a5e0:	0800a68d 	.word	0x0800a68d
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a639 	.word	0x0800a639
 800a5ec:	0800a68d 	.word	0x0800a68d
 800a5f0:	0800a68d 	.word	0x0800a68d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	021b      	lsls	r3, r3, #8
 800a602:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	3302      	adds	r3, #2
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	041b      	lsls	r3, r3, #16
 800a60c:	431a      	orrs	r2, r3
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	3303      	adds	r3, #3
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	061b      	lsls	r3, r3, #24
 800a616:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a618:	461a      	mov	r2, r3
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <CDC_Control_FS+0x158>)
 800a61c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	791a      	ldrb	r2, [r3, #4]
 800a622:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <CDC_Control_FS+0x158>)
 800a624:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	795a      	ldrb	r2, [r3, #5]
 800a62a:	4b1c      	ldr	r3, [pc, #112]	; (800a69c <CDC_Control_FS+0x158>)
 800a62c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	799a      	ldrb	r2, [r3, #6]
 800a632:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <CDC_Control_FS+0x158>)
 800a634:	719a      	strb	r2, [r3, #6]
		break;
 800a636:	e02a      	b.n	800a68e <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800a638:	4b18      	ldr	r3, [pc, #96]	; (800a69c <CDC_Control_FS+0x158>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800a642:	4b16      	ldr	r3, [pc, #88]	; (800a69c <CDC_Control_FS+0x158>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	0a1a      	lsrs	r2, r3, #8
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	3301      	adds	r3, #1
 800a64c:	b2d2      	uxtb	r2, r2
 800a64e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800a650:	4b12      	ldr	r3, [pc, #72]	; (800a69c <CDC_Control_FS+0x158>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	0c1a      	lsrs	r2, r3, #16
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	3302      	adds	r3, #2
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800a65e:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <CDC_Control_FS+0x158>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	0e1a      	lsrs	r2, r3, #24
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	3303      	adds	r3, #3
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	3304      	adds	r3, #4
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <CDC_Control_FS+0x158>)
 800a672:	7912      	ldrb	r2, [r2, #4]
 800a674:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	3305      	adds	r3, #5
 800a67a:	4a08      	ldr	r2, [pc, #32]	; (800a69c <CDC_Control_FS+0x158>)
 800a67c:	7952      	ldrb	r2, [r2, #5]
 800a67e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	3306      	adds	r3, #6
 800a684:	4a05      	ldr	r2, [pc, #20]	; (800a69c <CDC_Control_FS+0x158>)
 800a686:	7992      	ldrb	r2, [r2, #6]
 800a688:	701a      	strb	r2, [r3, #0]
		break;
 800a68a:	e000      	b.n	800a68e <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a68c:	bf00      	nop
	}

  return (USBD_OK);
 800a68e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	20000124 	.word	0x20000124

0800a6a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4808      	ldr	r0, [pc, #32]	; (800a6d0 <CDC_Receive_FS+0x30>)
 800a6ae:	f7fb ffa2 	bl	80065f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6b2:	4807      	ldr	r0, [pc, #28]	; (800a6d0 <CDC_Receive_FS+0x30>)
 800a6b4:	f7fb ffb8 	bl	8006628 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7f6 f95a 	bl	8000978 <CDC_ReceiveCallback>
  return (USBD_OK);
 800a6c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20001ee4 	.word	0x20001ee4

0800a6d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a6e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	371c      	adds	r7, #28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	2212      	movs	r2, #18
 800a708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a70a:	4b03      	ldr	r3, [pc, #12]	; (800a718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	20000160 	.word	0x20000160

0800a71c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2204      	movs	r2, #4
 800a72c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a72e:	4b03      	ldr	r3, [pc, #12]	; (800a73c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20000180 	.word	0x20000180

0800a740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	4603      	mov	r3, r0
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d105      	bne.n	800a75e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4907      	ldr	r1, [pc, #28]	; (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
 800a756:	4808      	ldr	r0, [pc, #32]	; (800a778 <USBD_FS_ProductStrDescriptor+0x38>)
 800a758:	f7fd f843 	bl	80077e2 <USBD_GetString>
 800a75c:	e004      	b.n	800a768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	4904      	ldr	r1, [pc, #16]	; (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
 800a762:	4805      	ldr	r0, [pc, #20]	; (800a778 <USBD_FS_ProductStrDescriptor+0x38>)
 800a764:	f7fd f83d 	bl	80077e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	200031b4 	.word	0x200031b4
 800a778:	0800b234 	.word	0x0800b234

0800a77c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	4904      	ldr	r1, [pc, #16]	; (800a79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a78c:	4804      	ldr	r0, [pc, #16]	; (800a7a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a78e:	f7fd f828 	bl	80077e2 <USBD_GetString>
  return USBD_StrDesc;
 800a792:	4b02      	ldr	r3, [pc, #8]	; (800a79c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200031b4 	.word	0x200031b4
 800a7a0:	0800b24c 	.word	0x0800b24c

0800a7a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	221a      	movs	r2, #26
 800a7b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7b6:	f000 f855 	bl	800a864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7ba:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000184 	.word	0x20000184

0800a7c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4907      	ldr	r1, [pc, #28]	; (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7de:	4808      	ldr	r0, [pc, #32]	; (800a800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7e0:	f7fc ffff 	bl	80077e2 <USBD_GetString>
 800a7e4:	e004      	b.n	800a7f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4904      	ldr	r1, [pc, #16]	; (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7ec:	f7fc fff9 	bl	80077e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200031b4 	.word	0x200031b4
 800a800:	0800b260 	.word	0x0800b260

0800a804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d105      	bne.n	800a822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	4907      	ldr	r1, [pc, #28]	; (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a81a:	4808      	ldr	r0, [pc, #32]	; (800a83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a81c:	f7fc ffe1 	bl	80077e2 <USBD_GetString>
 800a820:	e004      	b.n	800a82c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4904      	ldr	r1, [pc, #16]	; (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a826:	4805      	ldr	r0, [pc, #20]	; (800a83c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a828:	f7fc ffdb 	bl	80077e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a82c:	4b02      	ldr	r3, [pc, #8]	; (800a838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200031b4 	.word	0x200031b4
 800a83c:	0800b26c 	.word	0x0800b26c

0800a840 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	6039      	str	r1, [r7, #0]
 800a84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	220c      	movs	r2, #12
 800a850:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a852:	4b03      	ldr	r3, [pc, #12]	; (800a860 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000174 	.word	0x20000174

0800a864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a86a:	4b0f      	ldr	r3, [pc, #60]	; (800a8a8 <Get_SerialNum+0x44>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a870:	4b0e      	ldr	r3, [pc, #56]	; (800a8ac <Get_SerialNum+0x48>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <Get_SerialNum+0x4c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d009      	beq.n	800a89e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a88a:	2208      	movs	r2, #8
 800a88c:	4909      	ldr	r1, [pc, #36]	; (800a8b4 <Get_SerialNum+0x50>)
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 f814 	bl	800a8bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a894:	2204      	movs	r2, #4
 800a896:	4908      	ldr	r1, [pc, #32]	; (800a8b8 <Get_SerialNum+0x54>)
 800a898:	68b8      	ldr	r0, [r7, #8]
 800a89a:	f000 f80f 	bl	800a8bc <IntToUnicode>
  }
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	1fff7590 	.word	0x1fff7590
 800a8ac:	1fff7594 	.word	0x1fff7594
 800a8b0:	1fff7598 	.word	0x1fff7598
 800a8b4:	20000186 	.word	0x20000186
 800a8b8:	20000196 	.word	0x20000196

0800a8bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]
 800a8d2:	e027      	b.n	800a924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	0f1b      	lsrs	r3, r3, #28
 800a8d8:	2b09      	cmp	r3, #9
 800a8da:	d80b      	bhi.n	800a8f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	0f1b      	lsrs	r3, r3, #28
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	440b      	add	r3, r1
 800a8ec:	3230      	adds	r2, #48	; 0x30
 800a8ee:	b2d2      	uxtb	r2, r2
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	e00a      	b.n	800a90a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	0f1b      	lsrs	r3, r3, #28
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	4619      	mov	r1, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	440b      	add	r3, r1
 800a904:	3237      	adds	r2, #55	; 0x37
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	3301      	adds	r3, #1
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	4413      	add	r3, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	3301      	adds	r3, #1
 800a922:	75fb      	strb	r3, [r7, #23]
 800a924:	7dfa      	ldrb	r2, [r7, #23]
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d3d3      	bcc.n	800a8d4 <IntToUnicode+0x18>
  }
}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
	...

0800a93c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08a      	sub	sp, #40	; 0x28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	605a      	str	r2, [r3, #4]
 800a94e:	609a      	str	r2, [r3, #8]
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a95c:	d14e      	bne.n	800a9fc <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a95e:	4b29      	ldr	r3, [pc, #164]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a962:	4a28      	ldr	r2, [pc, #160]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a964:	f043 0301 	orr.w	r3, r3, #1
 800a968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a96a:	4b26      	ldr	r3, [pc, #152]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a97a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97c:	2302      	movs	r3, #2
 800a97e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a980:	2300      	movs	r3, #0
 800a982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a984:	2303      	movs	r3, #3
 800a986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a988:	230a      	movs	r3, #10
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	4619      	mov	r1, r3
 800a992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a996:	f7f6 fda1 	bl	80014dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a99a:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99e:	4a19      	ldr	r2, [pc, #100]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9a6:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9b2:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d114      	bne.n	800a9e8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9be:	4b11      	ldr	r3, [pc, #68]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c2:	4a10      	ldr	r2, [pc, #64]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ca:	4b0e      	ldr	r3, [pc, #56]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9d2:	60bb      	str	r3, [r7, #8]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a9d6:	f7f8 f8b1 	bl	8002b3c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9da:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9de:	4a09      	ldr	r2, [pc, #36]	; (800aa04 <HAL_PCD_MspInit+0xc8>)
 800a9e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e6:	e001      	b.n	800a9ec <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a9e8:	f7f8 f8a8 	bl	8002b3c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2105      	movs	r1, #5
 800a9f0:	2043      	movs	r0, #67	; 0x43
 800a9f2:	f7f6 fd3c 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9f6:	2043      	movs	r0, #67	; 0x43
 800a9f8:	f7f6 fd55 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	3728      	adds	r7, #40	; 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	40021000 	.word	0x40021000

0800aa08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fb fece 	bl	80067c0 <USBD_LL_SetupStage>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa3e:	78fa      	ldrb	r2, [r7, #3]
 800aa40:	6879      	ldr	r1, [r7, #4]
 800aa42:	4613      	mov	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	1a9b      	subs	r3, r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	440b      	add	r3, r1
 800aa4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7fb ff08 	bl	800686a <USBD_LL_DataOutStage>
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	1a9b      	subs	r3, r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	3348      	adds	r3, #72	; 0x48
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	78fb      	ldrb	r3, [r7, #3]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f7fb ff51 	bl	8006930 <USBD_LL_DataInStage>
}
 800aa8e:	bf00      	nop
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fc f865 	bl	8006b74 <USBD_LL_SOF>
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aaba:	2301      	movs	r3, #1
 800aabc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d001      	beq.n	800aaca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aac6:	f7f6 f8a3 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aad0:	7bfa      	ldrb	r2, [r7, #15]
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fc f80f 	bl	8006af8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fb ffbb 	bl	8006a5c <USBD_LL_Reset>
}
 800aae6:	bf00      	nop
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab0a:	f043 0301 	orr.w	r3, r3, #1
 800ab0e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fb fffe 	bl	8006b18 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1b      	ldr	r3, [r3, #32]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <HAL_PCD_SuspendCallback+0x48>)
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	4a03      	ldr	r2, [pc, #12]	; (800ab38 <HAL_PCD_SuspendCallback+0x48>)
 800ab2a:	f043 0306 	orr.w	r3, r3, #6
 800ab2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed00 	.word	0xe000ed00

0800ab3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	6812      	ldr	r2, [r2, #0]
 800ab52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab64:	4b08      	ldr	r3, [pc, #32]	; (800ab88 <HAL_PCD_ResumeCallback+0x4c>)
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	4a07      	ldr	r2, [pc, #28]	; (800ab88 <HAL_PCD_ResumeCallback+0x4c>)
 800ab6a:	f023 0306 	bic.w	r3, r3, #6
 800ab6e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ab70:	f000 faf6 	bl	800b160 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fb ffe2 	bl	8006b44 <USBD_LL_Resume>
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	e000ed00 	.word	0xe000ed00

0800ab8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	4611      	mov	r1, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fc f82e 	bl	8006c04 <USBD_LL_IsoOUTIncomplete>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fb fff6 	bl	8006bb8 <USBD_LL_IsoINIncomplete>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fc f834 	bl	8006c50 <USBD_LL_DevConnected>
}
 800abe8:	bf00      	nop
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fc f831 	bl	8006c66 <USBD_LL_DevDisconnected>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d13c      	bne.n	800ac96 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac1c:	4a20      	ldr	r2, [pc, #128]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a1e      	ldr	r2, [pc, #120]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac2c:	4b1c      	ldr	r3, [pc, #112]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ac34:	4b1a      	ldr	r3, [pc, #104]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac36:	2206      	movs	r2, #6
 800ac38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac3a:	4b19      	ldr	r3, [pc, #100]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac40:	4b17      	ldr	r3, [pc, #92]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac42:	2202      	movs	r2, #2
 800ac44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac46:	4b16      	ldr	r3, [pc, #88]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac4c:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac52:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ac58:	4b11      	ldr	r3, [pc, #68]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac5e:	4b10      	ldr	r3, [pc, #64]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac64:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac6a:	480d      	ldr	r0, [pc, #52]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac6c:	f7f6 fe62 	bl	8001934 <HAL_PCD_Init>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac76:	f7f5 ffcb 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac7a:	2180      	movs	r1, #128	; 0x80
 800ac7c:	4808      	ldr	r0, [pc, #32]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac7e:	f7f7 fec4 	bl	8002a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac82:	2240      	movs	r2, #64	; 0x40
 800ac84:	2100      	movs	r1, #0
 800ac86:	4806      	ldr	r0, [pc, #24]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac88:	f7f7 fe78 	bl	800297c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac8c:	2280      	movs	r2, #128	; 0x80
 800ac8e:	2101      	movs	r1, #1
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <USBD_LL_Init+0x94>)
 800ac92:	f7f7 fe73 	bl	800297c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200033b4 	.word	0x200033b4

0800aca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f6 ff5e 	bl	8001b7c <HAL_PCD_Start>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d816      	bhi.n	800acf8 <USBD_LL_Start+0x54>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <USBD_LL_Start+0x2c>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ace1 	.word	0x0800ace1
 800acd4:	0800ace7 	.word	0x0800ace7
 800acd8:	0800aced 	.word	0x0800aced
 800acdc:	0800acf3 	.word	0x0800acf3
    case HAL_OK :
      usb_status = USBD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
    break;
 800ace4:	e00b      	b.n	800acfe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	73fb      	strb	r3, [r7, #15]
    break;
 800acea:	e008      	b.n	800acfe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acec:	2301      	movs	r3, #1
 800acee:	73fb      	strb	r3, [r7, #15]
    break;
 800acf0:	e005      	b.n	800acfe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acf2:	2303      	movs	r3, #3
 800acf4:	73fb      	strb	r3, [r7, #15]
    break;
 800acf6:	e002      	b.n	800acfe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800acf8:	2303      	movs	r3, #3
 800acfa:	73fb      	strb	r3, [r7, #15]
    break;
 800acfc:	bf00      	nop
  }
  return usb_status;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	4608      	mov	r0, r1
 800ad12:	4611      	mov	r1, r2
 800ad14:	461a      	mov	r2, r3
 800ad16:	4603      	mov	r3, r0
 800ad18:	70fb      	strb	r3, [r7, #3]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70bb      	strb	r3, [r7, #2]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad30:	78bb      	ldrb	r3, [r7, #2]
 800ad32:	883a      	ldrh	r2, [r7, #0]
 800ad34:	78f9      	ldrb	r1, [r7, #3]
 800ad36:	f7f7 fb19 	bl	800236c <HAL_PCD_EP_Open>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b03      	cmp	r3, #3
 800ad42:	d817      	bhi.n	800ad74 <USBD_LL_OpenEP+0x6c>
 800ad44:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <USBD_LL_OpenEP+0x44>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad63 	.word	0x0800ad63
 800ad54:	0800ad69 	.word	0x0800ad69
 800ad58:	0800ad6f 	.word	0x0800ad6f
    case HAL_OK :
      usb_status = USBD_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad60:	e00b      	b.n	800ad7a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad62:	2303      	movs	r3, #3
 800ad64:	73fb      	strb	r3, [r7, #15]
    break;
 800ad66:	e008      	b.n	800ad7a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6c:	e005      	b.n	800ad7a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	73fb      	strb	r3, [r7, #15]
    break;
 800ad72:	e002      	b.n	800ad7a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ad74:	2303      	movs	r3, #3
 800ad76:	73fb      	strb	r3, [r7, #15]
    break;
 800ad78:	bf00      	nop
  }
  return usb_status;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad9e:	78fa      	ldrb	r2, [r7, #3]
 800ada0:	4611      	mov	r1, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f7 fb4a 	bl	800243c <HAL_PCD_EP_Close>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d816      	bhi.n	800ade0 <USBD_LL_CloseEP+0x5c>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <USBD_LL_CloseEP+0x34>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800adc9 	.word	0x0800adc9
 800adbc:	0800adcf 	.word	0x0800adcf
 800adc0:	0800add5 	.word	0x0800add5
 800adc4:	0800addb 	.word	0x0800addb
    case HAL_OK :
      usb_status = USBD_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
    break;
 800adcc:	e00b      	b.n	800ade6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adce:	2303      	movs	r3, #3
 800add0:	73fb      	strb	r3, [r7, #15]
    break;
 800add2:	e008      	b.n	800ade6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
    break;
 800add8:	e005      	b.n	800ade6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	73fb      	strb	r3, [r7, #15]
    break;
 800adde:	e002      	b.n	800ade6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ade0:	2303      	movs	r3, #3
 800ade2:	73fb      	strb	r3, [r7, #15]
    break;
 800ade4:	bf00      	nop
  }
  return usb_status;
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae0a:	78fa      	ldrb	r2, [r7, #3]
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f7 fbf1 	bl	80025f6 <HAL_PCD_EP_SetStall>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d816      	bhi.n	800ae4c <USBD_LL_StallEP+0x5c>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <USBD_LL_StallEP+0x34>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae3b 	.word	0x0800ae3b
 800ae2c:	0800ae41 	.word	0x0800ae41
 800ae30:	0800ae47 	.word	0x0800ae47
    case HAL_OK :
      usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
    break;
 800ae38:	e00b      	b.n	800ae52 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3e:	e008      	b.n	800ae52 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	e005      	b.n	800ae52 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4a:	e002      	b.n	800ae52 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae50:	bf00      	nop
  }
  return usb_status;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae76:	78fa      	ldrb	r2, [r7, #3]
 800ae78:	4611      	mov	r1, r2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7f7 fc1d 	bl	80026ba <HAL_PCD_EP_ClrStall>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d816      	bhi.n	800aeb8 <USBD_LL_ClearStallEP+0x5c>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <USBD_LL_ClearStallEP+0x34>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800aea1 	.word	0x0800aea1
 800ae94:	0800aea7 	.word	0x0800aea7
 800ae98:	0800aead 	.word	0x0800aead
 800ae9c:	0800aeb3 	.word	0x0800aeb3
    case HAL_OK :
      usb_status = USBD_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
    break;
 800aea4:	e00b      	b.n	800aebe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aea6:	2303      	movs	r3, #3
 800aea8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeaa:	e008      	b.n	800aebe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeac:	2301      	movs	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb0:	e005      	b.n	800aebe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb6:	e002      	b.n	800aebe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	73fb      	strb	r3, [r7, #15]
    break;
 800aebc:	bf00      	nop
  }
  return usb_status;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aeda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aedc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	da0b      	bge.n	800aefc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	440b      	add	r3, r1
 800aef6:	333e      	adds	r3, #62	; 0x3e
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	e00b      	b.n	800af14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	4613      	mov	r3, r2
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	1a9b      	subs	r3, r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af3a:	78fa      	ldrb	r2, [r7, #3]
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f7 f9ef 	bl	8002322 <HAL_PCD_SetAddress>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800af48:	7bbb      	ldrb	r3, [r7, #14]
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d816      	bhi.n	800af7c <USBD_LL_SetUSBAddress+0x5c>
 800af4e:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <USBD_LL_SetUSBAddress+0x34>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800af65 	.word	0x0800af65
 800af58:	0800af6b 	.word	0x0800af6b
 800af5c:	0800af71 	.word	0x0800af71
 800af60:	0800af77 	.word	0x0800af77
    case HAL_OK :
      usb_status = USBD_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
    break;
 800af68:	e00b      	b.n	800af82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af6a:	2303      	movs	r3, #3
 800af6c:	73fb      	strb	r3, [r7, #15]
    break;
 800af6e:	e008      	b.n	800af82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af70:	2301      	movs	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
    break;
 800af74:	e005      	b.n	800af82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af76:	2303      	movs	r3, #3
 800af78:	73fb      	strb	r3, [r7, #15]
    break;
 800af7a:	e002      	b.n	800af82 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800af7c:	2303      	movs	r3, #3
 800af7e:	73fb      	strb	r3, [r7, #15]
    break;
 800af80:	bf00      	nop
  }
  return usb_status;
 800af82:	7bfb      	ldrb	r3, [r7, #15]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afaa:	7af9      	ldrb	r1, [r7, #11]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	f7f7 fae4 	bl	800257c <HAL_PCD_EP_Transmit>
 800afb4:	4603      	mov	r3, r0
 800afb6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800afb8:	7dbb      	ldrb	r3, [r7, #22]
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d816      	bhi.n	800afec <USBD_LL_Transmit+0x60>
 800afbe:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <USBD_LL_Transmit+0x38>)
 800afc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc4:	0800afd5 	.word	0x0800afd5
 800afc8:	0800afdb 	.word	0x0800afdb
 800afcc:	0800afe1 	.word	0x0800afe1
 800afd0:	0800afe7 	.word	0x0800afe7
    case HAL_OK :
      usb_status = USBD_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	75fb      	strb	r3, [r7, #23]
    break;
 800afd8:	e00b      	b.n	800aff2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afda:	2303      	movs	r3, #3
 800afdc:	75fb      	strb	r3, [r7, #23]
    break;
 800afde:	e008      	b.n	800aff2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afe0:	2301      	movs	r3, #1
 800afe2:	75fb      	strb	r3, [r7, #23]
    break;
 800afe4:	e005      	b.n	800aff2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	75fb      	strb	r3, [r7, #23]
    break;
 800afea:	e002      	b.n	800aff2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
    break;
 800aff0:	bf00      	nop
  }
  return usb_status;
 800aff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	607a      	str	r2, [r7, #4]
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	460b      	mov	r3, r1
 800b00a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b01a:	7af9      	ldrb	r1, [r7, #11]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	f7f7 fa56 	bl	80024d0 <HAL_PCD_EP_Receive>
 800b024:	4603      	mov	r3, r0
 800b026:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b028:	7dbb      	ldrb	r3, [r7, #22]
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d816      	bhi.n	800b05c <USBD_LL_PrepareReceive+0x60>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBD_LL_PrepareReceive+0x38>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b04b 	.word	0x0800b04b
 800b03c:	0800b051 	.word	0x0800b051
 800b040:	0800b057 	.word	0x0800b057
    case HAL_OK :
      usb_status = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	75fb      	strb	r3, [r7, #23]
    break;
 800b048:	e00b      	b.n	800b062 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	75fb      	strb	r3, [r7, #23]
    break;
 800b04e:	e008      	b.n	800b062 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
    break;
 800b054:	e005      	b.n	800b062 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	75fb      	strb	r3, [r7, #23]
    break;
 800b05a:	e002      	b.n	800b062 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	75fb      	strb	r3, [r7, #23]
    break;
 800b060:	bf00      	nop
  }
  return usb_status;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b07e:	78fa      	ldrb	r2, [r7, #3]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7f7 fa62 	bl	800254c <HAL_PCD_EP_GetRxCount>
 800b088:	4603      	mov	r3, r0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_PCDEx_LPM_Callback+0x18>
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d01f      	beq.n	800b0ea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b0aa:	e03b      	b.n	800b124 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d007      	beq.n	800b0c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b0b4:	f000 f854 	bl	800b160 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0b8:	4b1c      	ldr	r3, [pc, #112]	; (800b12c <HAL_PCDEx_LPM_Callback+0x98>)
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <HAL_PCDEx_LPM_Callback+0x98>)
 800b0be:	f023 0306 	bic.w	r3, r3, #6
 800b0c2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	6812      	ldr	r2, [r2, #0]
 800b0d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0d6:	f023 0301 	bic.w	r3, r3, #1
 800b0da:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fb fd2e 	bl	8006b44 <USBD_LL_Resume>
    break;
 800b0e8:	e01c      	b.n	800b124 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fb fd05 	bl	8006b18 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d005      	beq.n	800b122 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b116:	4b05      	ldr	r3, [pc, #20]	; (800b12c <HAL_PCDEx_LPM_Callback+0x98>)
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	4a04      	ldr	r2, [pc, #16]	; (800b12c <HAL_PCDEx_LPM_Callback+0x98>)
 800b11c:	f043 0306 	orr.w	r3, r3, #6
 800b120:	6113      	str	r3, [r2, #16]
    break;
 800b122:	bf00      	nop
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	e000ed00 	.word	0xe000ed00

0800b130 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b138:	4b03      	ldr	r3, [pc, #12]	; (800b148 <USBD_static_malloc+0x18>)
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20001a98 	.word	0x20001a98

0800b14c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]

}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b164:	f7f5 f8a0 	bl	80002a8 <SystemClock_Config>
}
 800b168:	bf00      	nop
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4d0d      	ldr	r5, [pc, #52]	; (800b1a4 <__libc_init_array+0x38>)
 800b170:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b172:	1b64      	subs	r4, r4, r5
 800b174:	10a4      	asrs	r4, r4, #2
 800b176:	2600      	movs	r6, #0
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	4d0b      	ldr	r5, [pc, #44]	; (800b1ac <__libc_init_array+0x40>)
 800b17e:	4c0c      	ldr	r4, [pc, #48]	; (800b1b0 <__libc_init_array+0x44>)
 800b180:	f000 f82e 	bl	800b1e0 <_init>
 800b184:	1b64      	subs	r4, r4, r5
 800b186:	10a4      	asrs	r4, r4, #2
 800b188:	2600      	movs	r6, #0
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800b328 	.word	0x0800b328
 800b1a8:	0800b328 	.word	0x0800b328
 800b1ac:	0800b328 	.word	0x0800b328
 800b1b0:	0800b32c 	.word	0x0800b32c

0800b1b4 <memcpy>:
 800b1b4:	440a      	add	r2, r1
 800b1b6:	4291      	cmp	r1, r2
 800b1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1bc:	d100      	bne.n	800b1c0 <memcpy+0xc>
 800b1be:	4770      	bx	lr
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ca:	4291      	cmp	r1, r2
 800b1cc:	d1f9      	bne.n	800b1c2 <memcpy+0xe>
 800b1ce:	bd10      	pop	{r4, pc}

0800b1d0 <memset>:
 800b1d0:	4402      	add	r2, r0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d100      	bne.n	800b1da <memset+0xa>
 800b1d8:	4770      	bx	lr
 800b1da:	f803 1b01 	strb.w	r1, [r3], #1
 800b1de:	e7f9      	b.n	800b1d4 <memset+0x4>

0800b1e0 <_init>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr

0800b1ec <_fini>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	bf00      	nop
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr
