
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008100  08008100  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  08008100  08008100  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008100  08008100  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08008108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c14  20000198  080082a0  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  080082a0  00021dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc7a  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b6  00000000  00000000  0003ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000406f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00041a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029681  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd2  00000000  00000000  0006c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2828  00000000  00000000  00082fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001757db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  00175830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000198 	.word	0x20000198
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008060 	.word	0x08008060

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000019c 	.word	0x2000019c
 80001c4:	08008060 	.word	0x08008060

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc87 	bl	8000ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f86a 	bl	80002a8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9e6 	bl	80005a4 <MX_GPIO_Init>
  MX_TIM5_Init();
 80001d8:	f000 f98e 	bl	80004f8 <MX_TIM5_Init>
  MX_TIM1_Init();
 80001dc:	f000 f8ec 	bl	80003b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f93c 	bl	800045c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f007 f88a 	bl	80072fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  TIM5->CNT=750000;
 80001e8:	4b26      	ldr	r3, [pc, #152]	; (8000284 <main+0xbc>)
 80001ea:	4a27      	ldr	r2, [pc, #156]	; (8000288 <main+0xc0>)
 80001ec:	625a      	str	r2, [r3, #36]	; 0x24


  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80001ee:	213c      	movs	r1, #60	; 0x3c
 80001f0:	4826      	ldr	r0, [pc, #152]	; (800028c <main+0xc4>)
 80001f2:	f003 fd19 	bl	8003c28 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2104      	movs	r1, #4
 80001fa:	4825      	ldr	r0, [pc, #148]	; (8000290 <main+0xc8>)
 80001fc:	f000 ffdc 	bl	80011b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <main+0xcc>)
 8000208:	f000 ffd6 	bl	80011b8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 800020c:	4822      	ldr	r0, [pc, #136]	; (8000298 <main+0xd0>)
 800020e:	f003 fbf5 	bl	80039fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000212:	4822      	ldr	r0, [pc, #136]	; (800029c <main+0xd4>)
 8000214:	f003 fbf2 	bl	80039fc <HAL_TIM_Base_Start_IT>
//
//	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);



	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021c:	481d      	ldr	r0, [pc, #116]	; (8000294 <main+0xcc>)
 800021e:	f000 ffb3 	bl	8001188 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d108      	bne.n	800023a <main+0x72>
		  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <main+0xc8>)
 800022e:	f000 ffc3 	bl	80011b8 <HAL_GPIO_WritePin>
		  	  X0=1;
 8000232:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <main+0xd8>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	e007      	b.n	800024a <main+0x82>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	2104      	movs	r1, #4
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <main+0xc8>)
 8000240:	f000 ffba 	bl	80011b8 <HAL_GPIO_WritePin>
		  X0=0;
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <main+0xd8>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0xcc>)
 8000250:	f000 ff9a 	bl	8001188 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d109      	bne.n	800026e <main+0xa6>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <main+0xcc>)
 8000262:	f000 ffa9 	bl	80011b8 <HAL_GPIO_WritePin>
		  	  Y0=1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <main+0xdc>)
 8000268:	2201      	movs	r2, #1
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	e7d4      	b.n	8000218 <main+0x50>
	  }
	  else  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0xcc>)
 8000276:	f000 ff9f 	bl	80011b8 <HAL_GPIO_WritePin>
		  Y0=0;
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <main+0xdc>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000280:	e7ca      	b.n	8000218 <main+0x50>
 8000282:	bf00      	nop
 8000284:	40000c00 	.word	0x40000c00
 8000288:	000b71b0 	.word	0x000b71b0
 800028c:	200003e0 	.word	0x200003e0
 8000290:	48000400 	.word	0x48000400
 8000294:	48001000 	.word	0x48001000
 8000298:	20000434 	.word	0x20000434
 800029c:	20000480 	.word	0x20000480
 80002a0:	200004cc 	.word	0x200004cc
 80002a4:	200004cd 	.word	0x200004cd

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0b8      	sub	sp, #224	; 0xe0
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f007 feca 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2288      	movs	r2, #136	; 0x88
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f007 febc 	bl	8008050 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d8:	2310      	movs	r3, #16
 80002da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ea:	2360      	movs	r3, #96	; 0x60
 80002ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f6:	2301      	movs	r3, #1
 80002f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000302:	2328      	movs	r3, #40	; 0x28
 8000304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000308:	2307      	movs	r3, #7
 800030a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800031e:	4618      	mov	r0, r3
 8000320:	f002 f898 	bl	8002454 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800032a:	f000 fa27 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800034c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000350:	2104      	movs	r1, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fc64 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800035e:	f000 fa0d 	bl	800077c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000376:	2318      	movs	r3, #24
 8000378:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800037a:	2307      	movs	r3, #7
 800037c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800038a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038c:	463b      	mov	r3, r7
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fe20 	bl	8002fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800039a:	f000 f9ef 	bl	800077c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f001 fff1 	bl	8002388 <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80003ac:	f000 f9e6 	bl	800077c <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	37e0      	adds	r7, #224	; 0xe0
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <MX_TIM1_Init+0xa0>)
 80003da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_TIM1_Init+0x9c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000400:	4814      	ldr	r0, [pc, #80]	; (8000454 <MX_TIM1_Init+0x9c>)
 8000402:	f003 faa3 	bl	800394c <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800040c:	f000 f9b6 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_TIM1_Init+0x9c>)
 800041e:	f003 fdb0 	bl	8003f82 <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000428:	f000 f9a8 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_TIM1_Init+0x9c>)
 800043e:	f003 ffe9 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000448:	f000 f998 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000434 	.word	0x20000434
 8000458:	40012c00 	.word	0x40012c00

0800045c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_TIM2_Init+0x98>)
 800047c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000480:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <MX_TIM2_Init+0x98>)
 8000484:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_TIM2_Init+0x98>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_TIM2_Init+0x98>)
 8000492:	f242 720f 	movw	r2, #9999	; 0x270f
 8000496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_TIM2_Init+0x98>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_TIM2_Init+0x98>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a4:	4813      	ldr	r0, [pc, #76]	; (80004f4 <MX_TIM2_Init+0x98>)
 80004a6:	f003 fa51 	bl	800394c <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004b0:	f000 f964 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <MX_TIM2_Init+0x98>)
 80004c2:	f003 fd5e 	bl	8003f82 <HAL_TIM_ConfigClockSource>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004cc:	f000 f956 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_TIM2_Init+0x98>)
 80004de:	f003 ff99 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80004e8:	f000 f948 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000480 	.word	0x20000480

080004f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	; 0x30
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	2224      	movs	r2, #36	; 0x24
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fda2 	bl	8008050 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_TIM5_Init+0xa4>)
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <MX_TIM5_Init+0xa8>)
 800051a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_TIM5_Init+0xa4>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_TIM5_Init+0xa4>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_TIM5_Init+0xa4>)
 800052a:	f248 4260 	movw	r2, #33888	; 0x8460
 800052e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_TIM5_Init+0xa4>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_TIM5_Init+0xa4>)
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800053c:	2303      	movs	r3, #3
 800053e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000554:	2301      	movs	r3, #1
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <MX_TIM5_Init+0xa4>)
 8000568:	f003 fab8 	bl	8003adc <HAL_TIM_Encoder_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000572:	f000 f903 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_TIM5_Init+0xa4>)
 8000584:	f003 ff46 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800058e:	f000 f8f5 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3730      	adds	r7, #48	; 0x30
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200003e0 	.word	0x200003e0
 80005a0:	40000c00 	.word	0x40000c00

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <MX_GPIO_Init+0xf8>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a37      	ldr	r2, [pc, #220]	; (800069c <MX_GPIO_Init+0xf8>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_GPIO_Init+0xf8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_GPIO_Init+0xf8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <MX_GPIO_Init+0xf8>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <MX_GPIO_Init+0xf8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b2c      	ldr	r3, [pc, #176]	; (800069c <MX_GPIO_Init+0xf8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a2b      	ldr	r2, [pc, #172]	; (800069c <MX_GPIO_Init+0xf8>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_GPIO_Init+0xf8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_GPIO_Init+0xf8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <MX_GPIO_Init+0xf8>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_GPIO_Init+0xf8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2104      	movs	r1, #4
 800061e:	4820      	ldr	r0, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xfc>)
 8000620:	f000 fdca 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	481e      	ldr	r0, [pc, #120]	; (80006a4 <MX_GPIO_Init+0x100>)
 800062c:	f000 fdc4 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000630:	2304      	movs	r3, #4
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4816      	ldr	r0, [pc, #88]	; (80006a0 <MX_GPIO_Init+0xfc>)
 8000648:	f000 fbf4 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <MX_GPIO_Init+0x100>)
 8000666:	f000 fbe5 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800066a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_GPIO_Init+0x104>)
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x100>)
 8000680:	f000 fbd8 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2028      	movs	r0, #40	; 0x28
 800068a:	f000 fb9c 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068e:	2028      	movs	r0, #40	; 0x28
 8000690:	f000 fbb5 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48001000 	.word	0x48001000
 80006a8:	10310000 	.word	0x10310000

080006ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d115      	bne.n	80006ec <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 80006ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80006d2:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	fb02 f303 	mul.w	r3, r2, r3
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	4413      	add	r3, r2
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006ea:	601a      	str	r2, [r3, #0]
	}

}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	20000480 	.word	0x20000480
 80006fc:	200003e0 	.word	0x200003e0
 8000700:	200003dc 	.word	0x200003dc
 8000704:	200001b4 	.word	0x200001b4
 8000708:	2000042c 	.word	0x2000042c

0800070c <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]

	  int8_t opbuff[4];

	  if(buf[0]== '0')
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b30      	cmp	r3, #48	; 0x30
 800071c:	d115      	bne.n	800074a <CDC_ReceiveCallback+0x3e>
	  {
	  *(int32_t*)&(opbuff[0]) = TIM5->CNT;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <CDC_ReceiveCallback+0x64>)
 8000720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	601a      	str	r2, [r3, #0]

	  opbuff[3] =(X0<<0)+(Y0<<1);
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <CDC_ReceiveCallback+0x68>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <CDC_ReceiveCallback+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4413      	add	r3, r2
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b25b      	sxtb	r3, r3
 800073a:	73fb      	strb	r3, [r7, #15]


	  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2104      	movs	r1, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f006 feee 	bl	8007524 <CDC_Transmit_FS>
		  opbuff[1]=0xFF;
		  opbuff[2]=0xFF;
		  opbuff[3]=0xFF;
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
	  }
}
 8000748:	e00d      	b.n	8000766 <CDC_ReceiveCallback+0x5a>
		  opbuff[0]=0xFF;
 800074a:	23ff      	movs	r3, #255	; 0xff
 800074c:	733b      	strb	r3, [r7, #12]
		  opbuff[1]=0xFF;
 800074e:	23ff      	movs	r3, #255	; 0xff
 8000750:	737b      	strb	r3, [r7, #13]
		  opbuff[2]=0xFF;
 8000752:	23ff      	movs	r3, #255	; 0xff
 8000754:	73bb      	strb	r3, [r7, #14]
		  opbuff[3]=0xFF;
 8000756:	23ff      	movs	r3, #255	; 0xff
 8000758:	73fb      	strb	r3, [r7, #15]
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2104      	movs	r1, #4
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fedf 	bl	8007524 <CDC_Transmit_FS>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40000c00 	.word	0x40000c00
 8000774:	200004cd 	.word	0x200004cd
 8000778:	200004cc 	.word	0x200004cc

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x50>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_MspInit+0x50>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x50>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x50>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_MspInit+0x50>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	; 0x58
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x50>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2005      	movs	r0, #5
 80007c4:	f000 faff 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80007c8:	2005      	movs	r0, #5
 80007ca:	f000 fb18 	bl	8000dfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <HAL_TIM_Base_MspInit+0xa8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12c      	bne.n	8000848 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 80007f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2018      	movs	r0, #24
 800080c:	f000 fadb 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000810:	2018      	movs	r0, #24
 8000812:	f000 faf4 	bl	8000dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2019      	movs	r0, #25
 800081c:	f000 fad3 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000820:	2019      	movs	r0, #25
 8000822:	f000 faec 	bl	8000dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	201a      	movs	r0, #26
 800082c:	f000 facb 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000830:	201a      	movs	r0, #26
 8000832:	f000 fae4 	bl	8000dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	201b      	movs	r0, #27
 800083c:	f000 fac3 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000840:	201b      	movs	r0, #27
 8000842:	f000 fadc 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000846:	e018      	b.n	800087a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000850:	d113      	bne.n	800087a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_TIM_Base_MspInit+0xac>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	201c      	movs	r0, #28
 8000870:	f000 faa9 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000874:	201c      	movs	r0, #28
 8000876:	f000 fac2 	bl	8000dfe <HAL_NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40012c00 	.word	0x40012c00
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <HAL_TIM_Encoder_MspInit+0x8c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d130      	bne.n	8000910 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_TIM_Encoder_MspInit+0x90>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008de:	2303      	movs	r3, #3
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80008ee:	2302      	movs	r3, #2
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fa9a 	bl	8000e34 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2032      	movs	r0, #50	; 0x32
 8000906:	f000 fa5e 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f000 fa77 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40000c00 	.word	0x40000c00
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f90c 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800098a:	f003 f9db 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000434 	.word	0x20000434

08000998 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800099e:	f003 f9d1 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000434 	.word	0x20000434

080009ac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80009b2:	f003 f9c7 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000434 	.word	0x20000434

080009c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM1_CC_IRQHandler+0x10>)
 80009c6:	f003 f9bd 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000434 	.word	0x20000434

080009d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <TIM2_IRQHandler+0x10>)
 80009da:	f003 f9b3 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000480 	.word	0x20000480

080009e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009f0:	f000 fbfa 	bl	80011e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f8:	f000 fbf6 	bl	80011e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM5_IRQHandler+0x10>)
 8000a06:	f003 f99d 	bl	8003d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200003e0 	.word	0x200003e0

08000a14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <OTG_FS_IRQHandler+0x10>)
 8000a1a:	f000 fd5b 	bl	80014d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200019a4 	.word	0x200019a4

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <SystemInit+0x5c>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <SystemInit+0x5c>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x60>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <SystemInit+0x60>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <SystemInit+0x60>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <SystemInit+0x60>)
 8000a54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <SystemInit+0x60>)
 8000a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SystemInit+0x60>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <SystemInit+0x60>)
 8000a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SystemInit+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	40021000 	.word	0x40021000

08000a8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a90:	f7ff ffca 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aa6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
	ldr	r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ab6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f007 faa5 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000abe:	f7ff fb83 	bl	80001c8 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ac8:	08008108 	.word	0x08008108
	ldr	r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ad0:	20000198 	.word	0x20000198
	ldr	r2, =_sbss
 8000ad4:	20000198 	.word	0x20000198
	ldr	r3, = _ebss
 8000ad8:	20001dac 	.word	0x20001dac

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>

08000ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f961 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f80e 	bl	8000b10 <HAL_InitTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	71fb      	strb	r3, [r7, #7]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b00:	f7ff fe42 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d023      	beq.n	8000b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_InitTick+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f96d 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10f      	bne.n	8000b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f937 	bl	8000dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_InitTick+0x74>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e004      	b.n	8000b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e001      	b.n	8000b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	200004d0 	.word	0x200004d0

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200004d0 	.word	0x200004d0

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff29 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff3e 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff31 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	e17f      	b.n	8001144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8171 	beq.w	800113e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d00b      	beq.n	8000e7c <HAL_GPIO_Init+0x48>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d007      	beq.n	8000e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	2b11      	cmp	r3, #17
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d118      	bne.n	8000f1c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x128>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b12      	cmp	r3, #18
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80ac 	beq.w	800113e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <HAL_GPIO_Init+0x330>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	4a5e      	ldr	r2, [pc, #376]	; (8001164 <HAL_GPIO_Init+0x330>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_GPIO_Init+0x330>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffe:	4a5a      	ldr	r2, [pc, #360]	; (8001168 <HAL_GPIO_Init+0x334>)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001028:	d025      	beq.n	8001076 <HAL_GPIO_Init+0x242>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4f      	ldr	r2, [pc, #316]	; (800116c <HAL_GPIO_Init+0x338>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01f      	beq.n	8001072 <HAL_GPIO_Init+0x23e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <HAL_GPIO_Init+0x33c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x23a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <HAL_GPIO_Init+0x340>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x236>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <HAL_GPIO_Init+0x344>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x232>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4b      	ldr	r2, [pc, #300]	; (800117c <HAL_GPIO_Init+0x348>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4a      	ldr	r2, [pc, #296]	; (8001180 <HAL_GPIO_Init+0x34c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x22a>
 800105a:	2306      	movs	r3, #6
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x244>
 800105e:	2307      	movs	r3, #7
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x244>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x244>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x244>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x244>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x244>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x244>
 8001076:	2300      	movs	r3, #0
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001088:	4937      	ldr	r1, [pc, #220]	; (8001168 <HAL_GPIO_Init+0x334>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_GPIO_Init+0x350>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <HAL_GPIO_Init+0x350>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_GPIO_Init+0x350>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_GPIO_Init+0x350>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_GPIO_Init+0x350>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <HAL_GPIO_Init+0x350>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_GPIO_Init+0x350>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_GPIO_Init+0x350>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	f47f ae78 	bne.w	8000e44 <HAL_GPIO_Init+0x10>
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	48000c00 	.word	0x48000c00
 8001178:	48001000 	.word	0x48001000
 800117c:	48001400 	.word	0x48001400
 8001180:	48001800 	.word	0x48001800
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e001      	b.n	80011aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f806 	bl	8001218 <HAL_GPIO_EXTI_Callback>
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800122e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001230:	b08f      	sub	sp, #60	; 0x3c
 8001232:	af0a      	add	r7, sp, #40	; 0x28
 8001234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e116      	b.n	800146e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d106      	bne.n	8001260 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f006 fabc 	bl	80077d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fa47 	bl	8004712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	687e      	ldr	r6, [r7, #4]
 800128c:	466d      	mov	r5, sp
 800128e:	f106 0410 	add.w	r4, r6, #16
 8001292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800129e:	e885 0003 	stmia.w	r5, {r0, r1}
 80012a2:	1d33      	adds	r3, r6, #4
 80012a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f003 f95a 	bl	8004560 <USB_CoreInit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0d7      	b.n	800146e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fa35 	bl	8004734 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e04a      	b.n	8001366 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	333d      	adds	r3, #61	; 0x3d
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	333c      	adds	r3, #60	; 0x3c
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	b298      	uxth	r0, r3
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3342      	adds	r3, #66	; 0x42
 800130c:	4602      	mov	r2, r0
 800130e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	333f      	adds	r3, #63	; 0x3f
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	3344      	adds	r3, #68	; 0x44
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3348      	adds	r3, #72	; 0x48
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3350      	adds	r3, #80	; 0x50
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	3301      	adds	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3af      	bcc.n	80012d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e044      	b.n	8001400 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	1a9b      	subs	r3, r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3b5      	bcc.n	8001376 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	687e      	ldr	r6, [r7, #4]
 8001412:	466d      	mov	r5, sp
 8001414:	f106 0410 	add.w	r4, r6, #16
 8001418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001424:	e885 0003 	stmia.w	r5, {r0, r1}
 8001428:	1d33      	adds	r3, r6, #4
 800142a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f003 f9ab 	bl	8004788 <USB_DevInit>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e014      	b.n	800146e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 ff61 	bl	8002324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f92d 	bl	80056c6 <USB_DevDisconnect>

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001476 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_PCD_Start+0x1c>
 800148e:	2302      	movs	r3, #2
 8001490:	e01c      	b.n	80014cc <HAL_PCD_Start+0x56>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 f91c 	bl	80046f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f8e1 	bl	8005684 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08d      	sub	sp, #52	; 0x34
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 f99f 	bl	800582e <USB_GetMode>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 838f 	bne.w	8001c16 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 f903 	bl	8005708 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8385 	beq.w	8001c14 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f8fa 	bl	8005708 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d107      	bne.n	800152e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f002 0202 	and.w	r2, r2, #2
 800152c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f8e8 	bl	8005708 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b10      	cmp	r3, #16
 8001540:	d161      	bne.n	8001606 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0210 	bic.w	r2, r2, #16
 8001550:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f003 020f 	and.w	r2, r3, #15
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	0c5b      	lsrs	r3, r3, #17
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	2b02      	cmp	r3, #2
 800157c:	d124      	bne.n	80015c8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d035      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	6a38      	ldr	r0, [r7, #32]
 800159e:	f003 ff4e 	bl	800543e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ae:	441a      	add	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c0:	441a      	add	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	619a      	str	r2, [r3, #24]
 80015c6:	e016      	b.n	80015f6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	0c5b      	lsrs	r3, r3, #17
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d110      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015da:	2208      	movs	r2, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	6a38      	ldr	r0, [r7, #32]
 80015e0:	f003 ff2d 	bl	800543e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f0:	441a      	add	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0210 	orr.w	r2, r2, #16
 8001604:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 f87c 	bl	8005708 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001616:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800161a:	d16e      	bne.n	80016fa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f004 f882 	bl	800572e <USB_ReadDevAllOutEpInterrupt>
 800162a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800162c:	e062      	b.n	80016f4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d057      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f004 f8a7 	bl	8005796 <USB_ReadDevOutEPInterrupt>
 8001648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001660:	461a      	mov	r2, r3
 8001662:	2301      	movs	r3, #1
 8001664:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fd81 	bl	8002170 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001684:	461a      	mov	r2, r3
 8001686:	2308      	movs	r3, #8
 8001688:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800168a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fdbd 	bl	800220c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	015a      	lsls	r2, r3, #5
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016a8:	461a      	mov	r2, r3
 80016aa:	2310      	movs	r3, #16
 80016ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c4:	461a      	mov	r2, r3
 80016c6:	2320      	movs	r3, #32
 80016c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3301      	adds	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d199      	bne.n	800162e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f004 f802 	bl	8005708 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800170e:	f040 8087 	bne.w	8001820 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f004 f823 	bl	8005762 <USB_ReadDevAllInEpInterrupt>
 800171c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001722:	e07a      	b.n	800181a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06f      	beq.n	800180e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f004 f84a 	bl	80057d2 <USB_ReadDevInEPInterrupt>
 800173e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d020      	beq.n	800178c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	2201      	movs	r2, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	69f9      	ldr	r1, [r7, #28]
 8001766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800176a:	4013      	ands	r3, r2
 800176c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177a:	461a      	mov	r2, r3
 800177c:	2301      	movs	r3, #1
 800177e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f006 f8b9 	bl	80078fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a2:	461a      	mov	r2, r3
 80017a4:	2308      	movs	r3, #8
 80017a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017be:	461a      	mov	r2, r3
 80017c0:	2310      	movs	r3, #16
 80017c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f6:	461a      	mov	r2, r3
 80017f8:	2302      	movs	r3, #2
 80017fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fc29 	bl	8002060 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d181      	bne.n	8001724 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f003 ff6f 	bl	8005708 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001834:	d122      	bne.n	800187c <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f006 fb66 	bl	8007f30 <HAL_PCDEx_LPM_Callback>
 8001864:	e002      	b.n	800186c <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f006 f8b6 	bl	80079d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800187a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f003 ff41 	bl	8005708 <USB_ReadInterrupts>
 8001886:	4603      	mov	r3, r0
 8001888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001890:	d112      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d102      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f006 f872 	bl	800798c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ff23 	bl	8005708 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018cc:	d121      	bne.n	8001912 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d111      	bne.n	800190c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	f003 020f 	and.w	r2, r3, #15
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001902:	2101      	movs	r1, #1
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f006 fb13 	bl	8007f30 <HAL_PCDEx_LPM_Callback>
 800190a:	e002      	b.n	8001912 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f006 f83d 	bl	800798c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fef6 	bl	8005708 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001926:	f040 80c5 	bne.w	8001ab4 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2110      	movs	r1, #16
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f86b 	bl	8004a20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194e:	e056      	b.n	80019fe <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800195c:	461a      	mov	r2, r3
 800195e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001962:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001974:	0151      	lsls	r1, r2, #5
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	440a      	add	r2, r1
 800197a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800197e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001982:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001994:	0151      	lsls	r1, r2, #5
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	440a      	add	r2, r1
 800199a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800199e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b0:	461a      	mov	r2, r3
 80019b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c8:	0151      	lsls	r1, r2, #5
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	440a      	add	r2, r1
 80019ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e8:	0151      	lsls	r1, r2, #5
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	440a      	add	r2, r1
 80019ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	3301      	adds	r3, #1
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3a3      	bcc.n	8001950 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d016      	beq.n	8001a52 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f043 030b 	orr.w	r3, r3, #11
 8001a38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a4a:	f043 030b 	orr.w	r3, r3, #11
 8001a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a50:	e015      	b.n	8001a7e <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a78:	f043 030b 	orr.w	r3, r3, #11
 8001a7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f003 fef6 	bl	8005890 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 fe25 	bl	8005708 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac8:	d124      	bne.n	8001b14 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 febb 	bl	800584a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f802 	bl	8004ae2 <USB_GetDevSpeed>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	f001 fa07 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8001aee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	f002 fd5d 	bl	80045b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f005 ff25 	bl	800794e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fdf5 	bl	8005708 <USB_ReadInterrupts>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d10a      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 ff02 	bl	8007932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 0208 	and.w	r2, r2, #8
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fde0 	bl	8005708 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b52:	d10f      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 ff74 	bl	8007a4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fdc5 	bl	8005708 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b88:	d10f      	bne.n	8001baa <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f005 ff47 	bl	8007a28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fdaa 	bl	8005708 <USB_ReadInterrupts>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f005 ff55 	bl	8007a70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fd94 	bl	8005708 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d115      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f005 ff45 	bl	8007a8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e000      	b.n	8001c16 <HAL_PCD_IRQHandler+0x742>
      return;
 8001c14:	bf00      	nop
    }
  }
}
 8001c16:	3734      	adds	r7, #52	; 0x34
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_SetAddress+0x1a>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e013      	b.n	8001c5e <HAL_PCD_SetAddress+0x42>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fcf2 	bl	8005638 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	4608      	mov	r0, r1
 8001c70:	4611      	mov	r1, r2
 8001c72:	461a      	mov	r2, r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	70fb      	strb	r3, [r7, #3]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	803b      	strh	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da0f      	bge.n	8001cac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3338      	adds	r3, #56	; 0x38
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	705a      	strb	r2, [r3, #1]
 8001caa:	e00f      	b.n	8001ccc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cd8:	883a      	ldrh	r2, [r7, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cf6:	78bb      	ldrb	r3, [r7, #2]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d102      	bne.n	8001d02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_EP_Open+0xaa>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e00e      	b.n	8001d2e <HAL_PCD_EP_Open+0xc8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fefe 	bl	8004b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0f      	bge.n	8001d6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3338      	adds	r3, #56	; 0x38
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
 8001d68:	e00f      	b.n	8001d8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 020f 	and.w	r2, r3, #15
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_EP_Close+0x6e>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e00e      	b.n	8001dc2 <HAL_PCD_EP_Close+0x8c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 ff3c 	bl	8004c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	3304      	adds	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f9b9 	bl	80051a0 <USB_EP0StartXfer>
 8001e2e:	e005      	b.n	8001e3c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 ffd6 	bl	8004de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e68:	681b      	ldr	r3, [r3, #0]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	460b      	mov	r3, r1
 8001e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3338      	adds	r3, #56	; 0x38
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f964 	bl	80051a0 <USB_EP0StartXfer>
 8001ed8:	e005      	b.n	8001ee6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 ff81 	bl	8004de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d901      	bls.n	8001f0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e04e      	b.n	8001fac <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0f      	bge.n	8001f36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00d      	b.n	8001f52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_EP_SetStall+0x82>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e01c      	b.n	8001fac <HAL_PCD_EP_SetStall+0xbc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fa85 	bl	8005490 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f003 fc77 	bl	8005890 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d901      	bls.n	8001fd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e042      	b.n	8002058 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da0f      	bge.n	8001ffa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3338      	adds	r3, #56	; 0x38
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	705a      	strb	r2, [r3, #1]
 8001ff8:	e00f      	b.n	800201a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_ClrStall+0x86>
 8002036:	2302      	movs	r3, #2
 8002038:	e00e      	b.n	8002058 <HAL_PCD_EP_ClrStall+0xa4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fa8f 	bl	800556c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3338      	adds	r3, #56	; 0x38
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	d901      	bls.n	8002098 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e067      	b.n	8002168 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d902      	bls.n	80020b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3303      	adds	r3, #3
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020bc:	e026      	b.n	800210c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d902      	bls.n	80020da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3303      	adds	r3, #3
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68d9      	ldr	r1, [r3, #12]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f003 f974 	bl	80053dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	441a      	add	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	441a      	add	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	b29b      	uxth	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	429a      	cmp	r2, r3
 8002120:	d809      	bhi.n	8002136 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800212a:	429a      	cmp	r2, r3
 800212c:	d203      	bcs.n	8002136 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1c3      	bne.n	80020be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	d811      	bhi.n	8002166 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	2201      	movs	r2, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	43db      	mvns	r3, r3
 800215c:	6939      	ldr	r1, [r7, #16]
 800215e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002162:	4013      	ands	r3, r2
 8002164:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	333c      	adds	r3, #60	; 0x3c
 8002188:	3304      	adds	r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <PCD_EP_OutXfrComplete_int+0x98>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d124      	bne.n	80021f0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	461a      	mov	r2, r3
 80021be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	e01a      	b.n	80021fc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021dc:	461a      	mov	r2, r3
 80021de:	2320      	movs	r3, #32
 80021e0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f005 fb6d 	bl	80078c8 <HAL_PCD_DataOutStageCallback>
 80021ee:	e005      	b.n	80021fc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4619      	mov	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f005 fb66 	bl	80078c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	4f54310a 	.word	0x4f54310a

0800220c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	333c      	adds	r3, #60	; 0x3c
 8002224:	3304      	adds	r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <PCD_EP_OutSetupPacket_int+0x64>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d90e      	bls.n	8002260 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800225e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f005 fb1f 	bl	80078a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	4f54300a 	.word	0x4f54300a

08002274 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
 8002280:	4613      	mov	r3, r2
 8002282:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002292:	883b      	ldrh	r3, [r7, #0]
 8002294:	0419      	lsls	r1, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	430a      	orrs	r2, r1
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
 80022a0:	e028      	b.n	80022f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e00d      	b.n	80022d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3340      	adds	r3, #64	; 0x40
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	3301      	adds	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3ec      	bcc.n	80022b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022dc:	883b      	ldrh	r3, [r7, #0]
 80022de:	0418      	lsls	r0, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	4302      	orrs	r2, r0
 80022ec:	3340      	adds	r3, #64	; 0x40
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	f043 0303 	orr.w	r3, r3, #3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <HAL_PWREx_GetVoltageRange+0x18>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002396:	d130      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a4:	d038      	beq.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2232      	movs	r2, #50	; 0x32
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9b      	lsrs	r3, r3, #18
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023cc:	e002      	b.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d102      	bne.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f2      	bne.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f4:	d110      	bne.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e00f      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d007      	beq.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000
 800242c:	20000000 	.word	0x20000000
 8002430:	431bde83 	.word	0x431bde83

08002434 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6053      	str	r3, [r2, #4]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e3d4      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002466:	4ba1      	ldr	r3, [pc, #644]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80e4 	beq.w	8002650 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_RCC_OscConfig+0x4a>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b0c      	cmp	r3, #12
 8002492:	f040 808b 	bne.w	80025ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 8087 	bne.w	80025ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800249e:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x62>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e3ac      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1a      	ldr	r2, [r3, #32]
 80024ba:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_RCC_OscConfig+0x7c>
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ce:	e005      	b.n	80024dc <HAL_RCC_OscConfig+0x88>
 80024d0:	4b86      	ldr	r3, [pc, #536]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d223      	bcs.n	8002528 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fd15 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e38d      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4b7d      	ldr	r3, [pc, #500]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7c      	ldr	r2, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b7a      	ldr	r3, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4977      	ldr	r1, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	4972      	ldr	r1, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	e025      	b.n	8002574 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002528:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6f      	ldr	r2, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	496a      	ldr	r1, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002546:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4965      	ldr	r1, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fcd5 	bl	8002f14 <RCC_SetFlashLatencyFromMSIRange>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e34d      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002574:	f000 fc36 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	495a      	ldr	r1, [pc, #360]	; (80026f0 <HAL_RCC_OscConfig+0x29c>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_OscConfig+0x2a0>)
 8002592:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002594:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x2a4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fab9 	bl	8000b10 <HAL_InitTick>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d052      	beq.n	800264e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	e331      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d032      	beq.n	800261a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c0:	f7fe faf6 	bl	8000bb0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c8:	f7fe faf2 	bl	8000bb0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e31a      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a40      	ldr	r2, [pc, #256]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	493b      	ldr	r1, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e01a      	b.n	8002650 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a33      	ldr	r2, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002626:	f7fe fac3 	bl	8000bb0 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800262e:	f7fe fabf 	bl	8000bb0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e2e7      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x1da>
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d074      	beq.n	8002746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x21a>
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	d10e      	bne.n	8002686 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d10b      	bne.n	8002686 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d064      	beq.n	8002744 <HAL_RCC_OscConfig+0x2f0>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d160      	bne.n	8002744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2c4      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x24a>
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e01d      	b.n	80026da <HAL_RCC_OscConfig+0x286>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x26e>
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e00b      	b.n	80026da <HAL_RCC_OscConfig+0x286>
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x298>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01c      	beq.n	800271c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fa65 	bl	8000bb0 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e8:	e011      	b.n	800270e <HAL_RCC_OscConfig+0x2ba>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080080c0 	.word	0x080080c0
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fa58 	bl	8000bb0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e280      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270e:	4baf      	ldr	r3, [pc, #700]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x2a8>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fa48 	bl	8000bb0 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fa44 	bl	8000bb0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e26c      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	4ba5      	ldr	r3, [pc, #660]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d0>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d060      	beq.n	8002814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x310>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d119      	bne.n	8002792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d116      	bne.n	8002792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	4b99      	ldr	r3, [pc, #612]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_OscConfig+0x328>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e249      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b93      	ldr	r3, [pc, #588]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	4990      	ldr	r1, [pc, #576]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	e040      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d023      	beq.n	80027e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279a:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a8b      	ldr	r2, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fa03 	bl	8000bb0 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe f9ff 	bl	8000bb0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e227      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	497c      	ldr	r1, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
 80027e0:	e018      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a79      	ldr	r2, [pc, #484]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80027e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe f9df 	bl	8000bb0 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe f9db 	bl	8000bb0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e203      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002808:	4b70      	ldr	r3, [pc, #448]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03c      	beq.n	800289a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe f9ba 	bl	8000bb0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe f9b6 	bl	8000bb0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1de      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCC_OscConfig+0x3ec>
 8002860:	e01b      	b.n	800289a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7fe f99d 	bl	8000bb0 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287a:	f7fe f999 	bl	8000bb0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1c1      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ef      	bne.n	800287a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a6 	beq.w	80029f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028ac:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10d      	bne.n	80028d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	4b44      	ldr	r3, [pc, #272]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4a43      	ldr	r2, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6593      	str	r3, [r2, #88]	; 0x58
 80028c4:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x57c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d118      	bne.n	8002912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x57c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x57c>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ec:	f7fe f960 	bl	8000bb0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe f95c 	bl	8000bb0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e184      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002906:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_RCC_OscConfig+0x57c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x4d8>
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292a:	e024      	b.n	8002976 <HAL_RCC_OscConfig+0x522>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d110      	bne.n	8002956 <HAL_RCC_OscConfig+0x502>
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002954:	e00f      	b.n	8002976 <HAL_RCC_OscConfig+0x522>
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7fe f917 	bl	8000bb0 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe f913 	bl	8000bb0 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e139      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ed      	beq.n	8002986 <HAL_RCC_OscConfig+0x532>
 80029aa:	e01a      	b.n	80029e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe f900 	bl	8000bb0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b2:	e00f      	b.n	80029d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe f8fc 	bl	8000bb0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d906      	bls.n	80029d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e122      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d4:	4b90      	ldr	r3, [pc, #576]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e8      	bne.n	80029b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8108 	beq.w	8002c0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 80d0 	bne.w	8002ba8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a08:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d130      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	3b01      	subs	r3, #1
 8002a28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d127      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a48:	2a07      	cmp	r2, #7
 8002a4a:	bf14      	ite	ne
 8002a4c:	2201      	movne	r2, #1
 8002a4e:	2200      	moveq	r2, #0
 8002a50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d113      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d06e      	beq.n	8002b5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d069      	beq.n	8002b58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b7      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a5c      	ldr	r2, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aac:	f7fe f880 	bl	8000bb0 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe f87c 	bl	8000bb0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0a4      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_RCC_OscConfig+0x7c8>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aec:	0212      	lsls	r2, r2, #8
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0552      	lsls	r2, r2, #21
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b00:	0852      	lsrs	r2, r2, #1
 8002b02:	3a01      	subs	r2, #1
 8002b04:	0652      	lsls	r2, r2, #25
 8002b06:	4311      	orrs	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b0c:	0912      	lsrs	r2, r2, #4
 8002b0e:	0452      	lsls	r2, r2, #17
 8002b10:	430a      	orrs	r2, r1
 8002b12:	4941      	ldr	r1, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a3e      	ldr	r2, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b30:	f7fe f83e 	bl	8000bb0 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe f83a 	bl	8000bb0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e062      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b56:	e05a      	b.n	8002c0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e059      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d152      	bne.n	8002c0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b80:	f7fe f816 	bl	8000bb0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe f812 	bl	8000bb0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e03a      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x734>
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d02d      	beq.n	8002c0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bcc:	f023 0303 	bic.w	r3, r3, #3
 8002bd0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bd8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fd ffe5 	bl	8000bb0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fd ffe1 	bl	8000bb0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e009      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x796>
 8002c08:	e001      	b.n	8002c0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	f99d808c 	.word	0xf99d808c

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0c8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d910      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b63      	ldr	r3, [pc, #396]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4961      	ldr	r1, [pc, #388]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0b0      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04c      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c78:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e09e      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d115      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e092      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e086      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e07e      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 0203 	bic.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	493f      	ldr	r1, [pc, #252]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fd ff69 	bl	8000bb0 <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	f7fd ff65 	bl	8000bb0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e066      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 020c 	and.w	r2, r3, #12
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d1eb      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	492c      	ldr	r1, [pc, #176]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d210      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0207 	bic.w	r2, r3, #7
 8002d3e:	4924      	ldr	r1, [pc, #144]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e036      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4918      	ldr	r1, [pc, #96]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4910      	ldr	r1, [pc, #64]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d96:	f000 f825 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fea8 	bl	8000b10 <HAL_InitTick>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	080080c0 	.word	0x080080c0
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b3b      	ldr	r3, [pc, #236]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x34>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d121      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d11e      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e24:	4b31      	ldr	r3, [pc, #196]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e004      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d134      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d003      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0xac>
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e8c:	617b      	str	r3, [r7, #20]
      break;
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e92:	617b      	str	r3, [r7, #20]
      break;
 8002e94:	e002      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	fb02 f203 	mul.w	r2, r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0e5b      	lsrs	r3, r3, #25
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002edc:	69bb      	ldr	r3, [r7, #24]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080080d0 	.word	0x080080d0
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	02dc6c00 	.word	0x02dc6c00

08002efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000

08002f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f2c:	f7ff fa1e 	bl	800236c <HAL_PWREx_GetVoltageRange>
 8002f30:	6178      	str	r0, [r7, #20]
 8002f32:	e014      	b.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f4c:	f7ff fa0e 	bl	800236c <HAL_PWREx_GetVoltageRange>
 8002f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d10b      	bne.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d919      	bls.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f70:	d902      	bls.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f72:	2302      	movs	r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e013      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e010      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d902      	bls.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f84:	2303      	movs	r3, #3
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e00a      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d102      	bne.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f90:	2302      	movs	r3, #2
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e004      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b70      	cmp	r3, #112	; 0x70
 8002f9a:	d101      	bne.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 0207 	bic.w	r2, r3, #7
 8002fa8:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fdc:	2300      	movs	r3, #0
 8002fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d041      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ff8:	d02a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ffa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ffe:	d824      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800300a:	d81e      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003014:	d010      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003016:	e018      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a85      	ldr	r2, [pc, #532]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003022:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003024:	e015      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fabb 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003036:	e00c      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3320      	adds	r3, #32
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fba6 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003048:	e003      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	74fb      	strb	r3, [r7, #19]
      break;
 800304e:	e000      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003058:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003066:	4973      	ldr	r1, [pc, #460]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800306e:	e001      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d041      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003084:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003088:	d02a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800308a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800308e:	d824      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800309a:	d81e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a4:	d010      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030a6:	e018      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a8:	4b62      	ldr	r3, [pc, #392]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a61      	ldr	r2, [pc, #388]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b4:	e015      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fa73 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3320      	adds	r3, #32
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fb5e 	bl	8003790 <RCCEx_PLLSAI2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	74fb      	strb	r3, [r7, #19]
      break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030e8:	4b52      	ldr	r3, [pc, #328]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f6:	494f      	ldr	r1, [pc, #316]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80a0 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003144:	2301      	movs	r3, #1
 8003146:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003154:	f7fd fd2c 	bl	8000bb0 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315a:	e009      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fd fd28 	bl	8000bb0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	74fb      	strb	r3, [r7, #19]
        break;
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003182:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	d019      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a20      	ldr	r2, [pc, #128]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd fce7 	bl	8000bb0 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e4:	e00b      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fd fce3 	bl	8000bb0 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d902      	bls.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	74fb      	strb	r3, [r7, #19]
            break;
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ec      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003222:	4904      	ldr	r1, [pc, #16]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800322a:	e009      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003240:	7c7b      	ldrb	r3, [r7, #17]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b9e      	ldr	r3, [pc, #632]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a9d      	ldr	r2, [pc, #628]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4b98      	ldr	r3, [pc, #608]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	4994      	ldr	r1, [pc, #592]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003280:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f023 020c 	bic.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	498c      	ldr	r1, [pc, #560]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a2:	4b87      	ldr	r3, [pc, #540]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4983      	ldr	r1, [pc, #524]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c4:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	497b      	ldr	r1, [pc, #492]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	4972      	ldr	r1, [pc, #456]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003308:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	496a      	ldr	r1, [pc, #424]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332a:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	4961      	ldr	r1, [pc, #388]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800334c:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	4959      	ldr	r1, [pc, #356]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	4950      	ldr	r1, [pc, #320]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	4948      	ldr	r1, [pc, #288]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b2:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	493f      	ldr	r1, [pc, #252]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e2:	4937      	ldr	r1, [pc, #220]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e011      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f8c8 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	491f      	ldr	r1, [pc, #124]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d106      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800345c:	60d3      	str	r3, [r2, #12]
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f899 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a02      	ldr	r2, [pc, #8]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	e014      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f867 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d02f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	4928      	ldr	r1, [pc, #160]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d10d      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f844 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d014      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	74bb      	strb	r3, [r7, #18]
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3320      	adds	r3, #32
 800353e:	2102      	movs	r1, #2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f925 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356e:	490d      	ldr	r1, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003592:	4904      	ldr	r1, [pc, #16]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800359a:	7cbb      	ldrb	r3, [r7, #18]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000

080035a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b75      	ldr	r3, [pc, #468]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c2:	4b72      	ldr	r3, [pc, #456]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10d      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035da:	4b6c      	ldr	r3, [pc, #432]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d047      	beq.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e044      	b.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d018      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x86>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d825      	bhi.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
 8003600:	2b01      	cmp	r3, #1
 8003602:	d002      	beq.n	800360a <RCCEx_PLLSAI1_Config+0x62>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d009      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x74>
 8003608:	e020      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360a:	4b60      	ldr	r3, [pc, #384]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361a:	e01a      	b.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361c:	4b5b      	ldr	r3, [pc, #364]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e013      	b.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362e:	4b57      	ldr	r3, [pc, #348]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363a:	4b54      	ldr	r3, [pc, #336]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364a:	e006      	b.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e004      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365a:	bf00      	nop
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	430b      	orrs	r3, r1
 8003678:	4944      	ldr	r1, [pc, #272]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d17d      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a40      	ldr	r2, [pc, #256]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fa8e 	bl	8000bb0 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003698:	f7fd fa8a 	bl	8000bb0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
        break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ef      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d160      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	0912      	lsrs	r2, r2, #4
 80036dc:	0452      	lsls	r2, r2, #17
 80036de:	430a      	orrs	r2, r1
 80036e0:	492a      	ldr	r1, [pc, #168]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
 80036e6:	e027      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d112      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	0211      	lsls	r1, r2, #8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6912      	ldr	r2, [r2, #16]
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	3a01      	subs	r2, #1
 8003708:	0552      	lsls	r2, r2, #21
 800370a:	430a      	orrs	r2, r1
 800370c:	491f      	ldr	r1, [pc, #124]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
 8003712:	e011      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6952      	ldr	r2, [r2, #20]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0652      	lsls	r2, r2, #25
 8003730:	430a      	orrs	r2, r1
 8003732:	4916      	ldr	r1, [pc, #88]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a13      	ldr	r2, [pc, #76]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fa34 	bl	8000bb0 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374a:	e009      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374c:	f7fd fa30 	bl	8000bb0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	73fb      	strb	r3, [r7, #15]
          break;
 800375e:	e005      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c2:	4b61      	ldr	r3, [pc, #388]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
       ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d047      	beq.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e044      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d018      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x86>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d825      	bhi.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <RCCEx_PLLSAI2_Config+0x62>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d009      	beq.n	8003804 <RCCEx_PLLSAI2_Config+0x74>
 80037f0:	e020      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f2:	4b55      	ldr	r3, [pc, #340]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e01a      	b.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e013      	b.n	800383e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003832:	e006      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e004      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003842:	bf00      	nop
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	430b      	orrs	r3, r1
 8003860:	4939      	ldr	r1, [pc, #228]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d167      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800386c:	4b36      	ldr	r3, [pc, #216]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a35      	ldr	r2, [pc, #212]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd f99a 	bl	8000bb0 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003880:	f7fd f996 	bl	8000bb0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
        break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ef      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d14a      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0912      	lsrs	r2, r2, #4
 80038c4:	0452      	lsls	r2, r2, #17
 80038c6:	430a      	orrs	r2, r1
 80038c8:	491f      	ldr	r1, [pc, #124]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	614b      	str	r3, [r1, #20]
 80038ce:	e011      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6912      	ldr	r2, [r2, #16]
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0652      	lsls	r2, r2, #25
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4916      	ldr	r1, [pc, #88]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd f956 	bl	8000bb0 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003908:	f7fd f952 	bl	8000bb0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
          break;
 800391a:	e005      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4904      	ldr	r1, [pc, #16]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e049      	b.n	80039f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fc ff32 	bl	80007dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f000 fbe8 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04f      	b.n	8003ab4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d018      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_TIM_Base_Start_IT+0xd0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_TIM_Base_Start_IT+0x76>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d115      	bne.n	8003a9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d015      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0xb4>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d011      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e008      	b.n	8003ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	00010007 	.word	0x00010007

08003adc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e097      	b.n	8003c20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fc fec1 	bl	800088c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003b20:	f023 0307 	bic.w	r3, r3, #7
 8003b24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 fb15 	bl	8004160 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b7c:	f023 030c 	bic.w	r3, r3, #12
 8003b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	011a      	lsls	r2, r3, #4
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	031b      	lsls	r3, r3, #12
 8003bac:	4313      	orrs	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d102      	bne.n	8003c64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c5e:	7b7b      	ldrb	r3, [r7, #13]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e069      	b.n	8003d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	e031      	b.n	8003cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d110      	bne.n	8003ca2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c80:	7bbb      	ldrb	r3, [r7, #14]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c86:	7b3b      	ldrb	r3, [r7, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d001      	beq.n	8003c90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e055      	b.n	8003d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	e01d      	b.n	8003cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cae:	7b7b      	ldrb	r3, [r7, #13]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cb4:	7b3b      	ldrb	r3, [r7, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d001      	beq.n	8003cbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03e      	b.n	8003d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_TIM_Encoder_Start+0xc4>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d008      	beq.n	8003cfc <HAL_TIM_Encoder_Start+0xd4>
 8003cea:	e00f      	b.n	8003d0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fb67 	bl	80043c8 <TIM_CCxChannelCmd>
      break;
 8003cfa:	e016      	b.n	8003d2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	2104      	movs	r1, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb5f 	bl	80043c8 <TIM_CCxChannelCmd>
      break;
 8003d0a:	e00e      	b.n	8003d2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fb57 	bl	80043c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2104      	movs	r1, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb50 	bl	80043c8 <TIM_CCxChannelCmd>
      break;
 8003d28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d122      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d11b      	bne.n	8003da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0202 	mvn.w	r2, #2
 8003d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9cb 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e005      	b.n	8003d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9bd 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f9ce 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d122      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0204 	mvn.w	r2, #4
 8003dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f9a1 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f993 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f9a4 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d122      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d11b      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0208 	mvn.w	r2, #8
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f977 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f969 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f97a 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f94d 	bl	8004122 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f93f 	bl	800410e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f950 	bl	8004136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fbf2 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fb22 	bl	8004538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b80      	cmp	r3, #128	; 0x80
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb15 	bl	800454c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8fe 	bl	800414a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0220 	mvn.w	r2, #32
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fad5 	bl	8004524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_ConfigClockSource+0x18>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0b5      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x184>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fbc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd6:	d03e      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xd4>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	f200 8087 	bhi.w	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe4:	f000 8085 	beq.w	80040f2 <HAL_TIM_ConfigClockSource+0x170>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d87f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003fee:	2b70      	cmp	r3, #112	; 0x70
 8003ff0:	d01a      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xa6>
 8003ff2:	2b70      	cmp	r3, #112	; 0x70
 8003ff4:	d87b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ff6:	2b60      	cmp	r3, #96	; 0x60
 8003ff8:	d050      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x11a>
 8003ffa:	2b60      	cmp	r3, #96	; 0x60
 8003ffc:	d877      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d03c      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xfa>
 8004002:	2b50      	cmp	r3, #80	; 0x50
 8004004:	d873      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d058      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0x13a>
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d86f      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	2b30      	cmp	r3, #48	; 0x30
 8004010:	d064      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004012:	2b30      	cmp	r3, #48	; 0x30
 8004014:	d86b      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	2b20      	cmp	r3, #32
 8004018:	d060      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 800401a:	2b20      	cmp	r3, #32
 800401c:	d867      	bhi.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d05c      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
 8004022:	2b10      	cmp	r3, #16
 8004024:	d05a      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004026:	e062      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f000 f9a6 	bl	8004388 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800404a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
      break;
 8004054:	e04e      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f000 f98f 	bl	8004388 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e03b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f903 	bl	8004294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2150      	movs	r1, #80	; 0x50
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f95c 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 800409a:	e02b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f000 f922 	bl	80042f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2160      	movs	r1, #96	; 0x60
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f94c 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 80040ba:	e01b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f000 f8e3 	bl	8004294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f93c 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 80040da:	e00b      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 f933 	bl	8004352 <TIM_ITRx_SetConfig>
        break;
 80040ec:	e002      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a40      	ldr	r2, [pc, #256]	; (8004274 <TIM_Base_SetConfig+0x114>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <TIM_Base_SetConfig+0x40>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d00f      	beq.n	80041a0 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <TIM_Base_SetConfig+0x118>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3c      	ldr	r2, [pc, #240]	; (800427c <TIM_Base_SetConfig+0x11c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d007      	beq.n	80041a0 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3b      	ldr	r2, [pc, #236]	; (8004280 <TIM_Base_SetConfig+0x120>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <TIM_Base_SetConfig+0x124>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a2f      	ldr	r2, [pc, #188]	; (8004274 <TIM_Base_SetConfig+0x114>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01f      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d01b      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <TIM_Base_SetConfig+0x118>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d017      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	; (800427c <TIM_Base_SetConfig+0x11c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <TIM_Base_SetConfig+0x120>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00f      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a29      	ldr	r2, [pc, #164]	; (8004284 <TIM_Base_SetConfig+0x124>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00b      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a28      	ldr	r2, [pc, #160]	; (8004288 <TIM_Base_SetConfig+0x128>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <TIM_Base_SetConfig+0x12c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a26      	ldr	r2, [pc, #152]	; (8004290 <TIM_Base_SetConfig+0x130>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <TIM_Base_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00f      	beq.n	8004258 <TIM_Base_SetConfig+0xf8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a12      	ldr	r2, [pc, #72]	; (8004284 <TIM_Base_SetConfig+0x124>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00b      	beq.n	8004258 <TIM_Base_SetConfig+0xf8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <TIM_Base_SetConfig+0x128>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0xf8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <TIM_Base_SetConfig+0x12c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0xf8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <TIM_Base_SetConfig+0x130>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	615a      	str	r2, [r3, #20]
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 030a 	bic.w	r3, r3, #10
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	f043 0307 	orr.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1a      	ldr	r2, [r3, #32]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e068      	b.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d018      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a18      	ldr	r2, [pc, #96]	; (800451c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10c      	bne.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40014000 	.word	0x40014000

08004524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004560:	b084      	sub	sp, #16
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	f107 001c 	add.w	r0, r7, #28
 800456e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f001 f9ce 	bl	8005920 <USB_CoreReset>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
 800459a:	e005      	b.n	80045a8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b4:	b004      	add	sp, #16
 80045b6:	4770      	bx	lr

080045b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d165      	bne.n	8004698 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <USB_SetTurnaroundTime+0x110>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d906      	bls.n	80045e2 <USB_SetTurnaroundTime+0x2a>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <USB_SetTurnaroundTime+0x114>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d202      	bcs.n	80045e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045dc:	230f      	movs	r3, #15
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e05c      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a39      	ldr	r2, [pc, #228]	; (80046cc <USB_SetTurnaroundTime+0x114>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d306      	bcc.n	80045f8 <USB_SetTurnaroundTime+0x40>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <USB_SetTurnaroundTime+0x118>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d202      	bcs.n	80045f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045f2:	230e      	movs	r3, #14
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e051      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a35      	ldr	r2, [pc, #212]	; (80046d0 <USB_SetTurnaroundTime+0x118>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d306      	bcc.n	800460e <USB_SetTurnaroundTime+0x56>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a34      	ldr	r2, [pc, #208]	; (80046d4 <USB_SetTurnaroundTime+0x11c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d202      	bcs.n	800460e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004608:	230d      	movs	r3, #13
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e046      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <USB_SetTurnaroundTime+0x11c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d306      	bcc.n	8004624 <USB_SetTurnaroundTime+0x6c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4a2f      	ldr	r2, [pc, #188]	; (80046d8 <USB_SetTurnaroundTime+0x120>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d802      	bhi.n	8004624 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800461e:	230c      	movs	r3, #12
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e03b      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <USB_SetTurnaroundTime+0x120>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d906      	bls.n	800463a <USB_SetTurnaroundTime+0x82>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4a2b      	ldr	r2, [pc, #172]	; (80046dc <USB_SetTurnaroundTime+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d802      	bhi.n	800463a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004634:	230b      	movs	r3, #11
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e030      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a27      	ldr	r2, [pc, #156]	; (80046dc <USB_SetTurnaroundTime+0x124>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d906      	bls.n	8004650 <USB_SetTurnaroundTime+0x98>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <USB_SetTurnaroundTime+0x128>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d802      	bhi.n	8004650 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800464a:	230a      	movs	r3, #10
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e025      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <USB_SetTurnaroundTime+0x128>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d906      	bls.n	8004666 <USB_SetTurnaroundTime+0xae>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <USB_SetTurnaroundTime+0x12c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d202      	bcs.n	8004666 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004660:	2309      	movs	r3, #9
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e01a      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <USB_SetTurnaroundTime+0x12c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d306      	bcc.n	800467c <USB_SetTurnaroundTime+0xc4>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <USB_SetTurnaroundTime+0x130>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d802      	bhi.n	800467c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004676:	2308      	movs	r3, #8
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e00f      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <USB_SetTurnaroundTime+0x130>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d906      	bls.n	8004692 <USB_SetTurnaroundTime+0xda>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a19      	ldr	r2, [pc, #100]	; (80046ec <USB_SetTurnaroundTime+0x134>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d202      	bcs.n	8004692 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800468c:	2307      	movs	r3, #7
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e004      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004692:	2306      	movs	r3, #6
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e001      	b.n	800469c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004698:	2309      	movs	r3, #9
 800469a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	029b      	lsls	r3, r3, #10
 80046b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	00d8acbf 	.word	0x00d8acbf
 80046cc:	00e4e1c0 	.word	0x00e4e1c0
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	01067380 	.word	0x01067380
 80046d8:	011a499f 	.word	0x011a499f
 80046dc:	01312cff 	.word	0x01312cff
 80046e0:	014ca43f 	.word	0x014ca43f
 80046e4:	016e3600 	.word	0x016e3600
 80046e8:	01a6ab1f 	.word	0x01a6ab1f
 80046ec:	01e84800 	.word	0x01e84800

080046f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d106      	bne.n	8004760 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e00b      	b.n	8004778 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	e001      	b.n	8004778 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e003      	b.n	8004780 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004778:	2032      	movs	r0, #50	; 0x32
 800477a:	f7fc fa25 	bl	8000bc8 <HAL_Delay>

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004788:	b084      	sub	sp, #16
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e009      	b.n	80047bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3340      	adds	r3, #64	; 0x40
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b0e      	cmp	r3, #14
 80047c0:	d9f2      	bls.n	80047a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11c      	bne.n	8004802 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e005      	b.n	800480e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	4619      	mov	r1, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	461a      	mov	r2, r3
 800482a:	680b      	ldr	r3, [r1, #0]
 800482c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800482e:	2103      	movs	r1, #3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f93d 	bl	8004ab0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004836:	2110      	movs	r1, #16
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8f1 	bl	8004a20 <USB_FlushTxFifo>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f90f 	bl	8004a6c <USB_FlushRxFifo>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	461a      	mov	r2, r3
 8004878:	2300      	movs	r3, #0
 800487a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	e043      	b.n	800490a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004898:	d118      	bne.n	80048cc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	461a      	mov	r2, r3
 80048ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e013      	b.n	80048de <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	461a      	mov	r2, r3
 80048c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e008      	b.n	80048de <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	461a      	mov	r2, r3
 80048da:	2300      	movs	r3, #0
 80048dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	461a      	mov	r2, r3
 80048ec:	2300      	movs	r3, #0
 80048ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	461a      	mov	r2, r3
 80048fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3301      	adds	r3, #1
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	d3b7      	bcc.n	8004882 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e043      	b.n	80049a0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800492e:	d118      	bne.n	8004962 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	461a      	mov	r2, r3
 8004944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e013      	b.n	8004974 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e008      	b.n	8004974 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	461a      	mov	r2, r3
 8004994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3301      	adds	r3, #1
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d3b7      	bcc.n	8004918 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f043 0210 	orr.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <USB_DevInit+0x294>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f043 0208 	orr.w	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a02:	f043 0304 	orr.w	r3, r3, #4
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a16:	b004      	add	sp, #16
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	803c3800 	.word	0x803c3800

08004a20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <USB_FlushTxFifo+0x48>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d0f0      	beq.n	8004a3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	00030d40 	.word	0x00030d40

08004a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <USB_FlushRxFifo+0x40>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d0f0      	beq.n	8004a7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	00030d40 	.word	0x00030d40

08004ab0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0306 	and.w	r3, r3, #6
 8004afa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d002      	beq.n	8004b08 <USB_GetDevSpeed+0x26>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d102      	bne.n	8004b0e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	75fb      	strb	r3, [r7, #23]
 8004b0c:	e001      	b.n	8004b12 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004b0e:	230f      	movs	r3, #15
 8004b10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	785b      	ldrb	r3, [r3, #1]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d13a      	bne.n	8004bb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d155      	bne.n	8004c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	059b      	lsls	r3, r3, #22
 8004b96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e036      	b.n	8004c20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11a      	bne.n	8004c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	78db      	ldrb	r3, [r3, #3]
 8004c04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c06:	430b      	orrs	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d161      	bne.n	8004d10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c62:	d11f      	bne.n	8004ca4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <USB_DeactivateEndpoint+0x1b0>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
 8004d0e:	e060      	b.n	8004dd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d26:	d11f      	bne.n	8004d68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	43db      	mvns	r3, r3
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d88:	4013      	ands	r3, r2
 8004d8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	43db      	mvns	r3, r3
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dac:	4013      	ands	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0159      	lsls	r1, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <USB_DeactivateEndpoint+0x1b4>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	ec337800 	.word	0xec337800
 8004de4:	eff37800 	.word	0xeff37800

08004de8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 810a 	bne.w	800501a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d132      	bne.n	8004e74 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	04db      	lsls	r3, r3, #19
 8004e70:	6113      	str	r3, [r2, #16]
 8004e72:	e074      	b.n	8004f5e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	0cdb      	lsrs	r3, r3, #19
 8004e90:	04db      	lsls	r3, r3, #19
 8004e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	440b      	add	r3, r1
 8004ed0:	1e59      	subs	r1, r3, #1
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eda:	04d9      	lsls	r1, r3, #19
 8004edc:	4baf      	ldr	r3, [pc, #700]	; (800519c <USB_EPStartXfer+0x3b4>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	0148      	lsls	r0, r1, #5
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	4401      	add	r1, r0
 8004ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	6939      	ldr	r1, [r7, #16]
 8004f08:	0148      	lsls	r0, r1, #5
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	4401      	add	r1, r0
 8004f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d11f      	bne.n	8004f5e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f7c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d015      	beq.n	8004fb2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8100 	beq.w	8005190 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fac:	4313      	orrs	r3, r2
 8004fae:	634b      	str	r3, [r1, #52]	; 0x34
 8004fb0:	e0ee      	b.n	8005190 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d110      	bne.n	8004fe4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00f      	b.n	8005004 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68d9      	ldr	r1, [r3, #12]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	b29b      	uxth	r3, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9e2 	bl	80053dc <USB_WritePacket>
 8005018:	e0ba      	b.n	8005190 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005034:	0cdb      	lsrs	r3, r3, #19
 8005036:	04db      	lsls	r3, r3, #19
 8005038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800505c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d123      	bne.n	80050ae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507c:	6939      	ldr	r1, [r7, #16]
 800507e:	0148      	lsls	r0, r1, #5
 8005080:	6979      	ldr	r1, [r7, #20]
 8005082:	4401      	add	r1, r0
 8005084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050aa:	6113      	str	r3, [r2, #16]
 80050ac:	e033      	b.n	8005116 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4413      	add	r3, r2
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	04d9      	lsls	r1, r3, #19
 80050d6:	4b31      	ldr	r3, [pc, #196]	; (800519c <USB_EPStartXfer+0x3b4>)
 80050d8:	400b      	ands	r3, r1
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	0148      	lsls	r0, r1, #5
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	4401      	add	r1, r0
 80050e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	89f9      	ldrh	r1, [r7, #14]
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005106:	6939      	ldr	r1, [r7, #16]
 8005108:	0148      	lsls	r0, r1, #5
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	4401      	add	r1, r0
 800510e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005112:	4313      	orrs	r3, r2
 8005114:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	78db      	ldrb	r3, [r3, #3]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d128      	bne.n	8005170 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d110      	bne.n	8005150 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e00f      	b.n	8005170 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	1ff80000 	.word	0x1ff80000

080051a0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	f040 80ab 	bne.w	8005314 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d132      	bne.n	800522c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005224:	0cdb      	lsrs	r3, r3, #19
 8005226:	04db      	lsls	r3, r3, #19
 8005228:	6113      	str	r3, [r2, #16]
 800522a:	e04e      	b.n	80052ca <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	0cdb      	lsrs	r3, r3, #19
 8005248:	04db      	lsls	r3, r3, #19
 800524a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800526a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800526e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d903      	bls.n	8005284 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	0148      	lsls	r0, r1, #5
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	4401      	add	r1, r0
 80052c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052e8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d06d      	beq.n	80053ce <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800530e:	4313      	orrs	r3, r2
 8005310:	634b      	str	r3, [r1, #52]	; 0x34
 8005312:	e05c      	b.n	80053ce <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532e:	0cdb      	lsrs	r3, r3, #19
 8005330:	04db      	lsls	r3, r3, #19
 8005332:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005356:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	0148      	lsls	r0, r1, #5
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	4401      	add	r1, r0
 80053a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053aa:	4313      	orrs	r3, r2
 80053ac:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	71fb      	strb	r3, [r7, #7]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80053fa:	88bb      	ldrh	r3, [r7, #4]
 80053fc:	3303      	adds	r3, #3
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	e00f      	b.n	8005428 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	031a      	lsls	r2, r3, #12
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	461a      	mov	r2, r3
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3304      	adds	r3, #4
 8005420:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3301      	adds	r3, #1
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3eb      	bcc.n	8005408 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	; 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800543e:	b480      	push	{r7}
 8005440:	b089      	sub	sp, #36	; 0x24
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	4613      	mov	r3, r2
 800544a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	3303      	adds	r3, #3
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e00b      	b.n	800547a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	601a      	str	r2, [r3, #0]
    pDest++;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3304      	adds	r3, #4
 8005472:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	3301      	adds	r3, #1
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d3ef      	bcc.n	8005462 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005482:	69fb      	ldr	r3, [r7, #28]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3724      	adds	r7, #36	; 0x24
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d12c      	bne.n	8005506 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db12      	blt.n	80054e4 <USB_EPSetStall+0x54>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00f      	beq.n	80054e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e02b      	b.n	800555e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	db12      	blt.n	800553e <USB_EPSetStall+0xae>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00f      	beq.n	800553e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005538:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800553c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800555c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d128      	bne.n	80055da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	78db      	ldrb	r3, [r3, #3]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d003      	beq.n	80055b8 <USB_EPClearStall+0x4c>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	78db      	ldrb	r3, [r3, #3]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d138      	bne.n	800562a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	e027      	b.n	800562a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d003      	beq.n	800560a <USB_EPClearStall+0x9e>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	78db      	ldrb	r3, [r3, #3]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d10f      	bne.n	800562a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005656:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800565a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b2:	f023 0302 	bic.w	r3, r3, #2
 80056b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056e0:	f023 0303 	bic.w	r3, r3, #3
 80056e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005720:	68fb      	ldr	r3, [r7, #12]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0c1b      	lsrs	r3, r3, #16
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	b29b      	uxth	r3, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057c4:	68bb      	ldr	r3, [r7, #8]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005802:	01db      	lsls	r3, r3, #7
 8005804:	b2db      	uxtb	r3, r3
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005820:	68bb      	ldr	r3, [r7, #8]
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0301 	and.w	r3, r3, #1
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005868:	f023 0307 	bic.w	r3, r3, #7
 800586c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	333c      	adds	r3, #60	; 0x3c
 80058a2:	3304      	adds	r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <USB_EP0_OutStart+0x8c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d90a      	bls.n	80058c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058c0:	d101      	bne.n	80058c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e024      	b.n	8005910 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	461a      	mov	r2, r3
 80058ce:	2300      	movs	r3, #0
 80058d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f043 0318 	orr.w	r3, r3, #24
 80058f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800590c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	4f54300a 	.word	0x4f54300a

08005920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <USB_CoreReset+0x64>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e01b      	b.n	8005976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	daf2      	bge.n	800592c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f043 0201 	orr.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <USB_CoreReset+0x64>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e006      	b.n	8005976 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d0f0      	beq.n	8005956 <USB_CoreReset+0x36>

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	00030d40 	.word	0x00030d40

08005988 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005994:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005998:	f002 fb18 	bl	8007fcc <USBD_static_malloc>
 800599c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059ac:	2302      	movs	r3, #2
 80059ae:	e066      	b.n	8005a7e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7c1b      	ldrb	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d119      	bne.n	80059f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c4:	2202      	movs	r2, #2
 80059c6:	2181      	movs	r1, #129	; 0x81
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f002 f8eb 	bl	8007ba4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d8:	2202      	movs	r2, #2
 80059da:	2101      	movs	r1, #1
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 f8e1 	bl	8007ba4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059f2:	e016      	b.n	8005a22 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059f4:	2340      	movs	r3, #64	; 0x40
 80059f6:	2202      	movs	r2, #2
 80059f8:	2181      	movs	r1, #129	; 0x81
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f002 f8d2 	bl	8007ba4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a06:	2340      	movs	r3, #64	; 0x40
 8005a08:	2202      	movs	r2, #2
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f002 f8c9 	bl	8007ba4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a22:	2308      	movs	r3, #8
 8005a24:	2203      	movs	r2, #3
 8005a26:	2182      	movs	r1, #130	; 0x82
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f002 f8bb 	bl	8007ba4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7c1b      	ldrb	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a62:	2101      	movs	r1, #1
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fa17 	bl	8007e98 <USBD_LL_PrepareReceive>
 8005a6a:	e007      	b.n	8005a7c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a72:	2340      	movs	r3, #64	; 0x40
 8005a74:	2101      	movs	r1, #1
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fa0e 	bl	8007e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a92:	2181      	movs	r1, #129	; 0x81
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f002 f8c3 	bl	8007c20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 f8bc 	bl	8007c20 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ab0:	2182      	movs	r1, #130	; 0x82
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f002 f8b4 	bl	8007c20 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f002 fa80 	bl	8007fe8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e0af      	b.n	8005c84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d03f      	beq.n	8005bb0 <USBD_CDC_Setup+0xb4>
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	f040 809f 	bne.w	8005c74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	88db      	ldrh	r3, [r3, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02e      	beq.n	8005b9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da16      	bge.n	8005b76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005b54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	88d2      	ldrh	r2, [r2, #6]
 8005b5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	bf28      	it	cs
 8005b64:	2307      	movcs	r3, #7
 8005b66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	89fa      	ldrh	r2, [r7, #14]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fb43 	bl	80071fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005b74:	e085      	b.n	8005c82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	785a      	ldrb	r2, [r3, #1]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	88db      	ldrh	r3, [r3, #6]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	88db      	ldrh	r3, [r3, #6]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 fb5c 	bl	8007252 <USBD_CtlPrepareRx>
      break;
 8005b9a:	e072      	b.n	8005c82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	7850      	ldrb	r0, [r2, #1]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	4798      	blx	r3
      break;
 8005bae:	e068      	b.n	8005c82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d852      	bhi.n	8005c5e <USBD_CDC_Setup+0x162>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <USBD_CDC_Setup+0xc4>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005c6d 	.word	0x08005c6d
 8005bc8:	08005c5f 	.word	0x08005c5f
 8005bcc:	08005c5f 	.word	0x08005c5f
 8005bd0:	08005c5f 	.word	0x08005c5f
 8005bd4:	08005c5f 	.word	0x08005c5f
 8005bd8:	08005c5f 	.word	0x08005c5f
 8005bdc:	08005c5f 	.word	0x08005c5f
 8005be0:	08005c5f 	.word	0x08005c5f
 8005be4:	08005c5f 	.word	0x08005c5f
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c45 	.word	0x08005c45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d107      	bne.n	8005c0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bfc:	f107 030a 	add.w	r3, r7, #10
 8005c00:	2202      	movs	r2, #2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 faf8 	bl	80071fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c0a:	e032      	b.n	8005c72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fa82 	bl	8007118 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	75fb      	strb	r3, [r7, #23]
          break;
 8005c18:	e02b      	b.n	8005c72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b03      	cmp	r3, #3
 8005c24:	d107      	bne.n	8005c36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c26:	f107 030d 	add.w	r3, r7, #13
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 fae3 	bl	80071fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c34:	e01d      	b.n	8005c72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fa6d 	bl	8007118 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	75fb      	strb	r3, [r7, #23]
          break;
 8005c42:	e016      	b.n	8005c72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d00f      	beq.n	8005c70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fa60 	bl	8007118 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c5c:	e008      	b.n	8005c70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fa59 	bl	8007118 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c66:	2303      	movs	r3, #3
 8005c68:	75fb      	strb	r3, [r7, #23]
          break;
 8005c6a:	e002      	b.n	8005c72 <USBD_CDC_Setup+0x176>
          break;
 8005c6c:	bf00      	nop
 8005c6e:	e008      	b.n	8005c82 <USBD_CDC_Setup+0x186>
          break;
 8005c70:	bf00      	nop
      }
      break;
 8005c72:	e006      	b.n	8005c82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fa4e 	bl	8007118 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e04f      	b.n	8005d4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d029      	beq.n	8005d20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3318      	adds	r3, #24
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	78f9      	ldrb	r1, [r7, #3]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	1a5b      	subs	r3, r3, r1
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4403      	add	r3, r0
 8005cec:	3344      	adds	r3, #68	; 0x44
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cf4:	fb03 f301 	mul.w	r3, r3, r1
 8005cf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d110      	bne.n	8005d20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3318      	adds	r3, #24
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d12:	78f9      	ldrb	r1, [r7, #3]
 8005d14:	2300      	movs	r3, #0
 8005d16:	2200      	movs	r2, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f002 f885 	bl	8007e28 <USBD_LL_Transmit>
 8005d1e:	e015      	b.n	8005d4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e015      	b.n	8005da4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f8c3 	bl	8007f08 <USBD_LL_GetRxDataSize>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e01b      	b.n	8005dfe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <USBD_CDC_EP0_RxReady+0x50>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dd6:	2bff      	cmp	r3, #255	; 0xff
 8005dd8:	d010      	beq.n	8005dfc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005de8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005df0:	b292      	uxth	r2, r2
 8005df2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2243      	movs	r2, #67	; 0x43
 8005e14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000094 	.word	0x20000094

08005e28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2243      	movs	r2, #67	; 0x43
 8005e34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e36:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	20000050 	.word	0x20000050

08005e48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2243      	movs	r2, #67	; 0x43
 8005e54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e56:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	200000d8 	.word	0x200000d8

08005e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	220a      	movs	r2, #10
 8005e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2000000c 	.word	0x2000000c

08005e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e004      	b.n	8005ea6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e008      	b.n	8005ee2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e004      	b.n	8005f14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e01a      	b.n	8005f78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d114      	bne.n	8005f76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f6a:	2181      	movs	r1, #129	; 0x81
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 ff5b 	bl	8007e28 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e016      	b.n	8005fcc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7c1b      	ldrb	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 ff70 	bl	8007e98 <USBD_LL_PrepareReceive>
 8005fb8:	e007      	b.n	8005fca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 ff67 	bl	8007e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e01f      	b.n	800602c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	79fa      	ldrb	r2, [r7, #7]
 800601e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f001 fd41 	bl	8007aa8 <USBD_LL_Init>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]

  return ret;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	e016      	b.n	800607a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	f107 020e 	add.w	r2, r7, #14
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
 8006070:	4602      	mov	r2, r0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 fd58 	bl	8007b40 <USBD_LL_Start>
 8006090:	4603      	mov	r3, r0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	78fa      	ldrb	r2, [r7, #3]
 80060d4:	4611      	mov	r1, r2
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	4611      	mov	r1, r2
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
  }

  return USBD_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 ffba 	bl	80070a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2b02      	cmp	r3, #2
 8006152:	d01a      	beq.n	800618a <USBD_LL_SetupStage+0x72>
 8006154:	2b02      	cmp	r3, #2
 8006156:	d822      	bhi.n	800619e <USBD_LL_SetupStage+0x86>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <USBD_LL_SetupStage+0x4a>
 800615c:	2b01      	cmp	r3, #1
 800615e:	d00a      	beq.n	8006176 <USBD_LL_SetupStage+0x5e>
 8006160:	e01d      	b.n	800619e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa62 	bl	8006634 <USBD_StdDevReq>
 8006170:	4603      	mov	r3, r0
 8006172:	73fb      	strb	r3, [r7, #15]
      break;
 8006174:	e020      	b.n	80061b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fac6 	bl	8006710 <USBD_StdItfReq>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e016      	b.n	80061b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fb05 	bl	80067a2 <USBD_StdEPReq>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e00c      	b.n	80061b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fd6d 	bl	8007c8c <USBD_LL_StallEP>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
      break;
 80061b6:	bf00      	nop
  }

  return ret;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	460b      	mov	r3, r1
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d138      	bne.n	8006248 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d14a      	bne.n	800627e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d913      	bls.n	800621c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	4293      	cmp	r3, r2
 800620c:	bf28      	it	cs
 800620e:	4613      	movcs	r3, r2
 8006210:	461a      	mov	r2, r3
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 f839 	bl	800728c <USBD_CtlContinueRx>
 800621a:	e030      	b.n	800627e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d10b      	bne.n	8006240 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 f834 	bl	80072ae <USBD_CtlSendStatus>
 8006246:	e01a      	b.n	800627e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b03      	cmp	r3, #3
 8006252:	d114      	bne.n	800627e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00e      	beq.n	800627e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	4611      	mov	r1, r2
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	4798      	blx	r3
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	e000      	b.n	8006280 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	460b      	mov	r3, r1
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006296:	7afb      	ldrb	r3, [r7, #11]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d16b      	bne.n	8006374 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3314      	adds	r3, #20
 80062a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d156      	bne.n	800635a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d914      	bls.n	80062e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	1ad2      	subs	r2, r2, r3
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 ffae 	bl	8007230 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062d4:	2300      	movs	r3, #0
 80062d6:	2200      	movs	r2, #0
 80062d8:	2100      	movs	r1, #0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 fddc 	bl	8007e98 <USBD_LL_PrepareReceive>
 80062e0:	e03b      	b.n	800635a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d11c      	bne.n	8006328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d316      	bcc.n	8006328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006304:	429a      	cmp	r2, r3
 8006306:	d20f      	bcs.n	8006328 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 ff8f 	bl	8007230 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800631a:	2300      	movs	r3, #0
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f001 fdb9 	bl	8007e98 <USBD_LL_PrepareReceive>
 8006326:	e018      	b.n	800635a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b03      	cmp	r3, #3
 8006332:	d10b      	bne.n	800634c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fc9c 	bl	8007c8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 ffbd 	bl	80072d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d122      	bne.n	80063aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff fe98 	bl	800609a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006372:	e01a      	b.n	80063aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d114      	bne.n	80063aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00e      	beq.n	80063aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	7afa      	ldrb	r2, [r7, #11]
 8006396:	4611      	mov	r1, r2
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	e000      	b.n	80063ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e02f      	b.n	8006448 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6852      	ldr	r2, [r2, #4]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	4611      	mov	r1, r2
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006412:	2340      	movs	r3, #64	; 0x40
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 fbc3 	bl	8007ba4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2240      	movs	r2, #64	; 0x40
 800642a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800642e:	2340      	movs	r3, #64	; 0x40
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fbb5 	bl	8007ba4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2240      	movs	r2, #64	; 0x40
 8006444:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	78fa      	ldrb	r2, [r7, #3]
 8006460:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647e:	b2da      	uxtb	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2204      	movs	r2, #4
 800648a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d106      	bne.n	80064be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80064de:	2303      	movs	r3, #3
 80064e0:	e012      	b.n	8006508 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d10b      	bne.n	8006506 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006526:	2303      	movs	r3, #3
 8006528:	e014      	b.n	8006554 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d10d      	bne.n	8006552 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	4611      	mov	r1, r2
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006572:	2303      	movs	r3, #3
 8006574:	e014      	b.n	80065a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d10d      	bne.n	800659e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	4611      	mov	r1, r2
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	4611      	mov	r1, r2
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
  }

  return USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3301      	adds	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006614:	8a3b      	ldrh	r3, [r7, #16]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	b21a      	sxth	r2, r3
 800661a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800661e:	4313      	orrs	r3, r2
 8006620:	b21b      	sxth	r3, r3
 8006622:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006624:	89fb      	ldrh	r3, [r7, #14]
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d005      	beq.n	800665a <USBD_StdDevReq+0x26>
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d853      	bhi.n	80066fa <USBD_StdDevReq+0xc6>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <USBD_StdDevReq+0x3a>
 8006656:	2b20      	cmp	r3, #32
 8006658:	d14f      	bne.n	80066fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
      break;
 800666c:	e04a      	b.n	8006704 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b09      	cmp	r3, #9
 8006674:	d83b      	bhi.n	80066ee <USBD_StdDevReq+0xba>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBD_StdDevReq+0x48>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	080066d1 	.word	0x080066d1
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080066ef 	.word	0x080066ef
 8006688:	080066db 	.word	0x080066db
 800668c:	080066ef 	.word	0x080066ef
 8006690:	080066af 	.word	0x080066af
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066ef 	.word	0x080066ef
 800669c:	080066c7 	.word	0x080066c7
 80066a0:	080066b9 	.word	0x080066b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9de 	bl	8006a68 <USBD_GetDescriptor>
          break;
 80066ac:	e024      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fb6d 	bl	8006d90 <USBD_SetAddress>
          break;
 80066b6:	e01f      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fbac 	bl	8006e18 <USBD_SetConfig>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
          break;
 80066c4:	e018      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc4b 	bl	8006f64 <USBD_GetConfig>
          break;
 80066ce:	e013      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc7c 	bl	8006fd0 <USBD_GetStatus>
          break;
 80066d8:	e00e      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fcab 	bl	8007038 <USBD_SetFeature>
          break;
 80066e2:	e009      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fcba 	bl	8007060 <USBD_ClrFeature>
          break;
 80066ec:	e004      	b.n	80066f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fd11 	bl	8007118 <USBD_CtlError>
          break;
 80066f6:	bf00      	nop
      }
      break;
 80066f8:	e004      	b.n	8006704 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fd0b 	bl	8007118 <USBD_CtlError>
      break;
 8006702:	bf00      	nop
  }

  return ret;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d005      	beq.n	8006736 <USBD_StdItfReq+0x26>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d82f      	bhi.n	800678e <USBD_StdItfReq+0x7e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USBD_StdItfReq+0x26>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d12b      	bne.n	800678e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673c:	b2db      	uxtb	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	2b02      	cmp	r3, #2
 8006742:	d81d      	bhi.n	8006780 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	889b      	ldrh	r3, [r3, #4]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b01      	cmp	r3, #1
 800674c:	d813      	bhi.n	8006776 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	88db      	ldrh	r3, [r3, #6]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <USBD_StdItfReq+0x7a>
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10d      	bne.n	800678a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fd9d 	bl	80072ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006774:	e009      	b.n	800678a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fccd 	bl	8007118 <USBD_CtlError>
          break;
 800677e:	e004      	b.n	800678a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fcc8 	bl	8007118 <USBD_CtlError>
          break;
 8006788:	e000      	b.n	800678c <USBD_StdItfReq+0x7c>
          break;
 800678a:	bf00      	nop
      }
      break;
 800678c:	e004      	b.n	8006798 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fcc1 	bl	8007118 <USBD_CtlError>
      break;
 8006796:	bf00      	nop
  }

  return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	889b      	ldrh	r3, [r3, #4]
 80067b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d007      	beq.n	80067d2 <USBD_StdEPReq+0x30>
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	f200 8145 	bhi.w	8006a52 <USBD_StdEPReq+0x2b0>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00c      	beq.n	80067e6 <USBD_StdEPReq+0x44>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	f040 8140 	bne.w	8006a52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
      break;
 80067e4:	e13a      	b.n	8006a5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d007      	beq.n	80067fe <USBD_StdEPReq+0x5c>
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	f300 8129 	bgt.w	8006a46 <USBD_StdEPReq+0x2a4>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d07f      	beq.n	80068f8 <USBD_StdEPReq+0x156>
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d03c      	beq.n	8006876 <USBD_StdEPReq+0xd4>
 80067fc:	e123      	b.n	8006a46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0x6e>
 800680a:	2b03      	cmp	r3, #3
 800680c:	d016      	beq.n	800683c <USBD_StdEPReq+0x9a>
 800680e:	e02c      	b.n	800686a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <USBD_StdEPReq+0x90>
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	d00a      	beq.n	8006832 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fa33 	bl	8007c8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fa2f 	bl	8007c8c <USBD_LL_StallEP>
 800682e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006830:	e020      	b.n	8006874 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc6f 	bl	8007118 <USBD_CtlError>
              break;
 800683a:	e01b      	b.n	8006874 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	885b      	ldrh	r3, [r3, #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10e      	bne.n	8006862 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <USBD_StdEPReq+0xc0>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d008      	beq.n	8006862 <USBD_StdEPReq+0xc0>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 fa15 	bl	8007c8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fd23 	bl	80072ae <USBD_CtlSendStatus>

              break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc53 	bl	8007118 <USBD_CtlError>
              break;
 8006872:	bf00      	nop
          }
          break;
 8006874:	e0ec      	b.n	8006a50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d002      	beq.n	8006888 <USBD_StdEPReq+0xe6>
 8006882:	2b03      	cmp	r3, #3
 8006884:	d016      	beq.n	80068b4 <USBD_StdEPReq+0x112>
 8006886:	e030      	b.n	80068ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <USBD_StdEPReq+0x108>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d00a      	beq.n	80068aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f9f7 	bl	8007c8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f9f3 	bl	8007c8c <USBD_LL_StallEP>
 80068a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a8:	e025      	b.n	80068f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc33 	bl	8007118 <USBD_CtlError>
              break;
 80068b2:	e020      	b.n	80068f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d11b      	bne.n	80068f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fa14 	bl	8007cf8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fcec 	bl	80072ae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80068e8:	e004      	b.n	80068f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc13 	bl	8007118 <USBD_CtlError>
              break;
 80068f2:	e000      	b.n	80068f6 <USBD_StdEPReq+0x154>
              break;
 80068f4:	bf00      	nop
          }
          break;
 80068f6:	e0ab      	b.n	8006a50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_StdEPReq+0x168>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d032      	beq.n	800696e <USBD_StdEPReq+0x1cc>
 8006908:	e097      	b.n	8006a3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <USBD_StdEPReq+0x17e>
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d004      	beq.n	8006920 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fbfd 	bl	8007118 <USBD_CtlError>
                break;
 800691e:	e091      	b.n	8006a44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0b      	bge.n	8006940 <USBD_StdEPReq+0x19e>
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3310      	adds	r3, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	e00b      	b.n	8006958 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2202      	movs	r2, #2
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc47 	bl	80071fa <USBD_CtlSendData>
              break;
 800696c:	e06a      	b.n	8006a44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800696e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da11      	bge.n	800699a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d117      	bne.n	80069c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbc0 	bl	8007118 <USBD_CtlError>
                  break;
 8006998:	e054      	b.n	8006a44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fbad 	bl	8007118 <USBD_CtlError>
                  break;
 80069be:	e041      	b.n	8006a44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da0b      	bge.n	80069e0 <USBD_StdEPReq+0x23e>
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	3310      	adds	r3, #16
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	e00b      	b.n	80069f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	3304      	adds	r3, #4
 80069f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <USBD_StdEPReq+0x264>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d103      	bne.n	8006a0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e00e      	b.n	8006a2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f9a6 	bl	8007d64 <USBD_LL_IsStallEP>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbe1 	bl	80071fa <USBD_CtlSendData>
              break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb6b 	bl	8007118 <USBD_CtlError>
              break;
 8006a42:	bf00      	nop
          }
          break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb65 	bl	8007118 <USBD_CtlError>
          break;
 8006a4e:	bf00      	nop
      }
      break;
 8006a50:	e004      	b.n	8006a5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb5f 	bl	8007118 <USBD_CtlError>
      break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b0e      	cmp	r3, #14
 8006a8a:	f200 8152 	bhi.w	8006d32 <USBD_GetDescriptor+0x2ca>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_GetDescriptor+0x2c>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006b05 	.word	0x08006b05
 8006a98:	08006b1d 	.word	0x08006b1d
 8006a9c:	08006b5d 	.word	0x08006b5d
 8006aa0:	08006d33 	.word	0x08006d33
 8006aa4:	08006d33 	.word	0x08006d33
 8006aa8:	08006cd3 	.word	0x08006cd3
 8006aac:	08006cff 	.word	0x08006cff
 8006ab0:	08006d33 	.word	0x08006d33
 8006ab4:	08006d33 	.word	0x08006d33
 8006ab8:	08006d33 	.word	0x08006d33
 8006abc:	08006d33 	.word	0x08006d33
 8006ac0:	08006d33 	.word	0x08006d33
 8006ac4:	08006d33 	.word	0x08006d33
 8006ac8:	08006d33 	.word	0x08006d33
 8006acc:	08006ad1 	.word	0x08006ad1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af2:	e126      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fb0e 	bl	8007118 <USBD_CtlError>
        err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
      break;
 8006b02:	e11e      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	7c12      	ldrb	r2, [r2, #16]
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
      break;
 8006b1a:	e112      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7c1b      	ldrb	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10d      	bne.n	8006b40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b3e:	e100      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	f107 0208 	add.w	r2, r7, #8
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	2202      	movs	r2, #2
 8006b58:	701a      	strb	r2, [r3, #0]
      break;
 8006b5a:	e0f2      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	f200 80ac 	bhi.w	8006cc0 <USBD_GetDescriptor+0x258>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <USBD_GetDescriptor+0x108>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006bbd 	.word	0x08006bbd
 8006b78:	08006bf1 	.word	0x08006bf1
 8006b7c:	08006c25 	.word	0x08006c25
 8006b80:	08006c59 	.word	0x08006c59
 8006b84:	08006c8d 	.word	0x08006c8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7c12      	ldrb	r2, [r2, #16]
 8006ba0:	f107 0108 	add.w	r1, r7, #8
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
 8006ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006baa:	e091      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fab2 	bl	8007118 <USBD_CtlError>
            err++;
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bba:	e089      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7c12      	ldrb	r2, [r2, #16]
 8006bd4:	f107 0108 	add.w	r1, r7, #8
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bde:	e077      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa98 	bl	8007118 <USBD_CtlError>
            err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
          break;
 8006bee:	e06f      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c12:	e05d      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa7e 	bl	8007118 <USBD_CtlError>
            err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
          break;
 8006c22:	e055      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c46:	e043      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa64 	bl	8007118 <USBD_CtlError>
            err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
          break;
 8006c56:	e03b      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7a:	e029      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa4a 	bl	8007118 <USBD_CtlError>
            err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8a:	e021      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cae:	e00f      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa30 	bl	8007118 <USBD_CtlError>
            err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cbe:	e007      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa28 	bl	8007118 <USBD_CtlError>
          err++;
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cce:	bf00      	nop
      }
      break;
 8006cd0:	e037      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f107 0208 	add.w	r2, r7, #8
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4798      	blx	r3
 8006cea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cec:	e029      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa11 	bl	8007118 <USBD_CtlError>
        err++;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8006cfc:	e021      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7c1b      	ldrb	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10d      	bne.n	8006d22 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f107 0208 	add.w	r2, r7, #8
 8006d12:	4610      	mov	r0, r2
 8006d14:	4798      	blx	r3
 8006d16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d20:	e00f      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9f7 	bl	8007118 <USBD_CtlError>
        err++;
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d30:	e007      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f9ef 	bl	8007118 <USBD_CtlError>
      err++;
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d40:	bf00      	nop
  }

  if (err != 0U)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11e      	bne.n	8006d86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	88db      	ldrh	r3, [r3, #6]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88da      	ldrh	r2, [r3, #6]
 8006d5a:	893b      	ldrh	r3, [r7, #8]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bf28      	it	cs
 8006d60:	4613      	movcs	r3, r2
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d66:	893b      	ldrh	r3, [r7, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa44 	bl	80071fa <USBD_CtlSendData>
 8006d72:	e009      	b.n	8006d88 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9ce 	bl	8007118 <USBD_CtlError>
 8006d7c:	e004      	b.n	8006d88 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa95 	bl	80072ae <USBD_CtlSendStatus>
 8006d84:	e000      	b.n	8006d88 <USBD_GetDescriptor+0x320>
    return;
 8006d86:	bf00      	nop
  }
}
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop

08006d90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	889b      	ldrh	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d131      	bne.n	8006e06 <USBD_SetAddress+0x76>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d12d      	bne.n	8006e06 <USBD_SetAddress+0x76>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	2b7f      	cmp	r3, #127	; 0x7f
 8006db0:	d829      	bhi.n	8006e06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d104      	bne.n	8006dd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f9a3 	bl	8007118 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	e01d      	b.n	8006e10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7bfa      	ldrb	r2, [r7, #15]
 8006dd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ffeb 	bl	8007dbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa61 	bl	80072ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfa:	e009      	b.n	8006e10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e04:	e004      	b.n	8006e10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f985 	bl	8007118 <USBD_CtlError>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	885b      	ldrh	r3, [r3, #2]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	4b4c      	ldr	r3, [pc, #304]	; (8006f60 <USBD_SetConfig+0x148>)
 8006e2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e30:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <USBD_SetConfig+0x148>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d905      	bls.n	8006e44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f96c 	bl	8007118 <USBD_CtlError>
    return USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e088      	b.n	8006f56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d002      	beq.n	8006e56 <USBD_SetConfig+0x3e>
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d025      	beq.n	8006ea0 <USBD_SetConfig+0x88>
 8006e54:	e071      	b.n	8006f3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e56:	4b42      	ldr	r3, [pc, #264]	; (8006f60 <USBD_SetConfig+0x148>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01c      	beq.n	8006e98 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e5e:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <USBD_SetConfig+0x148>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e68:	4b3d      	ldr	r3, [pc, #244]	; (8006f60 <USBD_SetConfig+0x148>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff f91e 	bl	80060b0 <USBD_SetClassConfig>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f949 	bl	8007118 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e86:	e065      	b.n	8006f54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa10 	bl	80072ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2203      	movs	r2, #3
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e96:	e05d      	b.n	8006f54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa08 	bl	80072ae <USBD_CtlSendStatus>
      break;
 8006e9e:	e059      	b.n	8006f54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ea0:	4b2f      	ldr	r3, [pc, #188]	; (8006f60 <USBD_SetConfig+0x148>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d112      	bne.n	8006ece <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	; (8006f60 <USBD_SetConfig+0x148>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eba:	4b29      	ldr	r3, [pc, #164]	; (8006f60 <USBD_SetConfig+0x148>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff f911 	bl	80060e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f9f1 	bl	80072ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ecc:	e042      	b.n	8006f54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <USBD_SetConfig+0x148>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d02a      	beq.n	8006f32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff f8ff 	bl	80060e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <USBD_SetConfig+0x148>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <USBD_SetConfig+0x148>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f8d8 	bl	80060b0 <USBD_SetClassConfig>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00f      	beq.n	8006f2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f903 	bl	8007118 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff f8e4 	bl	80060e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f28:	e014      	b.n	8006f54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f9bf 	bl	80072ae <USBD_CtlSendStatus>
      break;
 8006f30:	e010      	b.n	8006f54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f9bb 	bl	80072ae <USBD_CtlSendStatus>
      break;
 8006f38:	e00c      	b.n	8006f54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8eb 	bl	8007118 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <USBD_SetConfig+0x148>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff f8cd 	bl	80060e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	73fb      	strb	r3, [r7, #15]
      break;
 8006f52:	bf00      	nop
  }

  return ret;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	200001b8 	.word	0x200001b8

08006f64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d004      	beq.n	8006f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8cd 	bl	8007118 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f7e:	e023      	b.n	8006fc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	dc02      	bgt.n	8006f92 <USBD_GetConfig+0x2e>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dc03      	bgt.n	8006f98 <USBD_GetConfig+0x34>
 8006f90:	e015      	b.n	8006fbe <USBD_GetConfig+0x5a>
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d00b      	beq.n	8006fae <USBD_GetConfig+0x4a>
 8006f96:	e012      	b.n	8006fbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f927 	bl	80071fa <USBD_CtlSendData>
        break;
 8006fac:	e00c      	b.n	8006fc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f91f 	bl	80071fa <USBD_CtlSendData>
        break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8a9 	bl	8007118 <USBD_CtlError>
        break;
 8006fc6:	bf00      	nop
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d81e      	bhi.n	8007026 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	88db      	ldrh	r3, [r3, #6]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d004      	beq.n	8006ffa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f890 	bl	8007118 <USBD_CtlError>
        break;
 8006ff8:	e01a      	b.n	8007030 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f043 0202 	orr.w	r2, r3, #2
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	330c      	adds	r3, #12
 800701a:	2202      	movs	r2, #2
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8eb 	bl	80071fa <USBD_CtlSendData>
      break;
 8007024:	e004      	b.n	8007030 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f875 	bl	8007118 <USBD_CtlError>
      break;
 800702e:	bf00      	nop
  }
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d106      	bne.n	8007058 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f92b 	bl	80072ae <USBD_CtlSendStatus>
  }
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	2b02      	cmp	r3, #2
 8007076:	d80b      	bhi.n	8007090 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	885b      	ldrh	r3, [r3, #2]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10c      	bne.n	800709a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f910 	bl	80072ae <USBD_CtlSendStatus>
      }
      break;
 800708e:	e004      	b.n	800709a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f840 	bl	8007118 <USBD_CtlError>
      break;
 8007098:	e000      	b.n	800709c <USBD_ClrFeature+0x3c>
      break;
 800709a:	bf00      	nop
  }
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f7ff fa91 	bl	80065f6 <SWAPBYTE>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fa84 	bl	80065f6 <SWAPBYTE>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fa77 	bl	80065f6 <SWAPBYTE>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	80da      	strh	r2, [r3, #6]
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fdb1 	bl	8007c8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fdad 	bl	8007c8c <USBD_LL_StallEP>
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d036      	beq.n	80071be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007154:	6938      	ldr	r0, [r7, #16]
 8007156:	f000 f836 	bl	80071c6 <USBD_GetLen>
 800715a:	4603      	mov	r3, r0
 800715c:	3301      	adds	r3, #1
 800715e:	b29b      	uxth	r3, r3
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	701a      	strb	r2, [r3, #0]
  idx++;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	3301      	adds	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	4413      	add	r3, r2
 8007180:	2203      	movs	r2, #3
 8007182:	701a      	strb	r2, [r3, #0]
  idx++;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	3301      	adds	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800718a:	e013      	b.n	80071b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	7812      	ldrb	r2, [r2, #0]
 8007196:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	3301      	adds	r3, #1
 800719c:	613b      	str	r3, [r7, #16]
    idx++;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	3301      	adds	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	4413      	add	r3, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	3301      	adds	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e7      	bne.n	800718c <USBD_GetString+0x52>
 80071bc:	e000      	b.n	80071c0 <USBD_GetString+0x86>
    return;
 80071be:	bf00      	nop
  }
}
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071d6:	e005      	b.n	80071e4 <USBD_GetLen+0x1e>
  {
    len++;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	3301      	adds	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f5      	bne.n	80071d8 <USBD_GetLen+0x12>
  }

  return len;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2202      	movs	r2, #2
 800720a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	2100      	movs	r1, #0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fe01 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	2100      	movs	r1, #0
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fdf0 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2203      	movs	r2, #3
 8007262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fe0b 	bl	8007e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fdfa 	bl	8007e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2204      	movs	r2, #4
 80072ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072be:	2300      	movs	r3, #0
 80072c0:	2200      	movs	r2, #0
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fdaf 	bl	8007e28 <USBD_LL_Transmit>

  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2205      	movs	r2, #5
 80072e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e4:	2300      	movs	r3, #0
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fdd4 	bl	8007e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007300:	2200      	movs	r2, #0
 8007302:	4912      	ldr	r1, [pc, #72]	; (800734c <MX_USB_DEVICE_Init+0x50>)
 8007304:	4812      	ldr	r0, [pc, #72]	; (8007350 <MX_USB_DEVICE_Init+0x54>)
 8007306:	f7fe fe65 	bl	8005fd4 <USBD_Init>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007310:	f7f9 fa34 	bl	800077c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007314:	490f      	ldr	r1, [pc, #60]	; (8007354 <MX_USB_DEVICE_Init+0x58>)
 8007316:	480e      	ldr	r0, [pc, #56]	; (8007350 <MX_USB_DEVICE_Init+0x54>)
 8007318:	f7fe fe8c 	bl	8006034 <USBD_RegisterClass>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007322:	f7f9 fa2b 	bl	800077c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007326:	490c      	ldr	r1, [pc, #48]	; (8007358 <MX_USB_DEVICE_Init+0x5c>)
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <MX_USB_DEVICE_Init+0x54>)
 800732a:	f7fe fdad 	bl	8005e88 <USBD_CDC_RegisterInterface>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007334:	f7f9 fa22 	bl	800077c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <MX_USB_DEVICE_Init+0x54>)
 800733a:	f7fe fea2 	bl	8006082 <USBD_Start>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007344:	f7f9 fa1a 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007348:	bf00      	nop
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000138 	.word	0x20000138
 8007350:	200004d4 	.word	0x200004d4
 8007354:	20000018 	.word	0x20000018
 8007358:	20000124 	.word	0x20000124

0800735c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007360:	2200      	movs	r2, #0
 8007362:	4905      	ldr	r1, [pc, #20]	; (8007378 <CDC_Init_FS+0x1c>)
 8007364:	4805      	ldr	r0, [pc, #20]	; (800737c <CDC_Init_FS+0x20>)
 8007366:	f7fe fda4 	bl	8005eb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800736a:	4905      	ldr	r1, [pc, #20]	; (8007380 <CDC_Init_FS+0x24>)
 800736c:	4803      	ldr	r0, [pc, #12]	; (800737c <CDC_Init_FS+0x20>)
 800736e:	f7fe fdbe 	bl	8005eee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007374:	4618      	mov	r0, r3
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000fa4 	.word	0x20000fa4
 800737c:	200004d4 	.word	0x200004d4
 8007380:	200007a4 	.word	0x200007a4

08007384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800738a:	4618      	mov	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b23      	cmp	r3, #35	; 0x23
 80073a8:	f200 8098 	bhi.w	80074dc <CDC_Control_FS+0x148>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <CDC_Control_FS+0x20>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080074dd 	.word	0x080074dd
 80073b8:	080074dd 	.word	0x080074dd
 80073bc:	080074dd 	.word	0x080074dd
 80073c0:	080074dd 	.word	0x080074dd
 80073c4:	080074dd 	.word	0x080074dd
 80073c8:	080074dd 	.word	0x080074dd
 80073cc:	080074dd 	.word	0x080074dd
 80073d0:	080074dd 	.word	0x080074dd
 80073d4:	080074dd 	.word	0x080074dd
 80073d8:	080074dd 	.word	0x080074dd
 80073dc:	080074dd 	.word	0x080074dd
 80073e0:	080074dd 	.word	0x080074dd
 80073e4:	080074dd 	.word	0x080074dd
 80073e8:	080074dd 	.word	0x080074dd
 80073ec:	080074dd 	.word	0x080074dd
 80073f0:	080074dd 	.word	0x080074dd
 80073f4:	080074dd 	.word	0x080074dd
 80073f8:	080074dd 	.word	0x080074dd
 80073fc:	080074dd 	.word	0x080074dd
 8007400:	080074dd 	.word	0x080074dd
 8007404:	080074dd 	.word	0x080074dd
 8007408:	080074dd 	.word	0x080074dd
 800740c:	080074dd 	.word	0x080074dd
 8007410:	080074dd 	.word	0x080074dd
 8007414:	080074dd 	.word	0x080074dd
 8007418:	080074dd 	.word	0x080074dd
 800741c:	080074dd 	.word	0x080074dd
 8007420:	080074dd 	.word	0x080074dd
 8007424:	080074dd 	.word	0x080074dd
 8007428:	080074dd 	.word	0x080074dd
 800742c:	080074dd 	.word	0x080074dd
 8007430:	080074dd 	.word	0x080074dd
 8007434:	08007445 	.word	0x08007445
 8007438:	08007489 	.word	0x08007489
 800743c:	080074dd 	.word	0x080074dd
 8007440:	080074dd 	.word	0x080074dd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	3302      	adds	r3, #2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	431a      	orrs	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	3303      	adds	r3, #3
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8007468:	461a      	mov	r2, r3
 800746a:	4b20      	ldr	r3, [pc, #128]	; (80074ec <CDC_Control_FS+0x158>)
 800746c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	791a      	ldrb	r2, [r3, #4]
 8007472:	4b1e      	ldr	r3, [pc, #120]	; (80074ec <CDC_Control_FS+0x158>)
 8007474:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	795a      	ldrb	r2, [r3, #5]
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <CDC_Control_FS+0x158>)
 800747c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	799a      	ldrb	r2, [r3, #6]
 8007482:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <CDC_Control_FS+0x158>)
 8007484:	719a      	strb	r2, [r3, #6]
		break;
 8007486:	e02a      	b.n	80074de <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8007488:	4b18      	ldr	r3, [pc, #96]	; (80074ec <CDC_Control_FS+0x158>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <CDC_Control_FS+0x158>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	0a1a      	lsrs	r2, r3, #8
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 80074a0:	4b12      	ldr	r3, [pc, #72]	; (80074ec <CDC_Control_FS+0x158>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	0c1a      	lsrs	r2, r3, #16
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	3302      	adds	r3, #2
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 80074ae:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <CDC_Control_FS+0x158>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	0e1a      	lsrs	r2, r3, #24
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	3303      	adds	r3, #3
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	3304      	adds	r3, #4
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <CDC_Control_FS+0x158>)
 80074c2:	7912      	ldrb	r2, [r2, #4]
 80074c4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	3305      	adds	r3, #5
 80074ca:	4a08      	ldr	r2, [pc, #32]	; (80074ec <CDC_Control_FS+0x158>)
 80074cc:	7952      	ldrb	r2, [r2, #5]
 80074ce:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	3306      	adds	r3, #6
 80074d4:	4a05      	ldr	r2, [pc, #20]	; (80074ec <CDC_Control_FS+0x158>)
 80074d6:	7992      	ldrb	r2, [r2, #6]
 80074d8:	701a      	strb	r2, [r3, #0]
		break;
 80074da:	e000      	b.n	80074de <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80074dc:	bf00      	nop
	}

  return (USBD_OK);
 80074de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	2000011c 	.word	0x2000011c

080074f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4808      	ldr	r0, [pc, #32]	; (8007520 <CDC_Receive_FS+0x30>)
 80074fe:	f7fe fcf6 	bl	8005eee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007502:	4807      	ldr	r0, [pc, #28]	; (8007520 <CDC_Receive_FS+0x30>)
 8007504:	f7fe fd3c 	bl	8005f80 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7f9 f8fc 	bl	800070c <CDC_ReceiveCallback>
  return (USBD_OK);
 8007514:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200004d4 	.word	0x200004d4

08007524 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <CDC_Transmit_FS+0x48>)
 8007536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007546:	2301      	movs	r3, #1
 8007548:	e00b      	b.n	8007562 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	461a      	mov	r2, r3
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4806      	ldr	r0, [pc, #24]	; (800756c <CDC_Transmit_FS+0x48>)
 8007552:	f7fe fcae 	bl	8005eb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007556:	4805      	ldr	r0, [pc, #20]	; (800756c <CDC_Transmit_FS+0x48>)
 8007558:	f7fe fce2 	bl	8005f20 <USBD_CDC_TransmitPacket>
 800755c:	4603      	mov	r3, r0
 800755e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200004d4 	.word	0x200004d4

08007570 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	4613      	mov	r3, r2
 800757c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2212      	movs	r2, #18
 80075a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000158 	.word	0x20000158

080075b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2204      	movs	r2, #4
 80075c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ca:	4b03      	ldr	r3, [pc, #12]	; (80075d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	20000178 	.word	0x20000178

080075dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4907      	ldr	r1, [pc, #28]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
 80075f2:	4808      	ldr	r0, [pc, #32]	; (8007614 <USBD_FS_ProductStrDescriptor+0x38>)
 80075f4:	f7ff fda1 	bl	800713a <USBD_GetString>
 80075f8:	e004      	b.n	8007604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4904      	ldr	r1, [pc, #16]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
 80075fe:	4805      	ldr	r0, [pc, #20]	; (8007614 <USBD_FS_ProductStrDescriptor+0x38>)
 8007600:	f7ff fd9b 	bl	800713a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200017a4 	.word	0x200017a4
 8007614:	08008078 	.word	0x08008078

08007618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	4603      	mov	r3, r0
 8007620:	6039      	str	r1, [r7, #0]
 8007622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	4904      	ldr	r1, [pc, #16]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800762a:	f7ff fd86 	bl	800713a <USBD_GetString>
  return USBD_StrDesc;
 800762e:	4b02      	ldr	r3, [pc, #8]	; (8007638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200017a4 	.word	0x200017a4
 800763c:	08008090 	.word	0x08008090

08007640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	221a      	movs	r2, #26
 8007650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007652:	f000 f855 	bl	8007700 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007656:	4b02      	ldr	r3, [pc, #8]	; (8007660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	2000017c 	.word	0x2000017c

08007664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4907      	ldr	r1, [pc, #28]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800767a:	4808      	ldr	r0, [pc, #32]	; (800769c <USBD_FS_ConfigStrDescriptor+0x38>)
 800767c:	f7ff fd5d 	bl	800713a <USBD_GetString>
 8007680:	e004      	b.n	800768c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4904      	ldr	r1, [pc, #16]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007686:	4805      	ldr	r0, [pc, #20]	; (800769c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007688:	f7ff fd57 	bl	800713a <USBD_GetString>
  }
  return USBD_StrDesc;
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200017a4 	.word	0x200017a4
 800769c:	080080a4 	.word	0x080080a4

080076a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	4907      	ldr	r1, [pc, #28]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076b6:	4808      	ldr	r0, [pc, #32]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076b8:	f7ff fd3f 	bl	800713a <USBD_GetString>
 80076bc:	e004      	b.n	80076c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076c2:	4805      	ldr	r0, [pc, #20]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076c4:	f7ff fd39 	bl	800713a <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200017a4 	.word	0x200017a4
 80076d8:	080080b0 	.word	0x080080b0

080076dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	220c      	movs	r2, #12
 80076ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	2000016c 	.word	0x2000016c

08007700 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <Get_SerialNum+0x44>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <Get_SerialNum+0x48>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <Get_SerialNum+0x4c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007726:	2208      	movs	r2, #8
 8007728:	4909      	ldr	r1, [pc, #36]	; (8007750 <Get_SerialNum+0x50>)
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f814 	bl	8007758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007730:	2204      	movs	r2, #4
 8007732:	4908      	ldr	r1, [pc, #32]	; (8007754 <Get_SerialNum+0x54>)
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f000 f80f 	bl	8007758 <IntToUnicode>
  }
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	1fff7590 	.word	0x1fff7590
 8007748:	1fff7594 	.word	0x1fff7594
 800774c:	1fff7598 	.word	0x1fff7598
 8007750:	2000017e 	.word	0x2000017e
 8007754:	2000018e 	.word	0x2000018e

08007758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]
 800776e:	e027      	b.n	80077c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	0f1b      	lsrs	r3, r3, #28
 8007774:	2b09      	cmp	r3, #9
 8007776:	d80b      	bhi.n	8007790 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	0f1b      	lsrs	r3, r3, #28
 800777c:	b2da      	uxtb	r2, r3
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4619      	mov	r1, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	440b      	add	r3, r1
 8007788:	3230      	adds	r2, #48	; 0x30
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
 800778e:	e00a      	b.n	80077a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	0f1b      	lsrs	r3, r3, #28
 8007794:	b2da      	uxtb	r2, r3
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	4619      	mov	r1, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	440b      	add	r3, r1
 80077a0:	3237      	adds	r2, #55	; 0x37
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	3301      	adds	r3, #1
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	3301      	adds	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
 80077c0:	7dfa      	ldrb	r2, [r7, #23]
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3d3      	bcc.n	8007770 <IntToUnicode+0x18>
  }
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	605a      	str	r2, [r3, #4]
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	60da      	str	r2, [r3, #12]
 80077ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f8:	d14e      	bne.n	8007898 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077fa:	4b29      	ldr	r3, [pc, #164]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 80077fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fe:	4a28      	ldr	r2, [pc, #160]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007806:	4b26      	ldr	r3, [pc, #152]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007818:	2302      	movs	r3, #2
 800781a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007820:	2303      	movs	r3, #3
 8007822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007824:	230a      	movs	r3, #10
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007828:	f107 0314 	add.w	r3, r7, #20
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007832:	f7f9 faff 	bl	8000e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007836:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 800783c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007842:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d114      	bne.n	8007884 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	4a10      	ldr	r2, [pc, #64]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007864:	6593      	str	r3, [r2, #88]	; 0x58
 8007866:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007872:	f7fa fddf 	bl	8002434 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 8007878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787a:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <HAL_PCD_MspInit+0xc8>)
 800787c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007880:	6593      	str	r3, [r2, #88]	; 0x58
 8007882:	e001      	b.n	8007888 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007884:	f7fa fdd6 	bl	8002434 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	2043      	movs	r0, #67	; 0x43
 800788e:	f7f9 fa9a 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007892:	2043      	movs	r0, #67	; 0x43
 8007894:	f7f9 fab3 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007898:	bf00      	nop
 800789a:	3728      	adds	r7, #40	; 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40021000 	.word	0x40021000

080078a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fc2c 	bl	8006118 <USBD_LL_SetupStage>
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	4619      	mov	r1, r3
 80078f2:	f7fe fc66 	bl	80061c2 <USBD_LL_DataOutStage>
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	1a9b      	subs	r3, r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	3348      	adds	r3, #72	; 0x48
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	4619      	mov	r1, r3
 8007926:	f7fe fcaf 	bl	8006288 <USBD_LL_DataInStage>
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fdc3 	bl	80064cc <USBD_LL_SOF>
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007956:	2301      	movs	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d001      	beq.n	8007966 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007962:	f7f8 ff0b 	bl	800077c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800796c:	7bfa      	ldrb	r2, [r7, #15]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fd6d 	bl	8006450 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fd19 	bl	80063b4 <USBD_LL_Reset>
}
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fd5c 	bl	8006470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <HAL_PCD_SuspendCallback+0x48>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	4a03      	ldr	r2, [pc, #12]	; (80079d4 <HAL_PCD_SuspendCallback+0x48>)
 80079c6:	f043 0306 	orr.w	r3, r3, #6
 80079ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	e000ed00 	.word	0xe000ed00

080079d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a00:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <HAL_PCD_ResumeCallback+0x4c>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4a07      	ldr	r2, [pc, #28]	; (8007a24 <HAL_PCD_ResumeCallback+0x4c>)
 8007a06:	f023 0306 	bic.w	r3, r3, #6
 8007a0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007a0c:	f000 faf6 	bl	8007ffc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fd40 	bl	800649c <USBD_LL_Resume>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	e000ed00 	.word	0xe000ed00

08007a28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a3a:	78fa      	ldrb	r2, [r7, #3]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fd8c 	bl	800655c <USBD_LL_IsoOUTIncomplete>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fd54 	bl	8006510 <USBD_LL_IsoINIncomplete>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fd92 	bl	80065a8 <USBD_LL_DevConnected>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fd8f 	bl	80065be <USBD_LL_DevDisconnected>
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d13c      	bne.n	8007b32 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ab8:	4a20      	ldr	r2, [pc, #128]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ac4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ac8:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ace:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007ad0:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ad2:	2206      	movs	r2, #6
 8007ad4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ad6:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ad8:	2202      	movs	r2, #2
 8007ada:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007adc:	4b17      	ldr	r3, [pc, #92]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ade:	2202      	movs	r2, #2
 8007ae0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ae2:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <USBD_LL_Init+0x94>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ae8:	4b14      	ldr	r3, [pc, #80]	; (8007b3c <USBD_LL_Init+0x94>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <USBD_LL_Init+0x94>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007af4:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <USBD_LL_Init+0x94>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <USBD_LL_Init+0x94>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b06:	480d      	ldr	r0, [pc, #52]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b08:	f7f9 fb91 	bl	800122e <HAL_PCD_Init>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b12:	f7f8 fe33 	bl	800077c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b16:	2180      	movs	r1, #128	; 0x80
 8007b18:	4808      	ldr	r0, [pc, #32]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b1a:	f7fa fbf2 	bl	8002302 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b1e:	2240      	movs	r2, #64	; 0x40
 8007b20:	2100      	movs	r1, #0
 8007b22:	4806      	ldr	r0, [pc, #24]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b24:	f7fa fba6 	bl	8002274 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4803      	ldr	r0, [pc, #12]	; (8007b3c <USBD_LL_Init+0x94>)
 8007b2e:	f7fa fba1 	bl	8002274 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200019a4 	.word	0x200019a4

08007b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f9 fc8d 	bl	8001476 <HAL_PCD_Start>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d816      	bhi.n	8007b94 <USBD_LL_Start+0x54>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBD_LL_Start+0x2c>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b7d 	.word	0x08007b7d
 8007b70:	08007b83 	.word	0x08007b83
 8007b74:	08007b89 	.word	0x08007b89
 8007b78:	08007b8f 	.word	0x08007b8f
    case HAL_OK :
      usb_status = USBD_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b80:	e00b      	b.n	8007b9a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b82:	2303      	movs	r3, #3
 8007b84:	73fb      	strb	r3, [r7, #15]
    break;
 8007b86:	e008      	b.n	8007b9a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8c:	e005      	b.n	8007b9a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	73fb      	strb	r3, [r7, #15]
    break;
 8007b92:	e002      	b.n	8007b9a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007b94:	2303      	movs	r3, #3
 8007b96:	73fb      	strb	r3, [r7, #15]
    break;
 8007b98:	bf00      	nop
  }
  return usb_status;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	70fb      	strb	r3, [r7, #3]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70bb      	strb	r3, [r7, #2]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007bcc:	78bb      	ldrb	r3, [r7, #2]
 8007bce:	883a      	ldrh	r2, [r7, #0]
 8007bd0:	78f9      	ldrb	r1, [r7, #3]
 8007bd2:	f7fa f848 	bl	8001c66 <HAL_PCD_EP_Open>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d817      	bhi.n	8007c10 <USBD_LL_OpenEP+0x6c>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <USBD_LL_OpenEP+0x44>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007bff 	.word	0x08007bff
 8007bf0:	08007c05 	.word	0x08007c05
 8007bf4:	08007c0b 	.word	0x08007c0b
    case HAL_OK :
      usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007bfc:	e00b      	b.n	8007c16 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	73fb      	strb	r3, [r7, #15]
    break;
 8007c02:	e008      	b.n	8007c16 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
    break;
 8007c08:	e005      	b.n	8007c16 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0e:	e002      	b.n	8007c16 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	73fb      	strb	r3, [r7, #15]
    break;
 8007c14:	bf00      	nop
  }
  return usb_status;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fa f879 	bl	8001d36 <HAL_PCD_EP_Close>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	d816      	bhi.n	8007c7c <USBD_LL_CloseEP+0x5c>
 8007c4e:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBD_LL_CloseEP+0x34>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c6b 	.word	0x08007c6b
 8007c5c:	08007c71 	.word	0x08007c71
 8007c60:	08007c77 	.word	0x08007c77
    case HAL_OK :
      usb_status = USBD_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]
    break;
 8007c68:	e00b      	b.n	8007c82 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c6e:	e008      	b.n	8007c82 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
    break;
 8007c74:	e005      	b.n	8007c82 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7a:	e002      	b.n	8007c82 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c80:	bf00      	nop
  }
  return usb_status;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fa f920 	bl	8001ef0 <HAL_PCD_EP_SetStall>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d816      	bhi.n	8007ce8 <USBD_LL_StallEP+0x5c>
 8007cba:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBD_LL_StallEP+0x34>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cd7 	.word	0x08007cd7
 8007cc8:	08007cdd 	.word	0x08007cdd
 8007ccc:	08007ce3 	.word	0x08007ce3
    case HAL_OK :
      usb_status = USBD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd4:	e00b      	b.n	8007cee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cda:	e008      	b.n	8007cee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	e005      	b.n	8007cee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce6:	e002      	b.n	8007cee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	73fb      	strb	r3, [r7, #15]
    break;
 8007cec:	bf00      	nop
  }
  return usb_status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fa f94c 	bl	8001fb4 <HAL_PCD_EP_ClrStall>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d816      	bhi.n	8007d54 <USBD_LL_ClearStallEP+0x5c>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBD_LL_ClearStallEP+0x34>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d43 	.word	0x08007d43
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d4f 	.word	0x08007d4f
    case HAL_OK :
      usb_status = USBD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d40:	e00b      	b.n	8007d5a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d42:	2303      	movs	r3, #3
 8007d44:	73fb      	strb	r3, [r7, #15]
    break;
 8007d46:	e008      	b.n	8007d5a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4c:	e005      	b.n	8007d5a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
    break;
 8007d52:	e002      	b.n	8007d5a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	bf00      	nop
  }
  return usb_status;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da0b      	bge.n	8007d98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	333e      	adds	r3, #62	; 0x3e
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	e00b      	b.n	8007db0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7f9 ff1e 	bl	8001c1c <HAL_PCD_SetAddress>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d816      	bhi.n	8007e18 <USBD_LL_SetUSBAddress+0x5c>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBD_LL_SetUSBAddress+0x34>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e07 	.word	0x08007e07
 8007df8:	08007e0d 	.word	0x08007e0d
 8007dfc:	08007e13 	.word	0x08007e13
    case HAL_OK :
      usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
    break;
 8007e04:	e00b      	b.n	8007e1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e06:	2303      	movs	r3, #3
 8007e08:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0a:	e008      	b.n	8007e1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e10:	e005      	b.n	8007e1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
    break;
 8007e16:	e002      	b.n	8007e1e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1c:	bf00      	nop
  }
  return usb_status;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	460b      	mov	r3, r1
 8007e36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e46:	7af9      	ldrb	r1, [r7, #11]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	f7fa f813 	bl	8001e76 <HAL_PCD_EP_Transmit>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d816      	bhi.n	8007e88 <USBD_LL_Transmit+0x60>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <USBD_LL_Transmit+0x38>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e71 	.word	0x08007e71
 8007e64:	08007e77 	.word	0x08007e77
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007e83 	.word	0x08007e83
    case HAL_OK :
      usb_status = USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75fb      	strb	r3, [r7, #23]
    break;
 8007e74:	e00b      	b.n	8007e8e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	75fb      	strb	r3, [r7, #23]
    break;
 8007e7a:	e008      	b.n	8007e8e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
    break;
 8007e80:	e005      	b.n	8007e8e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	75fb      	strb	r3, [r7, #23]
    break;
 8007e86:	e002      	b.n	8007e8e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	75fb      	strb	r3, [r7, #23]
    break;
 8007e8c:	bf00      	nop
  }
  return usb_status;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007eb6:	7af9      	ldrb	r1, [r7, #11]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	f7f9 ff85 	bl	8001dca <HAL_PCD_EP_Receive>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007ec4:	7dbb      	ldrb	r3, [r7, #22]
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d816      	bhi.n	8007ef8 <USBD_LL_PrepareReceive+0x60>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <USBD_LL_PrepareReceive+0x38>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ee7 	.word	0x08007ee7
 8007ed8:	08007eed 	.word	0x08007eed
 8007edc:	08007ef3 	.word	0x08007ef3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	75fb      	strb	r3, [r7, #23]
    break;
 8007ee4:	e00b      	b.n	8007efe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	75fb      	strb	r3, [r7, #23]
    break;
 8007eea:	e008      	b.n	8007efe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
    break;
 8007ef0:	e005      	b.n	8007efe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ef6:	e002      	b.n	8007efe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	75fb      	strb	r3, [r7, #23]
    break;
 8007efc:	bf00      	nop
  }
  return usb_status;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f1a:	78fa      	ldrb	r2, [r7, #3]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f9 ff91 	bl	8001e46 <HAL_PCD_EP_GetRxCount>
 8007f24:	4603      	mov	r3, r0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <HAL_PCDEx_LPM_Callback+0x18>
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d01f      	beq.n	8007f86 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007f46:	e03b      	b.n	8007fc0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d007      	beq.n	8007f60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007f50:	f000 f854 	bl	8007ffc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f54:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	4a1b      	ldr	r2, [pc, #108]	; (8007fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f5a:	f023 0306 	bic.w	r3, r3, #6
 8007f5e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fa8c 	bl	800649c <USBD_LL_Resume>
    break;
 8007f84:	e01c      	b.n	8007fc0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fa63 	bl	8006470 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	4a04      	ldr	r2, [pc, #16]	; (8007fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007fb8:	f043 0306 	orr.w	r3, r3, #6
 8007fbc:	6113      	str	r3, [r2, #16]
    break;
 8007fbe:	bf00      	nop
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fd4:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <USBD_static_malloc+0x18>)
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	200001bc 	.word	0x200001bc

08007fe8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008000:	f7f8 f952 	bl	80002a8 <SystemClock_Config>
}
 8008004:	bf00      	nop
 8008006:	bd80      	pop	{r7, pc}

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	; (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	; (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x44>)
 800801c:	f000 f820 	bl	8008060 <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	08008100 	.word	0x08008100
 8008044:	08008100 	.word	0x08008100
 8008048:	08008100 	.word	0x08008100
 800804c:	08008104 	.word	0x08008104

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <_init>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr

0800806c <_fini>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr
