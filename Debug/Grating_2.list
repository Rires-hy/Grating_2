
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b624  0800b624  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800b62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003638  200001a0  0800b7cc  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037d8  0800b7cc  000237d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a80b  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005121  00000000  00000000  0004a9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0004fb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  000516d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e19  00000000  00000000  000530a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9f8  00000000  00000000  00059ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd644  00000000  00000000  000798b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176efd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  00176f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4dc 	.word	0x0800b4dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800b4dc 	.word	0x0800b4dc

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f001 f8ff 	bl	80013d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f868 	bl	80002ac <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa9a 	bl	8000714 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8ec 	bl	80003bc <MX_TIM1_Init>
  MX_TIM5_Init();
 80001e4:	f000 f9e6 	bl	80005b4 <MX_TIM5_Init>
  MX_TIM2_Init();
 80001e8:	f000 f93a 	bl	8000460 <MX_TIM2_Init>
  MX_TIM8_Init();
 80001ec:	f000 fa38 	bl	8000660 <MX_TIM8_Init>
  MX_TIM3_Init();
 80001f0:	f000 f98a 	bl	8000508 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80001f4:	213c      	movs	r1, #60	; 0x3c
 80001f6:	481d      	ldr	r0, [pc, #116]	; (800026c <main+0x9c>)
 80001f8:	f004 f9c2 	bl	8004580 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2104      	movs	r1, #4
 8000200:	481b      	ldr	r0, [pc, #108]	; (8000270 <main+0xa0>)
 8000202:	f001 fc55 	bl	8001ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800020c:	4819      	ldr	r0, [pc, #100]	; (8000274 <main+0xa4>)
 800020e:	f001 fc4f 	bl	8001ab0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000212:	4819      	ldr	r0, [pc, #100]	; (8000278 <main+0xa8>)
 8000214:	f004 f89e 	bl	8004354 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <main+0xac>)
 800021a:	f004 f89b 	bl	8004354 <HAL_TIM_Base_Start_IT>

  TIM5->CNT=750000;
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <main+0xb0>)
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <main+0xb4>)
 8000222:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT=750000;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <main+0xb4>)
 800022a:	625a      	str	r2, [r3, #36]	; 0x24

  //initiate USB
  MX_USB_DEVICE_Init();
 800022c:	f00a fa96 	bl	800a75c <MX_USB_DEVICE_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f007 fd44 	bl	8007cbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <main+0xb8>)
 8000236:	2100      	movs	r1, #0
 8000238:	4814      	ldr	r0, [pc, #80]	; (800028c <main+0xbc>)
 800023a:	f007 fd89 	bl	8007d50 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a13      	ldr	r2, [pc, #76]	; (8000290 <main+0xc0>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000244:	4a13      	ldr	r2, [pc, #76]	; (8000294 <main+0xc4>)
 8000246:	2100      	movs	r1, #0
 8000248:	4813      	ldr	r0, [pc, #76]	; (8000298 <main+0xc8>)
 800024a:	f007 fd81 	bl	8007d50 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xcc>)
 8000252:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000254:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <main+0xd0>)
 8000256:	2100      	movs	r1, #0
 8000258:	4812      	ldr	r0, [pc, #72]	; (80002a4 <main+0xd4>)
 800025a:	f007 fd79 	bl	8007d50 <osThreadNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <main+0xd8>)
 8000262:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000264:	f007 fd4e 	bl	8007d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000268:	e7fe      	b.n	8000268 <main+0x98>
 800026a:	bf00      	nop
 800026c:	20001d4c 	.word	0x20001d4c
 8000270:	48000400 	.word	0x48000400
 8000274:	48001000 	.word	0x48001000
 8000278:	20001e00 	.word	0x20001e00
 800027c:	20001e5c 	.word	0x20001e5c
 8000280:	40000c00 	.word	0x40000c00
 8000284:	000b71b0 	.word	0x000b71b0
 8000288:	0800b578 	.word	0x0800b578
 800028c:	080009c1 	.word	0x080009c1
 8000290:	20001cf0 	.word	0x20001cf0
 8000294:	0800b59c 	.word	0x0800b59c
 8000298:	08000b45 	.word	0x08000b45
 800029c:	20001df4 	.word	0x20001df4
 80002a0:	0800b5c0 	.word	0x0800b5c0
 80002a4:	08000e1d 	.word	0x08000e1d
 80002a8:	20001e54 	.word	0x20001e54

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b0b8      	sub	sp, #224	; 0xe0
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002b6:	2244      	movs	r2, #68	; 0x44
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f00b f906 	bl	800b4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2288      	movs	r2, #136	; 0x88
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f00b f8f8 	bl	800b4cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002dc:	2310      	movs	r3, #16
 80002de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ee:	2360      	movs	r3, #96	; 0x60
 80002f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	2302      	movs	r3, #2
 80002f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002fa:	2301      	movs	r3, #1
 80002fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000306:	2308      	movs	r3, #8
 8000308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030c:	2307      	movs	r3, #7
 800030e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fd42 	bl	8002dac <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800032e:	f000 fd7d 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2303      	movs	r3, #3
 800033a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f003 f90e 	bl	8003578 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000362:	f000 fd63 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800036c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000370:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800037a:	2308      	movs	r3, #8
 800037c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800037e:	2307      	movs	r3, #7
 8000380:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800038a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800038e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f003 faca 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800039e:	f000 fd45 	bl	8000e2c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a6:	f002 fc9b 	bl	8002ce0 <HAL_PWREx_ControlVoltageScaling>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80003b0:	f000 fd3c 	bl	8000e2c <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	37e0      	adds	r7, #224	; 0xe0
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003dc:	4a1f      	ldr	r2, [pc, #124]	; (800045c <MX_TIM1_Init+0xa0>)
 80003de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003e2:	224f      	movs	r2, #79	; 0x4f
 80003e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003ee:	2231      	movs	r2, #49	; 0x31
 80003f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000406:	f003 ff4d 	bl	80042a4 <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000410:	f000 fd0c 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000422:	f004 fa5a 	bl	80048da <HAL_TIM_ConfigClockSource>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800042c:	f000 fcfe 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000442:	f004 fc93 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800044c:	f000 fcee 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20001e00 	.word	0x20001e00
 800045c:	40012c00 	.word	0x40012c00

08000460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	; 0x30
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2224      	movs	r2, #36	; 0x24
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f00b f82c 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	463b      	mov	r3, r7
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <MX_TIM2_Init+0xa4>)
 8000480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000484:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_TIM2_Init+0xa4>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_TIM2_Init+0xa4>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33888;
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_TIM2_Init+0xa4>)
 8000494:	f248 4260 	movw	r2, #33888	; 0x8460
 8000498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_TIM2_Init+0xa4>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004a6:	2303      	movs	r3, #3
 80004a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004ae:	2301      	movs	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004be:	2301      	movs	r3, #1
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4619      	mov	r1, r3
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004d2:	f003 ffaf 	bl	8004434 <HAL_TIM_Encoder_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80004dc:	f000 fca6 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	463b      	mov	r3, r7
 80004ea:	4619      	mov	r1, r3
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004ee:	f004 fc3d 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80004f8:	f000 fc98 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	3730      	adds	r7, #48	; 0x30
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20001e5c 	.word	0x20001e5c

08000508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2224      	movs	r2, #36	; 0x24
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a ffd8 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <MX_TIM3_Init+0xa8>)
 800052a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_TIM3_Init+0xa4>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_TIM3_Init+0xa4>)
 800053a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800054c:	2301      	movs	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000564:	2301      	movs	r3, #1
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000578:	f003 ff5c 	bl	8004434 <HAL_TIM_Encoder_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000582:	f000 fc53 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000594:	f004 fbea 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800059e:	f000 fc45 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3730      	adds	r7, #48	; 0x30
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20001d98 	.word	0x20001d98
 80005b0:	40000400 	.word	0x40000400

080005b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2224      	movs	r2, #36	; 0x24
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00a ff82 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_TIM5_Init+0xa8>)
 80005d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005e6:	f248 4260 	movw	r2, #33888	; 0x8460
 80005ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_TIM5_Init+0xa4>)
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005f8:	2303      	movs	r3, #3
 80005fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000610:	2301      	movs	r3, #1
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_TIM5_Init+0xa4>)
 8000624:	f003 ff06 	bl	8004434 <HAL_TIM_Encoder_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800062e:	f000 fbfd 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_TIM5_Init+0xa4>)
 8000640:	f004 fb94 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800064a:	f000 fbef 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	; 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20001d4c 	.word	0x20001d4c
 800065c:	40000c00 	.word	0x40000c00

08000660 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2224      	movs	r2, #36	; 0x24
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00a ff2c 	bl	800b4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_TIM8_Init+0xac>)
 8000680:	4a23      	ldr	r2, [pc, #140]	; (8000710 <MX_TIM8_Init+0xb0>)
 8000682:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM8_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_TIM8_Init+0xac>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_TIM8_Init+0xac>)
 8000692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000696:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_TIM8_Init+0xac>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_TIM8_Init+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_TIM8_Init+0xac>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4619      	mov	r1, r3
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_TIM8_Init+0xac>)
 80006d6:	f003 fead 	bl	8004434 <HAL_TIM_Encoder_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80006e0:	f000 fba4 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_TIM8_Init+0xac>)
 80006f6:	f004 fb39 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000700:	f000 fb94 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20001cf8 	.word	0x20001cf8
 8000710:	40013400 	.word	0x40013400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b76      	ldr	r3, [pc, #472]	; (8000904 <MX_GPIO_Init+0x1f0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a75      	ldr	r2, [pc, #468]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b73      	ldr	r3, [pc, #460]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b70      	ldr	r3, [pc, #448]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a6f      	ldr	r2, [pc, #444]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b6d      	ldr	r3, [pc, #436]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b6a      	ldr	r3, [pc, #424]	; (8000904 <MX_GPIO_Init+0x1f0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a69      	ldr	r2, [pc, #420]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b67      	ldr	r3, [pc, #412]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b64      	ldr	r3, [pc, #400]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a63      	ldr	r2, [pc, #396]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b61      	ldr	r3, [pc, #388]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b5e      	ldr	r3, [pc, #376]	; (8000904 <MX_GPIO_Init+0x1f0>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a5d      	ldr	r2, [pc, #372]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b5b      	ldr	r3, [pc, #364]	; (8000904 <MX_GPIO_Init+0x1f0>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a2:	4b58      	ldr	r3, [pc, #352]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a57      	ldr	r2, [pc, #348]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b55      	ldr	r3, [pc, #340]	; (8000904 <MX_GPIO_Init+0x1f0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XCLK_GPIO_Port, XCLK_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f001 f975 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2104      	movs	r1, #4
 80007ca:	484f      	ldr	r0, [pc, #316]	; (8000908 <MX_GPIO_Init+0x1f4>)
 80007cc:	f001 f970 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d6:	484d      	ldr	r0, [pc, #308]	; (800090c <MX_GPIO_Init+0x1f8>)
 80007d8:	f001 f96a 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	484b      	ldr	r0, [pc, #300]	; (8000910 <MX_GPIO_Init+0x1fc>)
 80007e2:	f001 f965 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 80007e6:	2304      	movs	r3, #4
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 ff94 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000804:	2308      	movs	r3, #8
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080c:	2302      	movs	r3, #2
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 ff87 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : XDIR_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin;
 800081e:	2304      	movs	r3, #4
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XDIR_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4834      	ldr	r0, [pc, #208]	; (8000908 <MX_GPIO_Init+0x1f4>)
 8000836:	f000 ff79 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	482e      	ldr	r0, [pc, #184]	; (800090c <MX_GPIO_Init+0x1f8>)
 8000854:	f000 ff6a 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin Z_E11_Pin Y__Pin Y_E13_Pin */
  GPIO_InitStruct.Pin = Z__Pin|Z_E11_Pin|Y__Pin|Y_E13_Pin;
 8000858:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x200>)
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4827      	ldr	r0, [pc, #156]	; (800090c <MX_GPIO_Init+0x1f8>)
 800086e:	f000 ff5d 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : X__Pin */
  GPIO_InitStruct.Pin = X__Pin;
 8000872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0x204>)
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X__GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4821      	ldr	r0, [pc, #132]	; (800090c <MX_GPIO_Init+0x1f8>)
 8000888:	f000 ff50 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : X_E15_Pin */
  GPIO_InitStruct.Pin = X_E15_Pin;
 800088c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000896:	2302      	movs	r3, #2
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_E15_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <MX_GPIO_Init+0x1f8>)
 80008a2:	f000 ff43 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4814      	ldr	r0, [pc, #80]	; (8000910 <MX_GPIO_Init+0x1fc>)
 80008be:	f000 ff35 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23c0      	movs	r3, #192	; 0xc0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <MX_GPIO_Init+0x1f4>)
 80008de:	f000 ff25 	bl	800172c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80008e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008e6:	f001 f92d 	bl	8001b44 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	2028      	movs	r0, #40	; 0x28
 80008f0:	f000 fee5 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f4:	2028      	movs	r0, #40	; 0x28
 80008f6:	f000 fefe 	bl	80016f6 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400
 800090c:	48001000 	.word	0x48001000
 8000910:	48000c00 	.word	0x48000c00
 8000914:	10310000 	.word	0x10310000
 8000918:	10110000 	.word	0x10110000

0800091c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d115      	bne.n	800095c <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 800093a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800093e:	461a      	mov	r2, r3
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000942:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	4413      	add	r3, r2
 8000956:	461a      	mov	r2, r3
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800095a:	601a      	str	r2, [r3, #0]
	}

}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	20001e5c 	.word	0x20001e5c
 800096c:	20001d4c 	.word	0x20001d4c
 8000970:	20001d44 	.word	0x20001d44
 8000974:	200001bc 	.word	0x200001bc
 8000978:	20001df8 	.word	0x20001df8

0800097c <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	  for (int i=0;i<=31;i++)
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e00c      	b.n	80009a6 <CDC_ReceiveCallback+0x2a>
	  {
		 rxbuf[i]=buf[i];
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b259      	sxtb	r1, r3
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <CDC_ReceiveCallback+0x40>)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	460a      	mov	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
	  for (int i=0;i<=31;i++)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b1f      	cmp	r3, #31
 80009aa:	ddef      	ble.n	800098c <CDC_ReceiveCallback+0x10>
	  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20001cd0 	.word	0x20001cd0

080009c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009c8:	f009 fec8 	bl	800a75c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 80009cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d0:	484e      	ldr	r0, [pc, #312]	; (8000b0c <StartDefaultTask+0x14c>)
 80009d2:	f001 f855 	bl	8001a80 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <StartDefaultTask+0x24>
		  	  Xpos=0;
 80009dc:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <StartDefaultTask+0x150>)
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e002      	b.n	80009ea <StartDefaultTask+0x2a>
	 	  }
	 	  else {
	 		  Xpos=1;
 80009e4:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <StartDefaultTask+0x150>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_RESET){
 80009ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ee:	4847      	ldr	r0, [pc, #284]	; (8000b0c <StartDefaultTask+0x14c>)
 80009f0:	f001 f846 	bl	8001a80 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <StartDefaultTask+0x42>
	 		  Xneg=0;
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <StartDefaultTask+0x154>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e002      	b.n	8000a08 <StartDefaultTask+0x48>
	 	  }
	 	  else  {
	 		  Xneg=1;
 8000a02:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <StartDefaultTask+0x154>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
	 	  }
		  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	483f      	ldr	r0, [pc, #252]	; (8000b0c <StartDefaultTask+0x14c>)
 8000a0e:	f001 f837 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d103      	bne.n	8000a20 <StartDefaultTask+0x60>
			  Ypos=0;
 8000a18:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <StartDefaultTask+0x158>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	e002      	b.n	8000a26 <StartDefaultTask+0x66>
		 	  }
		 	  else {
		 	 Ypos=1;
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <StartDefaultTask+0x158>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		 	  }
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4838      	ldr	r0, [pc, #224]	; (8000b0c <StartDefaultTask+0x14c>)
 8000a2c:	f001 f828 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <StartDefaultTask+0x7e>
		 	 Yneg=0;
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <StartDefaultTask+0x15c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e002      	b.n	8000a44 <StartDefaultTask+0x84>
		 	  }
		 	  else  {
		 	 Yneg=1;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <StartDefaultTask+0x15c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
		 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	4830      	ldr	r0, [pc, #192]	; (8000b0c <StartDefaultTask+0x14c>)
 8000a4a:	f001 f819 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d103      	bne.n	8000a5c <StartDefaultTask+0x9c>
		  	 Zpos=0;
 8000a54:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <StartDefaultTask+0x160>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	e002      	b.n	8000a62 <StartDefaultTask+0xa2>
	 	  }
	 	  else {
	 		 Zpos=1;
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <StartDefaultTask+0x160>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	4829      	ldr	r0, [pc, #164]	; (8000b0c <StartDefaultTask+0x14c>)
 8000a68:	f001 f80a 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <StartDefaultTask+0xba>
		  	  Zneg=0;
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <StartDefaultTask+0x164>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e002      	b.n	8000a80 <StartDefaultTask+0xc0>
	 	  }
	 	  else  {
	 		 Zneg=1;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <StartDefaultTask+0x164>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
	 	  }


	 	  if(highMode>1) {
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <StartDefaultTask+0x168>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	dd0f      	ble.n	8000aa8 <StartDefaultTask+0xe8>
		 	    xSpeed = 250U;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <StartDefaultTask+0x16c>)
 8000a8a:	22fa      	movs	r2, #250	; 0xfa
 8000a8c:	701a      	strb	r2, [r3, #0]
		       ySpeed = 250U;
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <StartDefaultTask+0x170>)
 8000a90:	22fa      	movs	r2, #250	; 0xfa
 8000a92:	701a      	strb	r2, [r3, #0]
		       xSen = 2U;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <StartDefaultTask+0x174>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
		       ySen = 2U;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <StartDefaultTask+0x178>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
		       highMode = 1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <StartDefaultTask+0x168>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e012      	b.n	8000ace <StartDefaultTask+0x10e>
	 	  }else if (highMode < 1) {
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <StartDefaultTask+0x168>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dc0e      	bgt.n	8000ace <StartDefaultTask+0x10e>


	 	    xSpeed = 50U;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <StartDefaultTask+0x16c>)
 8000ab2:	2232      	movs	r2, #50	; 0x32
 8000ab4:	701a      	strb	r2, [r3, #0]
	 	    ySpeed = 50U;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <StartDefaultTask+0x170>)
 8000ab8:	2232      	movs	r2, #50	; 0x32
 8000aba:	701a      	strb	r2, [r3, #0]
	 	    xSen = 10U;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <StartDefaultTask+0x174>)
 8000abe:	220a      	movs	r2, #10
 8000ac0:	701a      	strb	r2, [r3, #0]
	 	    ySen = 10U;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <StartDefaultTask+0x178>)
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	701a      	strb	r2, [r3, #0]
	 	    highMode = 1;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <StartDefaultTask+0x168>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000ace:	2108      	movs	r1, #8
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f000 ffd4 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d104      	bne.n	8000ae8 <StartDefaultTask+0x128>
	 	      {
	 	  	    xPul = -(xSen);
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <StartDefaultTask+0x174>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <StartDefaultTask+0x17c>)
 8000ae6:	6013      	str	r3, [r2, #0]
	 	      }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	      {
//	 	        xPul = (xSen);
//	 	      }
	 	  if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000ae8:	2108      	movs	r1, #8
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f000 ffc7 	bl	8001a80 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d104      	bne.n	8000b02 <StartDefaultTask+0x142>
	 	  {
	 		  yPul = ySen;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <StartDefaultTask+0x178>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <StartDefaultTask+0x180>)
 8000b00:	601a      	str	r2, [r3, #0]
	 	  }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	  {
//	 		  yPul = -ySen;
//	 	  }
    osDelay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f007 f9b6 	bl	8007e74 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000b08:	e760      	b.n	80009cc <StartDefaultTask+0xc>
 8000b0a:	bf00      	nop
 8000b0c:	48001000 	.word	0x48001000
 8000b10:	20001e4c 	.word	0x20001e4c
 8000b14:	20001de8 	.word	0x20001de8
 8000b18:	20001d48 	.word	0x20001d48
 8000b1c:	20001df0 	.word	0x20001df0
 8000b20:	20001ea8 	.word	0x20001ea8
 8000b24:	20001cf4 	.word	0x20001cf4
 8000b28:	200001c0 	.word	0x200001c0
 8000b2c:	20001eb0 	.word	0x20001eb0
 8000b30:	20001eb8 	.word	0x20001eb8
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000001 	.word	0x20000001
 8000b3c:	20001eac 	.word	0x20001eac
 8000b40:	20001eb4 	.word	0x20001eb4

08000b44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int rec_state=0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
//	  }

  /* Infinite loop */
  for(;;)
  {
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8000b50:	4b9b      	ldr	r3, [pc, #620]	; (8000dc0 <StartTask02+0x27c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <StartTask02+0x280>)
 8000b5a:	601a      	str	r2, [r3, #0]
	  tim5Cnt=__HAL_TIM_GET_COUNTER(&htim5);
 8000b5c:	4b9a      	ldr	r3, [pc, #616]	; (8000dc8 <StartTask02+0x284>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b99      	ldr	r3, [pc, #612]	; (8000dcc <StartTask02+0x288>)
 8000b66:	601a      	str	r2, [r3, #0]
	  size_t i = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
	  read=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
	  control=0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]

	  while (i < 32)
 8000b74:	e11c      	b.n	8000db0 <StartTask02+0x26c>
	  {
		  uint8_t ch = rxbuf[i];
 8000b76:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <StartTask02+0x28c>)
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	f200 8110 	bhi.w	8000daa <StartTask02+0x266>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <StartTask02+0x4c>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000bb3 	.word	0x08000bb3
 8000b98:	08000bd9 	.word	0x08000bd9
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000d7d 	.word	0x08000d7d
		  switch (rec_state)
		  {
		  case START:
			  if (ch==0x22)
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b22      	cmp	r3, #34	; 0x22
 8000ba8:	f040 80fe 	bne.w	8000da8 <StartTask02+0x264>
			  {
				  rec_state=CMD;
 8000bac:	2301      	movs	r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
			  }
			  break;
 8000bb0:	e0fa      	b.n	8000da8 <StartTask02+0x264>
		  case CMD:
			  if (ch==0x30)
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	2b30      	cmp	r3, #48	; 0x30
 8000bb6:	d104      	bne.n	8000bc2 <StartTask02+0x7e>
			  {
				  rec_state=ADDRESS;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
				  read=1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000bc0:	e0f3      	b.n	8000daa <StartTask02+0x266>
			  else if (ch==0x66)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	2b66      	cmp	r3, #102	; 0x66
 8000bc6:	d104      	bne.n	8000bd2 <StartTask02+0x8e>
				  rec_state=ADDRESS;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
				  control=1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
			  break;
 8000bd0:	e0eb      	b.n	8000daa <StartTask02+0x266>
				  rec_state=START;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000bd6:	e0e8      	b.n	8000daa <StartTask02+0x266>
		  case ADDRESS:
			  if(ch==0x00)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <StartTask02+0xa6>
			  {
				  rec_state=DATA;
 8000bde:	2303      	movs	r3, #3
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_1=1;
 8000be2:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <StartTask02+0x290>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000be8:	e0df      	b.n	8000daa <StartTask02+0x266>
			  else if (ch==0x01)
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <StartTask02+0xb8>
				  rec_state=DATA;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
				  grating_scale_2=1;
 8000bf4:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <StartTask02+0x294>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
			  break;
 8000bfa:	e0d6      	b.n	8000daa <StartTask02+0x266>
			  else if (ch==0x02)
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d105      	bne.n	8000c0e <StartTask02+0xca>
				  rec_state=DATA;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
				  PGsend=1;
 8000c06:	4b75      	ldr	r3, [pc, #468]	; (8000ddc <StartTask02+0x298>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
			  break;
 8000c0c:	e0cd      	b.n	8000daa <StartTask02+0x266>
			  else if (ch==0x03)
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d105      	bne.n	8000c20 <StartTask02+0xdc>
				  rec_state=DATA;
 8000c14:	2303      	movs	r3, #3
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
				  spin=1;
 8000c18:	4b71      	ldr	r3, [pc, #452]	; (8000de0 <StartTask02+0x29c>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
			  break;
 8000c1e:	e0c4      	b.n	8000daa <StartTask02+0x266>
			  else if (ch==0x04)
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d105      	bne.n	8000c32 <StartTask02+0xee>
				  rec_state=DATA;
 8000c26:	2303      	movs	r3, #3
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
				  solder_push=1;
 8000c2a:	4b6e      	ldr	r3, [pc, #440]	; (8000de4 <StartTask02+0x2a0>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
			  break;
 8000c30:	e0bb      	b.n	8000daa <StartTask02+0x266>
				  rec_state=START;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000c36:	e0b8      	b.n	8000daa <StartTask02+0x266>

		  case DATA:
			  if(grating_scale_1==1)
 8000c38:	4b66      	ldr	r3, [pc, #408]	; (8000dd4 <StartTask02+0x290>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d114      	bne.n	8000c6a <StartTask02+0x126>
			  {
				  opbuff[0]=0x22;
 8000c40:	2322      	movs	r3, #34	; 0x22
 8000c42:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM5->CNT;
 8000c4c:	4b66      	ldr	r3, [pc, #408]	; (8000de8 <StartTask02+0x2a4>)
 8000c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	3303      	adds	r3, #3
 8000c56:	601a      	str	r2, [r3, #0]
//				  opbuff[6]=0xFF;
				  opbuff[7]=0xFF;
 8000c58:	23ff      	movs	r3, #255	; 0xff
 8000c5a:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2108      	movs	r1, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f009 fe8e 	bl	800a984 <CDC_Transmit_FS>
 8000c68:	e085      	b.n	8000d76 <StartTask02+0x232>
			  }
			  else if(grating_scale_2==1)
 8000c6a:	4b5b      	ldr	r3, [pc, #364]	; (8000dd8 <StartTask02+0x294>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d115      	bne.n	8000c9e <StartTask02+0x15a>
			  {
				  opbuff[0]=0x22;
 8000c72:	2322      	movs	r3, #34	; 0x22
 8000c74:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000c76:	2330      	movs	r3, #48	; 0x30
 8000c78:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x01;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM2->CNT;
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	3303      	adds	r3, #3
 8000c8a:	601a      	str	r2, [r3, #0]
//				  opbuff[6]=0xFF;
				  opbuff[7]=0xFF;
 8000c8c:	23ff      	movs	r3, #255	; 0xff
 8000c8e:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2108      	movs	r1, #8
 8000c96:	4618      	mov	r0, r3
 8000c98:	f009 fe74 	bl	800a984 <CDC_Transmit_FS>
 8000c9c:	e06b      	b.n	8000d76 <StartTask02+0x232>
			  }
			  else if(PGsend==1)
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <StartTask02+0x298>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d136      	bne.n	8000d14 <StartTask02+0x1d0>
			  {
				  opbuff[0]=0x22;
 8000ca6:	2322      	movs	r3, #34	; 0x22
 8000ca8:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000caa:	2330      	movs	r3, #48	; 0x30
 8000cac:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x02;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	73bb      	strb	r3, [r7, #14]
				  opbuff[3] =(Xpos<<0)	+	(Xneg<<1)	+	(Ypos<<2)	+	(Yneg<<3)	+ 	(Zpos<<4)	+	(Zneg<<5);
 8000cb2:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <StartTask02+0x2a8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <StartTask02+0x2ac>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <StartTask02+0x2b0>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <StartTask02+0x2b4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <StartTask02+0x2b8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <StartTask02+0x2bc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	015b      	lsls	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	73fb      	strb	r3, [r7, #15]
				  opbuff[4]=0xFF;opbuff[5]=0xFF;opbuff[6]=0xFF;opbuff[7]=0xFF;
 8000cf6:	23ff      	movs	r3, #255	; 0xff
 8000cf8:	743b      	strb	r3, [r7, #16]
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	747b      	strb	r3, [r7, #17]
 8000cfe:	23ff      	movs	r3, #255	; 0xff
 8000d00:	74bb      	strb	r3, [r7, #18]
 8000d02:	23ff      	movs	r3, #255	; 0xff
 8000d04:	74fb      	strb	r3, [r7, #19]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f009 fe39 	bl	800a984 <CDC_Transmit_FS>
 8000d12:	e030      	b.n	8000d76 <StartTask02+0x232>
			  }
			  else if(spin==1)
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <StartTask02+0x29c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d114      	bne.n	8000d46 <StartTask02+0x202>
			  {
				  xPul=10U;
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <StartTask02+0x2c0>)
 8000d1e:	220a      	movs	r2, #10
 8000d20:	601a      	str	r2, [r3, #0]
				  xSpeed = 50U;
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <StartTask02+0x2c4>)
 8000d24:	2232      	movs	r2, #50	; 0x32
 8000d26:	701a      	strb	r2, [r3, #0]
				  spin_length=(rxbuf[i]) + (rxbuf[i+1]<<8);
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <StartTask02+0x28c>)
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d32:	4619      	mov	r1, r3
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <StartTask02+0x28c>)
 8000d3a:	56d3      	ldrsb	r3, [r2, r3]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	440b      	add	r3, r1
 8000d40:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <StartTask02+0x2c8>)
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e017      	b.n	8000d76 <StartTask02+0x232>
			  }
			  else if (solder_push==1)
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <StartTask02+0x2a0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d113      	bne.n	8000d76 <StartTask02+0x232>
			  {
				  yPul=10U;
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <StartTask02+0x2cc>)
 8000d50:	220a      	movs	r2, #10
 8000d52:	601a      	str	r2, [r3, #0]
				  ySpeed = 50U;
 8000d54:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <StartTask02+0x2d0>)
 8000d56:	2232      	movs	r2, #50	; 0x32
 8000d58:	701a      	strb	r2, [r3, #0]
				  push_length=(rxbuf[i]) + (rxbuf[i+1]<<8);
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <StartTask02+0x28c>)
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	4413      	add	r3, r2
 8000d60:	f993 3000 	ldrsb.w	r3, [r3]
 8000d64:	4619      	mov	r1, r3
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <StartTask02+0x28c>)
 8000d6c:	56d3      	ldrsb	r3, [r2, r3]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	440b      	add	r3, r1
 8000d72:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <StartTask02+0x2d4>)
 8000d74:	6013      	str	r3, [r2, #0]
			  }
			  rec_state=CRC8;
 8000d76:	2304      	movs	r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000d7a:	e016      	b.n	8000daa <StartTask02+0x266>
		  case CRC8:
			  grating_scale_1=0;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <StartTask02+0x290>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
			  grating_scale_2=0;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <StartTask02+0x294>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
			  PGsend=0;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <StartTask02+0x298>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
			  read=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
			  control=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
			  spin=0;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <StartTask02+0x29c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
			  solder_push=0;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <StartTask02+0x2a0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]

			  rec_state=START;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000da6:	e000      	b.n	8000daa <StartTask02+0x266>
			  break;
 8000da8:	bf00      	nop
		  }
	  i++;
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	3301      	adds	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
	  while (i < 32)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	2b1f      	cmp	r3, #31
 8000db4:	f67f aedf 	bls.w	8000b76 <StartTask02+0x32>
	  }


    osDelay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f007 f85b 	bl	8007e74 <osDelay>
  {
 8000dbe:	e6c7      	b.n	8000b50 <StartTask02+0xc>
 8000dc0:	20001e5c 	.word	0x20001e5c
 8000dc4:	20001de4 	.word	0x20001de4
 8000dc8:	20001d4c 	.word	0x20001d4c
 8000dcc:	20001e50 	.word	0x20001e50
 8000dd0:	20001cd0 	.word	0x20001cd0
 8000dd4:	200001d4 	.word	0x200001d4
 8000dd8:	200001d8 	.word	0x200001d8
 8000ddc:	20001e58 	.word	0x20001e58
 8000de0:	200001c4 	.word	0x200001c4
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	40000c00 	.word	0x40000c00
 8000dec:	20001de8 	.word	0x20001de8
 8000df0:	20001e4c 	.word	0x20001e4c
 8000df4:	20001d48 	.word	0x20001d48
 8000df8:	20001df0 	.word	0x20001df0
 8000dfc:	20001ea8 	.word	0x20001ea8
 8000e00:	20001cf4 	.word	0x20001cf4
 8000e04:	20001eac 	.word	0x20001eac
 8000e08:	20001eb0 	.word	0x20001eb0
 8000e0c:	200001d0 	.word	0x200001d0
 8000e10:	20001eb4 	.word	0x20001eb4
 8000e14:	20001eb8 	.word	0x20001eb8
 8000e18:	200001cc 	.word	0x200001cc

08000e1c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f007 f825 	bl	8007e74 <osDelay>
 8000e2a:	e7fb      	b.n	8000e24 <StartTask03+0x8>

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	210f      	movs	r1, #15
 8000e72:	f06f 0001 	mvn.w	r0, #1
 8000e76:	f000 fc22 	bl	80016be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <HAL_TIM_Base_MspInit+0x64>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d123      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	2018      	movs	r0, #24
 8000eb8:	f000 fc01 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ebc:	2018      	movs	r0, #24
 8000ebe:	f000 fc1a 	bl	80016f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	2019      	movs	r0, #25
 8000ec8:	f000 fbf9 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f000 fc12 	bl	80016f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	201a      	movs	r0, #26
 8000ed8:	f000 fbf1 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000edc:	201a      	movs	r0, #26
 8000ede:	f000 fc0a 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012c00 	.word	0x40012c00
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b090      	sub	sp, #64	; 0x40
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d14d      	bne.n	8000fb2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a6d      	ldr	r2, [pc, #436]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a67      	ldr	r2, [pc, #412]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a61      	ldr	r2, [pc, #388]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f5e:	2320      	movs	r3, #32
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f000 fbd6 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f80:	2308      	movs	r3, #8
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f90:	2301      	movs	r3, #1
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f98:	4619      	mov	r1, r3
 8000f9a:	484e      	ldr	r0, [pc, #312]	; (80010d4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8000f9c:	f000 fbc6 	bl	800172c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	201c      	movs	r0, #28
 8000fa6:	f000 fb8a 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 fba3 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fb0:	e089      	b.n	80010c6 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d128      	bne.n	800100e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbc:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a3d      	ldr	r2, [pc, #244]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fec:	2318      	movs	r3, #24
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001008:	f000 fb90 	bl	800172c <HAL_GPIO_Init>
}
 800100c:	e05b      	b.n	80010c6 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM5)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d129      	bne.n	800106c <HAL_TIM_Encoder_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001048:	2303      	movs	r3, #3
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001058:	2302      	movs	r3, #2
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fb61 	bl	800172c <HAL_GPIO_Init>
}
 800106a:	e02c      	b.n	80010c6 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM8)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d127      	bne.n	80010c6 <HAL_TIM_Encoder_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800107c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010b6:	2303      	movs	r3, #3
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80010c2:	f000 fb33 	bl	800172c <HAL_GPIO_Init>
}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	; 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	40000400 	.word	0x40000400
 80010dc:	48001000 	.word	0x48001000
 80010e0:	40000c00 	.word	0x40000c00
 80010e4:	40013400 	.word	0x40013400
 80010e8:	48000800 	.word	0x48000800

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f9b0 	bl	8001480 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001120:	f008 fab6 	bl	8009690 <xTaskGetSchedulerState>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800112a:	f009 f89d 	bl	800a268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800113a:	f003 faaf 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20001e00 	.word	0x20001e00

08001148 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800114e:	4847      	ldr	r0, [pc, #284]	; (800126c <TIM1_UP_TIM16_IRQHandler+0x124>)
 8001150:	f003 faa4 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
    static int xcnt = 0;
      static int ycnt = 0;

      if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <TIM1_UP_TIM16_IRQHandler+0x128>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d934      	bls.n	80011c6 <TIM1_UP_TIM16_IRQHandler+0x7e>
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a43      	ldr	r2, [pc, #268]	; (8001270 <TIM1_UP_TIM16_IRQHandler+0x128>)
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	fb93 f1f2 	sdiv	r1, r3, r2
 8001168:	fb02 f201 	mul.w	r2, r2, r1
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d129      	bne.n	80011c6 <TIM1_UP_TIM16_IRQHandler+0x7e>
    	  if(xPul!=0) {
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d025      	beq.n	80011c6 <TIM1_UP_TIM16_IRQHandler+0x7e>
    		  int i=0;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
    	    if(xPul>0) {
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	dd05      	ble.n	8001192 <TIM1_UP_TIM16_IRQHandler+0x4a>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2104      	movs	r1, #4
 800118a:	483c      	ldr	r0, [pc, #240]	; (800127c <TIM1_UP_TIM16_IRQHandler+0x134>)
 800118c:	f000 fc90 	bl	8001ab0 <HAL_GPIO_WritePin>
 8001190:	e008      	b.n	80011a4 <TIM1_UP_TIM16_IRQHandler+0x5c>
           // xPul--;
          }
    	    else if(xPul<0) {
 8001192:	4b39      	ldr	r3, [pc, #228]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x130>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	da04      	bge.n	80011a4 <TIM1_UP_TIM16_IRQHandler+0x5c>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2104      	movs	r1, #4
 800119e:	4837      	ldr	r0, [pc, #220]	; (800127c <TIM1_UP_TIM16_IRQHandler+0x134>)
 80011a0:	f000 fc86 	bl	8001ab0 <HAL_GPIO_WritePin>
           // xPul++;
          }
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
    	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 80011a4:	2104      	movs	r1, #4
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fc99 	bl	8001ae0 <HAL_GPIO_TogglePin>
    	    i++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
    	    if(i>=2*spin_length)
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <TIM1_UP_TIM16_IRQHandler+0x138>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	db02      	blt.n	80011c6 <TIM1_UP_TIM16_IRQHandler+0x7e>
    	    {
    	    	xPul=0;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <TIM1_UP_TIM16_IRQHandler+0x130>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    	  }
    	  else {
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
    	  }
      }
      xcnt++;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <TIM1_UP_TIM16_IRQHandler+0x12c>)
 80011ce:	6013      	str	r3, [r2, #0]
      if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d93f      	bls.n	8001258 <TIM1_UP_TIM16_IRQHandler+0x110>
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x140>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a29      	ldr	r2, [pc, #164]	; (8001284 <TIM1_UP_TIM16_IRQHandler+0x13c>)
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80011e4:	fb02 f201 	mul.w	r2, r2, r1
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d134      	bne.n	8001258 <TIM1_UP_TIM16_IRQHandler+0x110>
     	  if(yPul!=0) {
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d030      	beq.n	8001258 <TIM1_UP_TIM16_IRQHandler+0x110>
     		 int i=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
     	    if(yPul>0) {
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd0b      	ble.n	800121a <TIM1_UP_TIM16_IRQHandler+0xd2>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <TIM1_UP_TIM16_IRQHandler+0x148>)
 800120a:	f000 fc51 	bl	8001ab0 <HAL_GPIO_WritePin>
     	      yPul--;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e00e      	b.n	8001238 <TIM1_UP_TIM16_IRQHandler+0xf0>
     	    }else if(yPul<0) {
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da0a      	bge.n	8001238 <TIM1_UP_TIM16_IRQHandler+0xf0>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	4819      	ldr	r0, [pc, #100]	; (8001290 <TIM1_UP_TIM16_IRQHandler+0x148>)
 800122a:	f000 fc41 	bl	8001ab0 <HAL_GPIO_WritePin>
     	      yPul++;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001236:	6013      	str	r3, [r2, #0]
     	    }
     	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
     		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 8001238:	2101      	movs	r1, #1
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <TIM1_UP_TIM16_IRQHandler+0x14c>)
 800123c:	f000 fc50 	bl	8001ae0 <HAL_GPIO_TogglePin>
     		 i++;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	603b      	str	r3, [r7, #0]
				if(i>=2*push_length)
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <TIM1_UP_TIM16_IRQHandler+0x150>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	db02      	blt.n	8001258 <TIM1_UP_TIM16_IRQHandler+0x110>
				{
					yPul=0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <TIM1_UP_TIM16_IRQHandler+0x144>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
				}
     	  }else {
     	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
     	  }
       }
       ycnt++;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x140>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <TIM1_UP_TIM16_IRQHandler+0x140>)
 8001260:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20001e00 	.word	0x20001e00
 8001270:	20001eb0 	.word	0x20001eb0
 8001274:	200001dc 	.word	0x200001dc
 8001278:	20001eac 	.word	0x20001eac
 800127c:	48000400 	.word	0x48000400
 8001280:	200001d0 	.word	0x200001d0
 8001284:	20001eb8 	.word	0x20001eb8
 8001288:	200001e0 	.word	0x200001e0
 800128c:	20001eb4 	.word	0x20001eb4
 8001290:	48001000 	.word	0x48001000
 8001294:	48000c00 	.word	0x48000c00
 8001298:	200001cc 	.word	0x200001cc

0800129c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012a2:	f003 f9fb 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20001e00 	.word	0x20001e00

080012b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM2_IRQHandler+0x10>)
 80012b6:	f003 f9f1 	bl	800469c <HAL_TIM_IRQHandler>
//   	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
//   	  }
//     }
//     ycnt++;
  /* USER CODE END TIM2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20001e5c 	.word	0x20001e5c

080012c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012cc:	f000 fc22 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d4:	f000 fc1e 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80012d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012dc:	f000 fc1a 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012e4:	f000 fc16 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012ec:	f000 fc12 	bl	8001b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <OTG_FS_IRQHandler+0x10>)
 80012fa:	f000 fd96 	bl	8001e2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200033d0 	.word	0x200033d0

08001308 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <SystemInit+0x5c>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <SystemInit+0x5c>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <SystemInit+0x60>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <SystemInit+0x60>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <SystemInit+0x60>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <SystemInit+0x60>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <SystemInit+0x60>)
 800134c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001350:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001354:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <SystemInit+0x60>)
 8001358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <SystemInit+0x60>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <SystemInit+0x60>)
 8001364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SystemInit+0x60>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	40021000 	.word	0x40021000

08001384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001388:	f7ff ffca 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800138c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800138e:	e003      	b.n	8001398 <LoopCopyDataInit>

08001390 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001392:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001394:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001396:	3104      	adds	r1, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800139c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800139e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013a0:	d3f6      	bcc.n	8001390 <CopyDataInit>
	ldr	r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80013a4:	e002      	b.n	80013ac <LoopFillZerobss>

080013a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013a8:	f842 3b04 	str.w	r3, [r2], #4

080013ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013b0:	d3f9      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f00a f859 	bl	800b468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b6:	f7fe ff0b 	bl	80001d0 <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013c0:	0800b62c 	.word	0x0800b62c
	ldr	r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013c8:	200001a0 	.word	0x200001a0
	ldr	r2, =_sbss
 80013cc:	200001a0 	.word	0x200001a0
	ldr	r3, = _ebss
 80013d0:	200037d8 	.word	0x200037d8

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>

080013d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f961 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f80e 	bl	8001408 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e001      	b.n	80013fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f8:	f7ff fd1e 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_InitTick+0x6c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d023      	beq.n	8001464 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_InitTick+0x70>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_InitTick+0x6c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f96d 	bl	8001712 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d809      	bhi.n	8001458 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f937 	bl	80016be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_InitTick+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e007      	b.n	8001468 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e004      	b.n	8001468 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	e001      	b.n	8001468 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000000c 	.word	0x2000000c
 8001478:	20000004 	.word	0x20000004
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20001ebc 	.word	0x20001ebc

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20001ebc 	.word	0x20001ebc

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000000c 	.word	0x2000000c

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff3e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff31 	bl	800156c <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e17f      	b.n	8001a3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8171 	beq.w	8001a36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d00b      	beq.n	8001774 <HAL_GPIO_Init+0x48>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	2b11      	cmp	r3, #17
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d118      	bne.n	8001814 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x128>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b12      	cmp	r3, #18
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	6939      	ldr	r1, [r7, #16]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80ac 	beq.w	8001a36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_GPIO_Init+0x330>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f6:	4a5a      	ldr	r2, [pc, #360]	; (8001a60 <HAL_GPIO_Init+0x334>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x242>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x338>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x23e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x33c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x23a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x340>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x236>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x344>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x232>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x348>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x22e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x34c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x22a>
 8001952:	2306      	movs	r3, #6
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001956:	2307      	movs	r3, #7
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x244>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x244>
 800196e:	2300      	movs	r3, #0
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <HAL_GPIO_Init+0x334>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x350>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <HAL_GPIO_Init+0x350>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f47f ae78 	bne.w	800173c <HAL_GPIO_Init+0x10>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	48000800 	.word	0x48000800
 8001a6c:	48000c00 	.word	0x48000c00
 8001a70:	48001000 	.word	0x48001000
 8001a74:	48001400 	.word	0x48001400
 8001a78:	48001800 	.word	0x48001800
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	041a      	lsls	r2, r3, #16
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43d9      	mvns	r1, r3
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	400b      	ands	r3, r1
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fbe8 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6613      	str	r3, [r2, #96]	; 0x60
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4905      	ldr	r1, [pc, #20]	; (8001b80 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000

08001b84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b08f      	sub	sp, #60	; 0x3c
 8001b88:	af0a      	add	r7, sp, #40	; 0x28
 8001b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e116      	b.n	8001dc4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f009 f841 	bl	800ac38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fa48 	bl	800506a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	687e      	ldr	r6, [r7, #4]
 8001be2:	466d      	mov	r5, sp
 8001be4:	f106 0410 	add.w	r4, r6, #16
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf8:	1d33      	adds	r3, r6, #4
 8001bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f003 f95b 	bl	8004eb8 <USB_CoreInit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d7      	b.n	8001dc4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fa36 	bl	800508c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e04a      	b.n	8001cbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	333d      	adds	r3, #61	; 0x3d
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	333c      	adds	r3, #60	; 0x3c
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	b298      	uxth	r0, r3
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	3342      	adds	r3, #66	; 0x42
 8001c62:	4602      	mov	r2, r0
 8001c64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	333f      	adds	r3, #63	; 0x3f
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	3344      	adds	r3, #68	; 0x44
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3348      	adds	r3, #72	; 0x48
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3350      	adds	r3, #80	; 0x50
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3af      	bcc.n	8001c26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e044      	b.n	8001d56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3301      	adds	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3b5      	bcc.n	8001ccc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	687e      	ldr	r6, [r7, #4]
 8001d68:	466d      	mov	r5, sp
 8001d6a:	f106 0410 	add.w	r4, r6, #16
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7e:	1d33      	adds	r3, r6, #4
 8001d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f003 f9ac 	bl	80050e0 <USB_DevInit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e014      	b.n	8001dc4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 ff62 	bl	8002c7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 f92e 	bl	800601e <USB_DevDisconnect>

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_Start+0x1c>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e01c      	b.n	8001e22 <HAL_PCD_Start+0x56>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f91d 	bl	8005048 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 f8e2 	bl	8005fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e2a:	b590      	push	{r4, r7, lr}
 8001e2c:	b08d      	sub	sp, #52	; 0x34
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 f9a0 	bl	8006186 <USB_GetMode>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 838f 	bne.w	800256c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 f904 	bl	8006060 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8385 	beq.w	800256a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 f8fb 	bl	8006060 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f002 0202 	and.w	r2, r2, #2
 8001e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 f8e9 	bl	8006060 <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d161      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0210 	bic.w	r2, r2, #16
 8001ea6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	0c5b      	lsrs	r3, r3, #17
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d124      	bne.n	8001f1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d035      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a38      	ldr	r0, [r7, #32]
 8001ef4:	f003 ff4f 	bl	8005d96 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f04:	441a      	add	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	441a      	add	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	e016      	b.n	8001f4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	0c5b      	lsrs	r3, r3, #17
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d110      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f30:	2208      	movs	r2, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	6a38      	ldr	r0, [r7, #32]
 8001f36:	f003 ff2e 	bl	8005d96 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f46:	441a      	add	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0210 	orr.w	r2, r2, #16
 8001f5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 f87d 	bl	8006060 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f70:	d16e      	bne.n	8002050 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f883 	bl	8006086 <USB_ReadDevAllOutEpInterrupt>
 8001f80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f82:	e062      	b.n	800204a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d057      	beq.n	800203e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 f8a8 	bl	80060ee <USB_ReadDevOutEPInterrupt>
 8001f9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fd82 	bl	8002ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2308      	movs	r3, #8
 8001fde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fdbe 	bl	8002b64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2310      	movs	r3, #16
 8002002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201a:	461a      	mov	r2, r3
 800201c:	2320      	movs	r3, #32
 800201e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d199      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 f803 	bl	8006060 <USB_ReadInterrupts>
 800205a:	4603      	mov	r3, r0
 800205c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002064:	f040 8087 	bne.w	8002176 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f004 f824 	bl	80060ba <USB_ReadDevAllInEpInterrupt>
 8002072:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002078:	e07a      	b.n	8002170 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d06f      	beq.n	8002164 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f004 f84b 	bl	800612a <USB_ReadDevInEPInterrupt>
 8002094:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	2201      	movs	r2, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69f9      	ldr	r1, [r7, #28]
 80020bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c0:	4013      	ands	r3, r2
 80020c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	461a      	mov	r2, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f008 fe3e 	bl	800ad5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f8:	461a      	mov	r2, r3
 80020fa:	2308      	movs	r3, #8
 80020fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002114:	461a      	mov	r2, r3
 8002116:	2310      	movs	r3, #16
 8002118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002130:	461a      	mov	r2, r3
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214c:	461a      	mov	r2, r3
 800214e:	2302      	movs	r3, #2
 8002150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fc29 	bl	80029b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	d181      	bne.n	800207a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 ff70 	bl	8006060 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800218a:	d122      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021b2:	2100      	movs	r1, #0
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f009 f8eb 	bl	800b390 <HAL_PCDEx_LPM_Callback>
 80021ba:	e002      	b.n	80021c2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f008 fe3b 	bl	800ae38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 ff42 	bl	8006060 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e6:	d112      	bne.n	800220e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f008 fdf7 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800220c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 ff24 	bl	8006060 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002222:	d121      	bne.n	8002268 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002232:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d111      	bne.n	8002262 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	f003 020f 	and.w	r2, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002258:	2101      	movs	r1, #1
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f009 f898 	bl	800b390 <HAL_PCDEx_LPM_Callback>
 8002260:	e002      	b.n	8002268 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f008 fdc2 	bl	800adec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fef7 	bl	8006060 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227c:	f040 80c5 	bne.w	800240a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2110      	movs	r1, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f86c 	bl	8005378 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	e056      	b.n	8002354 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b2:	461a      	mov	r2, r3
 80022b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ca:	0151      	lsls	r1, r2, #5
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	440a      	add	r2, r1
 80022d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ea:	0151      	lsls	r1, r2, #5
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	440a      	add	r2, r1
 80022f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	461a      	mov	r2, r3
 8002308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800230c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231e:	0151      	lsls	r1, r2, #5
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	440a      	add	r2, r1
 8002324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800232c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	440a      	add	r2, r1
 8002344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800234c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	3301      	adds	r3, #1
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235a:	429a      	cmp	r2, r3
 800235c:	d3a3      	bcc.n	80022a6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002370:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238a:	f043 030b 	orr.w	r3, r3, #11
 800238e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f043 030b 	orr.w	r3, r3, #11
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	e015      	b.n	80023d4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ce:	f043 030b 	orr.w	r3, r3, #11
 80023d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f003 fef7 	bl	80061e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fe26 	bl	8006060 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241e:	d124      	bne.n	800246a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f003 febc 	bl	80061a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f803 	bl	800543a <USB_GetDevSpeed>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681c      	ldr	r4, [r3, #0]
 8002440:	f001 fa08 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8002444:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4620      	mov	r0, r4
 8002450:	f002 fd5e 	bl	8004f10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f008 fcaa 	bl	800adae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fdf6 	bl	8006060 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b08      	cmp	r3, #8
 800247c:	d10a      	bne.n	8002494 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f008 fc87 	bl	800ad92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f002 0208 	and.w	r2, r2, #8
 8002492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f003 fde1 	bl	8006060 <USB_ReadInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a8:	d10f      	bne.n	80024ca <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f008 fcf9 	bl	800aeac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fdc6 	bl	8006060 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024de:	d10f      	bne.n	8002500 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f008 fccc 	bl	800ae88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fdab 	bl	8006060 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d10a      	bne.n	800252c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f008 fcda 	bl	800aed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800252a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fd95 	bl	8006060 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d115      	bne.n	800256c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f008 fcca 	bl	800aeec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	e000      	b.n	800256c <HAL_PCD_IRQHandler+0x742>
      return;
 800256a:	bf00      	nop
    }
  }
}
 800256c:	3734      	adds	r7, #52	; 0x34
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}

08002572 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_SetAddress+0x1a>
 8002588:	2302      	movs	r3, #2
 800258a:	e013      	b.n	80025b4 <HAL_PCD_SetAddress+0x42>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f003 fcf3 	bl	8005f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	70fb      	strb	r3, [r7, #3]
 80025ce:	460b      	mov	r3, r1
 80025d0:	803b      	strh	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da0f      	bge.n	8002602 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3338      	adds	r3, #56	; 0x38
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	705a      	strb	r2, [r3, #1]
 8002600:	e00f      	b.n	8002622 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800262e:	883a      	ldrh	r2, [r7, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	78ba      	ldrb	r2, [r7, #2]
 8002638:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	785b      	ldrb	r3, [r3, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800264c:	78bb      	ldrb	r3, [r7, #2]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d102      	bne.n	8002658 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_PCD_EP_Open+0xaa>
 8002662:	2302      	movs	r3, #2
 8002664:	e00e      	b.n	8002684 <HAL_PCD_EP_Open+0xc8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	4618      	mov	r0, r3
 8002676:	f002 feff 	bl	8005478 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002682:	7afb      	ldrb	r3, [r7, #11]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269c:	2b00      	cmp	r3, #0
 800269e:	da0f      	bge.n	80026c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	3338      	adds	r3, #56	; 0x38
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	705a      	strb	r2, [r3, #1]
 80026be:	e00f      	b.n	80026e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_PCD_EP_Close+0x6e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e00e      	b.n	8002718 <HAL_PCD_EP_Close+0x8c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68f9      	ldr	r1, [r7, #12]
 8002708:	4618      	mov	r0, r3
 800270a:	f002 ff3d 	bl	8005588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	460b      	mov	r3, r1
 800272e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2200      	movs	r2, #0
 8002760:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	b2da      	uxtb	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6979      	ldr	r1, [r7, #20]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 f9ba 	bl	8005af8 <USB_EP0StartXfer>
 8002784:	e005      	b.n	8002792 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6979      	ldr	r1, [r7, #20]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 ffd7 	bl	8005740 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 020f 	and.w	r2, r3, #15
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	460b      	mov	r3, r1
 80027da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002818:	7afb      	ldrb	r3, [r7, #11]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6979      	ldr	r1, [r7, #20]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 f965 	bl	8005af8 <USB_EP0StartXfer>
 800282e:	e005      	b.n	800283c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6979      	ldr	r1, [r7, #20]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 ff82 	bl	8005740 <USB_EPStartXfer>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d901      	bls.n	8002864 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e04e      	b.n	8002902 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da0f      	bge.n	800288c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	3338      	adds	r3, #56	; 0x38
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	705a      	strb	r2, [r3, #1]
 800288a:	e00d      	b.n	80028a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_PCD_EP_SetStall+0x82>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e01c      	b.n	8002902 <HAL_PCD_EP_SetStall+0xbc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fa86 	bl	8005de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f003 fc78 	bl	80061e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 020f 	and.w	r2, r3, #15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d901      	bls.n	8002928 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e042      	b.n	80029ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da0f      	bge.n	8002950 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	705a      	strb	r2, [r3, #1]
 800294e:	e00f      	b.n	8002970 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 020f 	and.w	r2, r3, #15
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_PCD_EP_ClrStall+0x86>
 800298c:	2302      	movs	r3, #2
 800298e:	e00e      	b.n	80029ae <HAL_PCD_EP_ClrStall+0xa4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68f9      	ldr	r1, [r7, #12]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fa90 	bl	8005ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d901      	bls.n	80029ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e067      	b.n	8002abe <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d902      	bls.n	8002a0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a12:	e026      	b.n	8002a62 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d902      	bls.n	8002a30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3303      	adds	r3, #3
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68d9      	ldr	r1, [r3, #12]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	6978      	ldr	r0, [r7, #20]
 8002a46:	f003 f975 	bl	8005d34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	441a      	add	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d809      	bhi.n	8002a8c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d203      	bcs.n	8002a8c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1c3      	bne.n	8002a14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d811      	bhi.n	8002abc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ab8:	4013      	ands	r3, r2
 8002aba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	333c      	adds	r3, #60	; 0x3c
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <PCD_EP_OutXfrComplete_int+0x98>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d124      	bne.n	8002b48 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1a:	6093      	str	r3, [r2, #8]
 8002b1c:	e01a      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b34:	461a      	mov	r2, r3
 8002b36:	2320      	movs	r3, #32
 8002b38:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f008 f8f1 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
 8002b46:	e005      	b.n	8002b54 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f008 f8ea 	bl	800ad28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	4f54310a 	.word	0x4f54310a

08002b64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	333c      	adds	r3, #60	; 0x3c
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d90e      	bls.n	8002bb8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f008 f8a3 	bl	800ad04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	4f54300a 	.word	0x4f54300a

08002bcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bea:	883b      	ldrh	r3, [r7, #0]
 8002bec:	0419      	lsls	r1, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf8:	e028      	b.n	8002c4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4413      	add	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e00d      	b.n	8002c2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3340      	adds	r3, #64	; 0x40
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3ec      	bcc.n	8002c0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c34:	883b      	ldrh	r3, [r7, #0]
 8002c36:	0418      	lsls	r0, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4302      	orrs	r2, r0
 8002c44:	3340      	adds	r3, #64	; 0x40
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	f043 0303 	orr.w	r3, r3, #3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cee:	d130      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d038      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2232      	movs	r2, #50	; 0x32
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	e002      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d38:	d102      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f2      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d110      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d007      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000
 8002d84:	20000004 	.word	0x20000004
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9a:	6053      	str	r3, [r2, #4]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40007000 	.word	0x40007000

08002dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e3d4      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	4ba1      	ldr	r3, [pc, #644]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc8:	4b9e      	ldr	r3, [pc, #632]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80e4 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <HAL_RCC_OscConfig+0x4a>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b0c      	cmp	r3, #12
 8002dea:	f040 808b 	bne.w	8002f04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 8087 	bne.w	8002f04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df6:	4b93      	ldr	r3, [pc, #588]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x62>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e3ac      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_RCC_OscConfig+0x7c>
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e26:	e005      	b.n	8002e34 <HAL_RCC_OscConfig+0x88>
 8002e28:	4b86      	ldr	r3, [pc, #536]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d223      	bcs.n	8002e80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fd15 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e38d      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4c:	4b7d      	ldr	r3, [pc, #500]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7c      	ldr	r2, [pc, #496]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e52:	f043 0308 	orr.w	r3, r3, #8
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4977      	ldr	r1, [pc, #476]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	4972      	ldr	r1, [pc, #456]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
 8002e7e:	e025      	b.n	8002ecc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e80:	4b70      	ldr	r3, [pc, #448]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6f      	ldr	r2, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	496a      	ldr	r1, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9e:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4965      	ldr	r1, [pc, #404]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fcd5 	bl	800386c <RCC_SetFlashLatencyFromMSIRange>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e34d      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ecc:	f000 fc36 	bl	800373c <HAL_RCC_GetSysClockFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	495a      	ldr	r1, [pc, #360]	; (8003048 <HAL_RCC_OscConfig+0x29c>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_OscConfig+0x2a0>)
 8002eea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <HAL_RCC_OscConfig+0x2a4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fa89 	bl	8001408 <HAL_InitTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d052      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	e331      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d032      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fac6 	bl	80014a8 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f20:	f7fe fac2 	bl	80014a8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e31a      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f3e:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a40      	ldr	r2, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	493b      	ldr	r1, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f5c:	4b39      	ldr	r3, [pc, #228]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4936      	ldr	r1, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e01a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fa93 	bl	80014a8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f86:	f7fe fa8f 	bl	80014a8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e2e7      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1da>
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d074      	beq.n	800309e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x21a>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d10e      	bne.n	8002fde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d10b      	bne.n	8002fde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d064      	beq.n	800309c <HAL_RCC_OscConfig+0x2f0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d160      	bne.n	800309c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e2c4      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x24a>
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e01d      	b.n	8003032 <HAL_RCC_OscConfig+0x286>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x26e>
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8003006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e00b      	b.n	8003032 <HAL_RCC_OscConfig+0x286>
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a06      	ldr	r2, [pc, #24]	; (8003044 <HAL_RCC_OscConfig+0x298>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01c      	beq.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fa35 	bl	80014a8 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003040:	e011      	b.n	8003066 <HAL_RCC_OscConfig+0x2ba>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	0800b5e4 	.word	0x0800b5e4
 800304c:	20000004 	.word	0x20000004
 8003050:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fa28 	bl	80014a8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e280      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4baf      	ldr	r3, [pc, #700]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x2a8>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fa18 	bl	80014a8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fa14 	bl	80014a8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e26c      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	4ba5      	ldr	r3, [pc, #660]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x2d0>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d060      	beq.n	800316c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x310>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d119      	bne.n	80030ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d116      	bne.n	80030ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	4b99      	ldr	r3, [pc, #612]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x328>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e249      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b93      	ldr	r3, [pc, #588]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	4990      	ldr	r1, [pc, #576]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	e040      	b.n	800316c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d023      	beq.n	800313a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f2:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a8b      	ldr	r2, [pc, #556]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fe f9d3 	bl	80014a8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe f9cf 	bl	80014a8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e227      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003118:	4b82      	ldr	r3, [pc, #520]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	497c      	ldr	r1, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	e018      	b.n	800316c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a79      	ldr	r2, [pc, #484]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe f9af 	bl	80014a8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314e:	f7fe f9ab 	bl	80014a8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e203      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01c      	beq.n	80031ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	4a67      	ldr	r2, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe f98a 	bl	80014a8 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fe f986 	bl	80014a8 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1de      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <HAL_RCC_OscConfig+0x3ec>
 80031b8:	e01b      	b.n	80031f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c0:	4a58      	ldr	r2, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fe f96d 	bl	80014a8 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe f969 	bl	80014a8 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1c1      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ef      	bne.n	80031d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a6 	beq.w	800334c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b44      	ldr	r3, [pc, #272]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	4a43      	ldr	r2, [pc, #268]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCC_OscConfig+0x57c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003238:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x57c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <HAL_RCC_OscConfig+0x57c>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003244:	f7fe f930 	bl	80014a8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fe f92c 	bl	80014a8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e184      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_RCC_OscConfig+0x57c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_RCC_OscConfig+0x4d8>
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003282:	e024      	b.n	80032ce <HAL_RCC_OscConfig+0x522>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d110      	bne.n	80032ae <HAL_RCC_OscConfig+0x502>
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ac:	e00f      	b.n	80032ce <HAL_RCC_OscConfig+0x522>
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe f8e7 	bl	80014a8 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f8e3 	bl	80014a8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e139      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ed      	beq.n	80032de <HAL_RCC_OscConfig+0x532>
 8003302:	e01a      	b.n	800333a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe f8d0 	bl	80014a8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330a:	e00f      	b.n	800332c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe f8cc 	bl	80014a8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d906      	bls.n	800332c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e122      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332c:	4b90      	ldr	r3, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e8      	bne.n	800330c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8108 	beq.w	8003566 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 80d0 	bne.w	8003500 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003360:	4b83      	ldr	r3, [pc, #524]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	429a      	cmp	r2, r3
 8003372:	d130      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	3b01      	subs	r3, #1
 8003380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d127      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d11f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a0:	2a07      	cmp	r2, #7
 80033a2:	bf14      	ite	ne
 80033a4:	2201      	movne	r2, #1
 80033a6:	2200      	moveq	r2, #0
 80033a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d06e      	beq.n	80034b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d069      	beq.n	80034b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b7      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f8:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003404:	f7fe f850 	bl	80014a8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe f84c 	bl	80014a8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0a4      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341e:	4b54      	ldr	r3, [pc, #336]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_RCC_OscConfig+0x7c8>)
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800343a:	3a01      	subs	r2, #1
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003444:	0212      	lsls	r2, r2, #8
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800344c:	0852      	lsrs	r2, r2, #1
 800344e:	3a01      	subs	r2, #1
 8003450:	0552      	lsls	r2, r2, #21
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003458:	0852      	lsrs	r2, r2, #1
 800345a:	3a01      	subs	r2, #1
 800345c:	0652      	lsls	r2, r2, #25
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003464:	0912      	lsrs	r2, r2, #4
 8003466:	0452      	lsls	r2, r2, #17
 8003468:	430a      	orrs	r2, r1
 800346a:	4941      	ldr	r1, [pc, #260]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003470:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a3e      	ldr	r2, [pc, #248]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800347c:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003488:	f7fe f80e 	bl	80014a8 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe f80a 	bl	80014a8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e062      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ae:	e05a      	b.n	8003566 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e059      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d152      	bne.n	8003566 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c0:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034cc:	4b28      	ldr	r3, [pc, #160]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d8:	f7fd ffe6 	bl	80014a8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd ffe2 	bl	80014a8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e03a      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x734>
 80034fe:	e032      	b.n	8003566 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d02d      	beq.n	8003562 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800350c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003510:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003524:	f023 0303 	bic.w	r3, r3, #3
 8003528:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a10      	ldr	r2, [pc, #64]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003530:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003538:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd ffb5 	bl	80014a8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd ffb1 	bl	80014a8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e009      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x7c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x796>
 8003560:	e001      	b.n	8003566 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	f99d808c 	.word	0xf99d808c

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0c8      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4961      	ldr	r1, [pc, #388]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b0      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d04c      	beq.n	8003662 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d0:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d121      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e09e      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d115      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e092      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003600:	4b4a      	ldr	r3, [pc, #296]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e086      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e07e      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	493f      	ldr	r1, [pc, #252]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fd ff39 	bl	80014a8 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	e00a      	b.n	8003650 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fd ff35 	bl	80014a8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e066      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 020c 	and.w	r2, r3, #12
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	429a      	cmp	r2, r3
 8003660:	d1eb      	bne.n	800363a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	492c      	ldr	r1, [pc, #176]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d210      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4924      	ldr	r1, [pc, #144]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_ClockConfig+0x1b0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e036      	b.n	800371e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4918      	ldr	r1, [pc, #96]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4910      	ldr	r1, [pc, #64]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ee:	f000 f825 	bl	800373c <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490c      	ldr	r1, [pc, #48]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fe78 	bl	8001408 <HAL_InitTick>
 8003718:	4603      	mov	r3, r0
 800371a:	72fb      	strb	r3, [r7, #11]

  return status;
 800371c:	7afb      	ldrb	r3, [r7, #11]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40022000 	.word	0x40022000
 800372c:	40021000 	.word	0x40021000
 8003730:	0800b5e4 	.word	0x0800b5e4
 8003734:	20000004 	.word	0x20000004
 8003738:	20000008 	.word	0x20000008

0800373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0x34>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d121      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d11e      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e005      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_RCC_GetSysClockFreq+0x10c>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_GetSysClockFreq+0x110>)
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e004      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c0:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_RCC_GetSysClockFreq+0x114>)
 80037c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d134      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d003      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0xac>
 80037e0:	e005      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCC_GetSysClockFreq+0x110>)
 80037e4:	617b      	str	r3, [r7, #20]
      break;
 80037e6:	e005      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ea:	617b      	str	r3, [r7, #20]
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	3301      	adds	r3, #1
 8003800:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	fb02 f203 	mul.w	r2, r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	0e5b      	lsrs	r3, r3, #25
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	3301      	adds	r3, #1
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003834:	69bb      	ldr	r3, [r7, #24]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	0800b5f4 	.word	0x0800b5f4
 800384c:	00f42400 	.word	0x00f42400
 8003850:	007a1200 	.word	0x007a1200

08003854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000004 	.word	0x20000004

0800386c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003884:	f7ff fa1e 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003888:	6178      	str	r0, [r7, #20]
 800388a:	e014      	b.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	6593      	str	r3, [r2, #88]	; 0x58
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038a4:	f7ff fa0e 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 80038a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038bc:	d10b      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d919      	bls.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2ba0      	cmp	r3, #160	; 0xa0
 80038c8:	d902      	bls.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038ca:	2302      	movs	r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e013      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d0:	2301      	movs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e010      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d902      	bls.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038dc:	2303      	movs	r3, #3
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e00a      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d102      	bne.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038e8:	2302      	movs	r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e004      	b.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b70      	cmp	r3, #112	; 0x70
 80038f2:	d101      	bne.n	80038f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f4:	2301      	movs	r3, #1
 80038f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 0207 	bic.w	r2, r3, #7
 8003900:	4909      	ldr	r1, [pc, #36]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	40022000 	.word	0x40022000

0800392c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003934:	2300      	movs	r3, #0
 8003936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003938:	2300      	movs	r3, #0
 800393a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003944:	2b00      	cmp	r3, #0
 8003946:	d041      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003950:	d02a      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003956:	d824      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800395e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003962:	d81e      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396c:	d010      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800396e:	e018      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a85      	ldr	r2, [pc, #532]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397c:	e015      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fabb 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800398e:	e00c      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3320      	adds	r3, #32
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fba6 	bl	80040e8 <RCCEx_PLLSAI2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	74fb      	strb	r3, [r7, #19]
      break;
 80039a6:	e000      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039b0:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039be:	4973      	ldr	r1, [pc, #460]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039c6:	e001      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d041      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e0:	d02a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e6:	d824      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039f2:	d81e      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039fc:	d010      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039fe:	e018      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a00:	4b62      	ldr	r3, [pc, #392]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a61      	ldr	r2, [pc, #388]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fa73 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3320      	adds	r3, #32
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fb5e 	bl	80040e8 <RCCEx_PLLSAI2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	74fb      	strb	r3, [r7, #19]
      break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a40:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4e:	494f      	ldr	r1, [pc, #316]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a56:	e001      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a90:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aac:	f7fd fcfc 	bl	80014a8 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7fd fcf8 	bl	80014a8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ac8:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d15c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ada:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d019      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fcb7 	bl	80014a8 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3c:	e00b      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fcb3 	bl	80014a8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	74fb      	strb	r3, [r7, #19]
            break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ec      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7a:	4904      	ldr	r1, [pc, #16]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b82:	e009      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	74bb      	strb	r3, [r7, #18]
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b98:	7c7b      	ldrb	r3, [r7, #17]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b9e      	ldr	r3, [pc, #632]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	4a9d      	ldr	r2, [pc, #628]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb6:	4b98      	ldr	r3, [pc, #608]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 0203 	bic.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	4994      	ldr	r1, [pc, #592]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd8:	4b8f      	ldr	r3, [pc, #572]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 020c 	bic.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	498c      	ldr	r1, [pc, #560]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bfa:	4b87      	ldr	r3, [pc, #540]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4983      	ldr	r1, [pc, #524]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	497b      	ldr	r1, [pc, #492]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	4972      	ldr	r1, [pc, #456]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c60:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	496a      	ldr	r1, [pc, #424]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c82:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	4961      	ldr	r1, [pc, #388]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ca4:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	4959      	ldr	r1, [pc, #356]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cc6:	4b54      	ldr	r3, [pc, #336]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	4950      	ldr	r1, [pc, #320]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf6:	4948      	ldr	r1, [pc, #288]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	493f      	ldr	r1, [pc, #252]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d028      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3a:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4c:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a31      	ldr	r2, [pc, #196]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d56:	60d3      	str	r3, [r2, #12]
 8003d58:	e011      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f8c8 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d028      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d8a:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	491f      	ldr	r1, [pc, #124]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db4:	60d3      	str	r3, [r2, #12]
 8003db6:	e011      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f899 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02b      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4908      	ldr	r1, [pc, #32]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e06:	d109      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a02      	ldr	r2, [pc, #8]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e12:	60d3      	str	r3, [r2, #12]
 8003e14:	e014      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f867 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d02f      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5a:	4928      	ldr	r1, [pc, #160]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6a:	d10d      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f844 	bl	8003f00 <RCCEx_PLLSAI1_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	74bb      	strb	r3, [r7, #18]
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3320      	adds	r3, #32
 8003e96:	2102      	movs	r1, #2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f925 	bl	80040e8 <RCCEx_PLLSAI2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec6:	490d      	ldr	r1, [pc, #52]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eea:	4904      	ldr	r1, [pc, #16]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ef2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000

08003f00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0e:	4b75      	ldr	r3, [pc, #468]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f1a:	4b72      	ldr	r3, [pc, #456]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0203 	and.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d10d      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f32:	4b6c      	ldr	r3, [pc, #432]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
       ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d047      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e044      	b.n	8003fd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d018      	beq.n	8003f86 <RCCEx_PLLSAI1_Config+0x86>
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d825      	bhi.n	8003fa4 <RCCEx_PLLSAI1_Config+0xa4>
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d002      	beq.n	8003f62 <RCCEx_PLLSAI1_Config+0x62>
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d009      	beq.n	8003f74 <RCCEx_PLLSAI1_Config+0x74>
 8003f60:	e020      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f62:	4b60      	ldr	r3, [pc, #384]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d11d      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f72:	e01a      	b.n	8003faa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f74:	4b5b      	ldr	r3, [pc, #364]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d116      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f84:	e013      	b.n	8003fae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f92:	4b54      	ldr	r3, [pc, #336]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fa2:	e006      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e004      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fba:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	4944      	ldr	r1, [pc, #272]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d17d      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fdc:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fa5e 	bl	80014a8 <HAL_GetTick>
 8003fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fee:	e009      	b.n	8004004 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ff0:	f7fd fa5a 	bl	80014a8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d902      	bls.n	8004004 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	73fb      	strb	r3, [r7, #15]
        break;
 8004002:	e005      	b.n	8004010 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004004:	4b37      	ldr	r3, [pc, #220]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ef      	bne.n	8003ff0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d160      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d111      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800401c:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6892      	ldr	r2, [r2, #8]
 800402c:	0211      	lsls	r1, r2, #8
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68d2      	ldr	r2, [r2, #12]
 8004032:	0912      	lsrs	r2, r2, #4
 8004034:	0452      	lsls	r2, r2, #17
 8004036:	430a      	orrs	r2, r1
 8004038:	492a      	ldr	r1, [pc, #168]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	610b      	str	r3, [r1, #16]
 800403e:	e027      	b.n	8004090 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d112      	bne.n	800406c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800404e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	0211      	lsls	r1, r2, #8
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6912      	ldr	r2, [r2, #16]
 800405c:	0852      	lsrs	r2, r2, #1
 800405e:	3a01      	subs	r2, #1
 8004060:	0552      	lsls	r2, r2, #21
 8004062:	430a      	orrs	r2, r1
 8004064:	491f      	ldr	r1, [pc, #124]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
 800406a:	e011      	b.n	8004090 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6892      	ldr	r2, [r2, #8]
 800407c:	0211      	lsls	r1, r2, #8
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6952      	ldr	r2, [r2, #20]
 8004082:	0852      	lsrs	r2, r2, #1
 8004084:	3a01      	subs	r2, #1
 8004086:	0652      	lsls	r2, r2, #25
 8004088:	430a      	orrs	r2, r1
 800408a:	4916      	ldr	r1, [pc, #88]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004090:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004096:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800409a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fd fa04 	bl	80014a8 <HAL_GetTick>
 80040a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a2:	e009      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040a4:	f7fd fa00 	bl	80014a8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d902      	bls.n	80040b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	73fb      	strb	r3, [r7, #15]
          break;
 80040b6:	e005      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0ef      	beq.n	80040a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	4904      	ldr	r1, [pc, #16]	; (80040e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000

080040e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040f6:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004102:	4b67      	ldr	r3, [pc, #412]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0203 	and.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d10d      	bne.n	800412e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
       ||
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800411a:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
       ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d047      	beq.n	80041be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e044      	b.n	80041be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d018      	beq.n	800416e <RCCEx_PLLSAI2_Config+0x86>
 800413c:	2b03      	cmp	r3, #3
 800413e:	d825      	bhi.n	800418c <RCCEx_PLLSAI2_Config+0xa4>
 8004140:	2b01      	cmp	r3, #1
 8004142:	d002      	beq.n	800414a <RCCEx_PLLSAI2_Config+0x62>
 8004144:	2b02      	cmp	r3, #2
 8004146:	d009      	beq.n	800415c <RCCEx_PLLSAI2_Config+0x74>
 8004148:	e020      	b.n	800418c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414a:	4b55      	ldr	r3, [pc, #340]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11d      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415a:	e01a      	b.n	8004192 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416c:	e013      	b.n	8004196 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800416e:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417a:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418a:	e006      	b.n	800419a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e004      	b.n	800419c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800419a:	bf00      	nop
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	430b      	orrs	r3, r1
 80041b8:	4939      	ldr	r1, [pc, #228]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d167      	bne.n	8004294 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041c4:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fd f96a 	bl	80014a8 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041d6:	e009      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d8:	f7fd f966 	bl	80014a8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d902      	bls.n	80041ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ea:	e005      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041ec:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ef      	bne.n	80041d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d14a      	bne.n	8004294 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004204:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6892      	ldr	r2, [r2, #8]
 8004214:	0211      	lsls	r1, r2, #8
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68d2      	ldr	r2, [r2, #12]
 800421a:	0912      	lsrs	r2, r2, #4
 800421c:	0452      	lsls	r2, r2, #17
 800421e:	430a      	orrs	r2, r1
 8004220:	491f      	ldr	r1, [pc, #124]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	614b      	str	r3, [r1, #20]
 8004226:	e011      	b.n	800424c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	0211      	lsls	r1, r2, #8
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6912      	ldr	r2, [r2, #16]
 800423e:	0852      	lsrs	r2, r2, #1
 8004240:	3a01      	subs	r2, #1
 8004242:	0652      	lsls	r2, r2, #25
 8004244:	430a      	orrs	r2, r1
 8004246:	4916      	ldr	r1, [pc, #88]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fd f926 	bl	80014a8 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004260:	f7fd f922 	bl	80014a8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
          break;
 8004272:	e005      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ef      	beq.n	8004260 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	4904      	ldr	r1, [pc, #16]	; (80042a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004290:	4313      	orrs	r3, r2
 8004292:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e049      	b.n	800434a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fddc 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fbe8 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d001      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e04f      	b.n	800440c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_TIM_Base_Start_IT+0xc4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d018      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_TIM_Base_Start_IT+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_TIM_Base_Start_IT+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIM_Base_Start_IT+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_TIM_Base_Start_IT+0x76>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <HAL_TIM_Base_Start_IT+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d115      	bne.n	80043f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_TIM_Base_Start_IT+0xdc>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d015      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d011      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	e008      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e000      	b.n	800440a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	00010007 	.word	0x00010007

08004434 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e097      	b.n	8004578 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fc fd49 	bl	8000ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f000 fb15 	bl	8004ab8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	4313      	orrs	r3, r2
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044d4:	f023 030c 	bic.w	r3, r3, #12
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	4313      	orrs	r3, r2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	011a      	lsls	r2, r3, #4
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	031b      	lsls	r3, r3, #12
 8004504:	4313      	orrs	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	4313      	orrs	r3, r2
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004590:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004598:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d110      	bne.n	80045d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b6:	7b7b      	ldrb	r3, [r7, #13]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e069      	b.n	8004694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d0:	e031      	b.n	8004636 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d110      	bne.n	80045fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045de:	7b3b      	ldrb	r3, [r7, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e055      	b.n	8004694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	e01d      	b.n	8004636 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d108      	bne.n	8004612 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004606:	7b7b      	ldrb	r3, [r7, #13]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d102      	bne.n	8004612 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800460c:	7b3b      	ldrb	r3, [r7, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e03e      	b.n	8004694 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_TIM_Encoder_Start+0xc4>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b04      	cmp	r3, #4
 8004640:	d008      	beq.n	8004654 <HAL_TIM_Encoder_Start+0xd4>
 8004642:	e00f      	b.n	8004664 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb67 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8004652:	e016      	b.n	8004682 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2201      	movs	r2, #1
 800465a:	2104      	movs	r1, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fb5f 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8004662:	e00e      	b.n	8004682 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fb57 	bl	8004d20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	2104      	movs	r1, #4
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb50 	bl	8004d20 <TIM_CCxChannelCmd>
      break;
 8004680:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9cb 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9bd 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f9ce 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0204 	mvn.w	r2, #4
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9a1 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f993 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f9a4 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f977 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f969 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f97a 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f94d 	bl	8004a7a <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f93f 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f950 	bl	8004a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc f87e 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fb22 	bl	8004e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb15 	bl	8004ea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8fe 	bl	8004aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0220 	mvn.w	r2, #32
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fad5 	bl	8004e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_ConfigClockSource+0x18>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0b5      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x184>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004910:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004914:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492e:	d03e      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xd4>
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	f200 8087 	bhi.w	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	f000 8085 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x170>
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d87f      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 8004946:	2b70      	cmp	r3, #112	; 0x70
 8004948:	d01a      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0xa6>
 800494a:	2b70      	cmp	r3, #112	; 0x70
 800494c:	d87b      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d050      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0x11a>
 8004952:	2b60      	cmp	r3, #96	; 0x60
 8004954:	d877      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 8004956:	2b50      	cmp	r3, #80	; 0x50
 8004958:	d03c      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xfa>
 800495a:	2b50      	cmp	r3, #80	; 0x50
 800495c:	d873      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d058      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x13a>
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d86f      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d064      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0x15a>
 800496a:	2b30      	cmp	r3, #48	; 0x30
 800496c:	d86b      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d060      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0x15a>
 8004972:	2b20      	cmp	r3, #32
 8004974:	d867      	bhi.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d05c      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0x15a>
 800497a:	2b10      	cmp	r3, #16
 800497c:	d05a      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800497e:	e062      	b.n	8004a46 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f000 f9a6 	bl	8004ce0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]
      break;
 80049ac:	e04e      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f000 f98f 	bl	8004ce0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d0:	609a      	str	r2, [r3, #8]
      break;
 80049d2:	e03b      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f000 f903 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2150      	movs	r1, #80	; 0x50
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f95c 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 80049f2:	e02b      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	461a      	mov	r2, r3
 8004a02:	f000 f922 	bl	8004c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2160      	movs	r1, #96	; 0x60
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f94c 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a12:	e01b      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f000 f8e3 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2140      	movs	r1, #64	; 0x40
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f93c 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004a32:	e00b      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 f933 	bl	8004caa <TIM_ITRx_SetConfig>
        break;
 8004a44:	e002      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a40      	ldr	r2, [pc, #256]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d00f      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3d      	ldr	r2, [pc, #244]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3a      	ldr	r2, [pc, #232]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01f      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b18:	d01b      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <TIM_Base_SetConfig+0x118>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d017      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <TIM_Base_SetConfig+0x11c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <TIM_Base_SetConfig+0x120>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a28      	ldr	r2, [pc, #160]	; (8004be0 <TIM_Base_SetConfig+0x128>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a27      	ldr	r2, [pc, #156]	; (8004be4 <TIM_Base_SetConfig+0x12c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_Base_SetConfig+0x9a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <TIM_Base_SetConfig+0x130>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <TIM_Base_SetConfig+0x114>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0xf8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <TIM_Base_SetConfig+0x124>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0xf8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <TIM_Base_SetConfig+0x128>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0xf8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <TIM_Base_SetConfig+0x12c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0xf8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <TIM_Base_SetConfig+0x130>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d103      	bne.n	8004bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	615a      	str	r2, [r3, #20]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	40000c00 	.word	0x40000c00
 8004bdc:	40013400 	.word	0x40013400
 8004be0:	40014000 	.word	0x40014000
 8004be4:	40014400 	.word	0x40014400
 8004be8:	40014800 	.word	0x40014800

08004bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b087      	sub	sp, #28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f043 0307 	orr.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2201      	movs	r2, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	401a      	ands	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e068      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d018      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40013400 	.word	0x40013400
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000

08004e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eb8:	b084      	sub	sp, #16
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	f107 001c 	add.w	r0, r7, #28
 8004ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 f9ce 	bl	8006278 <USB_CoreReset>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef2:	e005      	b.n	8004f00 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f0c:	b004      	add	sp, #16
 8004f0e:	4770      	bx	lr

08004f10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d165      	bne.n	8004ff0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a3e      	ldr	r2, [pc, #248]	; (8005020 <USB_SetTurnaroundTime+0x110>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d906      	bls.n	8004f3a <USB_SetTurnaroundTime+0x2a>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <USB_SetTurnaroundTime+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d202      	bcs.n	8004f3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f34:	230f      	movs	r3, #15
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e05c      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a39      	ldr	r2, [pc, #228]	; (8005024 <USB_SetTurnaroundTime+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d306      	bcc.n	8004f50 <USB_SetTurnaroundTime+0x40>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a38      	ldr	r2, [pc, #224]	; (8005028 <USB_SetTurnaroundTime+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d202      	bcs.n	8004f50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f4a:	230e      	movs	r3, #14
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e051      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a35      	ldr	r2, [pc, #212]	; (8005028 <USB_SetTurnaroundTime+0x118>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d306      	bcc.n	8004f66 <USB_SetTurnaroundTime+0x56>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a34      	ldr	r2, [pc, #208]	; (800502c <USB_SetTurnaroundTime+0x11c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d202      	bcs.n	8004f66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f60:	230d      	movs	r3, #13
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e046      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a30      	ldr	r2, [pc, #192]	; (800502c <USB_SetTurnaroundTime+0x11c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d306      	bcc.n	8004f7c <USB_SetTurnaroundTime+0x6c>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <USB_SetTurnaroundTime+0x120>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f76:	230c      	movs	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e03b      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <USB_SetTurnaroundTime+0x120>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d906      	bls.n	8004f92 <USB_SetTurnaroundTime+0x82>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <USB_SetTurnaroundTime+0x124>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d802      	bhi.n	8004f92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f8c:	230b      	movs	r3, #11
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e030      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <USB_SetTurnaroundTime+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d906      	bls.n	8004fa8 <USB_SetTurnaroundTime+0x98>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <USB_SetTurnaroundTime+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d802      	bhi.n	8004fa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004fa2:	230a      	movs	r3, #10
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e025      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a23      	ldr	r2, [pc, #140]	; (8005038 <USB_SetTurnaroundTime+0x128>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d906      	bls.n	8004fbe <USB_SetTurnaroundTime+0xae>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	; (800503c <USB_SetTurnaroundTime+0x12c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d202      	bcs.n	8004fbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fb8:	2309      	movs	r3, #9
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e01a      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <USB_SetTurnaroundTime+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d306      	bcc.n	8004fd4 <USB_SetTurnaroundTime+0xc4>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <USB_SetTurnaroundTime+0x130>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d802      	bhi.n	8004fd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fce:	2308      	movs	r3, #8
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e00f      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <USB_SetTurnaroundTime+0x130>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d906      	bls.n	8004fea <USB_SetTurnaroundTime+0xda>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a19      	ldr	r2, [pc, #100]	; (8005044 <USB_SetTurnaroundTime+0x134>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d202      	bcs.n	8004fea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fe4:	2307      	movs	r3, #7
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e004      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fea:	2306      	movs	r3, #6
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e001      	b.n	8004ff4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ff0:	2309      	movs	r3, #9
 8004ff2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800500c:	431a      	orrs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	00d8acbf 	.word	0x00d8acbf
 8005024:	00e4e1c0 	.word	0x00e4e1c0
 8005028:	00f42400 	.word	0x00f42400
 800502c:	01067380 	.word	0x01067380
 8005030:	011a499f 	.word	0x011a499f
 8005034:	01312cff 	.word	0x01312cff
 8005038:	014ca43f 	.word	0x014ca43f
 800503c:	016e3600 	.word	0x016e3600
 8005040:	01a6ab1f 	.word	0x01a6ab1f
 8005044:	01e84800 	.word	0x01e84800

08005048 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f043 0201 	orr.w	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d106      	bne.n	80050b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	e00b      	b.n	80050d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	e001      	b.n	80050d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e003      	b.n	80050d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050d0:	2032      	movs	r0, #50	; 0x32
 80050d2:	f7fc f9f5 	bl	80014c0 <HAL_Delay>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	e009      	b.n	8005114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3340      	adds	r3, #64	; 0x40
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	2200      	movs	r2, #0
 800510c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3301      	adds	r3, #1
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b0e      	cmp	r3, #14
 8005118:	d9f2      	bls.n	8005100 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11c      	bne.n	800515a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512e:	f043 0302 	orr.w	r3, r3, #2
 8005132:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e005      	b.n	8005166 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	4619      	mov	r1, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	461a      	mov	r2, r3
 8005182:	680b      	ldr	r3, [r1, #0]
 8005184:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005186:	2103      	movs	r1, #3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f93d 	bl	8005408 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800518e:	2110      	movs	r1, #16
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8f1 	bl	8005378 <USB_FlushTxFifo>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f90f 	bl	80053c4 <USB_FlushRxFifo>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	461a      	mov	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	461a      	mov	r2, r3
 80051d0:	2300      	movs	r3, #0
 80051d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	e043      	b.n	8005262 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f0:	d118      	bne.n	8005224 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e013      	b.n	8005236 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521a:	461a      	mov	r2, r3
 800521c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e008      	b.n	8005236 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	461a      	mov	r2, r3
 8005244:	2300      	movs	r3, #0
 8005246:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800525a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	3301      	adds	r3, #1
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3b7      	bcc.n	80051da <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e043      	b.n	80052f8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005286:	d118      	bne.n	80052ba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e013      	b.n	80052cc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e008      	b.n	80052cc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	461a      	mov	r2, r3
 80052da:	2300      	movs	r3, #0
 80052dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	461a      	mov	r2, r3
 80052ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	3301      	adds	r3, #1
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3b7      	bcc.n	8005270 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005312:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005320:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	4b10      	ldr	r3, [pc, #64]	; (8005374 <USB_DevInit+0x294>)
 8005334:	4313      	orrs	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800533a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f043 0208 	orr.w	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005362:	7dfb      	ldrb	r3, [r7, #23]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536e:	b004      	add	sp, #16
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	803c3800 	.word	0x803c3800

08005378 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	019b      	lsls	r3, r3, #6
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <USB_FlushTxFifo+0x48>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e006      	b.n	80053b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d0f0      	beq.n	8005392 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	00030d40 	.word	0x00030d40

080053c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2210      	movs	r2, #16
 80053d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <USB_FlushRxFifo+0x40>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e006      	b.n	80053f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d0f0      	beq.n	80053d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	00030d40 	.word	0x00030d40

08005408 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800543a:	b480      	push	{r7}
 800543c:	b087      	sub	sp, #28
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0306 	and.w	r3, r3, #6
 8005452:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d002      	beq.n	8005460 <USB_GetDevSpeed+0x26>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d102      	bne.n	8005466 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005460:	2302      	movs	r3, #2
 8005462:	75fb      	strb	r3, [r7, #23]
 8005464:	e001      	b.n	800546a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005466:	230f      	movs	r3, #15
 8005468:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d13a      	bne.n	800550a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d155      	bne.n	8005578 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	78db      	ldrb	r3, [r3, #3]
 80054e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	059b      	lsls	r3, r3, #22
 80054ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054f0:	4313      	orrs	r3, r2
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e036      	b.n	8005578 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005528:	4313      	orrs	r3, r2
 800552a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11a      	bne.n	8005578 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800555e:	430b      	orrs	r3, r1
 8005560:	4313      	orrs	r3, r2
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005576:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d161      	bne.n	8005668 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ba:	d11f      	bne.n	80055fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	b29b      	uxth	r3, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4013      	ands	r3, r2
 8005642:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0159      	lsls	r1, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	440b      	add	r3, r1
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	4619      	mov	r1, r3
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <USB_DeactivateEndpoint+0x1b0>)
 8005662:	4013      	ands	r3, r2
 8005664:	600b      	str	r3, [r1, #0]
 8005666:	e060      	b.n	800572a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800567a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567e:	d11f      	bne.n	80056c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800569e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2101      	movs	r1, #1
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	43db      	mvns	r3, r3
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e0:	4013      	ands	r3, r2
 80056e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	43db      	mvns	r3, r3
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005704:	4013      	ands	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	0159      	lsls	r1, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	440b      	add	r3, r1
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	4619      	mov	r1, r3
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <USB_DeactivateEndpoint+0x1b4>)
 8005726:	4013      	ands	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	ec337800 	.word	0xec337800
 800573c:	eff37800 	.word	0xeff37800

08005740 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 810a 	bne.w	8005972 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d132      	bne.n	80057cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	0cdb      	lsrs	r3, r3, #19
 80057c6:	04db      	lsls	r3, r3, #19
 80057c8:	6113      	str	r3, [r2, #16]
 80057ca:	e074      	b.n	80058b6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	0cdb      	lsrs	r3, r3, #19
 80057e8:	04db      	lsls	r3, r3, #19
 80057ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800580a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	440b      	add	r3, r1
 8005828:	1e59      	subs	r1, r3, #1
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005832:	04d9      	lsls	r1, r3, #19
 8005834:	4baf      	ldr	r3, [pc, #700]	; (8005af4 <USB_EPStartXfer+0x3b4>)
 8005836:	400b      	ands	r3, r1
 8005838:	6939      	ldr	r1, [r7, #16]
 800583a:	0148      	lsls	r0, r1, #5
 800583c:	6979      	ldr	r1, [r7, #20]
 800583e:	4401      	add	r1, r0
 8005840:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585e:	6939      	ldr	r1, [r7, #16]
 8005860:	0148      	lsls	r0, r1, #5
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	4401      	add	r1, r0
 8005866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800586a:	4313      	orrs	r3, r2
 800586c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d11f      	bne.n	80058b6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005894:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d015      	beq.n	800590a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8100 	beq.w	8005ae8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	6979      	ldr	r1, [r7, #20]
 8005900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005904:	4313      	orrs	r3, r2
 8005906:	634b      	str	r3, [r1, #52]	; 0x34
 8005908:	e0ee      	b.n	8005ae8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d110      	bne.n	800593c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e00f      	b.n	800595c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68d9      	ldr	r1, [r3, #12]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	b29b      	uxth	r3, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9e2 	bl	8005d34 <USB_WritePacket>
 8005970:	e0ba      	b.n	8005ae8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	0cdb      	lsrs	r3, r3, #19
 800598e:	04db      	lsls	r3, r3, #19
 8005990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d123      	bne.n	8005a06 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d4:	6939      	ldr	r1, [r7, #16]
 80059d6:	0148      	lsls	r0, r1, #5
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	4401      	add	r1, r0
 80059dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059e0:	4313      	orrs	r3, r2
 80059e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a02:	6113      	str	r3, [r2, #16]
 8005a04:	e033      	b.n	8005a6e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4413      	add	r3, r2
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	04d9      	lsls	r1, r3, #19
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <USB_EPStartXfer+0x3b4>)
 8005a30:	400b      	ands	r3, r1
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	0148      	lsls	r0, r1, #5
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	4401      	add	r1, r0
 8005a3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	89f9      	ldrh	r1, [r7, #14]
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5e:	6939      	ldr	r1, [r7, #16]
 8005a60:	0148      	lsls	r0, r1, #5
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	4401      	add	r1, r0
 8005a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	78db      	ldrb	r3, [r3, #3]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d128      	bne.n	8005ac8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d110      	bne.n	8005aa8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e00f      	b.n	8005ac8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	1ff80000 	.word	0x1ff80000

08005af8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 80ab 	bne.w	8005c6c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d132      	bne.n	8005b84 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	0cdb      	lsrs	r3, r3, #19
 8005b7e:	04db      	lsls	r3, r3, #19
 8005b80:	6113      	str	r3, [r2, #16]
 8005b82:	e04e      	b.n	8005c22 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	0cdb      	lsrs	r3, r3, #19
 8005ba0:	04db      	lsls	r3, r3, #19
 8005ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695a      	ldr	r2, [r3, #20]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d903      	bls.n	8005bdc <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	0148      	lsls	r0, r1, #5
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	4401      	add	r1, r0
 8005c1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c40:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d06d      	beq.n	8005d26 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c66:	4313      	orrs	r3, r2
 8005c68:	634b      	str	r3, [r1, #52]	; 0x34
 8005c6a:	e05c      	b.n	8005d26 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c86:	0cdb      	lsrs	r3, r3, #19
 8005c88:	04db      	lsls	r3, r3, #19
 8005c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	0148      	lsls	r0, r1, #5
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	4401      	add	r1, r0
 8005cfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d02:	4313      	orrs	r3, r2
 8005d04:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	460b      	mov	r3, r1
 8005d44:	71fb      	strb	r3, [r7, #7]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005d52:	88bb      	ldrh	r3, [r7, #4]
 8005d54:	3303      	adds	r3, #3
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e00f      	b.n	8005d80 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	031a      	lsls	r2, r3, #12
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3304      	adds	r3, #4
 8005d78:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d3eb      	bcc.n	8005d60 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b089      	sub	sp, #36	; 0x24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4613      	mov	r3, r2
 8005da2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	3303      	adds	r3, #3
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e00b      	b.n	8005dd2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3ef      	bcc.n	8005dba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005dda:	69fb      	ldr	r3, [r7, #28]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3724      	adds	r7, #36	; 0x24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d12c      	bne.n	8005e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	db12      	blt.n	8005e3c <USB_EPSetStall+0x54>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00f      	beq.n	8005e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	e02b      	b.n	8005eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	db12      	blt.n	8005e96 <USB_EPSetStall+0xae>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d128      	bne.n	8005f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	78db      	ldrb	r3, [r3, #3]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d003      	beq.n	8005f10 <USB_EPClearStall+0x4c>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	78db      	ldrb	r3, [r3, #3]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d138      	bne.n	8005f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e027      	b.n	8005f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d003      	beq.n	8005f62 <USB_EPClearStall+0x9e>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	78db      	ldrb	r3, [r3, #3]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d10f      	bne.n	8005f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600a:	f023 0302 	bic.w	r3, r3, #2
 800600e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006078:	68fb      	ldr	r3, [r7, #12]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	0c1b      	lsrs	r3, r3, #16
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	b29b      	uxth	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800611c:	68bb      	ldr	r3, [r7, #8]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	01db      	lsls	r3, r3, #7
 800615c:	b2db      	uxtb	r3, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4013      	ands	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006178:	68bb      	ldr	r3, [r7, #8]
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0301 	and.w	r3, r3, #1
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	333c      	adds	r3, #60	; 0x3c
 80061fa:	3304      	adds	r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <USB_EP0_OutStart+0x8c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d90a      	bls.n	800621e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006218:	d101      	bne.n	800621e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e024      	b.n	8006268 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2300      	movs	r3, #0
 8006228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800623c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624c:	f043 0318 	orr.w	r3, r3, #24
 8006250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006260:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006264:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	4f54300a 	.word	0x4f54300a

08006278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <USB_CoreReset+0x64>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e01b      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	daf2      	bge.n	8006284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3301      	adds	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <USB_CoreReset+0x64>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e006      	b.n	80062ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d0f0      	beq.n	80062ae <USB_CoreReset+0x36>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	00030d40 	.word	0x00030d40

080062e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062f0:	f005 f89c 	bl	800b42c <USBD_static_malloc>
 80062f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006304:	2302      	movs	r3, #2
 8006306:	e066      	b.n	80063d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7c1b      	ldrb	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d119      	bne.n	800634c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800631c:	2202      	movs	r2, #2
 800631e:	2181      	movs	r1, #129	; 0x81
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f004 fe6f 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800632c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006330:	2202      	movs	r2, #2
 8006332:	2101      	movs	r1, #1
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f004 fe65 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2210      	movs	r2, #16
 8006346:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800634a:	e016      	b.n	800637a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	2202      	movs	r2, #2
 8006350:	2181      	movs	r1, #129	; 0x81
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f004 fe56 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	2202      	movs	r2, #2
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f004 fe4d 	bl	800b004 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2210      	movs	r2, #16
 8006376:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800637a:	2308      	movs	r3, #8
 800637c:	2203      	movs	r2, #3
 800637e:	2182      	movs	r1, #130	; 0x82
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f004 fe3f 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7c1b      	ldrb	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ba:	2101      	movs	r1, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f004 ff9b 	bl	800b2f8 <USBD_LL_PrepareReceive>
 80063c2:	e007      	b.n	80063d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ca:	2340      	movs	r3, #64	; 0x40
 80063cc:	2101      	movs	r1, #1
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f004 ff92 	bl	800b2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063ea:	2181      	movs	r1, #129	; 0x81
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f004 fe47 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063f8:	2101      	movs	r1, #1
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f004 fe40 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006408:	2182      	movs	r1, #130	; 0x82
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f004 fe38 	bl	800b080 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643a:	4618      	mov	r0, r3
 800643c:	f005 f804 	bl	800b448 <USBD_static_free>
    pdev->pClassData = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006464:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006478:	2303      	movs	r3, #3
 800647a:	e0af      	b.n	80065dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03f      	beq.n	8006508 <USBD_CDC_Setup+0xb4>
 8006488:	2b20      	cmp	r3, #32
 800648a:	f040 809f 	bne.w	80065cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	88db      	ldrh	r3, [r3, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d02e      	beq.n	80064f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b25b      	sxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	da16      	bge.n	80064ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80064ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	88d2      	ldrh	r2, [r2, #6]
 80064b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	88db      	ldrh	r3, [r3, #6]
 80064b8:	2b07      	cmp	r3, #7
 80064ba:	bf28      	it	cs
 80064bc:	2307      	movcs	r3, #7
 80064be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	89fa      	ldrh	r2, [r7, #14]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fb43 	bl	8007b52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80064cc:	e085      	b.n	80065da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	785a      	ldrb	r2, [r3, #1]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	88db      	ldrh	r3, [r3, #6]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80064e4:	6939      	ldr	r1, [r7, #16]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	88db      	ldrh	r3, [r3, #6]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fb5c 	bl	8007baa <USBD_CtlPrepareRx>
      break;
 80064f2:	e072      	b.n	80065da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	7850      	ldrb	r0, [r2, #1]
 8006500:	2200      	movs	r2, #0
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	4798      	blx	r3
      break;
 8006506:	e068      	b.n	80065da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b0b      	cmp	r3, #11
 800650e:	d852      	bhi.n	80065b6 <USBD_CDC_Setup+0x162>
 8006510:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <USBD_CDC_Setup+0xc4>)
 8006512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006516:	bf00      	nop
 8006518:	08006549 	.word	0x08006549
 800651c:	080065c5 	.word	0x080065c5
 8006520:	080065b7 	.word	0x080065b7
 8006524:	080065b7 	.word	0x080065b7
 8006528:	080065b7 	.word	0x080065b7
 800652c:	080065b7 	.word	0x080065b7
 8006530:	080065b7 	.word	0x080065b7
 8006534:	080065b7 	.word	0x080065b7
 8006538:	080065b7 	.word	0x080065b7
 800653c:	080065b7 	.word	0x080065b7
 8006540:	08006573 	.word	0x08006573
 8006544:	0800659d 	.word	0x0800659d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b03      	cmp	r3, #3
 8006552:	d107      	bne.n	8006564 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006554:	f107 030a 	add.w	r3, r7, #10
 8006558:	2202      	movs	r2, #2
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 faf8 	bl	8007b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006562:	e032      	b.n	80065ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fa82 	bl	8007a70 <USBD_CtlError>
            ret = USBD_FAIL;
 800656c:	2303      	movs	r3, #3
 800656e:	75fb      	strb	r3, [r7, #23]
          break;
 8006570:	e02b      	b.n	80065ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d107      	bne.n	800658e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800657e:	f107 030d 	add.w	r3, r7, #13
 8006582:	2201      	movs	r2, #1
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fae3 	bl	8007b52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800658c:	e01d      	b.n	80065ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fa6d 	bl	8007a70 <USBD_CtlError>
            ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
          break;
 800659a:	e016      	b.n	80065ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d00f      	beq.n	80065c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fa60 	bl	8007a70 <USBD_CtlError>
            ret = USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065b4:	e008      	b.n	80065c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fa59 	bl	8007a70 <USBD_CtlError>
          ret = USBD_FAIL;
 80065be:	2303      	movs	r3, #3
 80065c0:	75fb      	strb	r3, [r7, #23]
          break;
 80065c2:	e002      	b.n	80065ca <USBD_CDC_Setup+0x176>
          break;
 80065c4:	bf00      	nop
 80065c6:	e008      	b.n	80065da <USBD_CDC_Setup+0x186>
          break;
 80065c8:	bf00      	nop
      }
      break;
 80065ca:	e006      	b.n	80065da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fa4e 	bl	8007a70 <USBD_CtlError>
      ret = USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006602:	2303      	movs	r3, #3
 8006604:	e04f      	b.n	80066a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3318      	adds	r3, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d029      	beq.n	8006678 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006624:	78fa      	ldrb	r2, [r7, #3]
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	3318      	adds	r3, #24
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	78f9      	ldrb	r1, [r7, #3]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	460b      	mov	r3, r1
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a5b      	subs	r3, r3, r1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	3344      	adds	r3, #68	; 0x44
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	fbb2 f1f3 	udiv	r1, r2, r3
 800664c:	fb03 f301 	mul.w	r3, r3, r1
 8006650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d110      	bne.n	8006678 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	3318      	adds	r3, #24
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800666a:	78f9      	ldrb	r1, [r7, #3]
 800666c:	2300      	movs	r3, #0
 800666e:	2200      	movs	r2, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f004 fe09 	bl	800b288 <USBD_LL_Transmit>
 8006676:	e015      	b.n	80066a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e015      	b.n	80066fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f004 fe47 	bl	800b368 <USBD_LL_GetRxDataSize>
 80066da:	4602      	mov	r2, r0
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066f6:	4611      	mov	r1, r2
 80066f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800671a:	2303      	movs	r3, #3
 800671c:	e01b      	b.n	8006756 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d015      	beq.n	8006754 <USBD_CDC_EP0_RxReady+0x50>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800672e:	2bff      	cmp	r3, #255	; 0xff
 8006730:	d010      	beq.n	8006754 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006740:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006748:	b292      	uxth	r2, r2
 800674a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	22ff      	movs	r2, #255	; 0xff
 8006750:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2243      	movs	r2, #67	; 0x43
 800676c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800676e:	4b03      	ldr	r3, [pc, #12]	; (800677c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000098 	.word	0x20000098

08006780 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2243      	movs	r2, #67	; 0x43
 800678c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20000054 	.word	0x20000054

080067a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2243      	movs	r2, #67	; 0x43
 80067ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	200000dc 	.word	0x200000dc

080067c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	220a      	movs	r2, #10
 80067cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067ce:	4b03      	ldr	r3, [pc, #12]	; (80067dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20000010 	.word	0x20000010

080067e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e004      	b.n	80067fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800680a:	b480      	push	{r7}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e008      	b.n	800683a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006856:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800685e:	2303      	movs	r3, #3
 8006860:	e004      	b.n	800686c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006886:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	e01a      	b.n	80068d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d114      	bne.n	80068ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068c2:	2181      	movs	r1, #129	; 0x81
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f004 fcdf 	bl	800b288 <USBD_LL_Transmit>

    ret = USBD_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e016      	b.n	8006924 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f004 fcf4 	bl	800b2f8 <USBD_LL_PrepareReceive>
 8006910:	e007      	b.n	8006922 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006918:	2340      	movs	r3, #64	; 0x40
 800691a:	2101      	movs	r1, #1
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f004 fceb 	bl	800b2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	e01f      	b.n	8006984 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	79fa      	ldrb	r2, [r7, #7]
 8006976:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f004 fac5 	bl	800af08 <USBD_LL_Init>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e016      	b.n	80069d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	f107 020e 	add.w	r2, r7, #14
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f004 fadc 	bl	800afa0 <USBD_LL_Start>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	4611      	mov	r1, r2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
  }

  return USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 ffba 	bl	80079fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d01a      	beq.n	8006ae2 <USBD_LL_SetupStage+0x72>
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d822      	bhi.n	8006af6 <USBD_LL_SetupStage+0x86>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <USBD_LL_SetupStage+0x4a>
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d00a      	beq.n	8006ace <USBD_LL_SetupStage+0x5e>
 8006ab8:	e01d      	b.n	8006af6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa62 	bl	8006f8c <USBD_StdDevReq>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
      break;
 8006acc:	e020      	b.n	8006b10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fac6 	bl	8007068 <USBD_StdItfReq>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	e016      	b.n	8006b10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fb05 	bl	80070fa <USBD_StdEPReq>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	e00c      	b.n	8006b10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006afc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f004 faf1 	bl	800b0ec <USBD_LL_StallEP>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0e:	bf00      	nop
  }

  return ret;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	460b      	mov	r3, r1
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d138      	bne.n	8006ba0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d14a      	bne.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d913      	bls.n	8006b74 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	4293      	cmp	r3, r2
 8006b64:	bf28      	it	cs
 8006b66:	4613      	movcs	r3, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f001 f839 	bl	8007be4 <USBD_CtlContinueRx>
 8006b72:	e030      	b.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d10b      	bne.n	8006b98 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 f834 	bl	8007c06 <USBD_CtlSendStatus>
 8006b9e:	e01a      	b.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d114      	bne.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	7afa      	ldrb	r2, [r7, #11]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	4798      	blx	r3
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	e000      	b.n	8006bd8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	460b      	mov	r3, r1
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d16b      	bne.n	8006ccc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d156      	bne.n	8006cb2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d914      	bls.n	8006c3a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 ffae 	bl	8007b88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2100      	movs	r1, #0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f004 fb60 	bl	800b2f8 <USBD_LL_PrepareReceive>
 8006c38:	e03b      	b.n	8006cb2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d11c      	bne.n	8006c80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d316      	bcc.n	8006c80 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d20f      	bcs.n	8006c80 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 ff8f 	bl	8007b88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c72:	2300      	movs	r3, #0
 8006c74:	2200      	movs	r2, #0
 8006c76:	2100      	movs	r1, #0
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f004 fb3d 	bl	800b2f8 <USBD_LL_PrepareReceive>
 8006c7e:	e018      	b.n	8006cb2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d10b      	bne.n	8006ca4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ca4:	2180      	movs	r1, #128	; 0x80
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f004 fa20 	bl	800b0ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 ffbd 	bl	8007c2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d122      	bne.n	8006d02 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fe98 	bl	80069f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cca:	e01a      	b.n	8006d02 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d114      	bne.n	8006d02 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	7afa      	ldrb	r2, [r7, #11]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	e000      	b.n	8006d04 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e02f      	b.n	8006da0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00f      	beq.n	8006d6a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6852      	ldr	r2, [r2, #4]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	4611      	mov	r1, r2
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d6a:	2340      	movs	r3, #64	; 0x40
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f004 f947 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2240      	movs	r2, #64	; 0x40
 8006d82:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f004 f939 	bl	800b004 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2240      	movs	r2, #64	; 0x40
 8006d9c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2204      	movs	r2, #4
 8006de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d106      	bne.n	8006e16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e012      	b.n	8006e60 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d10b      	bne.n	8006e5e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e014      	b.n	8006eac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d10d      	bne.n	8006eaa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e014      	b.n	8006ef8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d10d      	bne.n	8006ef6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6852      	ldr	r2, [r2, #4]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	4611      	mov	r1, r2
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
  }

  return USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	3301      	adds	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f6c:	8a3b      	ldrh	r3, [r7, #16]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	b21a      	sxth	r2, r3
 8006f72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	b21b      	sxth	r3, r3
 8006f7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d005      	beq.n	8006fb2 <USBD_StdDevReq+0x26>
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d853      	bhi.n	8007052 <USBD_StdDevReq+0xc6>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <USBD_StdDevReq+0x3a>
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d14f      	bne.n	8007052 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e04a      	b.n	800705c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2b09      	cmp	r3, #9
 8006fcc:	d83b      	bhi.n	8007046 <USBD_StdDevReq+0xba>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_StdDevReq+0x48>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007029 	.word	0x08007029
 8006fd8:	0800703d 	.word	0x0800703d
 8006fdc:	08007047 	.word	0x08007047
 8006fe0:	08007033 	.word	0x08007033
 8006fe4:	08007047 	.word	0x08007047
 8006fe8:	08007007 	.word	0x08007007
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007047 	.word	0x08007047
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	08007011 	.word	0x08007011
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9de 	bl	80073c0 <USBD_GetDescriptor>
          break;
 8007004:	e024      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb6d 	bl	80076e8 <USBD_SetAddress>
          break;
 800700e:	e01f      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fbac 	bl	8007770 <USBD_SetConfig>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
          break;
 800701c:	e018      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc4b 	bl	80078bc <USBD_GetConfig>
          break;
 8007026:	e013      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc7c 	bl	8007928 <USBD_GetStatus>
          break;
 8007030:	e00e      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fcab 	bl	8007990 <USBD_SetFeature>
          break;
 800703a:	e009      	b.n	8007050 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fcba 	bl	80079b8 <USBD_ClrFeature>
          break;
 8007044:	e004      	b.n	8007050 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fd11 	bl	8007a70 <USBD_CtlError>
          break;
 800704e:	bf00      	nop
      }
      break;
 8007050:	e004      	b.n	800705c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fd0b 	bl	8007a70 <USBD_CtlError>
      break;
 800705a:	bf00      	nop
  }

  return ret;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop

08007068 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d005      	beq.n	800708e <USBD_StdItfReq+0x26>
 8007082:	2b40      	cmp	r3, #64	; 0x40
 8007084:	d82f      	bhi.n	80070e6 <USBD_StdItfReq+0x7e>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <USBD_StdItfReq+0x26>
 800708a:	2b20      	cmp	r3, #32
 800708c:	d12b      	bne.n	80070e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	2b02      	cmp	r3, #2
 800709a:	d81d      	bhi.n	80070d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	889b      	ldrh	r3, [r3, #4]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d813      	bhi.n	80070ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	88db      	ldrh	r3, [r3, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d110      	bne.n	80070e2 <USBD_StdItfReq+0x7a>
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd9d 	bl	8007c06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070cc:	e009      	b.n	80070e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fccd 	bl	8007a70 <USBD_CtlError>
          break;
 80070d6:	e004      	b.n	80070e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fcc8 	bl	8007a70 <USBD_CtlError>
          break;
 80070e0:	e000      	b.n	80070e4 <USBD_StdItfReq+0x7c>
          break;
 80070e2:	bf00      	nop
      }
      break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fcc1 	bl	8007a70 <USBD_CtlError>
      break;
 80070ee:	bf00      	nop
  }

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	889b      	ldrh	r3, [r3, #4]
 800710c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d007      	beq.n	800712a <USBD_StdEPReq+0x30>
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	f200 8145 	bhi.w	80073aa <USBD_StdEPReq+0x2b0>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <USBD_StdEPReq+0x44>
 8007124:	2b20      	cmp	r3, #32
 8007126:	f040 8140 	bne.w	80073aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
      break;
 800713c:	e13a      	b.n	80073b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	785b      	ldrb	r3, [r3, #1]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d007      	beq.n	8007156 <USBD_StdEPReq+0x5c>
 8007146:	2b03      	cmp	r3, #3
 8007148:	f300 8129 	bgt.w	800739e <USBD_StdEPReq+0x2a4>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d07f      	beq.n	8007250 <USBD_StdEPReq+0x156>
 8007150:	2b01      	cmp	r3, #1
 8007152:	d03c      	beq.n	80071ce <USBD_StdEPReq+0xd4>
 8007154:	e123      	b.n	800739e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d002      	beq.n	8007168 <USBD_StdEPReq+0x6e>
 8007162:	2b03      	cmp	r3, #3
 8007164:	d016      	beq.n	8007194 <USBD_StdEPReq+0x9a>
 8007166:	e02c      	b.n	80071c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <USBD_StdEPReq+0x90>
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d00a      	beq.n	800718a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f003 ffb7 	bl	800b0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800717e:	2180      	movs	r1, #128	; 0x80
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f003 ffb3 	bl	800b0ec <USBD_LL_StallEP>
 8007186:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007188:	e020      	b.n	80071cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fc6f 	bl	8007a70 <USBD_CtlError>
              break;
 8007192:	e01b      	b.n	80071cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	885b      	ldrh	r3, [r3, #2]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10e      	bne.n	80071ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <USBD_StdEPReq+0xc0>
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b80      	cmp	r3, #128	; 0x80
 80071a6:	d008      	beq.n	80071ba <USBD_StdEPReq+0xc0>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	88db      	ldrh	r3, [r3, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f003 ff99 	bl	800b0ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd23 	bl	8007c06 <USBD_CtlSendStatus>

              break;
 80071c0:	e004      	b.n	80071cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fc53 	bl	8007a70 <USBD_CtlError>
              break;
 80071ca:	bf00      	nop
          }
          break;
 80071cc:	e0ec      	b.n	80073a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d002      	beq.n	80071e0 <USBD_StdEPReq+0xe6>
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d016      	beq.n	800720c <USBD_StdEPReq+0x112>
 80071de:	e030      	b.n	8007242 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <USBD_StdEPReq+0x108>
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d00a      	beq.n	8007202 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f003 ff7b 	bl	800b0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f003 ff77 	bl	800b0ec <USBD_LL_StallEP>
 80071fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007200:	e025      	b.n	800724e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fc33 	bl	8007a70 <USBD_CtlError>
              break;
 800720a:	e020      	b.n	800724e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	885b      	ldrh	r3, [r3, #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11b      	bne.n	800724c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f003 ff98 	bl	800b158 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fcec 	bl	8007c06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007240:	e004      	b.n	800724c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fc13 	bl	8007a70 <USBD_CtlError>
              break;
 800724a:	e000      	b.n	800724e <USBD_StdEPReq+0x154>
              break;
 800724c:	bf00      	nop
          }
          break;
 800724e:	e0ab      	b.n	80073a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d002      	beq.n	8007262 <USBD_StdEPReq+0x168>
 800725c:	2b03      	cmp	r3, #3
 800725e:	d032      	beq.n	80072c6 <USBD_StdEPReq+0x1cc>
 8007260:	e097      	b.n	8007392 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d007      	beq.n	8007278 <USBD_StdEPReq+0x17e>
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d004      	beq.n	8007278 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fbfd 	bl	8007a70 <USBD_CtlError>
                break;
 8007276:	e091      	b.n	800739c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	da0b      	bge.n	8007298 <USBD_StdEPReq+0x19e>
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	3310      	adds	r3, #16
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	3304      	adds	r3, #4
 8007296:	e00b      	b.n	80072b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	3304      	adds	r3, #4
 80072b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2202      	movs	r2, #2
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc47 	bl	8007b52 <USBD_CtlSendData>
              break;
 80072c4:	e06a      	b.n	800739c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da11      	bge.n	80072f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3324      	adds	r3, #36	; 0x24
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d117      	bne.n	8007318 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fbc0 	bl	8007a70 <USBD_CtlError>
                  break;
 80072f0:	e054      	b.n	800739c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 020f 	and.w	r2, r3, #15
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	440b      	add	r3, r1
 8007304:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fbad 	bl	8007a70 <USBD_CtlError>
                  break;
 8007316:	e041      	b.n	800739c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da0b      	bge.n	8007338 <USBD_StdEPReq+0x23e>
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	3310      	adds	r3, #16
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4413      	add	r3, r2
 8007334:	3304      	adds	r3, #4
 8007336:	e00b      	b.n	8007350 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	3304      	adds	r3, #4
 8007350:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <USBD_StdEPReq+0x264>
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d103      	bne.n	8007366 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e00e      	b.n	8007384 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f003 ff2a 	bl	800b1c4 <USBD_LL_IsStallEP>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e002      	b.n	8007384 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2202      	movs	r2, #2
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fbe1 	bl	8007b52 <USBD_CtlSendData>
              break;
 8007390:	e004      	b.n	800739c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fb6b 	bl	8007a70 <USBD_CtlError>
              break;
 800739a:	bf00      	nop
          }
          break;
 800739c:	e004      	b.n	80073a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb65 	bl	8007a70 <USBD_CtlError>
          break;
 80073a6:	bf00      	nop
      }
      break;
 80073a8:	e004      	b.n	80073b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fb5f 	bl	8007a70 <USBD_CtlError>
      break;
 80073b2:	bf00      	nop
  }

  return ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	885b      	ldrh	r3, [r3, #2]
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b0e      	cmp	r3, #14
 80073e2:	f200 8152 	bhi.w	800768a <USBD_GetDescriptor+0x2ca>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <USBD_GetDescriptor+0x2c>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	0800745d 	.word	0x0800745d
 80073f0:	08007475 	.word	0x08007475
 80073f4:	080074b5 	.word	0x080074b5
 80073f8:	0800768b 	.word	0x0800768b
 80073fc:	0800768b 	.word	0x0800768b
 8007400:	0800762b 	.word	0x0800762b
 8007404:	08007657 	.word	0x08007657
 8007408:	0800768b 	.word	0x0800768b
 800740c:	0800768b 	.word	0x0800768b
 8007410:	0800768b 	.word	0x0800768b
 8007414:	0800768b 	.word	0x0800768b
 8007418:	0800768b 	.word	0x0800768b
 800741c:	0800768b 	.word	0x0800768b
 8007420:	0800768b 	.word	0x0800768b
 8007424:	08007429 	.word	0x08007429
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	7c12      	ldrb	r2, [r2, #16]
 8007440:	f107 0108 	add.w	r1, r7, #8
 8007444:	4610      	mov	r0, r2
 8007446:	4798      	blx	r3
 8007448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800744a:	e126      	b.n	800769a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fb0e 	bl	8007a70 <USBD_CtlError>
        err++;
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	3301      	adds	r3, #1
 8007458:	72fb      	strb	r3, [r7, #11]
      break;
 800745a:	e11e      	b.n	800769a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
      break;
 8007472:	e112      	b.n	800769a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7c1b      	ldrb	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10d      	bne.n	8007498 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f107 0208 	add.w	r2, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007496:	e100      	b.n	800769a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f107 0208 	add.w	r2, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	2202      	movs	r2, #2
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e0f2      	b.n	800769a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	885b      	ldrh	r3, [r3, #2]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	f200 80ac 	bhi.w	8007618 <USBD_GetDescriptor+0x258>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <USBD_GetDescriptor+0x108>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	08007515 	.word	0x08007515
 80074d0:	08007549 	.word	0x08007549
 80074d4:	0800757d 	.word	0x0800757d
 80074d8:	080075b1 	.word	0x080075b1
 80074dc:	080075e5 	.word	0x080075e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e091      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fab2 	bl	8007a70 <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e089      	b.n	8007628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e077      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa98 	bl	8007a70 <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e06f      	b.n	8007628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e05d      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa7e 	bl	8007a70 <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e055      	b.n	8007628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e043      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa64 	bl	8007a70 <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e03b      	b.n	8007628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e029      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa4a 	bl	8007a70 <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e021      	b.n	8007628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7c12      	ldrb	r2, [r2, #16]
 80075fc:	f107 0108 	add.w	r1, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007606:	e00f      	b.n	8007628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa30 	bl	8007a70 <USBD_CtlError>
            err++;
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	3301      	adds	r3, #1
 8007614:	72fb      	strb	r3, [r7, #11]
          break;
 8007616:	e007      	b.n	8007628 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa28 	bl	8007a70 <USBD_CtlError>
          err++;
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	3301      	adds	r3, #1
 8007624:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007626:	bf00      	nop
      }
      break;
 8007628:	e037      	b.n	800769a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7c1b      	ldrb	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007644:	e029      	b.n	800769a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa11 	bl	8007a70 <USBD_CtlError>
        err++;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	3301      	adds	r3, #1
 8007652:	72fb      	strb	r3, [r7, #11]
      break;
 8007654:	e021      	b.n	800769a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7c1b      	ldrb	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f107 0208 	add.w	r2, r7, #8
 800766a:	4610      	mov	r0, r2
 800766c:	4798      	blx	r3
 800766e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	2207      	movs	r2, #7
 8007676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007678:	e00f      	b.n	800769a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9f7 	bl	8007a70 <USBD_CtlError>
        err++;
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	3301      	adds	r3, #1
 8007686:	72fb      	strb	r3, [r7, #11]
      break;
 8007688:	e007      	b.n	800769a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9ef 	bl	8007a70 <USBD_CtlError>
      err++;
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	3301      	adds	r3, #1
 8007696:	72fb      	strb	r3, [r7, #11]
      break;
 8007698:	bf00      	nop
  }

  if (err != 0U)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11e      	bne.n	80076de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d016      	beq.n	80076d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88da      	ldrh	r2, [r3, #6]
 80076b2:	893b      	ldrh	r3, [r7, #8]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bf28      	it	cs
 80076b8:	4613      	movcs	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076be:	893b      	ldrh	r3, [r7, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa44 	bl	8007b52 <USBD_CtlSendData>
 80076ca:	e009      	b.n	80076e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9ce 	bl	8007a70 <USBD_CtlError>
 80076d4:	e004      	b.n	80076e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa95 	bl	8007c06 <USBD_CtlSendStatus>
 80076dc:	e000      	b.n	80076e0 <USBD_GetDescriptor+0x320>
    return;
 80076de:	bf00      	nop
  }
}
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	889b      	ldrh	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d131      	bne.n	800775e <USBD_SetAddress+0x76>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d12d      	bne.n	800775e <USBD_SetAddress+0x76>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	2b7f      	cmp	r3, #127	; 0x7f
 8007708:	d829      	bhi.n	800775e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d104      	bne.n	800772c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9a3 	bl	8007a70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	e01d      	b.n	8007768 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7bfa      	ldrb	r2, [r7, #15]
 8007730:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f003 fd6f 	bl	800b21c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa61 	bl	8007c06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	e009      	b.n	8007768 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775c:	e004      	b.n	8007768 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f985 	bl	8007a70 <USBD_CtlError>
  }
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <USBD_SetConfig+0x148>)
 8007786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007788:	4b4b      	ldr	r3, [pc, #300]	; (80078b8 <USBD_SetConfig+0x148>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d905      	bls.n	800779c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f96c 	bl	8007a70 <USBD_CtlError>
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e088      	b.n	80078ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d002      	beq.n	80077ae <USBD_SetConfig+0x3e>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d025      	beq.n	80077f8 <USBD_SetConfig+0x88>
 80077ac:	e071      	b.n	8007892 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ae:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <USBD_SetConfig+0x148>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d01c      	beq.n	80077f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077b6:	4b40      	ldr	r3, [pc, #256]	; (80078b8 <USBD_SetConfig+0x148>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077c0:	4b3d      	ldr	r3, [pc, #244]	; (80078b8 <USBD_SetConfig+0x148>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff f91e 	bl	8006a08 <USBD_SetClassConfig>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f949 	bl	8007a70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077de:	e065      	b.n	80078ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fa10 	bl	8007c06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2203      	movs	r2, #3
 80077ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077ee:	e05d      	b.n	80078ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa08 	bl	8007c06 <USBD_CtlSendStatus>
      break;
 80077f6:	e059      	b.n	80078ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077f8:	4b2f      	ldr	r3, [pc, #188]	; (80078b8 <USBD_SetConfig+0x148>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d112      	bne.n	8007826 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <USBD_SetConfig+0x148>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007812:	4b29      	ldr	r3, [pc, #164]	; (80078b8 <USBD_SetConfig+0x148>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff f911 	bl	8006a40 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f9f1 	bl	8007c06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007824:	e042      	b.n	80078ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007826:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <USBD_SetConfig+0x148>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d02a      	beq.n	800788a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff f8ff 	bl	8006a40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007842:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <USBD_SetConfig+0x148>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800784c:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <USBD_SetConfig+0x148>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff f8d8 	bl	8006a08 <USBD_SetClassConfig>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00f      	beq.n	8007882 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f903 	bl	8007a70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff f8e4 	bl	8006a40 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007880:	e014      	b.n	80078ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9bf 	bl	8007c06 <USBD_CtlSendStatus>
      break;
 8007888:	e010      	b.n	80078ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9bb 	bl	8007c06 <USBD_CtlSendStatus>
      break;
 8007890:	e00c      	b.n	80078ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8eb 	bl	8007a70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <USBD_SetConfig+0x148>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff f8cd 	bl	8006a40 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	73fb      	strb	r3, [r7, #15]
      break;
 80078aa:	bf00      	nop
  }

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200001e4 	.word	0x200001e4

080078bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	88db      	ldrh	r3, [r3, #6]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d004      	beq.n	80078d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8cd 	bl	8007a70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078d6:	e023      	b.n	8007920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	dc02      	bgt.n	80078ea <USBD_GetConfig+0x2e>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc03      	bgt.n	80078f0 <USBD_GetConfig+0x34>
 80078e8:	e015      	b.n	8007916 <USBD_GetConfig+0x5a>
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d00b      	beq.n	8007906 <USBD_GetConfig+0x4a>
 80078ee:	e012      	b.n	8007916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3308      	adds	r3, #8
 80078fa:	2201      	movs	r2, #1
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f927 	bl	8007b52 <USBD_CtlSendData>
        break;
 8007904:	e00c      	b.n	8007920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3304      	adds	r3, #4
 800790a:	2201      	movs	r2, #1
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f91f 	bl	8007b52 <USBD_CtlSendData>
        break;
 8007914:	e004      	b.n	8007920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f8a9 	bl	8007a70 <USBD_CtlError>
        break;
 800791e:	bf00      	nop
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	b2db      	uxtb	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	2b02      	cmp	r3, #2
 800793e:	d81e      	bhi.n	800797e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	88db      	ldrh	r3, [r3, #6]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d004      	beq.n	8007952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f890 	bl	8007a70 <USBD_CtlError>
        break;
 8007950:	e01a      	b.n	8007988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f043 0202 	orr.w	r2, r3, #2
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	330c      	adds	r3, #12
 8007972:	2202      	movs	r2, #2
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8eb 	bl	8007b52 <USBD_CtlSendData>
      break;
 800797c:	e004      	b.n	8007988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f875 	bl	8007a70 <USBD_CtlError>
      break;
 8007986:	bf00      	nop
  }
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d106      	bne.n	80079b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f92b 	bl	8007c06 <USBD_CtlSendStatus>
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d80b      	bhi.n	80079e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d10c      	bne.n	80079f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f910 	bl	8007c06 <USBD_CtlSendStatus>
      }
      break;
 80079e6:	e004      	b.n	80079f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f840 	bl	8007a70 <USBD_CtlError>
      break;
 80079f0:	e000      	b.n	80079f4 <USBD_ClrFeature+0x3c>
      break;
 80079f2:	bf00      	nop
  }
}
 80079f4:	bf00      	nop
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	781a      	ldrb	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff fa91 	bl	8006f4e <SWAPBYTE>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7ff fa84 	bl	8006f4e <SWAPBYTE>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff fa77 	bl	8006f4e <SWAPBYTE>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	80da      	strh	r2, [r3, #6]
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f003 fb35 	bl	800b0ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f003 fb31 	bl	800b0ec <USBD_LL_StallEP>
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d036      	beq.n	8007b16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aac:	6938      	ldr	r0, [r7, #16]
 8007aae:	f000 f836 	bl	8007b1e <USBD_GetLen>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	701a      	strb	r2, [r3, #0]
  idx++;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	2203      	movs	r2, #3
 8007ada:	701a      	strb	r2, [r3, #0]
  idx++;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ae2:	e013      	b.n	8007b0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	4413      	add	r3, r2
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3301      	adds	r3, #1
 8007af4:	613b      	str	r3, [r7, #16]
    idx++;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	3301      	adds	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e7      	bne.n	8007ae4 <USBD_GetString+0x52>
 8007b14:	e000      	b.n	8007b18 <USBD_GetString+0x86>
    return;
 8007b16:	bf00      	nop
  }
}
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b2e:	e005      	b.n	8007b3c <USBD_GetLen+0x1e>
  {
    len++;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	3301      	adds	r3, #1
 8007b34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f5      	bne.n	8007b30 <USBD_GetLen+0x12>
  }

  return len;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2202      	movs	r2, #2
 8007b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	2100      	movs	r1, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f003 fb85 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f003 fb74 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2203      	movs	r2, #3
 8007bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f003 fb8f 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f003 fb7e 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2204      	movs	r2, #4
 8007c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c16:	2300      	movs	r3, #0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f003 fb33 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2205      	movs	r2, #5
 8007c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2100      	movs	r1, #0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f003 fb58 	bl	800b2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <__NVIC_SetPriority>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	db0a      	blt.n	8007c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	490c      	ldr	r1, [pc, #48]	; (8007ca0 <__NVIC_SetPriority+0x4c>)
 8007c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c72:	0112      	lsls	r2, r2, #4
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	440b      	add	r3, r1
 8007c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c7c:	e00a      	b.n	8007c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	4908      	ldr	r1, [pc, #32]	; (8007ca4 <__NVIC_SetPriority+0x50>)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	0112      	lsls	r2, r2, #4
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	440b      	add	r3, r1
 8007c92:	761a      	strb	r2, [r3, #24]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	e000e100 	.word	0xe000e100
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007cac:	2100      	movs	r1, #0
 8007cae:	f06f 0004 	mvn.w	r0, #4
 8007cb2:	f7ff ffcf 	bl	8007c54 <__NVIC_SetPriority>
#endif
}
 8007cb6:	bf00      	nop
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc2:	f3ef 8305 	mrs	r3, IPSR
 8007cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8007cc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cce:	f06f 0305 	mvn.w	r3, #5
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	e00c      	b.n	8007cf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <osKernelInitialize+0x44>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cde:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <osKernelInitialize+0x44>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	e002      	b.n	8007cf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cf0:	687b      	ldr	r3, [r7, #4]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	200001e8 	.word	0x200001e8

08007d04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d0a:	f3ef 8305 	mrs	r3, IPSR
 8007d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d16:	f06f 0305 	mvn.w	r3, #5
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	e010      	b.n	8007d40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <osKernelStart+0x48>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d109      	bne.n	8007d3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d26:	f7ff ffbf 	bl	8007ca8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d2a:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <osKernelStart+0x48>)
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d30:	f001 f866 	bl	8008e00 <vTaskStartScheduler>
      stat = osOK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	607b      	str	r3, [r7, #4]
 8007d38:	e002      	b.n	8007d40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d40:	687b      	ldr	r3, [r7, #4]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200001e8 	.word	0x200001e8

08007d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af04      	add	r7, sp, #16
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d60:	f3ef 8305 	mrs	r3, IPSR
 8007d64:	617b      	str	r3, [r7, #20]
  return(result);
 8007d66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d17e      	bne.n	8007e6a <osThreadNew+0x11a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d07b      	beq.n	8007e6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d76:	2318      	movs	r3, #24
 8007d78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d045      	beq.n	8007e16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <osThreadNew+0x48>
        name = attr->name;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <osThreadNew+0x6e>
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2b38      	cmp	r3, #56	; 0x38
 8007db0:	d805      	bhi.n	8007dbe <osThreadNew+0x6e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <osThreadNew+0x72>
        return (NULL);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e054      	b.n	8007e6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	089b      	lsrs	r3, r3, #2
 8007dd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00e      	beq.n	8007df8 <osThreadNew+0xa8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b5b      	cmp	r3, #91	; 0x5b
 8007de0:	d90a      	bls.n	8007df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d006      	beq.n	8007df8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <osThreadNew+0xa8>
        mem = 1;
 8007df2:	2301      	movs	r3, #1
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	e010      	b.n	8007e1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <osThreadNew+0xca>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d108      	bne.n	8007e1a <osThreadNew+0xca>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <osThreadNew+0xca>
          mem = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61bb      	str	r3, [r7, #24]
 8007e14:	e001      	b.n	8007e1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d110      	bne.n	8007e42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e28:	9202      	str	r2, [sp, #8]
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fe0c 	bl	8008a54 <xTaskCreateStatic>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	e013      	b.n	8007e6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d110      	bne.n	8007e6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f107 0310 	add.w	r3, r7, #16
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fe57 	bl	8008b0e <xTaskCreate>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d001      	beq.n	8007e6a <osThreadNew+0x11a>
            hTask = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e6a:	693b      	ldr	r3, [r7, #16]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3728      	adds	r7, #40	; 0x28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e7c:	f3ef 8305 	mrs	r3, IPSR
 8007e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <osDelay+0x1c>
    stat = osErrorISR;
 8007e88:	f06f 0305 	mvn.w	r3, #5
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	e007      	b.n	8007ea0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 ff7c 	bl	8008d98 <vTaskDelay>
    }
  }

  return (stat);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4a07      	ldr	r2, [pc, #28]	; (8007ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a06      	ldr	r2, [pc, #24]	; (8007edc <vApplicationGetIdleTaskMemory+0x30>)
 8007ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2280      	movs	r2, #128	; 0x80
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200001ec 	.word	0x200001ec
 8007edc:	20000248 	.word	0x20000248

08007ee0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <vApplicationGetTimerTaskMemory+0x2c>)
 8007ef0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vApplicationGetTimerTaskMemory+0x30>)
 8007ef6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007efe:	601a      	str	r2, [r3, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20000448 	.word	0x20000448
 8007f10:	200004a4 	.word	0x200004a4

08007f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f103 0208 	add.w	r2, r3, #8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f103 0208 	add.w	r2, r3, #8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f103 0208 	add.w	r2, r3, #8
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d103      	bne.n	8007fd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e00c      	b.n	8007ff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	e002      	b.n	8007fe4 <vListInsert+0x2e>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d2f6      	bcs.n	8007fde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6892      	ldr	r2, [r2, #8]
 800803e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6852      	ldr	r2, [r2, #4]
 8008048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d103      	bne.n	800805c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080a2:	bf00      	nop
 80080a4:	e7fe      	b.n	80080a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080a6:	f002 f84d 	bl	800a144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	441a      	add	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d6:	3b01      	subs	r3, #1
 80080d8:	68f9      	ldr	r1, [r7, #12]
 80080da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080dc:	fb01 f303 	mul.w	r3, r1, r3
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	22ff      	movs	r2, #255	; 0xff
 80080f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d114      	bne.n	8008126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01a      	beq.n	800813a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3310      	adds	r3, #16
 8008108:	4618      	mov	r0, r3
 800810a:	f001 f903 	bl	8009314 <xTaskRemoveFromEventList>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d012      	beq.n	800813a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <xQueueGenericReset+0xcc>)
 8008116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	e009      	b.n	800813a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3310      	adds	r3, #16
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fef2 	bl	8007f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3324      	adds	r3, #36	; 0x24
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff feed 	bl	8007f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f002 f833 	bl	800a1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800813e:	2301      	movs	r3, #1
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	; 0x38
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <xQueueGenericCreateStatic+0x52>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <xQueueGenericCreateStatic+0x56>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericCreateStatic+0x58>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	623b      	str	r3, [r7, #32]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <xQueueGenericCreateStatic+0x7e>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <xQueueGenericCreateStatic+0x82>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <xQueueGenericCreateStatic+0x84>
 80081ce:	2300      	movs	r3, #0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	61fb      	str	r3, [r7, #28]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081ea:	2350      	movs	r3, #80	; 0x50
 80081ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b50      	cmp	r3, #80	; 0x50
 80081f2:	d00a      	beq.n	800820a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	61bb      	str	r3, [r7, #24]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800820a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800821e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	4613      	mov	r3, r2
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 f805 	bl	800823c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008234:	4618      	mov	r0, r3
 8008236:	3730      	adds	r7, #48	; 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	e002      	b.n	800825e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800826a:	2101      	movs	r1, #1
 800826c:	69b8      	ldr	r0, [r7, #24]
 800826e:	f7ff ff05 	bl	800807c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	; 0x38
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericSend+0x32>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <xQueueGenericSend+0x40>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <xQueueGenericSend+0x44>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <xQueueGenericSend+0x46>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xQueueGenericSend+0x60>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSend+0x6e>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <xQueueGenericSend+0x72>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueGenericSend+0x74>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueGenericSend+0x8e>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	623b      	str	r3, [r7, #32]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008312:	f001 f9bd 	bl	8009690 <xTaskGetSchedulerState>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <xQueueGenericSend+0x9e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <xQueueGenericSend+0xa2>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <xQueueGenericSend+0xa4>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericSend+0xbe>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	61fb      	str	r3, [r7, #28]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f001 feff 	bl	800a144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <xQueueGenericSend+0xd4>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d129      	bne.n	80083ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835e:	f000 fa0b 	bl	8008778 <prvCopyDataToQueue>
 8008362:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	3324      	adds	r3, #36	; 0x24
 8008370:	4618      	mov	r0, r3
 8008372:	f000 ffcf 	bl	8009314 <xTaskRemoveFromEventList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d013      	beq.n	80083a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800837c:	4b3f      	ldr	r3, [pc, #252]	; (800847c <xQueueGenericSend+0x1f8>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e00a      	b.n	80083a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <xQueueGenericSend+0x1f8>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083a4:	f001 fefe 	bl	800a1a4 <vPortExitCritical>
				return pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e063      	b.n	8008474 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083b2:	f001 fef7 	bl	800a1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e05c      	b.n	8008474 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	4618      	mov	r0, r3
 80083c6:	f001 f809 	bl	80093dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ce:	f001 fee9 	bl	800a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083d2:	f000 fd7b 	bl	8008ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083d6:	f001 feb5 	bl	800a144 <vPortEnterCritical>
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <xQueueGenericSend+0x16c>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <xQueueGenericSend+0x182>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008406:	f001 fecd 	bl	800a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800840a:	1d3a      	adds	r2, r7, #4
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fff8 	bl	8009408 <xTaskCheckForTimeOut>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d124      	bne.n	8008468 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800841e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008420:	f000 faa2 	bl	8008968 <prvIsQueueFull>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f000 ff1e 	bl	8009274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843a:	f000 fa2d 	bl	8008898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800843e:	f000 fd53 	bl	8008ee8 <xTaskResumeAll>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f af7c 	bne.w	8008342 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <xQueueGenericSend+0x1f8>)
 800844c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	e772      	b.n	8008342 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800845c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845e:	f000 fa1b 	bl	8008898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008462:	f000 fd41 	bl	8008ee8 <xTaskResumeAll>
 8008466:	e76c      	b.n	8008342 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846a:	f000 fa15 	bl	8008898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800846e:	f000 fd3b 	bl	8008ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008472:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	; 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b090      	sub	sp, #64	; 0x40
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d103      	bne.n	80084bc <xQueueGenericSendFromISR+0x3c>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <xQueueGenericSendFromISR+0x40>
 80084bc:	2301      	movs	r3, #1
 80084be:	e000      	b.n	80084c2 <xQueueGenericSendFromISR+0x42>
 80084c0:	2300      	movs	r3, #0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d103      	bne.n	80084ea <xQueueGenericSendFromISR+0x6a>
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <xQueueGenericSendFromISR+0x6e>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueGenericSendFromISR+0x70>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	623b      	str	r3, [r7, #32]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800850a:	f001 fefd 	bl	800a308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800850e:	f3ef 8211 	mrs	r2, BASEPRI
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61fa      	str	r2, [r7, #28]
 8008524:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008526:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xQueueGenericSendFromISR+0xbc>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d12f      	bne.n	800859c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008552:	f000 f911 	bl	8008778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008556:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d112      	bne.n	8008586 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	2b00      	cmp	r3, #0
 8008566:	d016      	beq.n	8008596 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	3324      	adds	r3, #36	; 0x24
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fed1 	bl	8009314 <xTaskRemoveFromEventList>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	e007      	b.n	8008596 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800858a:	3301      	adds	r3, #1
 800858c:	b2db      	uxtb	r3, r3
 800858e:	b25a      	sxtb	r2, r3
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008596:	2301      	movs	r3, #1
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800859a:	e001      	b.n	80085a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3740      	adds	r7, #64	; 0x40
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <xQueueReceive+0x30>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	623b      	str	r3, [r7, #32]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <xQueueReceive+0x3e>
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <xQueueReceive+0x42>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <xQueueReceive+0x44>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xQueueReceive+0x5e>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	61fb      	str	r3, [r7, #28]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008616:	f001 f83b 	bl	8009690 <xTaskGetSchedulerState>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d102      	bne.n	8008626 <xQueueReceive+0x6e>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <xQueueReceive+0x72>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <xQueueReceive+0x74>
 800862a:	2300      	movs	r3, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <xQueueReceive+0x8e>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	61bb      	str	r3, [r7, #24]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008646:	f001 fd7d 	bl	800a144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01f      	beq.n	8008696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865a:	f000 f8f7 	bl	800884c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	1e5a      	subs	r2, r3, #1
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00f      	beq.n	800868e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fe4e 	bl	8009314 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800867e:	4b3d      	ldr	r3, [pc, #244]	; (8008774 <xQueueReceive+0x1bc>)
 8008680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800868e:	f001 fd89 	bl	800a1a4 <vPortExitCritical>
				return pdPASS;
 8008692:	2301      	movs	r3, #1
 8008694:	e069      	b.n	800876a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800869c:	f001 fd82 	bl	800a1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e062      	b.n	800876a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fe94 	bl	80093dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b8:	f001 fd74 	bl	800a1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086bc:	f000 fc06 	bl	8008ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086c0:	f001 fd40 	bl	800a144 <vPortEnterCritical>
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d103      	bne.n	80086da <xQueueReceive+0x122>
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d103      	bne.n	80086f0 <xQueueReceive+0x138>
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086f0:	f001 fd58 	bl	800a1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086f4:	1d3a      	adds	r2, r7, #4
 80086f6:	f107 0310 	add.w	r3, r7, #16
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fe83 	bl	8009408 <xTaskCheckForTimeOut>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d123      	bne.n	8008750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870a:	f000 f917 	bl	800893c <prvIsQueueEmpty>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d017      	beq.n	8008744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fda9 	bl	8009274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008724:	f000 f8b8 	bl	8008898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008728:	f000 fbde 	bl	8008ee8 <xTaskResumeAll>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d189      	bne.n	8008646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008732:	4b10      	ldr	r3, [pc, #64]	; (8008774 <xQueueReceive+0x1bc>)
 8008734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	e780      	b.n	8008646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008746:	f000 f8a7 	bl	8008898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800874a:	f000 fbcd 	bl	8008ee8 <xTaskResumeAll>
 800874e:	e77a      	b.n	8008646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f000 f8a1 	bl	8008898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008756:	f000 fbc7 	bl	8008ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800875a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875c:	f000 f8ee 	bl	800893c <prvIsQueueEmpty>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	f43f af6f 	beq.w	8008646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800876a:	4618      	mov	r0, r3
 800876c:	3730      	adds	r7, #48	; 0x30
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d14d      	bne.n	800883a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 ff92 	bl	80096cc <xTaskPriorityDisinherit>
 80087a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	609a      	str	r2, [r3, #8]
 80087b0:	e043      	b.n	800883a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d119      	bne.n	80087ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6858      	ldr	r0, [r3, #4]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	461a      	mov	r2, r3
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	f002 fe74 	bl	800b4b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	441a      	add	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d32b      	bcc.n	800883a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	e026      	b.n	800883a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68d8      	ldr	r0, [r3, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	461a      	mov	r2, r3
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	f002 fe5a 	bl	800b4b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	425b      	negs	r3, r3
 8008806:	441a      	add	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d207      	bcs.n	8008828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	425b      	negs	r3, r3
 8008822:	441a      	add	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d105      	bne.n	800883a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	3b01      	subs	r3, #1
 8008838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008842:	697b      	ldr	r3, [r7, #20]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d018      	beq.n	8008890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	429a      	cmp	r2, r3
 8008876:	d303      	bcc.n	8008880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68d9      	ldr	r1, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	461a      	mov	r2, r3
 800888a:	6838      	ldr	r0, [r7, #0]
 800888c:	f002 fe10 	bl	800b4b0 <memcpy>
	}
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088a0:	f001 fc50 	bl	800a144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ac:	e011      	b.n	80088d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d012      	beq.n	80088dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3324      	adds	r3, #36	; 0x24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fd2a 	bl	8009314 <xTaskRemoveFromEventList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088c6:	f000 fe01 	bl	80094cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dce9      	bgt.n	80088ae <prvUnlockQueue+0x16>
 80088da:	e000      	b.n	80088de <prvUnlockQueue+0x46>
					break;
 80088dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	22ff      	movs	r2, #255	; 0xff
 80088e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088e6:	f001 fc5d 	bl	800a1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088ea:	f001 fc2b 	bl	800a144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f6:	e011      	b.n	800891c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d012      	beq.n	8008926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3310      	adds	r3, #16
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fd05 	bl	8009314 <xTaskRemoveFromEventList>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008910:	f000 fddc 	bl	80094cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	3b01      	subs	r3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008920:	2b00      	cmp	r3, #0
 8008922:	dce9      	bgt.n	80088f8 <prvUnlockQueue+0x60>
 8008924:	e000      	b.n	8008928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	22ff      	movs	r2, #255	; 0xff
 800892c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008930:	f001 fc38 	bl	800a1a4 <vPortExitCritical>
}
 8008934:	bf00      	nop
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008944:	f001 fbfe 	bl	800a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008950:	2301      	movs	r3, #1
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e001      	b.n	800895a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800895a:	f001 fc23 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 800895e:	68fb      	ldr	r3, [r7, #12]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008970:	f001 fbe8 	bl	800a144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897c:	429a      	cmp	r2, r3
 800897e:	d102      	bne.n	8008986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008980:	2301      	movs	r3, #1
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e001      	b.n	800898a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800898a:	f001 fc0b 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e014      	b.n	80089d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089a8:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <vQueueAddToRegistry+0x50>)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089b4:	490c      	ldr	r1, [pc, #48]	; (80089e8 <vQueueAddToRegistry+0x50>)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089be:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <vQueueAddToRegistry+0x50>)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089ca:	e006      	b.n	80089da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b07      	cmp	r3, #7
 80089d6:	d9e7      	bls.n	80089a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	20001ec0 	.word	0x20001ec0

080089ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089fc:	f001 fba2 	bl	800a144 <vPortEnterCritical>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a06:	b25b      	sxtb	r3, r3
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d103      	bne.n	8008a16 <vQueueWaitForMessageRestricted+0x2a>
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d103      	bne.n	8008a2c <vQueueWaitForMessageRestricted+0x40>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a2c:	f001 fbba 	bl	800a1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d106      	bne.n	8008a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	3324      	adds	r3, #36	; 0x24
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fc3b 	bl	80092bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a46:	6978      	ldr	r0, [r7, #20]
 8008a48:	f7ff ff26 	bl	8008898 <prvUnlockQueue>
	}
 8008a4c:	bf00      	nop
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10a      	bne.n	8008a7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	623b      	str	r3, [r7, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xTaskCreateStatic+0x46>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	61fb      	str	r3, [r7, #28]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a9a:	235c      	movs	r3, #92	; 0x5c
 8008a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8008aa2:	d00a      	beq.n	8008aba <xTaskCreateStatic+0x66>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	61bb      	str	r3, [r7, #24]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01e      	beq.n	8008b00 <xTaskCreateStatic+0xac>
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01b      	beq.n	8008b00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ada:	2300      	movs	r3, #0
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f850 	bl	8008b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008afa:	f000 f8dd 	bl	8008cb8 <prvAddNewTaskToReadyList>
 8008afe:	e001      	b.n	8008b04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b04:	697b      	ldr	r3, [r7, #20]
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08c      	sub	sp, #48	; 0x30
 8008b12:	af04      	add	r7, sp, #16
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fc30 	bl	800a388 <pvPortMalloc>
 8008b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00e      	beq.n	8008b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b30:	205c      	movs	r0, #92	; 0x5c
 8008b32:	f001 fc29 	bl	800a388 <pvPortMalloc>
 8008b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
 8008b44:	e005      	b.n	8008b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b46:	6978      	ldr	r0, [r7, #20]
 8008b48:	f001 fcea 	bl	800a520 <vPortFree>
 8008b4c:	e001      	b.n	8008b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d017      	beq.n	8008b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	2300      	movs	r3, #0
 8008b64:	9303      	str	r3, [sp, #12]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f80e 	bl	8008b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7c:	69f8      	ldr	r0, [r7, #28]
 8008b7e:	f000 f89b 	bl	8008cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b82:	2301      	movs	r3, #1
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	e002      	b.n	8008b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	461a      	mov	r2, r3
 8008bb0:	21a5      	movs	r1, #165	; 0xa5
 8008bb2:	f002 fc8b 	bl	800b4cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	617b      	str	r3, [r7, #20]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01f      	beq.n	8008c36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
 8008bfa:	e012      	b.n	8008c22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	7819      	ldrb	r1, [r3, #0]
 8008c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	3334      	adds	r3, #52	; 0x34
 8008c0c:	460a      	mov	r2, r1
 8008c0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d006      	beq.n	8008c2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	2b0f      	cmp	r3, #15
 8008c26:	d9e9      	bls.n	8008bfc <prvInitialiseNewTask+0x64>
 8008c28:	e000      	b.n	8008c2c <prvInitialiseNewTask+0x94>
			{
				break;
 8008c2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c34:	e003      	b.n	8008c3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	2b37      	cmp	r3, #55	; 0x37
 8008c42:	d901      	bls.n	8008c48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c44:	2337      	movs	r3, #55	; 0x37
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	2200      	movs	r2, #0
 8008c58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f978 	bl	8007f54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	3318      	adds	r3, #24
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff f973 	bl	8007f54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	68f9      	ldr	r1, [r7, #12]
 8008c96:	69b8      	ldr	r0, [r7, #24]
 8008c98:	f001 f928 	bl	8009eec <pxPortInitialiseStack>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cae:	bf00      	nop
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cc0:	f001 fa40 	bl	800a144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cc4:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <prvAddNewTaskToReadyList+0xc4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	4a2c      	ldr	r2, [pc, #176]	; (8008d7c <prvAddNewTaskToReadyList+0xc4>)
 8008ccc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cd6:	4a2a      	ldr	r2, [pc, #168]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cdc:	4b27      	ldr	r3, [pc, #156]	; (8008d7c <prvAddNewTaskToReadyList+0xc4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d110      	bne.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ce4:	f000 fc16 	bl	8009514 <prvInitialiseTaskLists>
 8008ce8:	e00d      	b.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cea:	4b26      	ldr	r3, [pc, #152]	; (8008d84 <prvAddNewTaskToReadyList+0xcc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cf2:	4b23      	ldr	r3, [pc, #140]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d802      	bhi.n	8008d06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d00:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d06:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <prvAddNewTaskToReadyList+0xd0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <prvAddNewTaskToReadyList+0xd0>)
 8008d0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d10:	4b1d      	ldr	r3, [pc, #116]	; (8008d88 <prvAddNewTaskToReadyList+0xd0>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <prvAddNewTaskToReadyList+0xd4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d903      	bls.n	8008d2c <prvAddNewTaskToReadyList+0x74>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <prvAddNewTaskToReadyList+0xd4>)
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a15      	ldr	r2, [pc, #84]	; (8008d90 <prvAddNewTaskToReadyList+0xd8>)
 8008d3a:	441a      	add	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f7ff f913 	bl	8007f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d48:	f001 fa2c 	bl	800a1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <prvAddNewTaskToReadyList+0xcc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <prvAddNewTaskToReadyList+0xc8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d207      	bcs.n	8008d72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <prvAddNewTaskToReadyList+0xdc>)
 8008d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20000d78 	.word	0x20000d78
 8008d80:	200008a4 	.word	0x200008a4
 8008d84:	20000d84 	.word	0x20000d84
 8008d88:	20000d94 	.word	0x20000d94
 8008d8c:	20000d80 	.word	0x20000d80
 8008d90:	200008a8 	.word	0x200008a8
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d017      	beq.n	8008dda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008daa:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <vTaskDelay+0x60>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <vTaskDelay+0x30>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60bb      	str	r3, [r7, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dc8:	f000 f880 	bl	8008ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcea 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dd4:	f000 f888 	bl	8008ee8 <xTaskResumeAll>
 8008dd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d107      	bne.n	8008df0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <vTaskDelay+0x64>)
 8008de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000da0 	.word	0x20000da0
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e0e:	463a      	mov	r2, r7
 8008e10:	1d39      	adds	r1, r7, #4
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff f848 	bl	8007eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	9202      	str	r2, [sp, #8]
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	2300      	movs	r3, #0
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	460a      	mov	r2, r1
 8008e2e:	4921      	ldr	r1, [pc, #132]	; (8008eb4 <vTaskStartScheduler+0xb4>)
 8008e30:	4821      	ldr	r0, [pc, #132]	; (8008eb8 <vTaskStartScheduler+0xb8>)
 8008e32:	f7ff fe0f 	bl	8008a54 <xTaskCreateStatic>
 8008e36:	4603      	mov	r3, r0
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <vTaskStartScheduler+0xbc>)
 8008e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e3c:	4b1f      	ldr	r3, [pc, #124]	; (8008ebc <vTaskStartScheduler+0xbc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e44:	2301      	movs	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	e001      	b.n	8008e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d102      	bne.n	8008e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e54:	f000 fcfc 	bl	8009850 <xTimerCreateTimerTask>
 8008e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d116      	bne.n	8008e8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	613b      	str	r3, [r7, #16]
}
 8008e72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <vTaskStartScheduler+0xc0>)
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <vTaskStartScheduler+0xc4>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e82:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <vTaskStartScheduler+0xc8>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e88:	f001 f8ba 	bl	800a000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e8c:	e00e      	b.n	8008eac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e94:	d10a      	bne.n	8008eac <vTaskStartScheduler+0xac>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <vTaskStartScheduler+0xaa>
}
 8008eac:	bf00      	nop
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	0800b518 	.word	0x0800b518
 8008eb8:	080094e5 	.word	0x080094e5
 8008ebc:	20000d9c 	.word	0x20000d9c
 8008ec0:	20000d98 	.word	0x20000d98
 8008ec4:	20000d84 	.word	0x20000d84
 8008ec8:	20000d7c 	.word	0x20000d7c

08008ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ed0:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <vTaskSuspendAll+0x18>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	4a03      	ldr	r2, [pc, #12]	; (8008ee4 <vTaskSuspendAll+0x18>)
 8008ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008eda:	bf00      	nop
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	20000da0 	.word	0x20000da0

08008ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ef6:	4b42      	ldr	r3, [pc, #264]	; (8009000 <xTaskResumeAll+0x118>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xTaskResumeAll+0x2c>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	603b      	str	r3, [r7, #0]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f14:	f001 f916 	bl	800a144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f18:	4b39      	ldr	r3, [pc, #228]	; (8009000 <xTaskResumeAll+0x118>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	4a38      	ldr	r2, [pc, #224]	; (8009000 <xTaskResumeAll+0x118>)
 8008f20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f22:	4b37      	ldr	r3, [pc, #220]	; (8009000 <xTaskResumeAll+0x118>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d162      	bne.n	8008ff0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f2a:	4b36      	ldr	r3, [pc, #216]	; (8009004 <xTaskResumeAll+0x11c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d05e      	beq.n	8008ff0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f32:	e02f      	b.n	8008f94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f34:	4b34      	ldr	r3, [pc, #208]	; (8009008 <xTaskResumeAll+0x120>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3318      	adds	r3, #24
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff f871 	bl	8008028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff f86c 	bl	8008028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4b2d      	ldr	r3, [pc, #180]	; (800900c <xTaskResumeAll+0x124>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d903      	bls.n	8008f64 <xTaskResumeAll+0x7c>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <xTaskResumeAll+0x124>)
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4a27      	ldr	r2, [pc, #156]	; (8009010 <xTaskResumeAll+0x128>)
 8008f72:	441a      	add	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	f7fe fff7 	bl	8007f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4b23      	ldr	r3, [pc, #140]	; (8009014 <xTaskResumeAll+0x12c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d302      	bcc.n	8008f94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f8e:	4b22      	ldr	r3, [pc, #136]	; (8009018 <xTaskResumeAll+0x130>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f94:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <xTaskResumeAll+0x120>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1cb      	bne.n	8008f34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fa2:	f000 fb55 	bl	8009650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fa6:	4b1d      	ldr	r3, [pc, #116]	; (800901c <xTaskResumeAll+0x134>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d010      	beq.n	8008fd4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fb2:	f000 f847 	bl	8009044 <xTaskIncrementTick>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fbc:	4b16      	ldr	r3, [pc, #88]	; (8009018 <xTaskResumeAll+0x130>)
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f1      	bne.n	8008fb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <xTaskResumeAll+0x134>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <xTaskResumeAll+0x130>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <xTaskResumeAll+0x138>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ff0:	f001 f8d8 	bl	800a1a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000da0 	.word	0x20000da0
 8009004:	20000d78 	.word	0x20000d78
 8009008:	20000d38 	.word	0x20000d38
 800900c:	20000d80 	.word	0x20000d80
 8009010:	200008a8 	.word	0x200008a8
 8009014:	200008a4 	.word	0x200008a4
 8009018:	20000d8c 	.word	0x20000d8c
 800901c:	20000d88 	.word	0x20000d88
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <xTaskGetTickCount+0x1c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009030:	687b      	ldr	r3, [r7, #4]
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000d7c 	.word	0x20000d7c

08009044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904e:	4b4f      	ldr	r3, [pc, #316]	; (800918c <xTaskIncrementTick+0x148>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f040 808f 	bne.w	8009176 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009058:	4b4d      	ldr	r3, [pc, #308]	; (8009190 <xTaskIncrementTick+0x14c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3301      	adds	r3, #1
 800905e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009060:	4a4b      	ldr	r2, [pc, #300]	; (8009190 <xTaskIncrementTick+0x14c>)
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d120      	bne.n	80090ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800906c:	4b49      	ldr	r3, [pc, #292]	; (8009194 <xTaskIncrementTick+0x150>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00a      	beq.n	800908c <xTaskIncrementTick+0x48>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	603b      	str	r3, [r7, #0]
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <xTaskIncrementTick+0x46>
 800908c:	4b41      	ldr	r3, [pc, #260]	; (8009194 <xTaskIncrementTick+0x150>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
 8009092:	4b41      	ldr	r3, [pc, #260]	; (8009198 <xTaskIncrementTick+0x154>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <xTaskIncrementTick+0x150>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	4a3f      	ldr	r2, [pc, #252]	; (8009198 <xTaskIncrementTick+0x154>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	4b3e      	ldr	r3, [pc, #248]	; (800919c <xTaskIncrementTick+0x158>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a3d      	ldr	r2, [pc, #244]	; (800919c <xTaskIncrementTick+0x158>)
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	f000 fad1 	bl	8009650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090ae:	4b3c      	ldr	r3, [pc, #240]	; (80091a0 <xTaskIncrementTick+0x15c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d349      	bcc.n	800914c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b8:	4b36      	ldr	r3, [pc, #216]	; (8009194 <xTaskIncrementTick+0x150>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c2:	4b37      	ldr	r3, [pc, #220]	; (80091a0 <xTaskIncrementTick+0x15c>)
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	601a      	str	r2, [r3, #0]
					break;
 80090ca:	e03f      	b.n	800914c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090cc:	4b31      	ldr	r3, [pc, #196]	; (8009194 <xTaskIncrementTick+0x150>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d203      	bcs.n	80090ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090e4:	4a2e      	ldr	r2, [pc, #184]	; (80091a0 <xTaskIncrementTick+0x15c>)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090ea:	e02f      	b.n	800914c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe ff99 	bl	8008028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	3318      	adds	r3, #24
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe ff90 	bl	8008028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <xTaskIncrementTick+0x160>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d903      	bls.n	800911c <xTaskIncrementTick+0xd8>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	4a22      	ldr	r2, [pc, #136]	; (80091a4 <xTaskIncrementTick+0x160>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4a1f      	ldr	r2, [pc, #124]	; (80091a8 <xTaskIncrementTick+0x164>)
 800912a:	441a      	add	r2, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fe ff1b 	bl	8007f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <xTaskIncrementTick+0x168>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009142:	429a      	cmp	r2, r3
 8009144:	d3b8      	bcc.n	80090b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009146:	2301      	movs	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914a:	e7b5      	b.n	80090b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800914c:	4b17      	ldr	r3, [pc, #92]	; (80091ac <xTaskIncrementTick+0x168>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009152:	4915      	ldr	r1, [pc, #84]	; (80091a8 <xTaskIncrementTick+0x164>)
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d901      	bls.n	8009168 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009168:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <xTaskIncrementTick+0x16c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	e004      	b.n	8009180 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009176:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <xTaskIncrementTick+0x170>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <xTaskIncrementTick+0x170>)
 800917e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009180:	697b      	ldr	r3, [r7, #20]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000da0 	.word	0x20000da0
 8009190:	20000d7c 	.word	0x20000d7c
 8009194:	20000d30 	.word	0x20000d30
 8009198:	20000d34 	.word	0x20000d34
 800919c:	20000d90 	.word	0x20000d90
 80091a0:	20000d98 	.word	0x20000d98
 80091a4:	20000d80 	.word	0x20000d80
 80091a8:	200008a8 	.word	0x200008a8
 80091ac:	200008a4 	.word	0x200008a4
 80091b0:	20000d8c 	.word	0x20000d8c
 80091b4:	20000d88 	.word	0x20000d88

080091b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091be:	4b28      	ldr	r3, [pc, #160]	; (8009260 <vTaskSwitchContext+0xa8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091c6:	4b27      	ldr	r3, [pc, #156]	; (8009264 <vTaskSwitchContext+0xac>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091cc:	e041      	b.n	8009252 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80091ce:	4b25      	ldr	r3, [pc, #148]	; (8009264 <vTaskSwitchContext+0xac>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d4:	4b24      	ldr	r3, [pc, #144]	; (8009268 <vTaskSwitchContext+0xb0>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	e010      	b.n	80091fe <vTaskSwitchContext+0x46>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	607b      	str	r3, [r7, #4]
}
 80091f4:	bf00      	nop
 80091f6:	e7fe      	b.n	80091f6 <vTaskSwitchContext+0x3e>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3b01      	subs	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	491b      	ldr	r1, [pc, #108]	; (800926c <vTaskSwitchContext+0xb4>)
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0e4      	beq.n	80091dc <vTaskSwitchContext+0x24>
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4a13      	ldr	r2, [pc, #76]	; (800926c <vTaskSwitchContext+0xb4>)
 800921e:	4413      	add	r3, r2
 8009220:	60bb      	str	r3, [r7, #8]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	605a      	str	r2, [r3, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3308      	adds	r3, #8
 8009234:	429a      	cmp	r2, r3
 8009236:	d104      	bne.n	8009242 <vTaskSwitchContext+0x8a>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	605a      	str	r2, [r3, #4]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4a09      	ldr	r2, [pc, #36]	; (8009270 <vTaskSwitchContext+0xb8>)
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	4a06      	ldr	r2, [pc, #24]	; (8009268 <vTaskSwitchContext+0xb0>)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6013      	str	r3, [r2, #0]
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	20000da0 	.word	0x20000da0
 8009264:	20000d8c 	.word	0x20000d8c
 8009268:	20000d80 	.word	0x20000d80
 800926c:	200008a8 	.word	0x200008a8
 8009270:	200008a4 	.word	0x200008a4

08009274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60fb      	str	r3, [r7, #12]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <vTaskPlaceOnEventList+0x44>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3318      	adds	r3, #24
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fe fe87 	bl	8007fb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092a8:	2101      	movs	r1, #1
 80092aa:	6838      	ldr	r0, [r7, #0]
 80092ac:	f000 fa7c 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	200008a4 	.word	0x200008a4

080092bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	617b      	str	r3, [r7, #20]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e4:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <vTaskPlaceOnEventListRestricted+0x54>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3318      	adds	r3, #24
 80092ea:	4619      	mov	r1, r3
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7fe fe3e 	bl	8007f6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092f8:	f04f 33ff 	mov.w	r3, #4294967295
 80092fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	68b8      	ldr	r0, [r7, #8]
 8009302:	f000 fa51 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
	}
 8009306:	bf00      	nop
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200008a4 	.word	0x200008a4

08009314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	60fb      	str	r3, [r7, #12]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3318      	adds	r3, #24
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fe6f 	bl	8008028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800934a:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <xTaskRemoveFromEventList+0xb0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d11d      	bne.n	800938e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fe66 	bl	8008028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <xTaskRemoveFromEventList+0xb4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d903      	bls.n	8009370 <xTaskRemoveFromEventList+0x5c>
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	4a16      	ldr	r2, [pc, #88]	; (80093c8 <xTaskRemoveFromEventList+0xb4>)
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4a13      	ldr	r2, [pc, #76]	; (80093cc <xTaskRemoveFromEventList+0xb8>)
 800937e:	441a      	add	r2, r3
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	3304      	adds	r3, #4
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fe fdf1 	bl	8007f6e <vListInsertEnd>
 800938c:	e005      	b.n	800939a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3318      	adds	r3, #24
 8009392:	4619      	mov	r1, r3
 8009394:	480e      	ldr	r0, [pc, #56]	; (80093d0 <xTaskRemoveFromEventList+0xbc>)
 8009396:	f7fe fdea 	bl	8007f6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939e:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <xTaskRemoveFromEventList+0xc0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d905      	bls.n	80093b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093ac:	4b0a      	ldr	r3, [pc, #40]	; (80093d8 <xTaskRemoveFromEventList+0xc4>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e001      	b.n	80093b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093b8:	697b      	ldr	r3, [r7, #20]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000da0 	.word	0x20000da0
 80093c8:	20000d80 	.word	0x20000d80
 80093cc:	200008a8 	.word	0x200008a8
 80093d0:	20000d38 	.word	0x20000d38
 80093d4:	200008a4 	.word	0x200008a4
 80093d8:	20000d8c 	.word	0x20000d8c

080093dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093e4:	4b06      	ldr	r3, [pc, #24]	; (8009400 <vTaskInternalSetTimeOutState+0x24>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <vTaskInternalSetTimeOutState+0x28>)
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	605a      	str	r2, [r3, #4]
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	20000d90 	.word	0x20000d90
 8009404:	20000d7c 	.word	0x20000d7c

08009408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	613b      	str	r3, [r7, #16]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800944a:	f000 fe7b 	bl	800a144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800944e:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <xTaskCheckForTimeOut+0xbc>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d102      	bne.n	800946e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009468:	2300      	movs	r3, #0
 800946a:	61fb      	str	r3, [r7, #28]
 800946c:	e023      	b.n	80094b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <xTaskCheckForTimeOut+0xc0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d007      	beq.n	800948a <xTaskCheckForTimeOut+0x82>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	429a      	cmp	r2, r3
 8009482:	d302      	bcc.n	800948a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e015      	b.n	80094b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	429a      	cmp	r2, r3
 8009492:	d20b      	bcs.n	80094ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff9b 	bl	80093dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
 80094aa:	e004      	b.n	80094b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094b2:	2301      	movs	r3, #1
 80094b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094b6:	f000 fe75 	bl	800a1a4 <vPortExitCritical>

	return xReturn;
 80094ba:	69fb      	ldr	r3, [r7, #28]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3720      	adds	r7, #32
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000d7c 	.word	0x20000d7c
 80094c8:	20000d90 	.word	0x20000d90

080094cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094d0:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <vTaskMissedYield+0x14>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20000d8c 	.word	0x20000d8c

080094e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094ec:	f000 f852 	bl	8009594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094f0:	4b06      	ldr	r3, [pc, #24]	; (800950c <prvIdleTask+0x28>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d9f9      	bls.n	80094ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <prvIdleTask+0x2c>)
 80094fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009508:	e7f0      	b.n	80094ec <prvIdleTask+0x8>
 800950a:	bf00      	nop
 800950c:	200008a8 	.word	0x200008a8
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
 800951e:	e00c      	b.n	800953a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4a12      	ldr	r2, [pc, #72]	; (8009574 <prvInitialiseTaskLists+0x60>)
 800952c:	4413      	add	r3, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fcf0 	bl	8007f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3301      	adds	r3, #1
 8009538:	607b      	str	r3, [r7, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b37      	cmp	r3, #55	; 0x37
 800953e:	d9ef      	bls.n	8009520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009540:	480d      	ldr	r0, [pc, #52]	; (8009578 <prvInitialiseTaskLists+0x64>)
 8009542:	f7fe fce7 	bl	8007f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009546:	480d      	ldr	r0, [pc, #52]	; (800957c <prvInitialiseTaskLists+0x68>)
 8009548:	f7fe fce4 	bl	8007f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800954c:	480c      	ldr	r0, [pc, #48]	; (8009580 <prvInitialiseTaskLists+0x6c>)
 800954e:	f7fe fce1 	bl	8007f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009552:	480c      	ldr	r0, [pc, #48]	; (8009584 <prvInitialiseTaskLists+0x70>)
 8009554:	f7fe fcde 	bl	8007f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009558:	480b      	ldr	r0, [pc, #44]	; (8009588 <prvInitialiseTaskLists+0x74>)
 800955a:	f7fe fcdb 	bl	8007f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800955e:	4b0b      	ldr	r3, [pc, #44]	; (800958c <prvInitialiseTaskLists+0x78>)
 8009560:	4a05      	ldr	r2, [pc, #20]	; (8009578 <prvInitialiseTaskLists+0x64>)
 8009562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <prvInitialiseTaskLists+0x7c>)
 8009566:	4a05      	ldr	r2, [pc, #20]	; (800957c <prvInitialiseTaskLists+0x68>)
 8009568:	601a      	str	r2, [r3, #0]
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200008a8 	.word	0x200008a8
 8009578:	20000d08 	.word	0x20000d08
 800957c:	20000d1c 	.word	0x20000d1c
 8009580:	20000d38 	.word	0x20000d38
 8009584:	20000d4c 	.word	0x20000d4c
 8009588:	20000d64 	.word	0x20000d64
 800958c:	20000d30 	.word	0x20000d30
 8009590:	20000d34 	.word	0x20000d34

08009594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800959a:	e019      	b.n	80095d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800959c:	f000 fdd2 	bl	800a144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a0:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <prvCheckTasksWaitingTermination+0x50>)
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fe fd3b 	bl	8008028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095b2:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <prvCheckTasksWaitingTermination+0x54>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	4a0b      	ldr	r2, [pc, #44]	; (80095e8 <prvCheckTasksWaitingTermination+0x54>)
 80095ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <prvCheckTasksWaitingTermination+0x58>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <prvCheckTasksWaitingTermination+0x58>)
 80095c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095c6:	f000 fded 	bl	800a1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f810 	bl	80095f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d0:	4b06      	ldr	r3, [pc, #24]	; (80095ec <prvCheckTasksWaitingTermination+0x58>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e1      	bne.n	800959c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000d4c 	.word	0x20000d4c
 80095e8:	20000d78 	.word	0x20000d78
 80095ec:	20000d60 	.word	0x20000d60

080095f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d108      	bne.n	8009614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	4618      	mov	r0, r3
 8009608:	f000 ff8a 	bl	800a520 <vPortFree>
				vPortFree( pxTCB );
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 ff87 	bl	800a520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009612:	e018      	b.n	8009646 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800961a:	2b01      	cmp	r3, #1
 800961c:	d103      	bne.n	8009626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 ff7e 	bl	800a520 <vPortFree>
	}
 8009624:	e00f      	b.n	8009646 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800962c:	2b02      	cmp	r3, #2
 800962e:	d00a      	beq.n	8009646 <prvDeleteTCB+0x56>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60fb      	str	r3, [r7, #12]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <prvDeleteTCB+0x54>
	}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009656:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <prvResetNextTaskUnblockTime+0x38>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009660:	4b0a      	ldr	r3, [pc, #40]	; (800968c <prvResetNextTaskUnblockTime+0x3c>)
 8009662:	f04f 32ff 	mov.w	r2, #4294967295
 8009666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009668:	e008      	b.n	800967c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <prvResetNextTaskUnblockTime+0x38>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4a04      	ldr	r2, [pc, #16]	; (800968c <prvResetNextTaskUnblockTime+0x3c>)
 800967a:	6013      	str	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20000d30 	.word	0x20000d30
 800968c:	20000d98 	.word	0x20000d98

08009690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <xTaskGetSchedulerState+0x34>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800969e:	2301      	movs	r3, #1
 80096a0:	607b      	str	r3, [r7, #4]
 80096a2:	e008      	b.n	80096b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <xTaskGetSchedulerState+0x38>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d102      	bne.n	80096b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096ac:	2302      	movs	r3, #2
 80096ae:	607b      	str	r3, [r7, #4]
 80096b0:	e001      	b.n	80096b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096b6:	687b      	ldr	r3, [r7, #4]
	}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	20000d84 	.word	0x20000d84
 80096c8:	20000da0 	.word	0x20000da0

080096cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d056      	beq.n	8009790 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096e2:	4b2e      	ldr	r3, [pc, #184]	; (800979c <xTaskPriorityDisinherit+0xd0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d00a      	beq.n	8009702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	60fb      	str	r3, [r7, #12]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60bb      	str	r3, [r7, #8]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009732:	429a      	cmp	r2, r3
 8009734:	d02c      	beq.n	8009790 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	2b00      	cmp	r3, #0
 800973c:	d128      	bne.n	8009790 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3304      	adds	r3, #4
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fc70 	bl	8008028 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009760:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <xTaskPriorityDisinherit+0xd4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d903      	bls.n	8009770 <xTaskPriorityDisinherit+0xa4>
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	4a0c      	ldr	r2, [pc, #48]	; (80097a0 <xTaskPriorityDisinherit+0xd4>)
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <xTaskPriorityDisinherit+0xd8>)
 800977e:	441a      	add	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4610      	mov	r0, r2
 8009788:	f7fe fbf1 	bl	8007f6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800978c:	2301      	movs	r3, #1
 800978e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009790:	697b      	ldr	r3, [r7, #20]
	}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200008a4 	.word	0x200008a4
 80097a0:	20000d80 	.word	0x20000d80
 80097a4:	200008a8 	.word	0x200008a8

080097a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097b2:	4b21      	ldr	r3, [pc, #132]	; (8009838 <prvAddCurrentTaskToDelayedList+0x90>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b8:	4b20      	ldr	r3, [pc, #128]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3304      	adds	r3, #4
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fc32 	bl	8008028 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ca:	d10a      	bne.n	80097e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4619      	mov	r1, r3
 80097da:	4819      	ldr	r0, [pc, #100]	; (8009840 <prvAddCurrentTaskToDelayedList+0x98>)
 80097dc:	f7fe fbc7 	bl	8007f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097e0:	e026      	b.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4413      	add	r3, r2
 80097e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097ea:	4b14      	ldr	r3, [pc, #80]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d209      	bcs.n	800980e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f7fe fbd5 	bl	8007fb6 <vListInsert>
}
 800980c:	e010      	b.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7fe fbcb 	bl	8007fb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009820:	4b0a      	ldr	r3, [pc, #40]	; (800984c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	429a      	cmp	r2, r3
 8009828:	d202      	bcs.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <prvAddCurrentTaskToDelayedList+0xa4>)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6013      	str	r3, [r2, #0]
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20000d7c 	.word	0x20000d7c
 800983c:	200008a4 	.word	0x200008a4
 8009840:	20000d64 	.word	0x20000d64
 8009844:	20000d34 	.word	0x20000d34
 8009848:	20000d30 	.word	0x20000d30
 800984c:	20000d98 	.word	0x20000d98

08009850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800985a:	f000 fb07 	bl	8009e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800985e:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <xTimerCreateTimerTask+0x80>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d021      	beq.n	80098aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800986e:	1d3a      	adds	r2, r7, #4
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fb31 	bl	8007ee0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	9202      	str	r2, [sp, #8]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	2302      	movs	r3, #2
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2300      	movs	r3, #0
 800988e:	460a      	mov	r2, r1
 8009890:	4910      	ldr	r1, [pc, #64]	; (80098d4 <xTimerCreateTimerTask+0x84>)
 8009892:	4811      	ldr	r0, [pc, #68]	; (80098d8 <xTimerCreateTimerTask+0x88>)
 8009894:	f7ff f8de 	bl	8008a54 <xTaskCreateStatic>
 8009898:	4603      	mov	r3, r0
 800989a:	4a10      	ldr	r2, [pc, #64]	; (80098dc <xTimerCreateTimerTask+0x8c>)
 800989c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <xTimerCreateTimerTask+0x8c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098a6:	2301      	movs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20000dd4 	.word	0x20000dd4
 80098d4:	0800b520 	.word	0x0800b520
 80098d8:	08009a15 	.word	0x08009a15
 80098dc:	20000dd8 	.word	0x20000dd8

080098e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xTimerGenericCommand+0x2e>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	623b      	str	r3, [r7, #32]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <xTimerGenericCommand+0x98>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02a      	beq.n	800996c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b05      	cmp	r3, #5
 8009926:	dc18      	bgt.n	800995a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009928:	f7ff feb2 	bl	8009690 <xTaskGetSchedulerState>
 800992c:	4603      	mov	r3, r0
 800992e:	2b02      	cmp	r3, #2
 8009930:	d109      	bne.n	8009946 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <xTimerGenericCommand+0x98>)
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	f107 0110 	add.w	r1, r7, #16
 800993a:	2300      	movs	r3, #0
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	f7fe fca1 	bl	8008284 <xQueueGenericSend>
 8009942:	6278      	str	r0, [r7, #36]	; 0x24
 8009944:	e012      	b.n	800996c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009946:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <xTimerGenericCommand+0x98>)
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f107 0110 	add.w	r1, r7, #16
 800994e:	2300      	movs	r3, #0
 8009950:	2200      	movs	r2, #0
 8009952:	f7fe fc97 	bl	8008284 <xQueueGenericSend>
 8009956:	6278      	str	r0, [r7, #36]	; 0x24
 8009958:	e008      	b.n	800996c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <xTimerGenericCommand+0x98>)
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f107 0110 	add.w	r1, r7, #16
 8009962:	2300      	movs	r3, #0
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	f7fe fd8b 	bl	8008480 <xQueueGenericSendFromISR>
 800996a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800996e:	4618      	mov	r0, r3
 8009970:	3728      	adds	r7, #40	; 0x28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000dd4 	.word	0x20000dd4

0800997c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009986:	4b22      	ldr	r3, [pc, #136]	; (8009a10 <prvProcessExpiredTimer+0x94>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	3304      	adds	r3, #4
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fb47 	bl	8008028 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099a0:	f003 0304 	and.w	r3, r3, #4
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d022      	beq.n	80099ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	699a      	ldr	r2, [r3, #24]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	18d1      	adds	r1, r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	6978      	ldr	r0, [r7, #20]
 80099b6:	f000 f8d1 	bl	8009b5c <prvInsertTimerInActiveList>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01f      	beq.n	8009a00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099c0:	2300      	movs	r3, #0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	2100      	movs	r1, #0
 80099ca:	6978      	ldr	r0, [r7, #20]
 80099cc:	f7ff ff88 	bl	80098e0 <xTimerGenericCommand>
 80099d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d113      	bne.n	8009a00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	60fb      	str	r3, [r7, #12]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f4:	f023 0301 	bic.w	r3, r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	6978      	ldr	r0, [r7, #20]
 8009a06:	4798      	blx	r3
}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20000dcc 	.word	0x20000dcc

08009a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f857 	bl	8009ad4 <prvGetNextExpireTime>
 8009a26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f803 	bl	8009a38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a32:	f000 f8d5 	bl	8009be0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a36:	e7f1      	b.n	8009a1c <prvTimerTask+0x8>

08009a38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a42:	f7ff fa43 	bl	8008ecc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a46:	f107 0308 	add.w	r3, r7, #8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f866 	bl	8009b1c <prvSampleTimeNow>
 8009a50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d130      	bne.n	8009aba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10a      	bne.n	8009a74 <prvProcessTimerOrBlockTask+0x3c>
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d806      	bhi.n	8009a74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a66:	f7ff fa3f 	bl	8008ee8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff ff85 	bl	800997c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a72:	e024      	b.n	8009abe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d008      	beq.n	8009a8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a7a:	4b13      	ldr	r3, [pc, #76]	; (8009ac8 <prvProcessTimerOrBlockTask+0x90>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <prvProcessTimerOrBlockTask+0x50>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <prvProcessTimerOrBlockTask+0x52>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a8c:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <prvProcessTimerOrBlockTask+0x94>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4619      	mov	r1, r3
 8009a9a:	f7fe ffa7 	bl	80089ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a9e:	f7ff fa23 	bl	8008ee8 <xTaskResumeAll>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10a      	bne.n	8009abe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009aa8:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <prvProcessTimerOrBlockTask+0x98>)
 8009aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	f3bf 8f6f 	isb	sy
}
 8009ab8:	e001      	b.n	8009abe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aba:	f7ff fa15 	bl	8008ee8 <xTaskResumeAll>
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000dd0 	.word	0x20000dd0
 8009acc:	20000dd4 	.word	0x20000dd4
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009adc:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <prvGetNextExpireTime+0x44>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <prvGetNextExpireTime+0x16>
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	e000      	b.n	8009aec <prvGetNextExpireTime+0x18>
 8009aea:	2200      	movs	r2, #0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af8:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <prvGetNextExpireTime+0x44>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e001      	b.n	8009b08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b08:	68fb      	ldr	r3, [r7, #12]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20000dcc 	.word	0x20000dcc

08009b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b24:	f7ff fa7e 	bl	8009024 <xTaskGetTickCount>
 8009b28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b2a:	4b0b      	ldr	r3, [pc, #44]	; (8009b58 <prvSampleTimeNow+0x3c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d205      	bcs.n	8009b40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b34:	f000 f936 	bl	8009da4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e002      	b.n	8009b46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b46:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <prvSampleTimeNow+0x3c>)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000ddc 	.word	0x20000ddc

08009b5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d812      	bhi.n	8009ba8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	1ad2      	subs	r2, r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d302      	bcc.n	8009b96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e01b      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b96:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <prvInsertTimerInActiveList+0x7c>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7fe fa08 	bl	8007fb6 <vListInsert>
 8009ba6:	e012      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d206      	bcs.n	8009bbe <prvInsertTimerInActiveList+0x62>
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d302      	bcc.n	8009bbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	e007      	b.n	8009bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bbe:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <prvInsertTimerInActiveList+0x80>)
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7fe f9f4 	bl	8007fb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bce:	697b      	ldr	r3, [r7, #20]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000dd0 	.word	0x20000dd0
 8009bdc:	20000dcc 	.word	0x20000dcc

08009be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08e      	sub	sp, #56	; 0x38
 8009be4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009be6:	e0ca      	b.n	8009d7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	da18      	bge.n	8009c20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bee:	1d3b      	adds	r3, r7, #4
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	61fb      	str	r3, [r7, #28]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c16:	6850      	ldr	r0, [r2, #4]
 8009c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c1a:	6892      	ldr	r2, [r2, #8]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f2c0 80aa 	blt.w	8009d7c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	3304      	adds	r3, #4
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fe f9f5 	bl	8008028 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c3e:	463b      	mov	r3, r7
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff ff6b 	bl	8009b1c <prvSampleTimeNow>
 8009c46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b09      	cmp	r3, #9
 8009c4c:	f200 8097 	bhi.w	8009d7e <prvProcessReceivedCommands+0x19e>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <prvProcessReceivedCommands+0x78>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009cf5 	.word	0x08009cf5
 8009c68:	08009d09 	.word	0x08009d09
 8009c6c:	08009d53 	.word	0x08009d53
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c81 	.word	0x08009c81
 8009c78:	08009cf5 	.word	0x08009cf5
 8009c7c:	08009d09 	.word	0x08009d09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	18d1      	adds	r1, r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca0:	f7ff ff5c 	bl	8009b5c <prvInsertTimerInActiveList>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d069      	beq.n	8009d7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d05e      	beq.n	8009d7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	441a      	add	r2, r3
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd2:	f7ff fe05 	bl	80098e0 <xTimerGenericCommand>
 8009cd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d14f      	bne.n	8009d7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	61bb      	str	r3, [r7, #24]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cfa:	f023 0301 	bic.w	r3, r3, #1
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d06:	e03a      	b.n	8009d7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10a      	bne.n	8009d3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	617b      	str	r3, [r7, #20]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	699a      	ldr	r2, [r3, #24]
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	18d1      	adds	r1, r2, r3
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d4c:	f7ff ff06 	bl	8009b5c <prvInsertTimerInActiveList>
					break;
 8009d50:	e015      	b.n	8009d7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d103      	bne.n	8009d68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d62:	f000 fbdd 	bl	800a520 <vPortFree>
 8009d66:	e00a      	b.n	8009d7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6e:	f023 0301 	bic.w	r3, r3, #1
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d7a:	e000      	b.n	8009d7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d7e:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <prvProcessReceivedCommands+0x1c0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	1d39      	adds	r1, r7, #4
 8009d84:	2200      	movs	r2, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fc16 	bl	80085b8 <xQueueReceive>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f47f af2a 	bne.w	8009be8 <prvProcessReceivedCommands+0x8>
	}
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	3730      	adds	r7, #48	; 0x30
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000dd4 	.word	0x20000dd4

08009da4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009daa:	e048      	b.n	8009e3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dac:	4b2d      	ldr	r3, [pc, #180]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db6:	4b2b      	ldr	r3, [pc, #172]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe f92f 	bl	8008028 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd8:	f003 0304 	and.w	r3, r3, #4
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02e      	beq.n	8009e3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4413      	add	r3, r2
 8009de8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d90e      	bls.n	8009e10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dfe:	4b19      	ldr	r3, [pc, #100]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3304      	adds	r3, #4
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7fe f8d4 	bl	8007fb6 <vListInsert>
 8009e0e:	e016      	b.n	8009e3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e10:	2300      	movs	r3, #0
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	2300      	movs	r3, #0
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7ff fd60 	bl	80098e0 <xTimerGenericCommand>
 8009e20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	603b      	str	r3, [r7, #0]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e3e:	4b09      	ldr	r3, [pc, #36]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1b1      	bne.n	8009dac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e48:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e4e:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <prvSwitchTimerLists+0xc4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <prvSwitchTimerLists+0xc0>)
 8009e54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e56:	4a04      	ldr	r2, [pc, #16]	; (8009e68 <prvSwitchTimerLists+0xc4>)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	6013      	str	r3, [r2, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20000dcc 	.word	0x20000dcc
 8009e68:	20000dd0 	.word	0x20000dd0

08009e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e72:	f000 f967 	bl	800a144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <prvCheckForValidListAndQueue+0x60>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d120      	bne.n	8009ec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e7e:	4814      	ldr	r0, [pc, #80]	; (8009ed0 <prvCheckForValidListAndQueue+0x64>)
 8009e80:	f7fe f848 	bl	8007f14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e84:	4813      	ldr	r0, [pc, #76]	; (8009ed4 <prvCheckForValidListAndQueue+0x68>)
 8009e86:	f7fe f845 	bl	8007f14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e8a:	4b13      	ldr	r3, [pc, #76]	; (8009ed8 <prvCheckForValidListAndQueue+0x6c>)
 8009e8c:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <prvCheckForValidListAndQueue+0x64>)
 8009e8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e90:	4b12      	ldr	r3, [pc, #72]	; (8009edc <prvCheckForValidListAndQueue+0x70>)
 8009e92:	4a10      	ldr	r2, [pc, #64]	; (8009ed4 <prvCheckForValidListAndQueue+0x68>)
 8009e94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e96:	2300      	movs	r3, #0
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <prvCheckForValidListAndQueue+0x74>)
 8009e9c:	4a11      	ldr	r2, [pc, #68]	; (8009ee4 <prvCheckForValidListAndQueue+0x78>)
 8009e9e:	2110      	movs	r1, #16
 8009ea0:	200a      	movs	r0, #10
 8009ea2:	f7fe f953 	bl	800814c <xQueueGenericCreateStatic>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <prvCheckForValidListAndQueue+0x60>)
 8009eaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009eac:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <prvCheckForValidListAndQueue+0x60>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009eb4:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <prvCheckForValidListAndQueue+0x60>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	490b      	ldr	r1, [pc, #44]	; (8009ee8 <prvCheckForValidListAndQueue+0x7c>)
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fd6c 	bl	8008998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ec0:	f000 f970 	bl	800a1a4 <vPortExitCritical>
}
 8009ec4:	bf00      	nop
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000dd4 	.word	0x20000dd4
 8009ed0:	20000da4 	.word	0x20000da4
 8009ed4:	20000db8 	.word	0x20000db8
 8009ed8:	20000dcc 	.word	0x20000dcc
 8009edc:	20000dd0 	.word	0x20000dd0
 8009ee0:	20000e80 	.word	0x20000e80
 8009ee4:	20000de0 	.word	0x20000de0
 8009ee8:	0800b528 	.word	0x0800b528

08009eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3b04      	subs	r3, #4
 8009efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f023 0201 	bic.w	r2, r3, #1
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <pxPortInitialiseStack+0x64>)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3b14      	subs	r3, #20
 8009f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f06f 0202 	mvn.w	r2, #2
 8009f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3b20      	subs	r3, #32
 8009f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f42:	68fb      	ldr	r3, [r7, #12]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	08009f55 	.word	0x08009f55

08009f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f5e:	4b12      	ldr	r3, [pc, #72]	; (8009fa8 <prvTaskExitError+0x54>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d00a      	beq.n	8009f7e <prvTaskExitError+0x2a>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	60fb      	str	r3, [r7, #12]
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <prvTaskExitError+0x28>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f92:	bf00      	nop
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0fc      	beq.n	8009f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	20000120 	.word	0x20000120
 8009fac:	00000000 	.word	0x00000000

08009fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <pxCurrentTCBConst2>)
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	6808      	ldr	r0, [r1, #0]
 8009fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	f380 8809 	msr	PSP, r0
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8811 	msr	BASEPRI, r0
 8009fca:	4770      	bx	lr
 8009fcc:	f3af 8000 	nop.w

08009fd0 <pxCurrentTCBConst2>:
 8009fd0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop

08009fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fd8:	4808      	ldr	r0, [pc, #32]	; (8009ffc <prvPortStartFirstTask+0x24>)
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	6800      	ldr	r0, [r0, #0]
 8009fde:	f380 8808 	msr	MSP, r0
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f380 8814 	msr	CONTROL, r0
 8009fea:	b662      	cpsie	i
 8009fec:	b661      	cpsie	f
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	df00      	svc	0
 8009ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009ffa:	bf00      	nop
 8009ffc:	e000ed08 	.word	0xe000ed08

0800a000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a006:	4b46      	ldr	r3, [pc, #280]	; (800a120 <xPortStartScheduler+0x120>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a46      	ldr	r2, [pc, #280]	; (800a124 <xPortStartScheduler+0x124>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10a      	bne.n	800a026 <xPortStartScheduler+0x26>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	613b      	str	r3, [r7, #16]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a026:	4b3e      	ldr	r3, [pc, #248]	; (800a120 <xPortStartScheduler+0x120>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <xPortStartScheduler+0x128>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10a      	bne.n	800a046 <xPortStartScheduler+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	60fb      	str	r3, [r7, #12]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a046:	4b39      	ldr	r3, [pc, #228]	; (800a12c <xPortStartScheduler+0x12c>)
 800a048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	22ff      	movs	r2, #255	; 0xff
 800a056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4b31      	ldr	r3, [pc, #196]	; (800a130 <xPortStartScheduler+0x130>)
 800a06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a06e:	4b31      	ldr	r3, [pc, #196]	; (800a134 <xPortStartScheduler+0x134>)
 800a070:	2207      	movs	r2, #7
 800a072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a074:	e009      	b.n	800a08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a076:	4b2f      	ldr	r3, [pc, #188]	; (800a134 <xPortStartScheduler+0x134>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	4a2d      	ldr	r2, [pc, #180]	; (800a134 <xPortStartScheduler+0x134>)
 800a07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a092:	2b80      	cmp	r3, #128	; 0x80
 800a094:	d0ef      	beq.n	800a076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a096:	4b27      	ldr	r3, [pc, #156]	; (800a134 <xPortStartScheduler+0x134>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1c3 0307 	rsb	r3, r3, #7
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d00a      	beq.n	800a0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	60bb      	str	r3, [r7, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	e7fe      	b.n	800a0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <xPortStartScheduler+0x134>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <xPortStartScheduler+0x134>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0ca:	4a1a      	ldr	r2, [pc, #104]	; (800a134 <xPortStartScheduler+0x134>)
 800a0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0d6:	4b18      	ldr	r3, [pc, #96]	; (800a138 <xPortStartScheduler+0x138>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a17      	ldr	r2, [pc, #92]	; (800a138 <xPortStartScheduler+0x138>)
 800a0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a14      	ldr	r2, [pc, #80]	; (800a138 <xPortStartScheduler+0x138>)
 800a0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0ee:	f000 f8dd 	bl	800a2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0f2:	4b12      	ldr	r3, [pc, #72]	; (800a13c <xPortStartScheduler+0x13c>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0f8:	f000 f8fc 	bl	800a2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0fc:	4b10      	ldr	r3, [pc, #64]	; (800a140 <xPortStartScheduler+0x140>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <xPortStartScheduler+0x140>)
 800a102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a108:	f7ff ff66 	bl	8009fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a10c:	f7ff f854 	bl	80091b8 <vTaskSwitchContext>
	prvTaskExitError();
 800a110:	f7ff ff20 	bl	8009f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	e000ed00 	.word	0xe000ed00
 800a124:	410fc271 	.word	0x410fc271
 800a128:	410fc270 	.word	0x410fc270
 800a12c:	e000e400 	.word	0xe000e400
 800a130:	20000ed0 	.word	0x20000ed0
 800a134:	20000ed4 	.word	0x20000ed4
 800a138:	e000ed20 	.word	0xe000ed20
 800a13c:	20000120 	.word	0x20000120
 800a140:	e000ef34 	.word	0xe000ef34

0800a144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	607b      	str	r3, [r7, #4]
}
 800a15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a15e:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <vPortEnterCritical+0x58>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <vPortEnterCritical+0x58>)
 800a166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <vPortEnterCritical+0x58>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d10f      	bne.n	800a190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a170:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <vPortEnterCritical+0x5c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <vPortEnterCritical+0x4c>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	603b      	str	r3, [r7, #0]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <vPortEnterCritical+0x4a>
	}
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	20000120 	.word	0x20000120
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1aa:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10a      	bne.n	800a1c8 <vPortExitCritical+0x24>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	607b      	str	r3, [r7, #4]
}
 800a1c4:	bf00      	nop
 800a1c6:	e7fe      	b.n	800a1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1d2:	4b08      	ldr	r3, [pc, #32]	; (800a1f4 <vPortExitCritical+0x50>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d105      	bne.n	800a1e6 <vPortExitCritical+0x42>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	f383 8811 	msr	BASEPRI, r3
}
 800a1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000120 	.word	0x20000120
	...

0800a200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a200:	f3ef 8009 	mrs	r0, PSP
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <pxCurrentTCBConst>)
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	f01e 0f10 	tst.w	lr, #16
 800a210:	bf08      	it	eq
 800a212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a224:	f380 8811 	msr	BASEPRI, r0
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f7fe ffc2 	bl	80091b8 <vTaskSwitchContext>
 800a234:	f04f 0000 	mov.w	r0, #0
 800a238:	f380 8811 	msr	BASEPRI, r0
 800a23c:	bc09      	pop	{r0, r3}
 800a23e:	6819      	ldr	r1, [r3, #0]
 800a240:	6808      	ldr	r0, [r1, #0]
 800a242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a246:	f01e 0f10 	tst.w	lr, #16
 800a24a:	bf08      	it	eq
 800a24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a250:	f380 8809 	msr	PSP, r0
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	f3af 8000 	nop.w

0800a260 <pxCurrentTCBConst>:
 800a260:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop

0800a268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	607b      	str	r3, [r7, #4]
}
 800a280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a282:	f7fe fedf 	bl	8009044 <xTaskIncrementTick>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <xPortSysTickHandler+0x40>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	f383 8811 	msr	BASEPRI, r3
}
 800a29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <vPortSetupTimerInterrupt+0x38>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <vPortSetupTimerInterrupt+0x3c>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a0a      	ldr	r2, [pc, #40]	; (800a2ec <vPortSetupTimerInterrupt+0x40>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	099b      	lsrs	r3, r3, #6
 800a2c8:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <vPortSetupTimerInterrupt+0x44>)
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ce:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <vPortSetupTimerInterrupt+0x34>)
 800a2d0:	2207      	movs	r2, #7
 800a2d2:	601a      	str	r2, [r3, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	e000e010 	.word	0xe000e010
 800a2e4:	e000e018 	.word	0xe000e018
 800a2e8:	20000004 	.word	0x20000004
 800a2ec:	10624dd3 	.word	0x10624dd3
 800a2f0:	e000e014 	.word	0xe000e014

0800a2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a304 <vPortEnableVFP+0x10>
 800a2f8:	6801      	ldr	r1, [r0, #0]
 800a2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2fe:	6001      	str	r1, [r0, #0]
 800a300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a302:	bf00      	nop
 800a304:	e000ed88 	.word	0xe000ed88

0800a308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a30e:	f3ef 8305 	mrs	r3, IPSR
 800a312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d914      	bls.n	800a344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a31a:	4a17      	ldr	r2, [pc, #92]	; (800a378 <vPortValidateInterruptPriority+0x70>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a324:	4b15      	ldr	r3, [pc, #84]	; (800a37c <vPortValidateInterruptPriority+0x74>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	7afa      	ldrb	r2, [r7, #11]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d20a      	bcs.n	800a344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a344:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <vPortValidateInterruptPriority+0x78>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <vPortValidateInterruptPriority+0x7c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d90a      	bls.n	800a36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	603b      	str	r3, [r7, #0]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <vPortValidateInterruptPriority+0x60>
	}
 800a36a:	bf00      	nop
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	e000e3f0 	.word	0xe000e3f0
 800a37c:	20000ed0 	.word	0x20000ed0
 800a380:	e000ed0c 	.word	0xe000ed0c
 800a384:	20000ed4 	.word	0x20000ed4

0800a388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	; 0x28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a394:	f7fe fd9a 	bl	8008ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a398:	4b5b      	ldr	r3, [pc, #364]	; (800a508 <pvPortMalloc+0x180>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3a0:	f000 f920 	bl	800a5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3a4:	4b59      	ldr	r3, [pc, #356]	; (800a50c <pvPortMalloc+0x184>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 8093 	bne.w	800a4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d01d      	beq.n	800a3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d014      	beq.n	800a3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f023 0307 	bic.w	r3, r3, #7
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	617b      	str	r3, [r7, #20]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d06e      	beq.n	800a4d8 <pvPortMalloc+0x150>
 800a3fa:	4b45      	ldr	r3, [pc, #276]	; (800a510 <pvPortMalloc+0x188>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d869      	bhi.n	800a4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a404:	4b43      	ldr	r3, [pc, #268]	; (800a514 <pvPortMalloc+0x18c>)
 800a406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a408:	4b42      	ldr	r3, [pc, #264]	; (800a514 <pvPortMalloc+0x18c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a40e:	e004      	b.n	800a41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d903      	bls.n	800a42c <pvPortMalloc+0xa4>
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f1      	bne.n	800a410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a42c:	4b36      	ldr	r3, [pc, #216]	; (800a508 <pvPortMalloc+0x180>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a432:	429a      	cmp	r2, r3
 800a434:	d050      	beq.n	800a4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2208      	movs	r2, #8
 800a43c:	4413      	add	r3, r2
 800a43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	2308      	movs	r3, #8
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	429a      	cmp	r2, r3
 800a456:	d91f      	bls.n	800a498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <pvPortMalloc+0xf8>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	613b      	str	r3, [r7, #16]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a492:	69b8      	ldr	r0, [r7, #24]
 800a494:	f000 f908 	bl	800a6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a498:	4b1d      	ldr	r3, [pc, #116]	; (800a510 <pvPortMalloc+0x188>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	4a1b      	ldr	r2, [pc, #108]	; (800a510 <pvPortMalloc+0x188>)
 800a4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4a6:	4b1a      	ldr	r3, [pc, #104]	; (800a510 <pvPortMalloc+0x188>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b1b      	ldr	r3, [pc, #108]	; (800a518 <pvPortMalloc+0x190>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d203      	bcs.n	800a4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4b2:	4b17      	ldr	r3, [pc, #92]	; (800a510 <pvPortMalloc+0x188>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a18      	ldr	r2, [pc, #96]	; (800a518 <pvPortMalloc+0x190>)
 800a4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	4b13      	ldr	r3, [pc, #76]	; (800a50c <pvPortMalloc+0x184>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <pvPortMalloc+0x194>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	4a11      	ldr	r2, [pc, #68]	; (800a51c <pvPortMalloc+0x194>)
 800a4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4d8:	f7fe fd06 	bl	8008ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <pvPortMalloc+0x174>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60fb      	str	r3, [r7, #12]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <pvPortMalloc+0x172>
	return pvReturn;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3728      	adds	r7, #40	; 0x28
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20001a98 	.word	0x20001a98
 800a50c:	20001aac 	.word	0x20001aac
 800a510:	20001a9c 	.word	0x20001a9c
 800a514:	20001a90 	.word	0x20001a90
 800a518:	20001aa0 	.word	0x20001aa0
 800a51c:	20001aa4 	.word	0x20001aa4

0800a520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04d      	beq.n	800a5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a532:	2308      	movs	r3, #8
 800a534:	425b      	negs	r3, r3
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <vPortFree+0xb8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4013      	ands	r3, r2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <vPortFree+0x44>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	60fb      	str	r3, [r7, #12]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <vPortFree+0x62>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60bb      	str	r3, [r7, #8]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <vPortFree+0xb8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d01e      	beq.n	800a5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d11a      	bne.n	800a5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <vPortFree+0xb8>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	401a      	ands	r2, r3
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5a8:	f7fe fc90 	bl	8008ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <vPortFree+0xbc>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4a09      	ldr	r2, [pc, #36]	; (800a5dc <vPortFree+0xbc>)
 800a5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ba:	6938      	ldr	r0, [r7, #16]
 800a5bc:	f000 f874 	bl	800a6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <vPortFree+0xc0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	4a06      	ldr	r2, [pc, #24]	; (800a5e0 <vPortFree+0xc0>)
 800a5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5ca:	f7fe fc8d 	bl	8008ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ce:	bf00      	nop
 800a5d0:	3718      	adds	r7, #24
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20001aac 	.word	0x20001aac
 800a5dc:	20001a9c 	.word	0x20001a9c
 800a5e0:	20001aa8 	.word	0x20001aa8

0800a5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5f0:	4b27      	ldr	r3, [pc, #156]	; (800a690 <prvHeapInit+0xac>)
 800a5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00c      	beq.n	800a618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3307      	adds	r3, #7
 800a602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	4a1f      	ldr	r2, [pc, #124]	; (800a690 <prvHeapInit+0xac>)
 800a614:	4413      	add	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a61c:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <prvHeapInit+0xb0>)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a622:	4b1c      	ldr	r3, [pc, #112]	; (800a694 <prvHeapInit+0xb0>)
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4413      	add	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a630:	2208      	movs	r2, #8
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	1a9b      	subs	r3, r3, r2
 800a636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 0307 	bic.w	r3, r3, #7
 800a63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a15      	ldr	r2, [pc, #84]	; (800a698 <prvHeapInit+0xb4>)
 800a644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <prvHeapInit+0xb4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <prvHeapInit+0xb4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a664:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <prvHeapInit+0xb4>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4a0a      	ldr	r2, [pc, #40]	; (800a69c <prvHeapInit+0xb8>)
 800a672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <prvHeapInit+0xbc>)
 800a67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <prvHeapInit+0xc0>)
 800a67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	20000ed8 	.word	0x20000ed8
 800a694:	20001a90 	.word	0x20001a90
 800a698:	20001a98 	.word	0x20001a98
 800a69c:	20001aa0 	.word	0x20001aa0
 800a6a0:	20001a9c 	.word	0x20001a9c
 800a6a4:	20001aac 	.word	0x20001aac

0800a6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6b0:	4b28      	ldr	r3, [pc, #160]	; (800a754 <prvInsertBlockIntoFreeList+0xac>)
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	e002      	b.n	800a6bc <prvInsertBlockIntoFreeList+0x14>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d8f7      	bhi.n	800a6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d108      	bne.n	800a6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	441a      	add	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d118      	bne.n	800a730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	4b15      	ldr	r3, [pc, #84]	; (800a758 <prvInsertBlockIntoFreeList+0xb0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d00d      	beq.n	800a726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	441a      	add	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e008      	b.n	800a738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <prvInsertBlockIntoFreeList+0xb0>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	e003      	b.n	800a738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d002      	beq.n	800a746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20001a90 	.word	0x20001a90
 800a758:	20001a98 	.word	0x20001a98

0800a75c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a760:	2200      	movs	r2, #0
 800a762:	4912      	ldr	r1, [pc, #72]	; (800a7ac <MX_USB_DEVICE_Init+0x50>)
 800a764:	4812      	ldr	r0, [pc, #72]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a766:	f7fc f8e1 	bl	800692c <USBD_Init>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a770:	f7f6 fb5c 	bl	8000e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a774:	490f      	ldr	r1, [pc, #60]	; (800a7b4 <MX_USB_DEVICE_Init+0x58>)
 800a776:	480e      	ldr	r0, [pc, #56]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a778:	f7fc f908 	bl	800698c <USBD_RegisterClass>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a782:	f7f6 fb53 	bl	8000e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a786:	490c      	ldr	r1, [pc, #48]	; (800a7b8 <MX_USB_DEVICE_Init+0x5c>)
 800a788:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a78a:	f7fc f829 	bl	80067e0 <USBD_CDC_RegisterInterface>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a794:	f7f6 fb4a 	bl	8000e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a798:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <MX_USB_DEVICE_Init+0x54>)
 800a79a:	f7fc f91e 	bl	80069da <USBD_Start>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7a4:	f7f6 fb42 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7a8:	bf00      	nop
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000140 	.word	0x20000140
 800a7b0:	20001f00 	.word	0x20001f00
 800a7b4:	2000001c 	.word	0x2000001c
 800a7b8:	2000012c 	.word	0x2000012c

0800a7bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4905      	ldr	r1, [pc, #20]	; (800a7d8 <CDC_Init_FS+0x1c>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	; (800a7dc <CDC_Init_FS+0x20>)
 800a7c6:	f7fc f820 	bl	800680a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ca:	4905      	ldr	r1, [pc, #20]	; (800a7e0 <CDC_Init_FS+0x24>)
 800a7cc:	4803      	ldr	r0, [pc, #12]	; (800a7dc <CDC_Init_FS+0x20>)
 800a7ce:	f7fc f83a 	bl	8006846 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200029d0 	.word	0x200029d0
 800a7dc:	20001f00 	.word	0x20001f00
 800a7e0:	200021d0 	.word	0x200021d0

0800a7e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
 800a800:	4613      	mov	r3, r2
 800a802:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b23      	cmp	r3, #35	; 0x23
 800a808:	f200 8098 	bhi.w	800a93c <CDC_Control_FS+0x148>
 800a80c:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <CDC_Control_FS+0x20>)
 800a80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a812:	bf00      	nop
 800a814:	0800a93d 	.word	0x0800a93d
 800a818:	0800a93d 	.word	0x0800a93d
 800a81c:	0800a93d 	.word	0x0800a93d
 800a820:	0800a93d 	.word	0x0800a93d
 800a824:	0800a93d 	.word	0x0800a93d
 800a828:	0800a93d 	.word	0x0800a93d
 800a82c:	0800a93d 	.word	0x0800a93d
 800a830:	0800a93d 	.word	0x0800a93d
 800a834:	0800a93d 	.word	0x0800a93d
 800a838:	0800a93d 	.word	0x0800a93d
 800a83c:	0800a93d 	.word	0x0800a93d
 800a840:	0800a93d 	.word	0x0800a93d
 800a844:	0800a93d 	.word	0x0800a93d
 800a848:	0800a93d 	.word	0x0800a93d
 800a84c:	0800a93d 	.word	0x0800a93d
 800a850:	0800a93d 	.word	0x0800a93d
 800a854:	0800a93d 	.word	0x0800a93d
 800a858:	0800a93d 	.word	0x0800a93d
 800a85c:	0800a93d 	.word	0x0800a93d
 800a860:	0800a93d 	.word	0x0800a93d
 800a864:	0800a93d 	.word	0x0800a93d
 800a868:	0800a93d 	.word	0x0800a93d
 800a86c:	0800a93d 	.word	0x0800a93d
 800a870:	0800a93d 	.word	0x0800a93d
 800a874:	0800a93d 	.word	0x0800a93d
 800a878:	0800a93d 	.word	0x0800a93d
 800a87c:	0800a93d 	.word	0x0800a93d
 800a880:	0800a93d 	.word	0x0800a93d
 800a884:	0800a93d 	.word	0x0800a93d
 800a888:	0800a93d 	.word	0x0800a93d
 800a88c:	0800a93d 	.word	0x0800a93d
 800a890:	0800a93d 	.word	0x0800a93d
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8e9 	.word	0x0800a8e9
 800a89c:	0800a93d 	.word	0x0800a93d
 800a8a0:	0800a93d 	.word	0x0800a93d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	3303      	adds	r3, #3
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	061b      	lsls	r3, r3, #24
 800a8c6:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	4b20      	ldr	r3, [pc, #128]	; (800a94c <CDC_Control_FS+0x158>)
 800a8cc:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	791a      	ldrb	r2, [r3, #4]
 800a8d2:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <CDC_Control_FS+0x158>)
 800a8d4:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	795a      	ldrb	r2, [r3, #5]
 800a8da:	4b1c      	ldr	r3, [pc, #112]	; (800a94c <CDC_Control_FS+0x158>)
 800a8dc:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	799a      	ldrb	r2, [r3, #6]
 800a8e2:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <CDC_Control_FS+0x158>)
 800a8e4:	719a      	strb	r2, [r3, #6]
		break;
 800a8e6:	e02a      	b.n	800a93e <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800a8e8:	4b18      	ldr	r3, [pc, #96]	; (800a94c <CDC_Control_FS+0x158>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800a8f2:	4b16      	ldr	r3, [pc, #88]	; (800a94c <CDC_Control_FS+0x158>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	0a1a      	lsrs	r2, r3, #8
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	b2d2      	uxtb	r2, r2
 800a8fe:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800a900:	4b12      	ldr	r3, [pc, #72]	; (800a94c <CDC_Control_FS+0x158>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	0c1a      	lsrs	r2, r3, #16
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3302      	adds	r3, #2
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <CDC_Control_FS+0x158>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	0e1a      	lsrs	r2, r3, #24
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	3303      	adds	r3, #3
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	3304      	adds	r3, #4
 800a920:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <CDC_Control_FS+0x158>)
 800a922:	7912      	ldrb	r2, [r2, #4]
 800a924:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	3305      	adds	r3, #5
 800a92a:	4a08      	ldr	r2, [pc, #32]	; (800a94c <CDC_Control_FS+0x158>)
 800a92c:	7952      	ldrb	r2, [r2, #5]
 800a92e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	3306      	adds	r3, #6
 800a934:	4a05      	ldr	r2, [pc, #20]	; (800a94c <CDC_Control_FS+0x158>)
 800a936:	7992      	ldrb	r2, [r2, #6]
 800a938:	701a      	strb	r2, [r3, #0]
		break;
 800a93a:	e000      	b.n	800a93e <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a93c:	bf00      	nop
	}

  return (USBD_OK);
 800a93e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000124 	.word	0x20000124

0800a950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4808      	ldr	r0, [pc, #32]	; (800a980 <CDC_Receive_FS+0x30>)
 800a95e:	f7fb ff72 	bl	8006846 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a962:	4807      	ldr	r0, [pc, #28]	; (800a980 <CDC_Receive_FS+0x30>)
 800a964:	f7fb ffb8 	bl	80068d8 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f6 f804 	bl	800097c <CDC_ReceiveCallback>
  return (USBD_OK);
 800a974:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20001f00 	.word	0x20001f00

0800a984 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a994:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a99a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e00b      	b.n	800a9c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9aa:	887b      	ldrh	r3, [r7, #2]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4806      	ldr	r0, [pc, #24]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b2:	f7fb ff2a 	bl	800680a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b8:	f7fb ff5e 	bl	8006878 <USBD_CDC_TransmitPacket>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20001f00 	.word	0x20001f00

0800a9d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2212      	movs	r2, #18
 800aa04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20000160 	.word	0x20000160

0800aa18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2204      	movs	r2, #4
 800aa28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa2a:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	20000180 	.word	0x20000180

0800aa3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa48:	79fb      	ldrb	r3, [r7, #7]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	4907      	ldr	r1, [pc, #28]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa52:	4808      	ldr	r0, [pc, #32]	; (800aa74 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa54:	f7fd f81d 	bl	8007a92 <USBD_GetString>
 800aa58:	e004      	b.n	800aa64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa5e:	4805      	ldr	r0, [pc, #20]	; (800aa74 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa60:	f7fd f817 	bl	8007a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa64:	4b02      	ldr	r3, [pc, #8]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200031d0 	.word	0x200031d0
 800aa74:	0800b530 	.word	0x0800b530

0800aa78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	4904      	ldr	r1, [pc, #16]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa88:	4804      	ldr	r0, [pc, #16]	; (800aa9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa8a:	f7fd f802 	bl	8007a92 <USBD_GetString>
  return USBD_StrDesc;
 800aa8e:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200031d0 	.word	0x200031d0
 800aa9c:	0800b548 	.word	0x0800b548

0800aaa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	221a      	movs	r2, #26
 800aab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aab2:	f000 f855 	bl	800ab60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aab6:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000184 	.word	0x20000184

0800aac4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	6039      	str	r1, [r7, #0]
 800aace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d105      	bne.n	800aae2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4907      	ldr	r1, [pc, #28]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aada:	4808      	ldr	r0, [pc, #32]	; (800aafc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aadc:	f7fc ffd9 	bl	8007a92 <USBD_GetString>
 800aae0:	e004      	b.n	800aaec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	4904      	ldr	r1, [pc, #16]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aae6:	4805      	ldr	r0, [pc, #20]	; (800aafc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aae8:	f7fc ffd3 	bl	8007a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaec:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200031d0 	.word	0x200031d0
 800aafc:	0800b55c 	.word	0x0800b55c

0800ab00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d105      	bne.n	800ab1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab16:	4808      	ldr	r0, [pc, #32]	; (800ab38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab18:	f7fc ffbb 	bl	8007a92 <USBD_GetString>
 800ab1c:	e004      	b.n	800ab28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	4904      	ldr	r1, [pc, #16]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab22:	4805      	ldr	r0, [pc, #20]	; (800ab38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab24:	f7fc ffb5 	bl	8007a92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	200031d0 	.word	0x200031d0
 800ab38:	0800b568 	.word	0x0800b568

0800ab3c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	220c      	movs	r2, #12
 800ab4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000174 	.word	0x20000174

0800ab60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab66:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <Get_SerialNum+0x44>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <Get_SerialNum+0x48>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab72:	4b0e      	ldr	r3, [pc, #56]	; (800abac <Get_SerialNum+0x4c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d009      	beq.n	800ab9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab86:	2208      	movs	r2, #8
 800ab88:	4909      	ldr	r1, [pc, #36]	; (800abb0 <Get_SerialNum+0x50>)
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f814 	bl	800abb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab90:	2204      	movs	r2, #4
 800ab92:	4908      	ldr	r1, [pc, #32]	; (800abb4 <Get_SerialNum+0x54>)
 800ab94:	68b8      	ldr	r0, [r7, #8]
 800ab96:	f000 f80f 	bl	800abb8 <IntToUnicode>
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	1fff7590 	.word	0x1fff7590
 800aba8:	1fff7594 	.word	0x1fff7594
 800abac:	1fff7598 	.word	0x1fff7598
 800abb0:	20000186 	.word	0x20000186
 800abb4:	20000196 	.word	0x20000196

0800abb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abca:	2300      	movs	r3, #0
 800abcc:	75fb      	strb	r3, [r7, #23]
 800abce:	e027      	b.n	800ac20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	0f1b      	lsrs	r3, r3, #28
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	d80b      	bhi.n	800abf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	0f1b      	lsrs	r3, r3, #28
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4619      	mov	r1, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	440b      	add	r3, r1
 800abe8:	3230      	adds	r2, #48	; 0x30
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e00a      	b.n	800ac06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	0f1b      	lsrs	r3, r3, #28
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	4619      	mov	r1, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	440b      	add	r3, r1
 800ac00:	3237      	adds	r2, #55	; 0x37
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	011b      	lsls	r3, r3, #4
 800ac0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	3301      	adds	r3, #1
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4413      	add	r3, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	75fb      	strb	r3, [r7, #23]
 800ac20:	7dfa      	ldrb	r2, [r7, #23]
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d3d3      	bcc.n	800abd0 <IntToUnicode+0x18>
  }
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
	...

0800ac38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac40:	f107 0314 	add.w	r3, r7, #20
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	609a      	str	r2, [r3, #8]
 800ac4c:	60da      	str	r2, [r3, #12]
 800ac4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac58:	d14e      	bne.n	800acf8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5e:	4a28      	ldr	r2, [pc, #160]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac60:	f043 0301 	orr.w	r3, r3, #1
 800ac64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac66:	4b26      	ldr	r3, [pc, #152]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac80:	2303      	movs	r3, #3
 800ac82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac84:	230a      	movs	r3, #10
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac88:	f107 0314 	add.w	r3, r7, #20
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac92:	f7f6 fd4b 	bl	800172c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac96:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9a:	4a19      	ldr	r2, [pc, #100]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800ac9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aca2:	4b17      	ldr	r3, [pc, #92]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800aca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acae:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d114      	bne.n	800ace4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acba:	4b11      	ldr	r3, [pc, #68]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acbe:	4a10      	ldr	r2, [pc, #64]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acc4:	6593      	str	r3, [r2, #88]	; 0x58
 800acc6:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acce:	60bb      	str	r3, [r7, #8]
 800acd0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800acd2:	f7f8 f85b 	bl	8002d8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800acd6:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acda:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <HAL_PCD_MspInit+0xc8>)
 800acdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ace0:	6593      	str	r3, [r2, #88]	; 0x58
 800ace2:	e001      	b.n	800ace8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ace4:	f7f8 f852 	bl	8002d8c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ace8:	2200      	movs	r2, #0
 800acea:	2105      	movs	r1, #5
 800acec:	2043      	movs	r0, #67	; 0x43
 800acee:	f7f6 fce6 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acf2:	2043      	movs	r0, #67	; 0x43
 800acf4:	f7f6 fcff 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acf8:	bf00      	nop
 800acfa:	3728      	adds	r7, #40	; 0x28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fb fea8 	bl	8006a70 <USBD_LL_SetupStage>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	440b      	add	r3, r1
 800ad48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	78fb      	ldrb	r3, [r7, #3]
 800ad50:	4619      	mov	r1, r3
 800ad52:	f7fb fee2 	bl	8006b1a <USBD_LL_DataOutStage>
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3348      	adds	r3, #72	; 0x48
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	78fb      	ldrb	r3, [r7, #3]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fb ff2b 	bl	8006be0 <USBD_LL_DataInStage>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fc f83f 	bl	8006e24 <USBD_LL_SOF>
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adb6:	2301      	movs	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d001      	beq.n	800adc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adc2:	f7f6 f833 	bl	8000e2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adcc:	7bfa      	ldrb	r2, [r7, #15]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f7fb ffe9 	bl	8006da8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800addc:	4618      	mov	r0, r3
 800adde:	f7fb ff95 	bl	8006d0c <USBD_LL_Reset>
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fb ffd8 	bl	8006dc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d005      	beq.n	800ae2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae20:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <HAL_PCD_SuspendCallback+0x48>)
 800ae26:	f043 0306 	orr.w	r3, r3, #6
 800ae2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	e000ed00 	.word	0xe000ed00

0800ae38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6812      	ldr	r2, [r2, #0]
 800ae4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae52:	f023 0301 	bic.w	r3, r3, #1
 800ae56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d007      	beq.n	800ae70 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae60:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a07      	ldr	r2, [pc, #28]	; (800ae84 <HAL_PCD_ResumeCallback+0x4c>)
 800ae66:	f023 0306 	bic.w	r3, r3, #6
 800ae6a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae6c:	f000 faf6 	bl	800b45c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fb ffbc 	bl	8006df4 <USBD_LL_Resume>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	e000ed00 	.word	0xe000ed00

0800ae88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fc f808 	bl	8006eb4 <USBD_LL_IsoOUTIncomplete>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fb ffd0 	bl	8006e68 <USBD_LL_IsoINIncomplete>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fc f80e 	bl	8006f00 <USBD_LL_DevConnected>
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fc f80b 	bl	8006f16 <USBD_LL_DevDisconnected>
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d13c      	bne.n	800af92 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af18:	4a20      	ldr	r2, [pc, #128]	; (800af9c <USBD_LL_Init+0x94>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	4a1e      	ldr	r2, [pc, #120]	; (800af9c <USBD_LL_Init+0x94>)
 800af24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af28:	4b1c      	ldr	r3, [pc, #112]	; (800af9c <USBD_LL_Init+0x94>)
 800af2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800af30:	4b1a      	ldr	r3, [pc, #104]	; (800af9c <USBD_LL_Init+0x94>)
 800af32:	2206      	movs	r2, #6
 800af34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af36:	4b19      	ldr	r3, [pc, #100]	; (800af9c <USBD_LL_Init+0x94>)
 800af38:	2202      	movs	r2, #2
 800af3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af3c:	4b17      	ldr	r3, [pc, #92]	; (800af9c <USBD_LL_Init+0x94>)
 800af3e:	2202      	movs	r2, #2
 800af40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af42:	4b16      	ldr	r3, [pc, #88]	; (800af9c <USBD_LL_Init+0x94>)
 800af44:	2200      	movs	r2, #0
 800af46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af48:	4b14      	ldr	r3, [pc, #80]	; (800af9c <USBD_LL_Init+0x94>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <USBD_LL_Init+0x94>)
 800af50:	2200      	movs	r2, #0
 800af52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <USBD_LL_Init+0x94>)
 800af56:	2200      	movs	r2, #0
 800af58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <USBD_LL_Init+0x94>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <USBD_LL_Init+0x94>)
 800af62:	2200      	movs	r2, #0
 800af64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af66:	480d      	ldr	r0, [pc, #52]	; (800af9c <USBD_LL_Init+0x94>)
 800af68:	f7f6 fe0c 	bl	8001b84 <HAL_PCD_Init>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af72:	f7f5 ff5b 	bl	8000e2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af76:	2180      	movs	r1, #128	; 0x80
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <USBD_LL_Init+0x94>)
 800af7a:	f7f7 fe6e 	bl	8002c5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af7e:	2240      	movs	r2, #64	; 0x40
 800af80:	2100      	movs	r1, #0
 800af82:	4806      	ldr	r0, [pc, #24]	; (800af9c <USBD_LL_Init+0x94>)
 800af84:	f7f7 fe22 	bl	8002bcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	2101      	movs	r1, #1
 800af8c:	4803      	ldr	r0, [pc, #12]	; (800af9c <USBD_LL_Init+0x94>)
 800af8e:	f7f7 fe1d 	bl	8002bcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200033d0 	.word	0x200033d0

0800afa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f6 ff08 	bl	8001dcc <HAL_PCD_Start>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d816      	bhi.n	800aff4 <USBD_LL_Start+0x54>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <USBD_LL_Start+0x2c>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afe3 	.word	0x0800afe3
 800afd4:	0800afe9 	.word	0x0800afe9
 800afd8:	0800afef 	.word	0x0800afef
    case HAL_OK :
      usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	e00b      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afe2:	2303      	movs	r3, #3
 800afe4:	73fb      	strb	r3, [r7, #15]
    break;
 800afe6:	e008      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afe8:	2301      	movs	r3, #1
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	e005      	b.n	800affa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afee:	2303      	movs	r3, #3
 800aff0:	73fb      	strb	r3, [r7, #15]
    break;
 800aff2:	e002      	b.n	800affa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
    break;
 800aff8:	bf00      	nop
  }
  return usb_status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	4603      	mov	r3, r0
 800b014:	70fb      	strb	r3, [r7, #3]
 800b016:	460b      	mov	r3, r1
 800b018:	70bb      	strb	r3, [r7, #2]
 800b01a:	4613      	mov	r3, r2
 800b01c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b02c:	78bb      	ldrb	r3, [r7, #2]
 800b02e:	883a      	ldrh	r2, [r7, #0]
 800b030:	78f9      	ldrb	r1, [r7, #3]
 800b032:	f7f7 fac3 	bl	80025bc <HAL_PCD_EP_Open>
 800b036:	4603      	mov	r3, r0
 800b038:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d817      	bhi.n	800b070 <USBD_LL_OpenEP+0x6c>
 800b040:	a201      	add	r2, pc, #4	; (adr r2, 800b048 <USBD_LL_OpenEP+0x44>)
 800b042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b046:	bf00      	nop
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b05f 	.word	0x0800b05f
 800b050:	0800b065 	.word	0x0800b065
 800b054:	0800b06b 	.word	0x0800b06b
    case HAL_OK :
      usb_status = USBD_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
    break;
 800b05c:	e00b      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b05e:	2303      	movs	r3, #3
 800b060:	73fb      	strb	r3, [r7, #15]
    break;
 800b062:	e008      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
    break;
 800b068:	e005      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b06a:	2303      	movs	r3, #3
 800b06c:	73fb      	strb	r3, [r7, #15]
    break;
 800b06e:	e002      	b.n	800b076 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	73fb      	strb	r3, [r7, #15]
    break;
 800b074:	bf00      	nop
  }
  return usb_status;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b09a:	78fa      	ldrb	r2, [r7, #3]
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f7 faf4 	bl	800268c <HAL_PCD_EP_Close>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d816      	bhi.n	800b0dc <USBD_LL_CloseEP+0x5c>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBD_LL_CloseEP+0x34>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b0c5 	.word	0x0800b0c5
 800b0b8:	0800b0cb 	.word	0x0800b0cb
 800b0bc:	0800b0d1 	.word	0x0800b0d1
 800b0c0:	0800b0d7 	.word	0x0800b0d7
    case HAL_OK :
      usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c8:	e00b      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ce:	e008      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d4:	e005      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b0da:	e002      	b.n	800b0e2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e0:	bf00      	nop
  }
  return usb_status;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b106:	78fa      	ldrb	r2, [r7, #3]
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f7 fb9b 	bl	8002846 <HAL_PCD_EP_SetStall>
 800b110:	4603      	mov	r3, r0
 800b112:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b03      	cmp	r3, #3
 800b118:	d816      	bhi.n	800b148 <USBD_LL_StallEP+0x5c>
 800b11a:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_LL_StallEP+0x34>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b131 	.word	0x0800b131
 800b124:	0800b137 	.word	0x0800b137
 800b128:	0800b13d 	.word	0x0800b13d
 800b12c:	0800b143 	.word	0x0800b143
    case HAL_OK :
      usb_status = USBD_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
    break;
 800b134:	e00b      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b136:	2303      	movs	r3, #3
 800b138:	73fb      	strb	r3, [r7, #15]
    break;
 800b13a:	e008      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
    break;
 800b140:	e005      	b.n	800b14e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	73fb      	strb	r3, [r7, #15]
    break;
 800b146:	e002      	b.n	800b14e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b148:	2303      	movs	r3, #3
 800b14a:	73fb      	strb	r3, [r7, #15]
    break;
 800b14c:	bf00      	nop
  }
  return usb_status;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f7f7 fbc7 	bl	800290a <HAL_PCD_EP_ClrStall>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	2b03      	cmp	r3, #3
 800b184:	d816      	bhi.n	800b1b4 <USBD_LL_ClearStallEP+0x5c>
 800b186:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <USBD_LL_ClearStallEP+0x34>)
 800b188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18c:	0800b19d 	.word	0x0800b19d
 800b190:	0800b1a3 	.word	0x0800b1a3
 800b194:	0800b1a9 	.word	0x0800b1a9
 800b198:	0800b1af 	.word	0x0800b1af
    case HAL_OK :
      usb_status = USBD_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a0:	e00b      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a6:	e008      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ac:	e005      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b2:	e002      	b.n	800b1ba <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b8:	bf00      	nop
  }
  return usb_status;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0b      	bge.n	800b1f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	333e      	adds	r3, #62	; 0x3e
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	e00b      	b.n	800b210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	1a9b      	subs	r3, r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b236:	78fa      	ldrb	r2, [r7, #3]
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f7 f999 	bl	8002572 <HAL_PCD_SetAddress>
 800b240:	4603      	mov	r3, r0
 800b242:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d816      	bhi.n	800b278 <USBD_LL_SetUSBAddress+0x5c>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <USBD_LL_SetUSBAddress+0x34>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b261 	.word	0x0800b261
 800b254:	0800b267 	.word	0x0800b267
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b273 	.word	0x0800b273
    case HAL_OK :
      usb_status = USBD_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e00b      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	e008      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b26c:	2301      	movs	r3, #1
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	e005      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	73fb      	strb	r3, [r7, #15]
    break;
 800b276:	e002      	b.n	800b27e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b278:	2303      	movs	r3, #3
 800b27a:	73fb      	strb	r3, [r7, #15]
    break;
 800b27c:	bf00      	nop
  }
  return usb_status;
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2a6:	7af9      	ldrb	r1, [r7, #11]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	f7f7 fa8e 	bl	80027cc <HAL_PCD_EP_Transmit>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b2b4:	7dbb      	ldrb	r3, [r7, #22]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d816      	bhi.n	800b2e8 <USBD_LL_Transmit+0x60>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_LL_Transmit+0x38>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d1 	.word	0x0800b2d1
 800b2c4:	0800b2d7 	.word	0x0800b2d7
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2e3 	.word	0x0800b2e3
    case HAL_OK :
      usb_status = USBD_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
    break;
 800b2d4:	e00b      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
    break;
 800b2da:	e008      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e0:	e005      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	75fb      	strb	r3, [r7, #23]
    break;
 800b2e6:	e002      	b.n	800b2ee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	75fb      	strb	r3, [r7, #23]
    break;
 800b2ec:	bf00      	nop
  }
  return usb_status;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	607a      	str	r2, [r7, #4]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	460b      	mov	r3, r1
 800b306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b316:	7af9      	ldrb	r1, [r7, #11]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f7f7 fa00 	bl	8002720 <HAL_PCD_EP_Receive>
 800b320:	4603      	mov	r3, r0
 800b322:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b324:	7dbb      	ldrb	r3, [r7, #22]
 800b326:	2b03      	cmp	r3, #3
 800b328:	d816      	bhi.n	800b358 <USBD_LL_PrepareReceive+0x60>
 800b32a:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <USBD_LL_PrepareReceive+0x38>)
 800b32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b330:	0800b341 	.word	0x0800b341
 800b334:	0800b347 	.word	0x0800b347
 800b338:	0800b34d 	.word	0x0800b34d
 800b33c:	0800b353 	.word	0x0800b353
    case HAL_OK :
      usb_status = USBD_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	75fb      	strb	r3, [r7, #23]
    break;
 800b344:	e00b      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b346:	2303      	movs	r3, #3
 800b348:	75fb      	strb	r3, [r7, #23]
    break;
 800b34a:	e008      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
    break;
 800b350:	e005      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b352:	2303      	movs	r3, #3
 800b354:	75fb      	strb	r3, [r7, #23]
    break;
 800b356:	e002      	b.n	800b35e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	75fb      	strb	r3, [r7, #23]
    break;
 800b35c:	bf00      	nop
  }
  return usb_status;
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b37a:	78fa      	ldrb	r2, [r7, #3]
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f7 fa0c 	bl	800279c <HAL_PCD_EP_GetRxCount>
 800b384:	4603      	mov	r3, r0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <HAL_PCDEx_LPM_Callback+0x18>
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d01f      	beq.n	800b3e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b3a6:	e03b      	b.n	800b420 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d007      	beq.n	800b3c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b3b0:	f000 f854 	bl	800b45c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3b4:	4b1c      	ldr	r3, [pc, #112]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	4a1b      	ldr	r2, [pc, #108]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3ba:	f023 0306 	bic.w	r3, r3, #6
 800b3be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6812      	ldr	r2, [r2, #0]
 800b3ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3d2:	f023 0301 	bic.w	r3, r3, #1
 800b3d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fb fd08 	bl	8006df4 <USBD_LL_Resume>
    break;
 800b3e4:	e01c      	b.n	800b420 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6812      	ldr	r2, [r2, #0]
 800b3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3f8:	f043 0301 	orr.w	r3, r3, #1
 800b3fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b404:	4618      	mov	r0, r3
 800b406:	f7fb fcdf 	bl	8006dc8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d005      	beq.n	800b41e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	4a04      	ldr	r2, [pc, #16]	; (800b428 <HAL_PCDEx_LPM_Callback+0x98>)
 800b418:	f043 0306 	orr.w	r3, r3, #6
 800b41c:	6113      	str	r3, [r2, #16]
    break;
 800b41e:	bf00      	nop
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	e000ed00 	.word	0xe000ed00

0800b42c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b434:	4b03      	ldr	r3, [pc, #12]	; (800b444 <USBD_static_malloc+0x18>)
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20001ab0 	.word	0x20001ab0

0800b448 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]

}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b460:	f7f4 ff24 	bl	80002ac <SystemClock_Config>
}
 800b464:	bf00      	nop
 800b466:	bd80      	pop	{r7, pc}

0800b468 <__libc_init_array>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	4d0d      	ldr	r5, [pc, #52]	; (800b4a0 <__libc_init_array+0x38>)
 800b46c:	4c0d      	ldr	r4, [pc, #52]	; (800b4a4 <__libc_init_array+0x3c>)
 800b46e:	1b64      	subs	r4, r4, r5
 800b470:	10a4      	asrs	r4, r4, #2
 800b472:	2600      	movs	r6, #0
 800b474:	42a6      	cmp	r6, r4
 800b476:	d109      	bne.n	800b48c <__libc_init_array+0x24>
 800b478:	4d0b      	ldr	r5, [pc, #44]	; (800b4a8 <__libc_init_array+0x40>)
 800b47a:	4c0c      	ldr	r4, [pc, #48]	; (800b4ac <__libc_init_array+0x44>)
 800b47c:	f000 f82e 	bl	800b4dc <_init>
 800b480:	1b64      	subs	r4, r4, r5
 800b482:	10a4      	asrs	r4, r4, #2
 800b484:	2600      	movs	r6, #0
 800b486:	42a6      	cmp	r6, r4
 800b488:	d105      	bne.n	800b496 <__libc_init_array+0x2e>
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b490:	4798      	blx	r3
 800b492:	3601      	adds	r6, #1
 800b494:	e7ee      	b.n	800b474 <__libc_init_array+0xc>
 800b496:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49a:	4798      	blx	r3
 800b49c:	3601      	adds	r6, #1
 800b49e:	e7f2      	b.n	800b486 <__libc_init_array+0x1e>
 800b4a0:	0800b624 	.word	0x0800b624
 800b4a4:	0800b624 	.word	0x0800b624
 800b4a8:	0800b624 	.word	0x0800b624
 800b4ac:	0800b628 	.word	0x0800b628

0800b4b0 <memcpy>:
 800b4b0:	440a      	add	r2, r1
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4b8:	d100      	bne.n	800b4bc <memcpy+0xc>
 800b4ba:	4770      	bx	lr
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c6:	4291      	cmp	r1, r2
 800b4c8:	d1f9      	bne.n	800b4be <memcpy+0xe>
 800b4ca:	bd10      	pop	{r4, pc}

0800b4cc <memset>:
 800b4cc:	4402      	add	r2, r0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d100      	bne.n	800b4d6 <memset+0xa>
 800b4d4:	4770      	bx	lr
 800b4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4da:	e7f9      	b.n	800b4d0 <memset+0x4>

0800b4dc <_init>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	bf00      	nop
 800b4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e2:	bc08      	pop	{r3}
 800b4e4:	469e      	mov	lr, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <_fini>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr
