
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a0  080085a0  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  080085a0  080085a0  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085a0  080085a0  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085a4  080085a4  000185a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  080085a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  2000019c  08008744  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e64  08008744  00021e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db9c  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b13  00000000  00000000  0003dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00041880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00042c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029933  00000000  00000000  00043e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177ce  00000000  00000000  0006d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c74  00000000  00000000  00084f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  00177c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000019c 	.word	0x2000019c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008500 	.word	0x08008500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a0 	.word	0x200001a0
 80001c4:	08008500 	.word	0x08008500

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fea7 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f8dc 	bl	800038c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fb02 	bl	80007dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f960 	bl	800049c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80001dc:	f007 fade 	bl	800779c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001e0:	f000 fa50 	bl	8000684 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001e4:	f000 f9f8 	bl	80005d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80001e8:	f000 faa2 	bl	8000730 <MX_TIM5_Init>
  MX_TIM2_Init();
 80001ec:	f000 f9a8 	bl	8000540 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001f0:	213c      	movs	r1, #60	; 0x3c
 80001f2:	4854      	ldr	r0, [pc, #336]	; (8000344 <main+0x17c>)
 80001f4:	f003 ff68 	bl	80040c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80001f8:	213c      	movs	r1, #60	; 0x3c
 80001fa:	4853      	ldr	r0, [pc, #332]	; (8000348 <main+0x180>)
 80001fc:	f003 ff64 	bl	80040c8 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2104      	movs	r1, #4
 8000204:	4851      	ldr	r0, [pc, #324]	; (800034c <main+0x184>)
 8000206:	f001 f9f7 	bl	80015f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000210:	484f      	ldr	r0, [pc, #316]	; (8000350 <main+0x188>)
 8000212:	f001 f9f1 	bl	80015f8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000216:	484f      	ldr	r0, [pc, #316]	; (8000354 <main+0x18c>)
 8000218:	f003 fe40 	bl	8003e9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800021c:	484e      	ldr	r0, [pc, #312]	; (8000358 <main+0x190>)
 800021e:	f003 fe3d 	bl	8003e9c <HAL_TIM_Base_Start_IT>

  TIM5->CNT=750000;
 8000222:	4b4e      	ldr	r3, [pc, #312]	; (800035c <main+0x194>)
 8000224:	4a4e      	ldr	r2, [pc, #312]	; (8000360 <main+0x198>)
 8000226:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->SR=65;
 8000228:	4b4e      	ldr	r3, [pc, #312]	; (8000364 <main+0x19c>)
 800022a:	2241      	movs	r2, #65	; 0x41
 800022c:	611a      	str	r2, [r3, #16]
  TIM4->CNT=750000;
 800022e:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <main+0x19c>)
 8000230:	4a4b      	ldr	r2, [pc, #300]	; (8000360 <main+0x198>)
 8000232:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  xSpeed = 250U;
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <main+0x1a0>)
 8000236:	22fa      	movs	r2, #250	; 0xfa
 8000238:	701a      	strb	r2, [r3, #0]
       ySpeed = 250U;
 800023a:	4b4c      	ldr	r3, [pc, #304]	; (800036c <main+0x1a4>)
 800023c:	22fa      	movs	r2, #250	; 0xfa
 800023e:	701a      	strb	r2, [r3, #0]
       xSen = 2U;
 8000240:	4b4b      	ldr	r3, [pc, #300]	; (8000370 <main+0x1a8>)
 8000242:	2202      	movs	r2, #2
 8000244:	701a      	strb	r2, [r3, #0]
       ySen = 2U;
 8000246:	4b4b      	ldr	r3, [pc, #300]	; (8000374 <main+0x1ac>)
 8000248:	2202      	movs	r2, #2
 800024a:	701a      	strb	r2, [r3, #0]
//
//	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);



	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 800024c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000250:	483f      	ldr	r0, [pc, #252]	; (8000350 <main+0x188>)
 8000252:	f001 f9b9 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d103      	bne.n	8000264 <main+0x9c>
		  	//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
		  	  X0=1;
 800025c:	4b46      	ldr	r3, [pc, #280]	; (8000378 <main+0x1b0>)
 800025e:	2201      	movs	r2, #1
 8000260:	701a      	strb	r2, [r3, #0]
 8000262:	e002      	b.n	800026a <main+0xa2>
	  }
	  else {
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
		  X0=0;
 8000264:	4b44      	ldr	r3, [pc, #272]	; (8000378 <main+0x1b0>)
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
	  }


	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	4838      	ldr	r0, [pc, #224]	; (8000350 <main+0x188>)
 8000270:	f001 f9aa 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d103      	bne.n	8000282 <main+0xba>
		  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_RESET);
		  	  Y0=1;
 800027a:	4b40      	ldr	r3, [pc, #256]	; (800037c <main+0x1b4>)
 800027c:	2201      	movs	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	e002      	b.n	8000288 <main+0xc0>
	  }
	  else  {
		 // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
		  Y0=0;
 8000282:	4b3e      	ldr	r3, [pc, #248]	; (800037c <main+0x1b4>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
	  }


	  if(highMode>1) {
 8000288:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <main+0x1b8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	dd0f      	ble.n	80002b0 <main+0xe8>
	    xSpeed = 50U;
 8000290:	4b35      	ldr	r3, [pc, #212]	; (8000368 <main+0x1a0>)
 8000292:	2232      	movs	r2, #50	; 0x32
 8000294:	701a      	strb	r2, [r3, #0]
	    ySpeed = 50U;
 8000296:	4b35      	ldr	r3, [pc, #212]	; (800036c <main+0x1a4>)
 8000298:	2232      	movs	r2, #50	; 0x32
 800029a:	701a      	strb	r2, [r3, #0]
	    xSen = 10U;
 800029c:	4b34      	ldr	r3, [pc, #208]	; (8000370 <main+0x1a8>)
 800029e:	220a      	movs	r2, #10
 80002a0:	701a      	strb	r2, [r3, #0]
	    ySen = 10U;
 80002a2:	4b34      	ldr	r3, [pc, #208]	; (8000374 <main+0x1ac>)
 80002a4:	220a      	movs	r2, #10
 80002a6:	701a      	strb	r2, [r3, #0]
	    highMode = 1;
 80002a8:	4b35      	ldr	r3, [pc, #212]	; (8000380 <main+0x1b8>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	e012      	b.n	80002d6 <main+0x10e>
	  }else if (highMode < 1) {
 80002b0:	4b33      	ldr	r3, [pc, #204]	; (8000380 <main+0x1b8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	dc0e      	bgt.n	80002d6 <main+0x10e>
	    xSpeed = 250U;
 80002b8:	4b2b      	ldr	r3, [pc, #172]	; (8000368 <main+0x1a0>)
 80002ba:	22fa      	movs	r2, #250	; 0xfa
 80002bc:	701a      	strb	r2, [r3, #0]
      ySpeed = 250U;
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <main+0x1a4>)
 80002c0:	22fa      	movs	r2, #250	; 0xfa
 80002c2:	701a      	strb	r2, [r3, #0]
      xSen = 2U;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <main+0x1a8>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	701a      	strb	r2, [r3, #0]
      ySen = 2U;
 80002ca:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <main+0x1ac>)
 80002cc:	2202      	movs	r2, #2
 80002ce:	701a      	strb	r2, [r3, #0]
      highMode = 1;
 80002d0:	4b2b      	ldr	r3, [pc, #172]	; (8000380 <main+0x1b8>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
 80002d6:	2120      	movs	r1, #32
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f001 f974 	bl	80015c8 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d105      	bne.n	80002f2 <main+0x12a>
	      {
	  	    xPul = -(xSen);
 80002e6:	4b22      	ldr	r3, [pc, #136]	; (8000370 <main+0x1a8>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	425b      	negs	r3, r3
 80002ec:	4a25      	ldr	r2, [pc, #148]	; (8000384 <main+0x1bc>)
 80002ee:	6013      	str	r3, [r2, #0]
 80002f0:	e00c      	b.n	800030c <main+0x144>
	      }else if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 80002f2:	2108      	movs	r1, #8
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f001 f966 	bl	80015c8 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d104      	bne.n	800030c <main+0x144>
	      {
	        xPul = (xSen);
 8000302:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <main+0x1a8>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <main+0x1bc>)
 800030a:	601a      	str	r2, [r3, #0]
	      }
	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
 800030c:	2120      	movs	r1, #32
 800030e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000312:	f001 f959 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b01      	cmp	r3, #1
 800031a:	d105      	bne.n	8000328 <main+0x160>
	  {
		  yPul = ySen;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <main+0x1ac>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <main+0x1c0>)
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	e791      	b.n	800024c <main+0x84>
	  }
	  else if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000328:	2108      	movs	r1, #8
 800032a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032e:	f001 f94b 	bl	80015c8 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	d189      	bne.n	800024c <main+0x84>
	  {
		  yPul = -ySen;
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <main+0x1ac>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	425b      	negs	r3, r3
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <main+0x1c0>)
 8000340:	6013      	str	r3, [r2, #0]
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000342:	e783      	b.n	800024c <main+0x84>
 8000344:	200003ec 	.word	0x200003ec
 8000348:	2000043c 	.word	0x2000043c
 800034c:	48000400 	.word	0x48000400
 8000350:	48001000 	.word	0x48001000
 8000354:	200004dc 	.word	0x200004dc
 8000358:	20000528 	.word	0x20000528
 800035c:	40000c00 	.word	0x40000c00
 8000360:	000b71b0 	.word	0x000b71b0
 8000364:	40000800 	.word	0x40000800
 8000368:	2000057c 	.word	0x2000057c
 800036c:	20000584 	.word	0x20000584
 8000370:	20000000 	.word	0x20000000
 8000374:	20000001 	.word	0x20000001
 8000378:	20000574 	.word	0x20000574
 800037c:	20000575 	.word	0x20000575
 8000380:	200001bc 	.word	0x200001bc
 8000384:	20000578 	.word	0x20000578
 8000388:	20000580 	.word	0x20000580

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0b8      	sub	sp, #224	; 0xe0
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000396:	2244      	movs	r2, #68	; 0x44
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f008 f8a8 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b0:	463b      	mov	r3, r7
 80003b2:	2288      	movs	r2, #136	; 0x88
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f008 f89a 	bl	80084f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003bc:	2310      	movs	r3, #16
 80003be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ce:	2360      	movs	r3, #96	; 0x60
 80003d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003da:	2301      	movs	r3, #1
 80003dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003e6:	2328      	movs	r3, #40	; 0x28
 80003e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003ec:	2307      	movs	r3, #7
 80003ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f8:	2302      	movs	r3, #2
 80003fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fa76 	bl	80028f4 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800040e:	f000 faff 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2303      	movs	r3, #3
 800041a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000430:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000434:	2104      	movs	r1, #4
 8000436:	4618      	mov	r0, r3
 8000438:	f002 fe42 	bl	80030c0 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000442:	f000 fae5 	bl	8000a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800044c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000450:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000452:	2301      	movs	r3, #1
 8000454:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000456:	2301      	movs	r3, #1
 8000458:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800045a:	2318      	movs	r3, #24
 800045c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800045e:	2307      	movs	r3, #7
 8000460:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000462:	2302      	movs	r3, #2
 8000464:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800046a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800046e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000470:	463b      	mov	r3, r7
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fffe 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800047e:	f000 fac7 	bl	8000a10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000486:	f002 f9cf 	bl	8002828 <HAL_PWREx_ControlVoltageScaling>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000490:	f000 fabe 	bl	8000a10 <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	37e0      	adds	r7, #224	; 0xe0
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004bc:	4a1f      	ldr	r2, [pc, #124]	; (800053c <MX_TIM1_Init+0xa0>)
 80004be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004c2:	224f      	movs	r2, #79	; 0x4f
 80004c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004ce:	2231      	movs	r2, #49	; 0x31
 80004d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e4:	4814      	ldr	r0, [pc, #80]	; (8000538 <MX_TIM1_Init+0x9c>)
 80004e6:	f003 fc81 	bl	8003dec <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80004f0:	f000 fa8e 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <MX_TIM1_Init+0x9c>)
 8000502:	f003 ff8e 	bl	8004422 <HAL_TIM_ConfigClockSource>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800050c:	f000 fa80 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_TIM1_Init+0x9c>)
 8000522:	f004 f9c7 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800052c:	f000 fa70 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200004dc 	.word	0x200004dc
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_TIM2_Init+0x94>)
 8000560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_TIM2_Init+0x94>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_TIM2_Init+0x94>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_TIM2_Init+0x94>)
 8000574:	2231      	movs	r2, #49	; 0x31
 8000576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_TIM2_Init+0x94>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_TIM2_Init+0x94>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000584:	4813      	ldr	r0, [pc, #76]	; (80005d4 <MX_TIM2_Init+0x94>)
 8000586:	f003 fc31 	bl	8003dec <HAL_TIM_Base_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000590:	f000 fa3e 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_TIM2_Init+0x94>)
 80005a2:	f003 ff3e 	bl	8004422 <HAL_TIM_ConfigClockSource>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005ac:	f000 fa30 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_TIM2_Init+0x94>)
 80005be:	f004 f979 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005c8:	f000 fa22 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000528 	.word	0x20000528

080005d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2224      	movs	r2, #36	; 0x24
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 ff82 	bl	80084f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_TIM3_Init+0xa4>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_TIM3_Init+0xa8>)
 80005fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_TIM3_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_TIM3_Init+0xa4>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_TIM3_Init+0xa4>)
 800060a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800060e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_TIM3_Init+0xa4>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_TIM3_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800061c:	2301      	movs	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000634:	2301      	movs	r3, #1
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_TIM3_Init+0xa4>)
 8000648:	f003 fc98 	bl	8003f7c <HAL_TIM_Encoder_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000652:	f000 f9dd 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <MX_TIM3_Init+0xa4>)
 8000664:	f004 f926 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800066e:	f000 f9cf 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	; 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000488 	.word	0x20000488
 8000680:	40000400 	.word	0x40000400

08000684 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2224      	movs	r2, #36	; 0x24
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 ff2c 	bl	80084f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	463b      	mov	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_TIM4_Init+0xa8>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 33888;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006b6:	f248 4260 	movw	r2, #33888	; 0x8460
 80006ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006c8:	2303      	movs	r3, #3
 80006ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_TIM4_Init+0xa4>)
 80006f4:	f003 fc42 	bl	8003f7c <HAL_TIM_Encoder_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006fe:	f000 f987 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_TIM4_Init+0xa4>)
 8000710:	f004 f8d0 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800071a:	f000 f979 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200003ec 	.word	0x200003ec
 800072c:	40000800 	.word	0x40000800

08000730 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2224      	movs	r2, #36	; 0x24
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fed6 	bl	80084f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MX_TIM5_Init+0xa4>)
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_TIM5_Init+0xa8>)
 8000752:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_TIM5_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_TIM5_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_TIM5_Init+0xa4>)
 8000762:	f248 4260 	movw	r2, #33888	; 0x8460
 8000766:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_TIM5_Init+0xa4>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_TIM5_Init+0xa4>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000774:	2303      	movs	r3, #3
 8000776:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800078c:	2301      	movs	r3, #1
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_TIM5_Init+0xa4>)
 80007a0:	f003 fbec 	bl	8003f7c <HAL_TIM_Encoder_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80007aa:	f000 f931 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_TIM5_Init+0xa4>)
 80007bc:	f004 f87a 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80007c6:	f000 f923 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3730      	adds	r7, #48	; 0x30
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000043c 	.word	0x2000043c
 80007d8:	40000c00 	.word	0x40000c00

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	4b4e      	ldr	r3, [pc, #312]	; (800092c <MX_GPIO_Init+0x150>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a4d      	ldr	r2, [pc, #308]	; (800092c <MX_GPIO_Init+0x150>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b4b      	ldr	r3, [pc, #300]	; (800092c <MX_GPIO_Init+0x150>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	4b48      	ldr	r3, [pc, #288]	; (800092c <MX_GPIO_Init+0x150>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a47      	ldr	r2, [pc, #284]	; (800092c <MX_GPIO_Init+0x150>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b45      	ldr	r3, [pc, #276]	; (800092c <MX_GPIO_Init+0x150>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b42      	ldr	r3, [pc, #264]	; (800092c <MX_GPIO_Init+0x150>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a41      	ldr	r2, [pc, #260]	; (800092c <MX_GPIO_Init+0x150>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b3f      	ldr	r3, [pc, #252]	; (800092c <MX_GPIO_Init+0x150>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b3c      	ldr	r3, [pc, #240]	; (800092c <MX_GPIO_Init+0x150>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a3b      	ldr	r2, [pc, #236]	; (800092c <MX_GPIO_Init+0x150>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <MX_GPIO_Init+0x150>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <MX_GPIO_Init+0x150>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0x150>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0x150>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XDIR_Pin|XCLK_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	210c      	movs	r1, #12
 800086e:	4830      	ldr	r0, [pc, #192]	; (8000930 <MX_GPIO_Init+0x154>)
 8000870:	f000 fec2 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <MX_GPIO_Init+0x158>)
 800087c:	f000 febc 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2101      	movs	r1, #1
 8000884:	482c      	ldr	r0, [pc, #176]	; (8000938 <MX_GPIO_Init+0x15c>)
 8000886:	f000 feb7 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin;
 800088a:	2328      	movs	r3, #40	; 0x28
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f000 fce8 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : XDIR_Pin XCLK_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin|XCLK_Pin;
 80008a4:	230c      	movs	r3, #12
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <MX_GPIO_Init+0x154>)
 80008bc:	f000 fcda 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 80008c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_GPIO_Init+0x158>)
 80008da:	f000 fccb 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0x160>)
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <MX_GPIO_Init+0x158>)
 80008f4:	f000 fcbe 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <MX_GPIO_Init+0x15c>)
 8000910:	f000 fcb0 	bl	8001274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2028      	movs	r0, #40	; 0x28
 800091a:	f000 fc74 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800091e:	2028      	movs	r0, #40	; 0x28
 8000920:	f000 fc8d 	bl	800123e <HAL_NVIC_EnableIRQ>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	48000400 	.word	0x48000400
 8000934:	48001000 	.word	0x48001000
 8000938:	48000c00 	.word	0x48000c00
 800093c:	10310000 	.word	0x10310000

08000940 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d115      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim4)-750000;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 800095e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000962:	461a      	mov	r2, r3
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000966:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim4.Init.Period)+cnt;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000976:	6812      	ldr	r2, [r2, #0]
 8000978:	4413      	add	r3, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800097e:	601a      	str	r2, [r3, #0]
	}

}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000528 	.word	0x20000528
 8000990:	200003ec 	.word	0x200003ec
 8000994:	20000438 	.word	0x20000438
 8000998:	200001b8 	.word	0x200001b8
 800099c:	200004d4 	.word	0x200004d4

080009a0 <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]

	  int8_t opbuff[4];

	  if(buf[0]== '0')
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b30      	cmp	r3, #48	; 0x30
 80009b0:	d115      	bne.n	80009de <CDC_ReceiveCallback+0x3e>
	  {
	  *(int32_t*)&(opbuff[0]) = TIM5->CNT;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <CDC_ReceiveCallback+0x64>)
 80009b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	601a      	str	r2, [r3, #0]

	  opbuff[3] =(X0<<0)+(Y0<<1);
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <CDC_ReceiveCallback+0x68>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <CDC_ReceiveCallback+0x6c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	73fb      	strb	r3, [r7, #15]


	  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2104      	movs	r1, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f006 fff4 	bl	80079c4 <CDC_Transmit_FS>
		  opbuff[1]=0xFF;
		  opbuff[2]=0xFF;
		  opbuff[3]=0xFF;
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
	  }
}
 80009dc:	e00d      	b.n	80009fa <CDC_ReceiveCallback+0x5a>
		  opbuff[0]=0xFF;
 80009de:	23ff      	movs	r3, #255	; 0xff
 80009e0:	733b      	strb	r3, [r7, #12]
		  opbuff[1]=0xFF;
 80009e2:	23ff      	movs	r3, #255	; 0xff
 80009e4:	737b      	strb	r3, [r7, #13]
		  opbuff[2]=0xFF;
 80009e6:	23ff      	movs	r3, #255	; 0xff
 80009e8:	73bb      	strb	r3, [r7, #14]
		  opbuff[3]=0xFF;
 80009ea:	23ff      	movs	r3, #255	; 0xff
 80009ec:	73fb      	strb	r3, [r7, #15]
		  CDC_Transmit_FS(&opbuff[0], sizeof(int32_t));
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2104      	movs	r1, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 ffe5 	bl	80079c4 <CDC_Transmit_FS>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40000c00 	.word	0x40000c00
 8000a08:	20000575 	.word	0x20000575
 8000a0c:	20000574 	.word	0x20000574

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x50>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_MspInit+0x50>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x50>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x50>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_MspInit+0x50>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x50>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2005      	movs	r0, #5
 8000a58:	f000 fbd5 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a5c:	2005      	movs	r0, #5
 8000a5e:	f000 fbee 	bl	800123e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_TIM_Base_MspInit+0x98>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12c      	bne.n	8000adc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2018      	movs	r0, #24
 8000aa0:	f000 fbb1 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000aa4:	2018      	movs	r0, #24
 8000aa6:	f000 fbca 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fba9 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ab4:	2019      	movs	r0, #25
 8000ab6:	f000 fbc2 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	201a      	movs	r0, #26
 8000ac0:	f000 fba1 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ac4:	201a      	movs	r0, #26
 8000ac6:	f000 fbba 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	201b      	movs	r0, #27
 8000ad0:	f000 fb99 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ad4:	201b      	movs	r0, #27
 8000ad6:	f000 fbb2 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ada:	e010      	b.n	8000afe <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae4:	d10b      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_TIM_Base_MspInit+0x9c>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a47      	ldr	r2, [pc, #284]	; (8000c4c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d128      	bne.n	8000b84 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b32:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	4a46      	ldr	r2, [pc, #280]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a40      	ldr	r2, [pc, #256]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b50:	f043 0310 	orr.w	r3, r3, #16
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0310 	and.w	r3, r3, #16
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b62:	2318      	movs	r3, #24
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b72:	2302      	movs	r3, #2
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4835      	ldr	r0, [pc, #212]	; (8000c54 <HAL_TIM_Encoder_MspInit+0x144>)
 8000b7e:	f000 fb79 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b82:	e05f      	b.n	8000c44 <HAL_TIM_Encoder_MspInit+0x134>
  else if(htim_encoder->Instance==TIM4)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <HAL_TIM_Encoder_MspInit+0x148>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_TIM_Encoder_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bbe:	23c0      	movs	r3, #192	; 0xc0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4820      	ldr	r0, [pc, #128]	; (8000c5c <HAL_TIM_Encoder_MspInit+0x14c>)
 8000bda:	f000 fb4b 	bl	8001274 <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000bde:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000be2:	f000 fd53 	bl	800168c <HAL_I2CEx_EnableFastModePlus>
}
 8000be6:	e02d      	b.n	8000c44 <HAL_TIM_Encoder_MspInit+0x134>
  else if(htim_encoder->Instance==TIM5)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_TIM_Encoder_MspInit+0x150>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d128      	bne.n	8000c44 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c22:	2303      	movs	r3, #3
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c32:	2302      	movs	r3, #2
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f000 fb18 	bl	8001274 <HAL_GPIO_Init>
}
 8000c44:	bf00      	nop
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40000400 	.word	0x40000400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48001000 	.word	0x48001000
 8000c58:	40000800 	.word	0x40000800
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	40000c00 	.word	0x40000c00

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f98a 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000cce:	f003 fa89 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200004dc 	.word	0x200004dc

08000cdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce0:	483c      	ldr	r0, [pc, #240]	; (8000dd4 <TIM1_UP_TIM16_IRQHandler+0xf8>)
 8000ce2:	f003 fa7f 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  static int xcnt = 0;
  static int ycnt = 0;

  if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d92f      	bls.n	8000d4e <TIM1_UP_TIM16_IRQHandler+0x72>
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a39      	ldr	r2, [pc, #228]	; (8000dd8 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cfa:	fb02 f201 	mul.w	r2, r2, r1
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d124      	bne.n	8000d4e <TIM1_UP_TIM16_IRQHandler+0x72>
	  if(xPul!=0) {
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d020      	beq.n	8000d4e <TIM1_UP_TIM16_IRQHandler+0x72>
	    if(xPul>0) {
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dd0a      	ble.n	8000d2a <TIM1_UP_TIM16_IRQHandler+0x4e>
        HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2104      	movs	r1, #4
 8000d18:	4832      	ldr	r0, [pc, #200]	; (8000de4 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000d1a:	f000 fc6d 	bl	80015f8 <HAL_GPIO_WritePin>
        xPul--;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e00d      	b.n	8000d46 <TIM1_UP_TIM16_IRQHandler+0x6a>
      }
	    else if(xPul<0) {
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	da09      	bge.n	8000d46 <TIM1_UP_TIM16_IRQHandler+0x6a>
        HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2104      	movs	r1, #4
 8000d36:	482b      	ldr	r0, [pc, #172]	; (8000de4 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000d38:	f000 fc5e 	bl	80015f8 <HAL_GPIO_WritePin>
        xPul++;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <TIM1_UP_TIM16_IRQHandler+0x104>)
 8000d44:	6013      	str	r3, [r2, #0]
      }
	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 8000d46:	2108      	movs	r1, #8
 8000d48:	4826      	ldr	r0, [pc, #152]	; (8000de4 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8000d4a:	f000 fc6d 	bl	8001628 <HAL_GPIO_TogglePin>
	  }
	  else {
	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
	  }
  }
  xcnt++;
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <TIM1_UP_TIM16_IRQHandler+0x100>)
 8000d56:	6013      	str	r3, [r2, #0]
  if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d931      	bls.n	8000dc4 <TIM1_UP_TIM16_IRQHandler+0xe8>
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8000d66:	7812      	ldrb	r2, [r2, #0]
 8000d68:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d6c:	fb02 f201 	mul.w	r2, r2, r1
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d126      	bne.n	8000dc4 <TIM1_UP_TIM16_IRQHandler+0xe8>
 	  if(yPul!=0) {
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <TIM1_UP_TIM16_IRQHandler+0xe8>
 	    if(yPul>0) {
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dd0b      	ble.n	8000d9e <TIM1_UP_TIM16_IRQHandler+0xc2>
 	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8c:	4819      	ldr	r0, [pc, #100]	; (8000df4 <TIM1_UP_TIM16_IRQHandler+0x118>)
 8000d8e:	f000 fc33 	bl	80015f8 <HAL_GPIO_WritePin>
 	      yPul--;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e00e      	b.n	8000dbc <TIM1_UP_TIM16_IRQHandler+0xe0>
 	    }else if(yPul<0) {
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da0a      	bge.n	8000dbc <TIM1_UP_TIM16_IRQHandler+0xe0>
 	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <TIM1_UP_TIM16_IRQHandler+0x118>)
 8000dae:	f000 fc23 	bl	80015f8 <HAL_GPIO_WritePin>
 	      yPul++;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <TIM1_UP_TIM16_IRQHandler+0x114>)
 8000dba:	6013      	str	r3, [r2, #0]
 	    }
 	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
 		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <TIM1_UP_TIM16_IRQHandler+0x11c>)
 8000dc0:	f000 fc32 	bl	8001628 <HAL_GPIO_TogglePin>
 	  }else {
 	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
 	  }
   }
   ycnt++;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <TIM1_UP_TIM16_IRQHandler+0x110>)
 8000dcc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200004dc 	.word	0x200004dc
 8000dd8:	2000057c 	.word	0x2000057c
 8000ddc:	200001c0 	.word	0x200001c0
 8000de0:	20000578 	.word	0x20000578
 8000de4:	48000400 	.word	0x48000400
 8000de8:	20000584 	.word	0x20000584
 8000dec:	200001c4 	.word	0x200001c4
 8000df0:	20000580 	.word	0x20000580
 8000df4:	48001000 	.word	0x48001000
 8000df8:	48000c00 	.word	0x48000c00

08000dfc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e02:	f003 f9ef 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200004dc 	.word	0x200004dc

08000e10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM1_CC_IRQHandler+0x10>)
 8000e16:	f003 f9e5 	bl	80041e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200004dc 	.word	0x200004dc

08000e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e2c:	f000 fc16 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e34:	f000 fc12 	bl	800165c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <OTG_FS_IRQHandler+0x10>)
 8000e42:	f000 fd96 	bl	8001972 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20001a5c 	.word	0x20001a5c

08000e50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <SystemInit+0x5c>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <SystemInit+0x5c>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <SystemInit+0x60>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <SystemInit+0x60>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <SystemInit+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <SystemInit+0x60>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <SystemInit+0x60>)
 8000e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SystemInit+0x60>)
 8000ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <SystemInit+0x60>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <SystemInit+0x60>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SystemInit+0x60>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	40021000 	.word	0x40021000

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffca 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <LoopForever+0x16>)
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f007 fad5 	bl	80084a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff f963 	bl	80001c8 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f08:	080085a8 	.word	0x080085a8
	ldr	r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f10:	2000019c 	.word	0x2000019c
	ldr	r2, =_sbss
 8000f14:	2000019c 	.word	0x2000019c
	ldr	r3, = _ebss
 8000f18:	20001e64 	.word	0x20001e64

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f961 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f80e 	bl	8000f50 <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff fd6c 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f96d 	bl	800125a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f000 f937 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	20000588 	.word	0x20000588

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000588 	.word	0x20000588

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000000c 	.word	0x2000000c

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e17f      	b.n	8001584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8171 	beq.w	800157e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d00b      	beq.n	80012bc <HAL_GPIO_Init+0x48>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d118      	bne.n	800135c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x128>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80ac 	beq.w	800157e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_GPIO_Init+0x330>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800143e:	4a5a      	ldr	r2, [pc, #360]	; (80015a8 <HAL_GPIO_Init+0x334>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x242>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x338>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x23e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x33c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x340>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x236>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x344>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x232>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x348>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x34c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x22a>
 800149a:	2306      	movs	r3, #6
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x244>
 80014b6:	2300      	movs	r3, #0
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c8:	4937      	ldr	r1, [pc, #220]	; (80015a8 <HAL_GPIO_Init+0x334>)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x350>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x350>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_GPIO_Init+0x350>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae78 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	48001800 	.word	0x48001800
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001614:	e002      	b.n	800161c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43d9      	mvns	r1, r3
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	400b      	ands	r3, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fbe8 	bl	8000e50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6613      	str	r3, [r2, #96]	; 0x60
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4905      	ldr	r1, [pc, #20]	; (80016c8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000

080016cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b08f      	sub	sp, #60	; 0x3c
 80016d0:	af0a      	add	r7, sp, #40	; 0x28
 80016d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e116      	b.n	800190c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f006 fabd 	bl	8007c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fa48 	bl	8004bb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	687e      	ldr	r6, [r7, #4]
 800172a:	466d      	mov	r5, sp
 800172c:	f106 0410 	add.w	r4, r6, #16
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	e894 0003 	ldmia.w	r4, {r0, r1}
 800173c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001740:	1d33      	adds	r3, r6, #4
 8001742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f003 f95b 	bl	8004a00 <USB_CoreInit>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0d7      	b.n	800190c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fa36 	bl	8004bd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e04a      	b.n	8001804 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	333d      	adds	r3, #61	; 0x3d
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	333c      	adds	r3, #60	; 0x3c
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	b298      	uxth	r0, r3
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	4602      	mov	r2, r0
 80017ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	333f      	adds	r3, #63	; 0x3f
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3344      	adds	r3, #68	; 0x44
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3348      	adds	r3, #72	; 0x48
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	3350      	adds	r3, #80	; 0x50
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3af      	bcc.n	800176e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e044      	b.n	800189e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3b5      	bcc.n	8001814 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	687e      	ldr	r6, [r7, #4]
 80018b0:	466d      	mov	r5, sp
 80018b2:	f106 0410 	add.w	r4, r6, #16
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018c6:	1d33      	adds	r3, r6, #4
 80018c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f003 f9ac 	bl	8004c28 <USB_DevInit>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e014      	b.n	800190c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 ff62 	bl	80027c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f004 f92e 	bl	8005b66 <USB_DevDisconnect>

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001914 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_PCD_Start+0x1c>
 800192c:	2302      	movs	r3, #2
 800192e:	e01c      	b.n	800196a <HAL_PCD_Start+0x56>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 f91d 	bl	8004b90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f8e2 	bl	8005b24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001972:	b590      	push	{r4, r7, lr}
 8001974:	b08d      	sub	sp, #52	; 0x34
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f9a0 	bl	8005cce <USB_GetMode>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 838f 	bne.w	80020b4 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f004 f904 	bl	8005ba8 <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8385 	beq.w	80020b2 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 f8fb 	bl	8005ba8 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d107      	bne.n	80019cc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f002 0202 	and.w	r2, r2, #2
 80019ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 f8e9 	bl	8005ba8 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d161      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d124      	bne.n	8001a66 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d035      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6a38      	ldr	r0, [r7, #32]
 8001a3c:	f003 ff4f 	bl	80058de <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a4c:	441a      	add	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a5e:	441a      	add	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e016      	b.n	8001a94 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	0c5b      	lsrs	r3, r3, #17
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d110      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6a38      	ldr	r0, [r7, #32]
 8001a7e:	f003 ff2e 	bl	80058de <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a8e:	441a      	add	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0210 	orr.w	r2, r2, #16
 8001aa2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 f87d 	bl	8005ba8 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ab8:	d16e      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 f883 	bl	8005bce <USB_ReadDevAllOutEpInterrupt>
 8001ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aca:	e062      	b.n	8001b92 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d057      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 f8a8 	bl	8005c36 <USB_ReadDevOutEPInterrupt>
 8001ae6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afe:	461a      	mov	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fd82 	bl	8002610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b22:	461a      	mov	r2, r3
 8001b24:	2308      	movs	r3, #8
 8001b26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fdbe 	bl	80026ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b46:	461a      	mov	r2, r3
 8001b48:	2310      	movs	r3, #16
 8001b4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b62:	461a      	mov	r2, r3
 8001b64:	2320      	movs	r3, #32
 8001b66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d199      	bne.n	8001acc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 f803 	bl	8005ba8 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bac:	f040 8087 	bne.w	8001cbe <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f004 f824 	bl	8005c02 <USB_ReadDevAllInEpInterrupt>
 8001bba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bc0:	e07a      	b.n	8001cb8 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d06f      	beq.n	8001cac <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 f84b 	bl	8005c72 <USB_ReadDevInEPInterrupt>
 8001bdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	2201      	movs	r2, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69f9      	ldr	r1, [r7, #28]
 8001c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c08:	4013      	ands	r3, r2
 8001c0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f006 f8ba 	bl	8007d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c40:	461a      	mov	r2, r3
 8001c42:	2308      	movs	r3, #8
 8001c44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2310      	movs	r3, #16
 8001c60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2340      	movs	r3, #64	; 0x40
 8001c7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c94:	461a      	mov	r2, r3
 8001c96:	2302      	movs	r3, #2
 8001c98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fc29 	bl	80024fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d181      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 ff70 	bl	8005ba8 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd2:	d122      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f006 fb67 	bl	80083d0 <HAL_PCDEx_LPM_Callback>
 8001d02:	e002      	b.n	8001d0a <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f006 f8b7 	bl	8007e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 ff42 	bl	8005ba8 <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d2e:	d112      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f006 f873 	bl	8007e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 ff24 	bl	8005ba8 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d6a:	d121      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001d7a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d111      	bne.n	8001daa <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001da0:	2101      	movs	r1, #1
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 fb14 	bl	80083d0 <HAL_PCDEx_LPM_Callback>
 8001da8:	e002      	b.n	8001db0 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f006 f83e 	bl	8007e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fef7 	bl	8005ba8 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc4:	f040 80c5 	bne.w	8001f52 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2110      	movs	r1, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f86c 	bl	8004ec0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	e056      	b.n	8001e9c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e20:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e32:	0151      	lsls	r1, r2, #5
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	440a      	add	r2, r1
 8001e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e66:	0151      	lsls	r1, r2, #5
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	440a      	add	r2, r1
 8001e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e86:	0151      	lsls	r1, r2, #5
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	440a      	add	r2, r1
 8001e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	3301      	adds	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d3a3      	bcc.n	8001dee <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001eb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed2:	f043 030b 	orr.w	r3, r3, #11
 8001ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee8:	f043 030b 	orr.w	r3, r3, #11
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	e015      	b.n	8001f1c <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f16:	f043 030b 	orr.w	r3, r3, #11
 8001f1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f003 fef7 	bl	8005d30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fe26 	bl	8005ba8 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f66:	d124      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 febc 	bl	8005cea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f803 	bl	8004f82 <USB_GetDevSpeed>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681c      	ldr	r4, [r3, #0]
 8001f88:	f001 fa08 	bl	800339c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4620      	mov	r0, r4
 8001f98:	f002 fd5e 	bl	8004a58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f005 ff26 	bl	8007dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 fdf6 	bl	8005ba8 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d10a      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f005 ff03 	bl	8007dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f002 0208 	and.w	r2, r2, #8
 8001fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fde1 	bl	8005ba8 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff0:	d10f      	bne.n	8002012 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f005 ff75 	bl	8007eec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fdc6 	bl	8005ba8 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002026:	d10f      	bne.n	8002048 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f005 ff48 	bl	8007ec8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fdab 	bl	8005ba8 <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d10a      	bne.n	8002074 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f005 ff56 	bl	8007f10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fd95 	bl	8005ba8 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d115      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f005 ff46 	bl	8007f2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	e000      	b.n	80020b4 <HAL_PCD_IRQHandler+0x742>
      return;
 80020b2:	bf00      	nop
    }
  }
}
 80020b4:	3734      	adds	r7, #52	; 0x34
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}

080020ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_SetAddress+0x1a>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e013      	b.n	80020fc <HAL_PCD_SetAddress+0x42>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fcf3 	bl	8005ad8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4603      	mov	r3, r0
 8002114:	70fb      	strb	r3, [r7, #3]
 8002116:	460b      	mov	r3, r1
 8002118:	803b      	strh	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	da0f      	bge.n	800214a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	3338      	adds	r3, #56	; 0x38
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	705a      	strb	r2, [r3, #1]
 8002148:	e00f      	b.n	800216a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002176:	883a      	ldrh	r2, [r7, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	78ba      	ldrb	r2, [r7, #2]
 8002180:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002194:	78bb      	ldrb	r3, [r7, #2]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d102      	bne.n	80021a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_PCD_EP_Open+0xaa>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e00e      	b.n	80021cc <HAL_PCD_EP_Open+0xc8>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 feff 	bl	8004fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80021ca:	7afb      	ldrb	r3, [r7, #11]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da0f      	bge.n	8002208 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	3338      	adds	r3, #56	; 0x38
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	705a      	strb	r2, [r3, #1]
 8002206:	e00f      	b.n	8002228 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 020f 	and.w	r2, r3, #15
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	b2da      	uxtb	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_PCD_EP_Close+0x6e>
 800223e:	2302      	movs	r3, #2
 8002240:	e00e      	b.n	8002260 <HAL_PCD_EP_Close+0x8c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68f9      	ldr	r1, [r7, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f002 ff3d 	bl	80050d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2200      	movs	r2, #0
 80022a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6979      	ldr	r1, [r7, #20]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 f9ba 	bl	8005640 <USB_EP0StartXfer>
 80022cc:	e005      	b.n	80022da <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 ffd7 	bl	8005288 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	460b      	mov	r3, r1
 8002322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	3338      	adds	r3, #56	; 0x38
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2201      	movs	r2, #1
 8002352:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	b2da      	uxtb	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002360:	7afb      	ldrb	r3, [r7, #11]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6979      	ldr	r1, [r7, #20]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 f965 	bl	8005640 <USB_EP0StartXfer>
 8002376:	e005      	b.n	8002384 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6979      	ldr	r1, [r7, #20]
 800237e:	4618      	mov	r0, r3
 8002380:	f002 ff82 	bl	8005288 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e04e      	b.n	800244a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0f      	bge.n	80023d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 020f 	and.w	r2, r3, #15
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	3338      	adds	r3, #56	; 0x38
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	705a      	strb	r2, [r3, #1]
 80023d2:	e00d      	b.n	80023f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_PCD_EP_SetStall+0x82>
 800240c:	2302      	movs	r3, #2
 800240e:	e01c      	b.n	800244a <HAL_PCD_EP_SetStall+0xbc>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fa86 	bl	8005930 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f003 fc78 	bl	8005d30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d901      	bls.n	8002470 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e042      	b.n	80024f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	da0f      	bge.n	8002498 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	705a      	strb	r2, [r3, #1]
 8002496:	e00f      	b.n	80024b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 020f 	and.w	r2, r3, #15
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	3304      	adds	r3, #4
 80024b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_PCD_EP_ClrStall+0x86>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e00e      	b.n	80024f6 <HAL_PCD_EP_ClrStall+0xa4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fa90 	bl	8005a0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	429a      	cmp	r2, r3
 8002530:	d901      	bls.n	8002536 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	429a      	cmp	r2, r3
 800254a:	d902      	bls.n	8002552 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3303      	adds	r3, #3
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800255a:	e026      	b.n	80025aa <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	429a      	cmp	r2, r3
 8002570:	d902      	bls.n	8002578 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3303      	adds	r3, #3
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	b29b      	uxth	r3, r3
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f003 f975 	bl	800587c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d809      	bhi.n	80025d4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d203      	bcs.n	80025d4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1c3      	bne.n	800255c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d811      	bhi.n	8002604 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	2201      	movs	r2, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002600:	4013      	ands	r3, r2
 8002602:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	333c      	adds	r3, #60	; 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d124      	bne.n	8002690 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	e01a      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	2320      	movs	r3, #32
 8002680:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f005 fb6d 	bl	8007d68 <HAL_PCD_DataOutStageCallback>
 800268e:	e005      	b.n	800269c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f005 fb66 	bl	8007d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	4f54310a 	.word	0x4f54310a

080026ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	3304      	adds	r3, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <PCD_EP_OutSetupPacket_int+0x64>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90e      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f005 fb1f 	bl	8007d44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	4f54300a 	.word	0x4f54300a

08002714 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002732:	883b      	ldrh	r3, [r7, #0]
 8002734:	0419      	lsls	r1, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	430a      	orrs	r2, r1
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	e028      	b.n	8002794 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4413      	add	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e00d      	b.n	8002772 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3340      	adds	r3, #64	; 0x40
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	3b01      	subs	r3, #1
 8002778:	429a      	cmp	r2, r3
 800277a:	d3ec      	bcc.n	8002756 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800277c:	883b      	ldrh	r3, [r7, #0]
 800277e:	0418      	lsls	r0, r3, #16
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	3b01      	subs	r3, #1
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4302      	orrs	r2, r0
 800278c:	3340      	adds	r3, #64	; 0x40
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	f043 0303 	orr.w	r3, r3, #3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_PWREx_GetVoltageRange+0x18>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40007000 	.word	0x40007000

08002828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002836:	d130      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d038      	beq.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2232      	movs	r2, #50	; 0x32
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800286c:	e002      	b.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3b01      	subs	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d102      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f2      	bne.n	800286e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d110      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00f      	b.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d007      	beq.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40007000 	.word	0x40007000
 80028cc:	20000004 	.word	0x20000004
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e2:	6053      	str	r3, [r2, #4]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e3d4      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	4ba1      	ldr	r3, [pc, #644]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002910:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80e4 	beq.w	8002af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_RCC_OscConfig+0x4a>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f040 808b 	bne.w	8002a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 8087 	bne.w	8002a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800293e:	4b93      	ldr	r3, [pc, #588]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e3ac      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	4b8c      	ldr	r3, [pc, #560]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_RCC_OscConfig+0x7c>
 8002966:	4b89      	ldr	r3, [pc, #548]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800296e:	e005      	b.n	800297c <HAL_RCC_OscConfig+0x88>
 8002970:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	4293      	cmp	r3, r2
 800297e:	d223      	bcs.n	80029c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fd15 	bl	80033b4 <RCC_SetFlashLatencyFromMSIRange>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e38d      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002994:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a7c      	ldr	r2, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800299a:	f043 0308 	orr.w	r3, r3, #8
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b7a      	ldr	r3, [pc, #488]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4977      	ldr	r1, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b2:	4b76      	ldr	r3, [pc, #472]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	4972      	ldr	r1, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
 80029c6:	e025      	b.n	8002a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c8:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6f      	ldr	r2, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029ce:	f043 0308 	orr.w	r3, r3, #8
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	496a      	ldr	r1, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e6:	4b69      	ldr	r3, [pc, #420]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4965      	ldr	r1, [pc, #404]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fcd5 	bl	80033b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e34d      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a14:	f000 fc36 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b5c      	ldr	r3, [pc, #368]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	495a      	ldr	r1, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x29c>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a30:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_RCC_OscConfig+0x2a0>)
 8002a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a34:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x2a4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fa89 	bl	8000f50 <HAL_InitTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d052      	beq.n	8002aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	e331      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d032      	beq.n	8002aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fac6 	bl	8000ff0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a68:	f7fe fac2 	bl	8000ff0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e31a      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	493b      	ldr	r1, [pc, #236]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e01a      	b.n	8002af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fa93 	bl	8000ff0 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ace:	f7fe fa8f 	bl	8000ff0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2e7      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x1da>
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d074      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x21a>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d10e      	bne.n	8002b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d064      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d160      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e2c4      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x24a>
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e01d      	b.n	8002b7a <HAL_RCC_OscConfig+0x286>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b46:	d10c      	bne.n	8002b62 <HAL_RCC_OscConfig+0x26e>
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e00b      	b.n	8002b7a <HAL_RCC_OscConfig+0x286>
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01c      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fa35 	bl	8000ff0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b88:	e011      	b.n	8002bae <HAL_RCC_OscConfig+0x2ba>
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08008560 	.word	0x08008560
 8002b94:	20000004 	.word	0x20000004
 8002b98:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fa28 	bl	8000ff0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e280      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	4baf      	ldr	r3, [pc, #700]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2a8>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fa18 	bl	8000ff0 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fa14 	bl	8000ff0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e26c      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd6:	4ba5      	ldr	r3, [pc, #660]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2d0>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d060      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x310>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d119      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d116      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x328>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e249      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b93      	ldr	r3, [pc, #588]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	4990      	ldr	r1, [pc, #576]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c30:	e040      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d023      	beq.n	8002c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3a:	4b8c      	ldr	r3, [pc, #560]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a8b      	ldr	r2, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe f9d3 	bl	8000ff0 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe f9cf 	bl	8000ff0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e227      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c60:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b7f      	ldr	r3, [pc, #508]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	497c      	ldr	r1, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e018      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a79      	ldr	r2, [pc, #484]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f9af 	bl	8000ff0 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe f9ab 	bl	8000ff0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e203      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca8:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe f98a 	bl	8000ff0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7fe f986 	bl	8000ff0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1de      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf2:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x3ec>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe f96d 	bl	8000ff0 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7fe f969 	bl	8000ff0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1c1      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ef      	bne.n	8002d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a6 	beq.w	8002e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d4c:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d118      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d80:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f930 	bl	8000ff0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7fe f92c 	bl	8000ff0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e184      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dca:	e024      	b.n	8002e16 <HAL_RCC_OscConfig+0x522>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d110      	bne.n	8002df6 <HAL_RCC_OscConfig+0x502>
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df4:	e00f      	b.n	8002e16 <HAL_RCC_OscConfig+0x522>
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f023 0304 	bic.w	r3, r3, #4
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f8e7 	bl	8000ff0 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe f8e3 	bl	8000ff0 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e139      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ed      	beq.n	8002e26 <HAL_RCC_OscConfig+0x532>
 8002e4a:	e01a      	b.n	8002e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe f8d0 	bl	8000ff0 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe f8cc 	bl	8000ff0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d906      	bls.n	8002e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e122      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	4b90      	ldr	r3, [pc, #576]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e8      	bne.n	8002e54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	4a8a      	ldr	r2, [pc, #552]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8108 	beq.w	80030ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	f040 80d0 	bne.w	8003048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ea8:	4b83      	ldr	r3, [pc, #524]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d130      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d127      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ee8:	2a07      	cmp	r2, #7
 8002eea:	bf14      	ite	ne
 8002eec:	2201      	movne	r2, #1
 8002eee:	2200      	moveq	r2, #0
 8002ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d113      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	3b01      	subs	r3, #1
 8002f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d06e      	beq.n	8002ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d069      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0b7      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f40:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f4c:	f7fe f850 	bl	8000ff0 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe f84c 	bl	8000ff0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0a4      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f66:	4b54      	ldr	r3, [pc, #336]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f72:	4b51      	ldr	r3, [pc, #324]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b51      	ldr	r3, [pc, #324]	; (80030bc <HAL_RCC_OscConfig+0x7c8>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f82:	3a01      	subs	r2, #1
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f8c:	0212      	lsls	r2, r2, #8
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f94:	0852      	lsrs	r2, r2, #1
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0552      	lsls	r2, r2, #21
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	0652      	lsls	r2, r2, #25
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fac:	0912      	lsrs	r2, r2, #4
 8002fae:	0452      	lsls	r2, r2, #17
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	4941      	ldr	r1, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3e      	ldr	r2, [pc, #248]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd0:	f7fe f80e 	bl	8000ff0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe f80a 	bl	8000ff0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e062      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	e05a      	b.n	80030ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e059      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffc:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d152      	bne.n	80030ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003020:	f7fd ffe6 	bl	8000ff0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fd ffe2 	bl	8000ff0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e03a      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x734>
 8003046:	e032      	b.n	80030ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d02d      	beq.n	80030aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003058:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800306c:	f023 0303 	bic.w	r3, r3, #3
 8003070:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 8003078:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fd ffb5 	bl	8000ff0 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fd ffb1 	bl	8000ff0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e009      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x796>
 80030a8:	e001      	b.n	80030ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	f99d808c 	.word	0xf99d808c

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0c8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d910      	bls.n	8003104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4961      	ldr	r1, [pc, #388]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b5f      	ldr	r3, [pc, #380]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b0      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d04c      	beq.n	80031aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d121      	bne.n	8003168 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e09e      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d107      	bne.n	8003140 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d115      	bne.n	8003168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e092      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003148:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e086      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003158:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e07e      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003168:	4b42      	ldr	r3, [pc, #264]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 0203 	bic.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	493f      	ldr	r1, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317a:	f7fd ff39 	bl	8000ff0 <HAL_GetTick>
 800317e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003180:	e00a      	b.n	8003198 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003182:	f7fd ff35 	bl	8000ff0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e066      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 020c 	and.w	r2, r3, #12
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d1eb      	bne.n	8003182 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	492c      	ldr	r1, [pc, #176]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c8:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d210      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4924      	ldr	r1, [pc, #144]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e036      	b.n	8003266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4910      	ldr	r1, [pc, #64]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003236:	f000 f825 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490c      	ldr	r1, [pc, #48]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fe78 	bl	8000f50 <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	72fb      	strb	r3, [r7, #11]

  return status;
 8003264:	7afb      	ldrb	r3, [r7, #11]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	08008560 	.word	0x08008560
 800327c:	20000004 	.word	0x20000004
 8003280:	20000008 	.word	0x20000008

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d11e      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e004      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d101      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 800330a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d134      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0xa6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xac>
 8003328:	e005      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 800332c:	617b      	str	r3, [r7, #20]
      break;
 800332e:	e005      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 8003332:	617b      	str	r3, [r7, #20]
      break;
 8003334:	e002      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	3301      	adds	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	fb02 f203 	mul.w	r2, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	0e5b      	lsrs	r3, r3, #25
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	3301      	adds	r3, #1
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800337c:	69bb      	ldr	r3, [r7, #24]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	08008570 	.word	0x08008570
 8003394:	00f42400 	.word	0x00f42400
 8003398:	02dc6c00 	.word	0x02dc6c00

0800339c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004

080033b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033c0:	4b2a      	ldr	r3, [pc, #168]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033cc:	f7ff fa1e 	bl	800280c <HAL_PWREx_GetVoltageRange>
 80033d0:	6178      	str	r0, [r7, #20]
 80033d2:	e014      	b.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	4a24      	ldr	r2, [pc, #144]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033de:	6593      	str	r3, [r2, #88]	; 0x58
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033ec:	f7ff fa0e 	bl	800280c <HAL_PWREx_GetVoltageRange>
 80033f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	4a1d      	ldr	r2, [pc, #116]	; (800346c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003404:	d10b      	bne.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d919      	bls.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2ba0      	cmp	r3, #160	; 0xa0
 8003410:	d902      	bls.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003412:	2302      	movs	r3, #2
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e013      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003418:	2301      	movs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	e010      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d902      	bls.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003424:	2303      	movs	r3, #3
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e00a      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d102      	bne.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003430:	2302      	movs	r3, #2
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	e004      	b.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b70      	cmp	r3, #112	; 0x70
 800343a:	d101      	bne.n	8003440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f023 0207 	bic.w	r2, r3, #7
 8003448:	4909      	ldr	r1, [pc, #36]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	40022000 	.word	0x40022000

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800347c:	2300      	movs	r3, #0
 800347e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003480:	2300      	movs	r3, #0
 8003482:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348c:	2b00      	cmp	r3, #0
 800348e:	d041      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003498:	d02a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800349a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800349e:	d824      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034aa:	d81e      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d010      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034b6:	e018      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034b8:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a85      	ldr	r2, [pc, #532]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034c4:	e015      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fabb 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034d6:	e00c      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3320      	adds	r3, #32
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fba6 	bl	8003c30 <RCCEx_PLLSAI2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	74fb      	strb	r3, [r7, #19]
      break;
 80034ee:	e000      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f8:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003506:	4973      	ldr	r1, [pc, #460]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800350e:	e001      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d041      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003528:	d02a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800352a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800352e:	d824      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003534:	d008      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800353a:	d81e      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003544:	d010      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003546:	e018      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003548:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003554:	e015      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fa73 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003566:	e00c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3320      	adds	r3, #32
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fb5e 	bl	8003c30 <RCCEx_PLLSAI2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	74fb      	strb	r3, [r7, #19]
      break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003588:	4b52      	ldr	r3, [pc, #328]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003596:	494f      	ldr	r1, [pc, #316]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800359e:	e001      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a0 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	4a40      	ldr	r2, [pc, #256]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6593      	str	r3, [r2, #88]	; 0x58
 80035d8:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f4:	f7fd fcfc 	bl	8000ff0 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035fa:	e009      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd fcf8 	bl	8000ff0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	74fb      	strb	r3, [r7, #19]
        break;
 800360e:	e005      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003610:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d15c      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003622:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	d019      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fd fcb7 	bl	8000ff0 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003684:	e00b      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fd fcb3 	bl	8000ff0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d902      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	74fb      	strb	r3, [r7, #19]
            break;
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ec      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ca:	e009      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
 80036d0:	e006      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e0:	7c7b      	ldrb	r3, [r7, #17]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4b9e      	ldr	r3, [pc, #632]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	4a9d      	ldr	r2, [pc, #628]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036fe:	4b98      	ldr	r3, [pc, #608]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f023 0203 	bic.w	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	4994      	ldr	r1, [pc, #592]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003720:	4b8f      	ldr	r3, [pc, #572]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f023 020c 	bic.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	498c      	ldr	r1, [pc, #560]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003742:	4b87      	ldr	r3, [pc, #540]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4983      	ldr	r1, [pc, #524]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003764:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	497b      	ldr	r1, [pc, #492]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003794:	4972      	ldr	r1, [pc, #456]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a8:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	496a      	ldr	r1, [pc, #424]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ca:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	4961      	ldr	r1, [pc, #388]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037ec:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	4959      	ldr	r1, [pc, #356]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	4950      	ldr	r1, [pc, #320]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	4948      	ldr	r1, [pc, #288]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003852:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	493f      	ldr	r1, [pc, #252]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d028      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003882:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003892:	d106      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a31      	ldr	r2, [pc, #196]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389e:	60d3      	str	r3, [r2, #12]
 80038a0:	e011      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f8c8 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d028      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	491f      	ldr	r1, [pc, #124]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f0:	d106      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fc:	60d3      	str	r3, [r2, #12]
 80038fe:	e011      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f899 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a02      	ldr	r2, [pc, #8]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395a:	60d3      	str	r3, [r2, #12]
 800395c:	e014      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f867 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	4928      	ldr	r1, [pc, #160]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f844 	bl	8003a48 <RCCEx_PLLSAI1_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d014      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	74bb      	strb	r3, [r7, #18]
 80039ce:	e011      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3320      	adds	r3, #32
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f925 	bl	8003c30 <RCCEx_PLLSAI2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0e:	490d      	ldr	r1, [pc, #52]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a32:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000

08003a48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a56:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a62:	4b72      	ldr	r3, [pc, #456]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0203 	and.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10d      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
       ||
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a7a:	4b6c      	ldr	r3, [pc, #432]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
       ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d047      	beq.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
 8003a92:	e044      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d018      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x86>
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d825      	bhi.n	8003aec <RCCEx_PLLSAI1_Config+0xa4>
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d002      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0x62>
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d009      	beq.n	8003abc <RCCEx_PLLSAI1_Config+0x74>
 8003aa8:	e020      	b.n	8003aec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aaa:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11d      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aba:	e01a      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003abc:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003acc:	e013      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ace:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ada:	4b54      	ldr	r3, [pc, #336]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aea:	e006      	b.n	8003afa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e004      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b02:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	430b      	orrs	r3, r1
 8003b18:	4944      	ldr	r1, [pc, #272]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d17d      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd fa5e 	bl	8000ff0 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b36:	e009      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b38:	f7fd fa5a 	bl	8000ff0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d902      	bls.n	8003b4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	73fb      	strb	r3, [r7, #15]
        break;
 8003b4a:	e005      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4c:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ef      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d160      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d111      	bne.n	8003b88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6892      	ldr	r2, [r2, #8]
 8003b74:	0211      	lsls	r1, r2, #8
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	0912      	lsrs	r2, r2, #4
 8003b7c:	0452      	lsls	r2, r2, #17
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	492a      	ldr	r1, [pc, #168]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	610b      	str	r3, [r1, #16]
 8003b86:	e027      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d112      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	0211      	lsls	r1, r2, #8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6912      	ldr	r2, [r2, #16]
 8003ba4:	0852      	lsrs	r2, r2, #1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0552      	lsls	r2, r2, #21
 8003baa:	430a      	orrs	r2, r1
 8003bac:	491f      	ldr	r1, [pc, #124]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	610b      	str	r3, [r1, #16]
 8003bb2:	e011      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6892      	ldr	r2, [r2, #8]
 8003bc4:	0211      	lsls	r1, r2, #8
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6952      	ldr	r2, [r2, #20]
 8003bca:	0852      	lsrs	r2, r2, #1
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	0652      	lsls	r2, r2, #25
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4916      	ldr	r1, [pc, #88]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be4:	f7fd fa04 	bl	8000ff0 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bec:	f7fd fa00 	bl	8000ff0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000

08003c30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d018      	beq.n	8003c7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0203 	and.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d10d      	bne.n	8003c76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c62:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
       ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d047      	beq.n	8003d06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	e044      	b.n	8003d06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d018      	beq.n	8003cb6 <RCCEx_PLLSAI2_Config+0x86>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d825      	bhi.n	8003cd4 <RCCEx_PLLSAI2_Config+0xa4>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <RCCEx_PLLSAI2_Config+0x62>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d009      	beq.n	8003ca4 <RCCEx_PLLSAI2_Config+0x74>
 8003c90:	e020      	b.n	8003cd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c92:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca2:	e01a      	b.n	8003cda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e013      	b.n	8003cde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb6:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cc2:	4b49      	ldr	r3, [pc, #292]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cd2:	e006      	b.n	8003ce2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e004      	b.n	8003ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	4939      	ldr	r1, [pc, #228]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d167      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd f96a 	bl	8000ff0 <HAL_GetTick>
 8003d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d1e:	e009      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d20:	f7fd f966 	bl	8000ff0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d902      	bls.n	8003d34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	73fb      	strb	r3, [r7, #15]
        break;
 8003d32:	e005      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ef      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d14a      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6892      	ldr	r2, [r2, #8]
 8003d5c:	0211      	lsls	r1, r2, #8
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	0912      	lsrs	r2, r2, #4
 8003d64:	0452      	lsls	r2, r2, #17
 8003d66:	430a      	orrs	r2, r1
 8003d68:	491f      	ldr	r1, [pc, #124]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	614b      	str	r3, [r1, #20]
 8003d6e:	e011      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6912      	ldr	r2, [r2, #16]
 8003d86:	0852      	lsrs	r2, r2, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0652      	lsls	r2, r2, #25
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4916      	ldr	r1, [pc, #88]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fd f926 	bl	8000ff0 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003da6:	e009      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da8:	f7fd f922 	bl	8000ff0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dba:	e005      	b.n	8003dc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4904      	ldr	r1, [pc, #16]	; (8003de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e049      	b.n	8003e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc fe2c 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fbe8 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04f      	b.n	8003f54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d018      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	; (8003f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_TIM_Base_Start_IT+0x76>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d115      	bne.n	8003f3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d015      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d011      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	e008      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0201 	orr.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	00010007 	.word	0x00010007

08003f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e097      	b.n	80040c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fc fdb3 	bl	8000b10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003fc0:	f023 0307 	bic.w	r3, r3, #7
 8003fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f000 fb15 	bl	8004600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	4313      	orrs	r3, r2
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800401c:	f023 030c 	bic.w	r3, r3, #12
 8004020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	4313      	orrs	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	011a      	lsls	r2, r3, #4
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	031b      	lsls	r3, r3, #12
 800404c:	4313      	orrs	r3, r2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	4313      	orrs	r3, r2
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d110      	bne.n	800411a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d001      	beq.n	8004108 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e069      	b.n	80041dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004118:	e031      	b.n	800417e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d110      	bne.n	8004142 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004120:	7bbb      	ldrb	r3, [r7, #14]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004126:	7b3b      	ldrb	r3, [r7, #12]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d001      	beq.n	8004130 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e055      	b.n	80041dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004140:	e01d      	b.n	800417e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004148:	7bbb      	ldrb	r3, [r7, #14]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800414e:	7b7b      	ldrb	r3, [r7, #13]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004154:	7b3b      	ldrb	r3, [r7, #12]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d001      	beq.n	800415e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e03e      	b.n	80041dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_TIM_Encoder_Start+0xc4>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d008      	beq.n	800419c <HAL_TIM_Encoder_Start+0xd4>
 800418a:	e00f      	b.n	80041ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fb67 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 800419a:	e016      	b.n	80041ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	2104      	movs	r1, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fb5f 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 80041aa:	e00e      	b.n	80041ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2201      	movs	r2, #1
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb57 	bl	8004868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2201      	movs	r2, #1
 80041c0:	2104      	movs	r1, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fb50 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 80041c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0202 	mvn.w	r2, #2
 8004210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9cb 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9bd 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9ce 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0204 	mvn.w	r2, #4
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f9a1 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f993 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f9a4 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0208 	mvn.w	r2, #8
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f977 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f969 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f97a 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f94d 	bl	80045c2 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f93f 	bl	80045ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f950 	bl	80045d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b01      	cmp	r3, #1
 8004356:	d107      	bne.n	8004368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0201 	mvn.w	r2, #1
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc faec 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d10e      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d107      	bne.n	8004394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fb22 	bl	80049d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a2:	d10e      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d107      	bne.n	80043c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb15 	bl	80049ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8fe 	bl	80045ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d10e      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d107      	bne.n	800441a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f06f 0220 	mvn.w	r2, #32
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fad5 	bl	80049c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_TIM_ConfigClockSource+0x18>
 8004436:	2302      	movs	r3, #2
 8004438:	e0b5      	b.n	80045a6 <HAL_TIM_ConfigClockSource+0x184>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004458:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004464:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004476:	d03e      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0xd4>
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	f200 8087 	bhi.w	800458e <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	f000 8085 	beq.w	8004592 <HAL_TIM_ConfigClockSource+0x170>
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448c:	d87f      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 800448e:	2b70      	cmp	r3, #112	; 0x70
 8004490:	d01a      	beq.n	80044c8 <HAL_TIM_ConfigClockSource+0xa6>
 8004492:	2b70      	cmp	r3, #112	; 0x70
 8004494:	d87b      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 8004496:	2b60      	cmp	r3, #96	; 0x60
 8004498:	d050      	beq.n	800453c <HAL_TIM_ConfigClockSource+0x11a>
 800449a:	2b60      	cmp	r3, #96	; 0x60
 800449c:	d877      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 800449e:	2b50      	cmp	r3, #80	; 0x50
 80044a0:	d03c      	beq.n	800451c <HAL_TIM_ConfigClockSource+0xfa>
 80044a2:	2b50      	cmp	r3, #80	; 0x50
 80044a4:	d873      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d058      	beq.n	800455c <HAL_TIM_ConfigClockSource+0x13a>
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d86f      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d064      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x15a>
 80044b2:	2b30      	cmp	r3, #48	; 0x30
 80044b4:	d86b      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d060      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x15a>
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d867      	bhi.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d05c      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x15a>
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d05a      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044c6:	e062      	b.n	800458e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f000 f9a6 	bl	8004828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]
      break;
 80044f4:	e04e      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6899      	ldr	r1, [r3, #8]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f000 f98f 	bl	8004828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004518:	609a      	str	r2, [r3, #8]
      break;
 800451a:	e03b      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6859      	ldr	r1, [r3, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	461a      	mov	r2, r3
 800452a:	f000 f903 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2150      	movs	r1, #80	; 0x50
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f95c 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800453a:	e02b      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	461a      	mov	r2, r3
 800454a:	f000 f922 	bl	8004792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2160      	movs	r1, #96	; 0x60
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f94c 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800455a:	e01b      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	461a      	mov	r2, r3
 800456a:	f000 f8e3 	bl	8004734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2140      	movs	r1, #64	; 0x40
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f93c 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800457a:	e00b      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 f933 	bl	80047f2 <TIM_ITRx_SetConfig>
        break;
 800458c:	e002      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004592:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a40      	ldr	r2, [pc, #256]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00f      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3d      	ldr	r2, [pc, #244]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3c      	ldr	r2, [pc, #240]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3b      	ldr	r2, [pc, #236]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <TIM_Base_SetConfig+0x118>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_Base_SetConfig+0x11c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_Base_SetConfig+0x120>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_Base_SetConfig+0x124>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_Base_SetConfig+0x128>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <TIM_Base_SetConfig+0x12c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x9a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a26      	ldr	r2, [pc, #152]	; (8004730 <TIM_Base_SetConfig+0x130>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <TIM_Base_SetConfig+0x128>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a10      	ldr	r2, [pc, #64]	; (800472c <TIM_Base_SetConfig+0x12c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <TIM_Base_SetConfig+0x130>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	f043 0307 	orr.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2201      	movs	r2, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e068      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2e      	ldr	r2, [pc, #184]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2d      	ldr	r2, [pc, #180]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d108      	bne.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d018      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40014000 	.word	0x40014000

080049c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 001c 	add.w	r0, r7, #28
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f9ce 	bl	8005dc0 <USB_CoreReset>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
 8004a3a:	e005      	b.n	8004a48 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr

08004a58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d165      	bne.n	8004b38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a3e      	ldr	r2, [pc, #248]	; (8004b68 <USB_SetTurnaroundTime+0x110>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d906      	bls.n	8004a82 <USB_SetTurnaroundTime+0x2a>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4a3d      	ldr	r2, [pc, #244]	; (8004b6c <USB_SetTurnaroundTime+0x114>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d202      	bcs.n	8004a82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e05c      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <USB_SetTurnaroundTime+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d306      	bcc.n	8004a98 <USB_SetTurnaroundTime+0x40>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a38      	ldr	r2, [pc, #224]	; (8004b70 <USB_SetTurnaroundTime+0x118>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d202      	bcs.n	8004a98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a92:	230e      	movs	r3, #14
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e051      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a35      	ldr	r2, [pc, #212]	; (8004b70 <USB_SetTurnaroundTime+0x118>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d306      	bcc.n	8004aae <USB_SetTurnaroundTime+0x56>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <USB_SetTurnaroundTime+0x11c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d202      	bcs.n	8004aae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e046      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	; (8004b74 <USB_SetTurnaroundTime+0x11c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d306      	bcc.n	8004ac4 <USB_SetTurnaroundTime+0x6c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <USB_SetTurnaroundTime+0x120>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004abe:	230c      	movs	r3, #12
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e03b      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <USB_SetTurnaroundTime+0x120>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d906      	bls.n	8004ada <USB_SetTurnaroundTime+0x82>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <USB_SetTurnaroundTime+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d802      	bhi.n	8004ada <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ad4:	230b      	movs	r3, #11
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e030      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <USB_SetTurnaroundTime+0x124>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d906      	bls.n	8004af0 <USB_SetTurnaroundTime+0x98>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <USB_SetTurnaroundTime+0x128>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d802      	bhi.n	8004af0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aea:	230a      	movs	r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e025      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <USB_SetTurnaroundTime+0x128>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d906      	bls.n	8004b06 <USB_SetTurnaroundTime+0xae>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <USB_SetTurnaroundTime+0x12c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d202      	bcs.n	8004b06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b00:	2309      	movs	r3, #9
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e01a      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <USB_SetTurnaroundTime+0x12c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d306      	bcc.n	8004b1c <USB_SetTurnaroundTime+0xc4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <USB_SetTurnaroundTime+0x130>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b16:	2308      	movs	r3, #8
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e00f      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <USB_SetTurnaroundTime+0x130>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d906      	bls.n	8004b32 <USB_SetTurnaroundTime+0xda>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <USB_SetTurnaroundTime+0x134>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d202      	bcs.n	8004b32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e004      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b32:	2306      	movs	r3, #6
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	e001      	b.n	8004b3c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b38:	2309      	movs	r3, #9
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	00d8acbf 	.word	0x00d8acbf
 8004b6c:	00e4e1c0 	.word	0x00e4e1c0
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	01067380 	.word	0x01067380
 8004b78:	011a499f 	.word	0x011a499f
 8004b7c:	01312cff 	.word	0x01312cff
 8004b80:	014ca43f 	.word	0x014ca43f
 8004b84:	016e3600 	.word	0x016e3600
 8004b88:	01a6ab1f 	.word	0x01a6ab1f
 8004b8c:	01e84800 	.word	0x01e84800

08004b90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 0201 	bic.w	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e00b      	b.n	8004c18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e001      	b.n	8004c18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e003      	b.n	8004c20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c18:	2032      	movs	r0, #50	; 0x32
 8004c1a:	f7fc f9f5 	bl	8001008 <HAL_Delay>

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c28:	b084      	sub	sp, #16
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e009      	b.n	8004c5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3340      	adds	r3, #64	; 0x40
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b0e      	cmp	r3, #14
 8004c60:	d9f2      	bls.n	8004c48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11c      	bne.n	8004ca2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c76:	f043 0302 	orr.w	r3, r3, #2
 8004c7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e005      	b.n	8004cae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	461a      	mov	r2, r3
 8004cca:	680b      	ldr	r3, [r1, #0]
 8004ccc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cce:	2103      	movs	r1, #3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f93d 	bl	8004f50 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8f1 	bl	8004ec0 <USB_FlushTxFifo>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f90f 	bl	8004f0c <USB_FlushRxFifo>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	461a      	mov	r2, r3
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	e043      	b.n	8004daa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d38:	d118      	bne.n	8004d6c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	e013      	b.n	8004d7e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e008      	b.n	8004d7e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d3b7      	bcc.n	8004d22 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	e043      	b.n	8004e40 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dce:	d118      	bne.n	8004e02 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e013      	b.n	8004e14 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e008      	b.n	8004e14 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2300      	movs	r3, #0
 8004e12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	461a      	mov	r2, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3b7      	bcc.n	8004db8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f043 0210 	orr.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <USB_DevInit+0x294>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f043 0208 	orr.w	r2, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb6:	b004      	add	sp, #16
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	803c3800 	.word	0x803c3800

08004ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <USB_FlushTxFifo+0x48>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d0f0      	beq.n	8004eda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <USB_FlushRxFifo+0x40>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d0f0      	beq.n	8004f1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d002      	beq.n	8004fa8 <USB_GetDevSpeed+0x26>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b06      	cmp	r3, #6
 8004fa6:	d102      	bne.n	8004fae <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	75fb      	strb	r3, [r7, #23]
 8004fac:	e001      	b.n	8004fb2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004fae:	230f      	movs	r3, #15
 8004fb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d13a      	bne.n	8005052 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d155      	bne.n	80050c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	78db      	ldrb	r3, [r3, #3]
 800502e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005030:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	059b      	lsls	r3, r3, #22
 8005036:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005038:	4313      	orrs	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e036      	b.n	80050c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	2101      	movs	r1, #1
 8005064:	fa01 f303 	lsl.w	r3, r1, r3
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4313      	orrs	r3, r2
 8005072:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11a      	bne.n	80050c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	78db      	ldrb	r3, [r3, #3]
 80050a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050a6:	430b      	orrs	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d161      	bne.n	80051b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005102:	d11f      	bne.n	8005144 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005122:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	2101      	movs	r1, #1
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	b29b      	uxth	r3, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005164:	4013      	ands	r3, r2
 8005166:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2101      	movs	r1, #1
 800517a:	fa01 f303 	lsl.w	r3, r1, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005188:	4013      	ands	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	0159      	lsls	r1, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	440b      	add	r3, r1
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	4619      	mov	r1, r3
 80051a8:	4b35      	ldr	r3, [pc, #212]	; (8005280 <USB_DeactivateEndpoint+0x1b0>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
 80051ae:	e060      	b.n	8005272 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051c6:	d11f      	bne.n	8005208 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005202:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005206:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	43db      	mvns	r3, r3
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005228:	4013      	ands	r3, r2
 800522a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	43db      	mvns	r3, r3
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524c:	4013      	ands	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	440b      	add	r3, r1
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	4619      	mov	r1, r3
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <USB_DeactivateEndpoint+0x1b4>)
 800526e:	4013      	ands	r3, r2
 8005270:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	ec337800 	.word	0xec337800
 8005284:	eff37800 	.word	0xeff37800

08005288 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f040 810a 	bne.w	80054ba <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d132      	bne.n	8005314 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	0cdb      	lsrs	r3, r3, #19
 800530e:	04db      	lsls	r3, r3, #19
 8005310:	6113      	str	r3, [r2, #16]
 8005312:	e074      	b.n	80053fe <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532e:	0cdb      	lsrs	r3, r3, #19
 8005330:	04db      	lsls	r3, r3, #19
 8005332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6959      	ldr	r1, [r3, #20]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	440b      	add	r3, r1
 8005370:	1e59      	subs	r1, r3, #1
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	fbb1 f3f3 	udiv	r3, r1, r3
 800537a:	04d9      	lsls	r1, r3, #19
 800537c:	4baf      	ldr	r3, [pc, #700]	; (800563c <USB_EPStartXfer+0x3b4>)
 800537e:	400b      	ands	r3, r1
 8005380:	6939      	ldr	r1, [r7, #16]
 8005382:	0148      	lsls	r0, r1, #5
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	4401      	add	r1, r0
 8005388:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800538c:	4313      	orrs	r3, r2
 800538e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a6:	6939      	ldr	r1, [r7, #16]
 80053a8:	0148      	lsls	r0, r1, #5
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	4401      	add	r1, r0
 80053ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	78db      	ldrb	r3, [r3, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11f      	bne.n	80053fe <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80053dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053fc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005418:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800541c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d015      	beq.n	8005452 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8100 	beq.w	8005630 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544c:	4313      	orrs	r3, r2
 800544e:	634b      	str	r3, [r1, #52]	; 0x34
 8005450:	e0ee      	b.n	8005630 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d110      	bne.n	8005484 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e00f      	b.n	80054a4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9e2 	bl	800587c <USB_WritePacket>
 80054b8:	e0ba      	b.n	8005630 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	0cdb      	lsrs	r3, r3, #19
 80054d6:	04db      	lsls	r3, r3, #19
 80054d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d123      	bne.n	800554e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	0148      	lsls	r0, r1, #5
 8005520:	6979      	ldr	r1, [r7, #20]
 8005522:	4401      	add	r1, r0
 8005524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005528:	4313      	orrs	r3, r2
 800552a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800554a:	6113      	str	r3, [r2, #16]
 800554c:	e033      	b.n	80055b6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	4413      	add	r3, r2
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	89fb      	ldrh	r3, [r7, #14]
 8005574:	04d9      	lsls	r1, r3, #19
 8005576:	4b31      	ldr	r3, [pc, #196]	; (800563c <USB_EPStartXfer+0x3b4>)
 8005578:	400b      	ands	r3, r1
 800557a:	6939      	ldr	r1, [r7, #16]
 800557c:	0148      	lsls	r0, r1, #5
 800557e:	6979      	ldr	r1, [r7, #20]
 8005580:	4401      	add	r1, r0
 8005582:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	89f9      	ldrh	r1, [r7, #14]
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	6939      	ldr	r1, [r7, #16]
 80055a8:	0148      	lsls	r0, r1, #5
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	4401      	add	r1, r0
 80055ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	78db      	ldrb	r3, [r3, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d128      	bne.n	8005610 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d110      	bne.n	80055f0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	0151      	lsls	r1, r2, #5
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	440a      	add	r2, r1
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e00f      	b.n	8005610 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800562e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	1ff80000 	.word	0x1ff80000

08005640 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 80ab 	bne.w	80057b4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d132      	bne.n	80056cc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	0cdb      	lsrs	r3, r3, #19
 80056c6:	04db      	lsls	r3, r3, #19
 80056c8:	6113      	str	r3, [r2, #16]
 80056ca:	e04e      	b.n	800576a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	0cdb      	lsrs	r3, r3, #19
 80056e8:	04db      	lsls	r3, r3, #19
 80056ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800570e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	68b9      	ldr	r1, [r7, #8]
 800575c:	0148      	lsls	r0, r1, #5
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	4401      	add	r1, r0
 8005762:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06d      	beq.n	800586e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	2101      	movs	r1, #1
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ae:	4313      	orrs	r3, r2
 80057b0:	634b      	str	r3, [r1, #52]	; 0x34
 80057b2:	e05c      	b.n	800586e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	0cdb      	lsrs	r3, r3, #19
 80057d0:	04db      	lsls	r3, r3, #19
 80057d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005826:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800586c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	; 0x24
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	460b      	mov	r3, r1
 800588c:	71fb      	strb	r3, [r7, #7]
 800588e:	4613      	mov	r3, r2
 8005890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800589a:	88bb      	ldrh	r3, [r7, #4]
 800589c:	3303      	adds	r3, #3
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e00f      	b.n	80058c8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	031a      	lsls	r2, r3, #12
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	461a      	mov	r2, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6013      	str	r3, [r2, #0]
    pSrc++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3304      	adds	r3, #4
 80058c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d3eb      	bcc.n	80058a8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3724      	adds	r7, #36	; 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058de:	b480      	push	{r7}
 80058e0:	b089      	sub	sp, #36	; 0x24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	3303      	adds	r3, #3
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e00b      	b.n	800591a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	601a      	str	r2, [r3, #0]
    pDest++;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3304      	adds	r3, #4
 8005912:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3301      	adds	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3ef      	bcc.n	8005902 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005922:	69fb      	ldr	r3, [r7, #28]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3724      	adds	r7, #36	; 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d12c      	bne.n	80059a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	db12      	blt.n	8005984 <USB_EPSetStall+0x54>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00f      	beq.n	8005984 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005982:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e02b      	b.n	80059fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	db12      	blt.n	80059de <USB_EPSetStall+0xae>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00f      	beq.n	80059de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	785b      	ldrb	r3, [r3, #1]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d128      	bne.n	8005a7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d003      	beq.n	8005a58 <USB_EPClearStall+0x4c>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d138      	bne.n	8005aca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e027      	b.n	8005aca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	78db      	ldrb	r3, [r3, #3]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d003      	beq.n	8005aaa <USB_EPClearStall+0x9e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	78db      	ldrb	r3, [r3, #3]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d10f      	bne.n	8005aca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005afa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b52:	f023 0302 	bic.w	r3, r3, #2
 8005b56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b80:	f023 0303 	bic.w	r3, r3, #3
 8005b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	0c1b      	lsrs	r3, r3, #16
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	b29b      	uxth	r3, r3
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c64:	68bb      	ldr	r3, [r7, #8]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b087      	sub	sp, #28
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	01db      	lsls	r3, r3, #7
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0301 	and.w	r3, r3, #1
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d08:	f023 0307 	bic.w	r3, r3, #7
 8005d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	333c      	adds	r3, #60	; 0x3c
 8005d42:	3304      	adds	r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <USB_EP0_OutStart+0x8c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d90a      	bls.n	8005d66 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d60:	d101      	bne.n	8005d66 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e024      	b.n	8005db0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 0318 	orr.w	r3, r3, #24
 8005d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005dac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	4f54300a 	.word	0x4f54300a

08005dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <USB_CoreReset+0x64>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e01b      	b.n	8005e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	daf2      	bge.n	8005dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <USB_CoreReset+0x64>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e006      	b.n	8005e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d0f0      	beq.n	8005df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e38:	f002 fb18 	bl	800846c <USBD_static_malloc>
 8005e3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e066      	b.n	8005f1e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7c1b      	ldrb	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d119      	bne.n	8005e94 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e64:	2202      	movs	r2, #2
 8005e66:	2181      	movs	r1, #129	; 0x81
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 f8eb 	bl	8008044 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e78:	2202      	movs	r2, #2
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 f8e1 	bl	8008044 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2210      	movs	r2, #16
 8005e8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e92:	e016      	b.n	8005ec2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	2202      	movs	r2, #2
 8005e98:	2181      	movs	r1, #129	; 0x81
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f002 f8d2 	bl	8008044 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ea6:	2340      	movs	r3, #64	; 0x40
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	2101      	movs	r1, #1
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f002 f8c9 	bl	8008044 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	2182      	movs	r1, #130	; 0x82
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f002 f8bb 	bl	8008044 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7c1b      	ldrb	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f02:	2101      	movs	r1, #1
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 fa17 	bl	8008338 <USBD_LL_PrepareReceive>
 8005f0a:	e007      	b.n	8005f1c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	2101      	movs	r1, #1
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 fa0e 	bl	8008338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f32:	2181      	movs	r1, #129	; 0x81
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f002 f8c3 	bl	80080c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f40:	2101      	movs	r1, #1
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 f8bc 	bl	80080c0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f50:	2182      	movs	r1, #130	; 0x82
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 f8b4 	bl	80080c0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00e      	beq.n	8005f90 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f82:	4618      	mov	r0, r3
 8005f84:	f002 fa80 	bl	8008488 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e0af      	b.n	8006124 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03f      	beq.n	8006050 <USBD_CDC_Setup+0xb4>
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	f040 809f 	bne.w	8006114 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	88db      	ldrh	r3, [r3, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02e      	beq.n	800603c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da16      	bge.n	8006016 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ff4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	88d2      	ldrh	r2, [r2, #6]
 8005ffa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	88db      	ldrh	r3, [r3, #6]
 8006000:	2b07      	cmp	r3, #7
 8006002:	bf28      	it	cs
 8006004:	2307      	movcs	r3, #7
 8006006:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	89fa      	ldrh	r2, [r7, #14]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fb43 	bl	800769a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006014:	e085      	b.n	8006122 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785a      	ldrb	r2, [r3, #1]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	88db      	ldrh	r3, [r3, #6]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800602c:	6939      	ldr	r1, [r7, #16]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	88db      	ldrh	r3, [r3, #6]
 8006032:	461a      	mov	r2, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fb5c 	bl	80076f2 <USBD_CtlPrepareRx>
      break;
 800603a:	e072      	b.n	8006122 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	7850      	ldrb	r0, [r2, #1]
 8006048:	2200      	movs	r2, #0
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	4798      	blx	r3
      break;
 800604e:	e068      	b.n	8006122 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b0b      	cmp	r3, #11
 8006056:	d852      	bhi.n	80060fe <USBD_CDC_Setup+0x162>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <USBD_CDC_Setup+0xc4>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006091 	.word	0x08006091
 8006064:	0800610d 	.word	0x0800610d
 8006068:	080060ff 	.word	0x080060ff
 800606c:	080060ff 	.word	0x080060ff
 8006070:	080060ff 	.word	0x080060ff
 8006074:	080060ff 	.word	0x080060ff
 8006078:	080060ff 	.word	0x080060ff
 800607c:	080060ff 	.word	0x080060ff
 8006080:	080060ff 	.word	0x080060ff
 8006084:	080060ff 	.word	0x080060ff
 8006088:	080060bb 	.word	0x080060bb
 800608c:	080060e5 	.word	0x080060e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b03      	cmp	r3, #3
 800609a:	d107      	bne.n	80060ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800609c:	f107 030a 	add.w	r3, r7, #10
 80060a0:	2202      	movs	r2, #2
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 faf8 	bl	800769a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060aa:	e032      	b.n	8006112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fa82 	bl	80075b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060b4:	2303      	movs	r3, #3
 80060b6:	75fb      	strb	r3, [r7, #23]
          break;
 80060b8:	e02b      	b.n	8006112 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d107      	bne.n	80060d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060c6:	f107 030d 	add.w	r3, r7, #13
 80060ca:	2201      	movs	r2, #1
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 fae3 	bl	800769a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060d4:	e01d      	b.n	8006112 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fa6d 	bl	80075b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060de:	2303      	movs	r3, #3
 80060e0:	75fb      	strb	r3, [r7, #23]
          break;
 80060e2:	e016      	b.n	8006112 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d00f      	beq.n	8006110 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fa60 	bl	80075b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060fc:	e008      	b.n	8006110 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fa59 	bl	80075b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	75fb      	strb	r3, [r7, #23]
          break;
 800610a:	e002      	b.n	8006112 <USBD_CDC_Setup+0x176>
          break;
 800610c:	bf00      	nop
 800610e:	e008      	b.n	8006122 <USBD_CDC_Setup+0x186>
          break;
 8006110:	bf00      	nop
      }
      break;
 8006112:	e006      	b.n	8006122 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fa4e 	bl	80075b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	bf00      	nop
  }

  return (uint8_t)ret;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800613e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800614a:	2303      	movs	r3, #3
 800614c:	e04f      	b.n	80061ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006154:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3318      	adds	r3, #24
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d029      	beq.n	80061c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	3318      	adds	r3, #24
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	78f9      	ldrb	r1, [r7, #3]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	460b      	mov	r3, r1
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4403      	add	r3, r0
 800618c:	3344      	adds	r3, #68	; 0x44
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	fbb2 f1f3 	udiv	r1, r2, r3
 8006194:	fb03 f301 	mul.w	r3, r3, r1
 8006198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d110      	bne.n	80061c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3318      	adds	r3, #24
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061b2:	78f9      	ldrb	r1, [r7, #3]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 f885 	bl	80082c8 <USBD_LL_Transmit>
 80061be:	e015      	b.n	80061ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006208:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	e015      	b.n	8006244 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f002 f8c3 	bl	80083a8 <USBD_LL_GetRxDataSize>
 8006222:	4602      	mov	r2, r0
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800623e:	4611      	mov	r1, r2
 8006240:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800625a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	e01b      	b.n	800629e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <USBD_CDC_EP0_RxReady+0x50>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006276:	2bff      	cmp	r3, #255	; 0xff
 8006278:	d010      	beq.n	800629c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006288:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006290:	b292      	uxth	r2, r2
 8006292:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22ff      	movs	r2, #255	; 0xff
 8006298:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2243      	movs	r2, #67	; 0x43
 80062b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80062b6:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	20000098 	.word	0x20000098

080062c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2243      	movs	r2, #67	; 0x43
 80062d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80062d6:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000054 	.word	0x20000054

080062e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2243      	movs	r2, #67	; 0x43
 80062f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80062f6:	4b03      	ldr	r3, [pc, #12]	; (8006304 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200000dc 	.word	0x200000dc

08006308 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	220a      	movs	r2, #10
 8006314:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006316:	4b03      	ldr	r3, [pc, #12]	; (8006324 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000010 	.word	0x20000010

08006328 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	e004      	b.n	8006346 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006364:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e008      	b.n	8006382 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800639e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e004      	b.n	80063b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063de:	2303      	movs	r3, #3
 80063e0:	e01a      	b.n	8006418 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d114      	bne.n	8006416 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800640a:	2181      	movs	r1, #129	; 0x81
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 ff5b 	bl	80082c8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	e016      	b.n	800646c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	7c1b      	ldrb	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	2101      	movs	r1, #1
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 ff70 	bl	8008338 <USBD_LL_PrepareReceive>
 8006458:	e007      	b.n	800646a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006460:	2340      	movs	r3, #64	; 0x40
 8006462:	2101      	movs	r1, #1
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 ff67 	bl	8008338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4613      	mov	r3, r2
 8006480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	e01f      	b.n	80064cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	79fa      	ldrb	r2, [r7, #7]
 80064be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f001 fd41 	bl	8007f48 <USBD_LL_Init>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e016      	b.n	800651a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	f107 020e 	add.w	r2, r7, #14
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fd58 	bl	8007fe0 <USBD_LL_Start>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800655c:	2303      	movs	r3, #3
 800655e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	4611      	mov	r1, r2
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	4611      	mov	r1, r2
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ffba 	bl	8007544 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d01a      	beq.n	800662a <USBD_LL_SetupStage+0x72>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d822      	bhi.n	800663e <USBD_LL_SetupStage+0x86>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <USBD_LL_SetupStage+0x4a>
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d00a      	beq.n	8006616 <USBD_LL_SetupStage+0x5e>
 8006600:	e01d      	b.n	800663e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa62 	bl	8006ad4 <USBD_StdDevReq>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
      break;
 8006614:	e020      	b.n	8006658 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fac6 	bl	8006bb0 <USBD_StdItfReq>
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e016      	b.n	8006658 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fb05 	bl	8006c42 <USBD_StdEPReq>
 8006638:	4603      	mov	r3, r0
 800663a:	73fb      	strb	r3, [r7, #15]
      break;
 800663c:	e00c      	b.n	8006658 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006648:	b2db      	uxtb	r3, r3
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fd6d 	bl	800812c <USBD_LL_StallEP>
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
      break;
 8006656:	bf00      	nop
  }

  return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	460b      	mov	r3, r1
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d138      	bne.n	80066e8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800667c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006684:	2b03      	cmp	r3, #3
 8006686:	d14a      	bne.n	800671e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d913      	bls.n	80066bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	4293      	cmp	r3, r2
 80066ac:	bf28      	it	cs
 80066ae:	4613      	movcs	r3, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f001 f839 	bl	800772c <USBD_CtlContinueRx>
 80066ba:	e030      	b.n	800671e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d10b      	bne.n	80066e0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f001 f834 	bl	800774e <USBD_CtlSendStatus>
 80066e6:	e01a      	b.n	800671e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d114      	bne.n	800671e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	7afa      	ldrb	r2, [r7, #11]
 800670a:	4611      	mov	r1, r2
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	4798      	blx	r3
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	e000      	b.n	8006720 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	460b      	mov	r3, r1
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d16b      	bne.n	8006814 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3314      	adds	r3, #20
 8006740:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006748:	2b02      	cmp	r3, #2
 800674a:	d156      	bne.n	80067fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	429a      	cmp	r2, r3
 8006756:	d914      	bls.n	8006782 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	461a      	mov	r2, r3
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 ffae 	bl	80076d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006774:	2300      	movs	r3, #0
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f001 fddc 	bl	8008338 <USBD_LL_PrepareReceive>
 8006780:	e03b      	b.n	80067fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d11c      	bne.n	80067c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006796:	429a      	cmp	r2, r3
 8006798:	d316      	bcc.n	80067c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d20f      	bcs.n	80067c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 ff8f 	bl	80076d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067ba:	2300      	movs	r3, #0
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 fdb9 	bl	8008338 <USBD_LL_PrepareReceive>
 80067c6:	e018      	b.n	80067fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d10b      	bne.n	80067ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f001 fc9c 	bl	800812c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 ffbd 	bl	8007774 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d122      	bne.n	800684a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fe98 	bl	800653a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006812:	e01a      	b.n	800684a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d114      	bne.n	800684a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00e      	beq.n	800684a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	7afa      	ldrb	r2, [r7, #11]
 8006836:	4611      	mov	r1, r2
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	4798      	blx	r3
 800683c:	4603      	mov	r3, r0
 800683e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	e000      	b.n	800684c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	e02f      	b.n	80068e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00f      	beq.n	80068b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6852      	ldr	r2, [r2, #4]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	4611      	mov	r1, r2
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	2200      	movs	r2, #0
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fbc3 	bl	8008044 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2240      	movs	r2, #64	; 0x40
 80068ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ce:	2340      	movs	r3, #64	; 0x40
 80068d0:	2200      	movs	r2, #0
 80068d2:	2180      	movs	r1, #128	; 0x80
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fbb5 	bl	8008044 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2240      	movs	r2, #64	; 0x40
 80068e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691e:	b2da      	uxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2204      	movs	r2, #4
 800692a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b04      	cmp	r3, #4
 800694e:	d106      	bne.n	800695e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006956:	b2da      	uxtb	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800697e:	2303      	movs	r3, #3
 8006980:	e012      	b.n	80069a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b03      	cmp	r3, #3
 800698c:	d10b      	bne.n	80069a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e014      	b.n	80069f4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d10d      	bne.n	80069f2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	4611      	mov	r1, r2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e014      	b.n	8006a40 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d10d      	bne.n	8006a3e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6852      	ldr	r2, [r2, #4]
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	4611      	mov	r1, r2
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
  }

  return USBD_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ab4:	8a3b      	ldrh	r3, [r7, #16]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	b21a      	sxth	r2, r3
 8006aba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	b21b      	sxth	r3, r3
 8006ac2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ac4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d005      	beq.n	8006afa <USBD_StdDevReq+0x26>
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d853      	bhi.n	8006b9a <USBD_StdDevReq+0xc6>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <USBD_StdDevReq+0x3a>
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d14f      	bne.n	8006b9a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0c:	e04a      	b.n	8006ba4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d83b      	bhi.n	8006b8e <USBD_StdDevReq+0xba>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBD_StdDevReq+0x48>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b71 	.word	0x08006b71
 8006b20:	08006b85 	.word	0x08006b85
 8006b24:	08006b8f 	.word	0x08006b8f
 8006b28:	08006b7b 	.word	0x08006b7b
 8006b2c:	08006b8f 	.word	0x08006b8f
 8006b30:	08006b4f 	.word	0x08006b4f
 8006b34:	08006b45 	.word	0x08006b45
 8006b38:	08006b8f 	.word	0x08006b8f
 8006b3c:	08006b67 	.word	0x08006b67
 8006b40:	08006b59 	.word	0x08006b59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f9de 	bl	8006f08 <USBD_GetDescriptor>
          break;
 8006b4c:	e024      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fb6d 	bl	8007230 <USBD_SetAddress>
          break;
 8006b56:	e01f      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fbac 	bl	80072b8 <USBD_SetConfig>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
          break;
 8006b64:	e018      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fc4b 	bl	8007404 <USBD_GetConfig>
          break;
 8006b6e:	e013      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fc7c 	bl	8007470 <USBD_GetStatus>
          break;
 8006b78:	e00e      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fcab 	bl	80074d8 <USBD_SetFeature>
          break;
 8006b82:	e009      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fcba 	bl	8007500 <USBD_ClrFeature>
          break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fd11 	bl	80075b8 <USBD_CtlError>
          break;
 8006b96:	bf00      	nop
      }
      break;
 8006b98:	e004      	b.n	8006ba4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd0b 	bl	80075b8 <USBD_CtlError>
      break;
 8006ba2:	bf00      	nop
  }

  return ret;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	d005      	beq.n	8006bd6 <USBD_StdItfReq+0x26>
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d82f      	bhi.n	8006c2e <USBD_StdItfReq+0x7e>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <USBD_StdItfReq+0x26>
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d12b      	bne.n	8006c2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d81d      	bhi.n	8006c20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	889b      	ldrh	r3, [r3, #4]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d813      	bhi.n	8006c16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	88db      	ldrh	r3, [r3, #6]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d110      	bne.n	8006c2a <USBD_StdItfReq+0x7a>
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10d      	bne.n	8006c2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd9d 	bl	800774e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c14:	e009      	b.n	8006c2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fccd 	bl	80075b8 <USBD_CtlError>
          break;
 8006c1e:	e004      	b.n	8006c2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fcc8 	bl	80075b8 <USBD_CtlError>
          break;
 8006c28:	e000      	b.n	8006c2c <USBD_StdItfReq+0x7c>
          break;
 8006c2a:	bf00      	nop
      }
      break;
 8006c2c:	e004      	b.n	8006c38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fcc1 	bl	80075b8 <USBD_CtlError>
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	889b      	ldrh	r3, [r3, #4]
 8006c54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d007      	beq.n	8006c72 <USBD_StdEPReq+0x30>
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	f200 8145 	bhi.w	8006ef2 <USBD_StdEPReq+0x2b0>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <USBD_StdEPReq+0x44>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	f040 8140 	bne.w	8006ef2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
      break;
 8006c84:	e13a      	b.n	8006efc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d007      	beq.n	8006c9e <USBD_StdEPReq+0x5c>
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	f300 8129 	bgt.w	8006ee6 <USBD_StdEPReq+0x2a4>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d07f      	beq.n	8006d98 <USBD_StdEPReq+0x156>
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d03c      	beq.n	8006d16 <USBD_StdEPReq+0xd4>
 8006c9c:	e123      	b.n	8006ee6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d002      	beq.n	8006cb0 <USBD_StdEPReq+0x6e>
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d016      	beq.n	8006cdc <USBD_StdEPReq+0x9a>
 8006cae:	e02c      	b.n	8006d0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <USBD_StdEPReq+0x90>
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	d00a      	beq.n	8006cd2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fa33 	bl	800812c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cc6:	2180      	movs	r1, #128	; 0x80
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fa2f 	bl	800812c <USBD_LL_StallEP>
 8006cce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cd0:	e020      	b.n	8006d14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc6f 	bl	80075b8 <USBD_CtlError>
              break;
 8006cda:	e01b      	b.n	8006d14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	885b      	ldrh	r3, [r3, #2]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10e      	bne.n	8006d02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <USBD_StdEPReq+0xc0>
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d008      	beq.n	8006d02 <USBD_StdEPReq+0xc0>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	88db      	ldrh	r3, [r3, #6]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fa15 	bl	800812c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fd23 	bl	800774e <USBD_CtlSendStatus>

              break;
 8006d08:	e004      	b.n	8006d14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fc53 	bl	80075b8 <USBD_CtlError>
              break;
 8006d12:	bf00      	nop
          }
          break;
 8006d14:	e0ec      	b.n	8006ef0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d002      	beq.n	8006d28 <USBD_StdEPReq+0xe6>
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d016      	beq.n	8006d54 <USBD_StdEPReq+0x112>
 8006d26:	e030      	b.n	8006d8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00d      	beq.n	8006d4a <USBD_StdEPReq+0x108>
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d00a      	beq.n	8006d4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f9f7 	bl	800812c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f9f3 	bl	800812c <USBD_LL_StallEP>
 8006d46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d48:	e025      	b.n	8006d96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc33 	bl	80075b8 <USBD_CtlError>
              break;
 8006d52:	e020      	b.n	8006d96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11b      	bne.n	8006d94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fa14 	bl	8008198 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcec 	bl	800774e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc13 	bl	80075b8 <USBD_CtlError>
              break;
 8006d92:	e000      	b.n	8006d96 <USBD_StdEPReq+0x154>
              break;
 8006d94:	bf00      	nop
          }
          break;
 8006d96:	e0ab      	b.n	8006ef0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d002      	beq.n	8006daa <USBD_StdEPReq+0x168>
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d032      	beq.n	8006e0e <USBD_StdEPReq+0x1cc>
 8006da8:	e097      	b.n	8006eda <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <USBD_StdEPReq+0x17e>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d004      	beq.n	8006dc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fbfd 	bl	80075b8 <USBD_CtlError>
                break;
 8006dbe:	e091      	b.n	8006ee4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da0b      	bge.n	8006de0 <USBD_StdEPReq+0x19e>
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	3310      	adds	r3, #16
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3304      	adds	r3, #4
 8006dde:	e00b      	b.n	8006df8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	3304      	adds	r3, #4
 8006df8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2202      	movs	r2, #2
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fc47 	bl	800769a <USBD_CtlSendData>
              break;
 8006e0c:	e06a      	b.n	8006ee4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da11      	bge.n	8006e3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	f003 020f 	and.w	r2, r3, #15
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d117      	bne.n	8006e60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fbc0 	bl	80075b8 <USBD_CtlError>
                  break;
 8006e38:	e054      	b.n	8006ee4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fbad 	bl	80075b8 <USBD_CtlError>
                  break;
 8006e5e:	e041      	b.n	8006ee4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da0b      	bge.n	8006e80 <USBD_StdEPReq+0x23e>
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	3310      	adds	r3, #16
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	e00b      	b.n	8006e98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	3304      	adds	r3, #4
 8006e98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <USBD_StdEPReq+0x264>
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b80      	cmp	r3, #128	; 0x80
 8006ea4:	d103      	bne.n	8006eae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	e00e      	b.n	8006ecc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f9a6 	bl	8008204 <USBD_LL_IsStallEP>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e002      	b.n	8006ecc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fbe1 	bl	800769a <USBD_CtlSendData>
              break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb6b 	bl	80075b8 <USBD_CtlError>
              break;
 8006ee2:	bf00      	nop
          }
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb65 	bl	80075b8 <USBD_CtlError>
          break;
 8006eee:	bf00      	nop
      }
      break;
 8006ef0:	e004      	b.n	8006efc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb5f 	bl	80075b8 <USBD_CtlError>
      break;
 8006efa:	bf00      	nop
  }

  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	2b0e      	cmp	r3, #14
 8006f2a:	f200 8152 	bhi.w	80071d2 <USBD_GetDescriptor+0x2ca>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <USBD_GetDescriptor+0x2c>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006fa5 	.word	0x08006fa5
 8006f38:	08006fbd 	.word	0x08006fbd
 8006f3c:	08006ffd 	.word	0x08006ffd
 8006f40:	080071d3 	.word	0x080071d3
 8006f44:	080071d3 	.word	0x080071d3
 8006f48:	08007173 	.word	0x08007173
 8006f4c:	0800719f 	.word	0x0800719f
 8006f50:	080071d3 	.word	0x080071d3
 8006f54:	080071d3 	.word	0x080071d3
 8006f58:	080071d3 	.word	0x080071d3
 8006f5c:	080071d3 	.word	0x080071d3
 8006f60:	080071d3 	.word	0x080071d3
 8006f64:	080071d3 	.word	0x080071d3
 8006f68:	080071d3 	.word	0x080071d3
 8006f6c:	08006f71 	.word	0x08006f71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	7c12      	ldrb	r2, [r2, #16]
 8006f88:	f107 0108 	add.w	r1, r7, #8
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f92:	e126      	b.n	80071e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb0e 	bl	80075b8 <USBD_CtlError>
        err++;
 8006f9c:	7afb      	ldrb	r3, [r7, #11]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa2:	e11e      	b.n	80071e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
      break;
 8006fba:	e112      	b.n	80071e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7c1b      	ldrb	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10d      	bne.n	8006fe0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fcc:	f107 0208 	add.w	r2, r7, #8
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	2202      	movs	r2, #2
 8006fdc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fde:	e100      	b.n	80071e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f107 0208 	add.w	r2, r7, #8
 8006fec:	4610      	mov	r0, r2
 8006fee:	4798      	blx	r3
 8006ff0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
      break;
 8006ffa:	e0f2      	b.n	80071e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b05      	cmp	r3, #5
 8007004:	f200 80ac 	bhi.w	8007160 <USBD_GetDescriptor+0x258>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <USBD_GetDescriptor+0x108>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007029 	.word	0x08007029
 8007014:	0800705d 	.word	0x0800705d
 8007018:	08007091 	.word	0x08007091
 800701c:	080070c5 	.word	0x080070c5
 8007020:	080070f9 	.word	0x080070f9
 8007024:	0800712d 	.word	0x0800712d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	f107 0108 	add.w	r1, r7, #8
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800704a:	e091      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fab2 	bl	80075b8 <USBD_CtlError>
            err++;
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	3301      	adds	r3, #1
 8007058:	72fb      	strb	r3, [r7, #11]
          break;
 800705a:	e089      	b.n	8007170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7c12      	ldrb	r2, [r2, #16]
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707e:	e077      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa98 	bl	80075b8 <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
          break;
 800708e:	e06f      	b.n	8007170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b2:	e05d      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa7e 	bl	80075b8 <USBD_CtlError>
            err++;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	3301      	adds	r3, #1
 80070c0:	72fb      	strb	r3, [r7, #11]
          break;
 80070c2:	e055      	b.n	8007170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7c12      	ldrb	r2, [r2, #16]
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e6:	e043      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa64 	bl	80075b8 <USBD_CtlError>
            err++;
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	3301      	adds	r3, #1
 80070f4:	72fb      	strb	r3, [r7, #11]
          break;
 80070f6:	e03b      	b.n	8007170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711a:	e029      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa4a 	bl	80075b8 <USBD_CtlError>
            err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
          break;
 800712a:	e021      	b.n	8007170 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714e:	e00f      	b.n	8007170 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa30 	bl	80075b8 <USBD_CtlError>
            err++;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	3301      	adds	r3, #1
 800715c:	72fb      	strb	r3, [r7, #11]
          break;
 800715e:	e007      	b.n	8007170 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa28 	bl	80075b8 <USBD_CtlError>
          err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800716e:	bf00      	nop
      }
      break;
 8007170:	e037      	b.n	80071e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	7c1b      	ldrb	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f107 0208 	add.w	r2, r7, #8
 8007186:	4610      	mov	r0, r2
 8007188:	4798      	blx	r3
 800718a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800718c:	e029      	b.n	80071e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa11 	bl	80075b8 <USBD_CtlError>
        err++;
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	3301      	adds	r3, #1
 800719a:	72fb      	strb	r3, [r7, #11]
      break;
 800719c:	e021      	b.n	80071e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7c1b      	ldrb	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f107 0208 	add.w	r2, r7, #8
 80071b2:	4610      	mov	r0, r2
 80071b4:	4798      	blx	r3
 80071b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	2207      	movs	r2, #7
 80071be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071c0:	e00f      	b.n	80071e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f9f7 	bl	80075b8 <USBD_CtlError>
        err++;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	3301      	adds	r3, #1
 80071ce:	72fb      	strb	r3, [r7, #11]
      break;
 80071d0:	e007      	b.n	80071e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9ef 	bl	80075b8 <USBD_CtlError>
      err++;
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	3301      	adds	r3, #1
 80071de:	72fb      	strb	r3, [r7, #11]
      break;
 80071e0:	bf00      	nop
  }

  if (err != 0U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11e      	bne.n	8007226 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	88db      	ldrh	r3, [r3, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d016      	beq.n	800721e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00e      	beq.n	8007214 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88da      	ldrh	r2, [r3, #6]
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bf28      	it	cs
 8007200:	4613      	movcs	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	461a      	mov	r2, r3
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa44 	bl	800769a <USBD_CtlSendData>
 8007212:	e009      	b.n	8007228 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9ce 	bl	80075b8 <USBD_CtlError>
 800721c:	e004      	b.n	8007228 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa95 	bl	800774e <USBD_CtlSendStatus>
 8007224:	e000      	b.n	8007228 <USBD_GetDescriptor+0x320>
    return;
 8007226:	bf00      	nop
  }
}
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop

08007230 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	889b      	ldrh	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d131      	bne.n	80072a6 <USBD_SetAddress+0x76>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d12d      	bne.n	80072a6 <USBD_SetAddress+0x76>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d829      	bhi.n	80072a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d104      	bne.n	8007274 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9a3 	bl	80075b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	e01d      	b.n	80072b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7bfa      	ldrb	r2, [r7, #15]
 8007278:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 ffeb 	bl	800825c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa61 	bl	800774e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729a:	e009      	b.n	80072b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	e004      	b.n	80072b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f985 	bl	80075b8 <USBD_CtlError>
  }
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	4b4c      	ldr	r3, [pc, #304]	; (8007400 <USBD_SetConfig+0x148>)
 80072ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072d0:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <USBD_SetConfig+0x148>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d905      	bls.n	80072e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f96c 	bl	80075b8 <USBD_CtlError>
    return USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e088      	b.n	80073f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d002      	beq.n	80072f6 <USBD_SetConfig+0x3e>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d025      	beq.n	8007340 <USBD_SetConfig+0x88>
 80072f4:	e071      	b.n	80073da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072f6:	4b42      	ldr	r3, [pc, #264]	; (8007400 <USBD_SetConfig+0x148>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01c      	beq.n	8007338 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80072fe:	4b40      	ldr	r3, [pc, #256]	; (8007400 <USBD_SetConfig+0x148>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007308:	4b3d      	ldr	r3, [pc, #244]	; (8007400 <USBD_SetConfig+0x148>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff f91e 	bl	8006550 <USBD_SetClassConfig>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f949 	bl	80075b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007326:	e065      	b.n	80073f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fa10 	bl	800774e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2203      	movs	r2, #3
 8007332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007336:	e05d      	b.n	80073f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa08 	bl	800774e <USBD_CtlSendStatus>
      break;
 800733e:	e059      	b.n	80073f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007340:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <USBD_SetConfig+0x148>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d112      	bne.n	800736e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007350:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <USBD_SetConfig+0x148>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800735a:	4b29      	ldr	r3, [pc, #164]	; (8007400 <USBD_SetConfig+0x148>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff f911 	bl	8006588 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9f1 	bl	800774e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800736c:	e042      	b.n	80073f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <USBD_SetConfig+0x148>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d02a      	beq.n	80073d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff f8ff 	bl	8006588 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800738a:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <USBD_SetConfig+0x148>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <USBD_SetConfig+0x148>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff f8d8 	bl	8006550 <USBD_SetClassConfig>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f903 	bl	80075b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff f8e4 	bl	8006588 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073c8:	e014      	b.n	80073f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9bf 	bl	800774e <USBD_CtlSendStatus>
      break;
 80073d0:	e010      	b.n	80073f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f9bb 	bl	800774e <USBD_CtlSendStatus>
      break;
 80073d8:	e00c      	b.n	80073f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8eb 	bl	80075b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <USBD_SetConfig+0x148>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff f8cd 	bl	8006588 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073ee:	2303      	movs	r3, #3
 80073f0:	73fb      	strb	r3, [r7, #15]
      break;
 80073f2:	bf00      	nop
  }

  return ret;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200001c8 	.word	0x200001c8

08007404 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88db      	ldrh	r3, [r3, #6]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d004      	beq.n	8007420 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f8cd 	bl	80075b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800741e:	e023      	b.n	8007468 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	dc02      	bgt.n	8007432 <USBD_GetConfig+0x2e>
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc03      	bgt.n	8007438 <USBD_GetConfig+0x34>
 8007430:	e015      	b.n	800745e <USBD_GetConfig+0x5a>
 8007432:	2b03      	cmp	r3, #3
 8007434:	d00b      	beq.n	800744e <USBD_GetConfig+0x4a>
 8007436:	e012      	b.n	800745e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3308      	adds	r3, #8
 8007442:	2201      	movs	r2, #1
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f927 	bl	800769a <USBD_CtlSendData>
        break;
 800744c:	e00c      	b.n	8007468 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	2201      	movs	r2, #1
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f91f 	bl	800769a <USBD_CtlSendData>
        break;
 800745c:	e004      	b.n	8007468 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f8a9 	bl	80075b8 <USBD_CtlError>
        break;
 8007466:	bf00      	nop
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	2b02      	cmp	r3, #2
 8007486:	d81e      	bhi.n	80074c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d004      	beq.n	800749a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f890 	bl	80075b8 <USBD_CtlError>
        break;
 8007498:	e01a      	b.n	80074d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 0202 	orr.w	r2, r3, #2
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	330c      	adds	r3, #12
 80074ba:	2202      	movs	r2, #2
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8eb 	bl	800769a <USBD_CtlSendData>
      break;
 80074c4:	e004      	b.n	80074d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f875 	bl	80075b8 <USBD_CtlError>
      break;
 80074ce:	bf00      	nop
  }
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	885b      	ldrh	r3, [r3, #2]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d106      	bne.n	80074f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f92b 	bl	800774e <USBD_CtlSendStatus>
  }
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	3b01      	subs	r3, #1
 8007514:	2b02      	cmp	r3, #2
 8007516:	d80b      	bhi.n	8007530 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	885b      	ldrh	r3, [r3, #2]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10c      	bne.n	800753a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f910 	bl	800774e <USBD_CtlSendStatus>
      }
      break;
 800752e:	e004      	b.n	800753a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f840 	bl	80075b8 <USBD_CtlError>
      break;
 8007538:	e000      	b.n	800753c <USBD_ClrFeature+0x3c>
      break;
 800753a:	bf00      	nop
  }
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fa91 	bl	8006a96 <SWAPBYTE>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3301      	adds	r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fa84 	bl	8006a96 <SWAPBYTE>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3301      	adds	r3, #1
 80075a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fa77 	bl	8006a96 <SWAPBYTE>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	80da      	strh	r2, [r3, #6]
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fdb1 	bl	800812c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075ca:	2100      	movs	r1, #0
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fdad 	bl	800812c <USBD_LL_StallEP>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d036      	beq.n	800765e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075f4:	6938      	ldr	r0, [r7, #16]
 80075f6:	f000 f836 	bl	8007666 <USBD_GetLen>
 80075fa:	4603      	mov	r3, r0
 80075fc:	3301      	adds	r3, #1
 80075fe:	b29b      	uxth	r3, r3
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	701a      	strb	r2, [r3, #0]
  idx++;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	3301      	adds	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	4413      	add	r3, r2
 8007620:	2203      	movs	r2, #3
 8007622:	701a      	strb	r2, [r3, #0]
  idx++;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	3301      	adds	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800762a:	e013      	b.n	8007654 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4413      	add	r3, r2
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	3301      	adds	r3, #1
 800763c:	613b      	str	r3, [r7, #16]
    idx++;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	3301      	adds	r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4413      	add	r3, r2
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
    idx++;
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	3301      	adds	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e7      	bne.n	800762c <USBD_GetString+0x52>
 800765c:	e000      	b.n	8007660 <USBD_GetString+0x86>
    return;
 800765e:	bf00      	nop
  }
}
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007676:	e005      	b.n	8007684 <USBD_GetLen+0x1e>
  {
    len++;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	3301      	adds	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	3301      	adds	r3, #1
 8007682:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f5      	bne.n	8007678 <USBD_GetLen+0x12>
  }

  return len;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2202      	movs	r2, #2
 80076aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fe01 	bl	80082c8 <USBD_LL_Transmit>

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fdf0 	bl	80082c8 <USBD_LL_Transmit>

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2203      	movs	r2, #3
 8007702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	2100      	movs	r1, #0
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fe0b 	bl	8008338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	2100      	movs	r1, #0
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fdfa 	bl	8008338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2204      	movs	r2, #4
 800775a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800775e:	2300      	movs	r3, #0
 8007760:	2200      	movs	r2, #0
 8007762:	2100      	movs	r1, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fdaf 	bl	80082c8 <USBD_LL_Transmit>

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2205      	movs	r2, #5
 8007780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007784:	2300      	movs	r3, #0
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fdd4 	bl	8008338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077a0:	2200      	movs	r2, #0
 80077a2:	4912      	ldr	r1, [pc, #72]	; (80077ec <MX_USB_DEVICE_Init+0x50>)
 80077a4:	4812      	ldr	r0, [pc, #72]	; (80077f0 <MX_USB_DEVICE_Init+0x54>)
 80077a6:	f7fe fe65 	bl	8006474 <USBD_Init>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077b0:	f7f9 f92e 	bl	8000a10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077b4:	490f      	ldr	r1, [pc, #60]	; (80077f4 <MX_USB_DEVICE_Init+0x58>)
 80077b6:	480e      	ldr	r0, [pc, #56]	; (80077f0 <MX_USB_DEVICE_Init+0x54>)
 80077b8:	f7fe fe8c 	bl	80064d4 <USBD_RegisterClass>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077c2:	f7f9 f925 	bl	8000a10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077c6:	490c      	ldr	r1, [pc, #48]	; (80077f8 <MX_USB_DEVICE_Init+0x5c>)
 80077c8:	4809      	ldr	r0, [pc, #36]	; (80077f0 <MX_USB_DEVICE_Init+0x54>)
 80077ca:	f7fe fdad 	bl	8006328 <USBD_CDC_RegisterInterface>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077d4:	f7f9 f91c 	bl	8000a10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <MX_USB_DEVICE_Init+0x54>)
 80077da:	f7fe fea2 	bl	8006522 <USBD_Start>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077e4:	f7f9 f914 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	2000013c 	.word	0x2000013c
 80077f0:	2000058c 	.word	0x2000058c
 80077f4:	2000001c 	.word	0x2000001c
 80077f8:	20000128 	.word	0x20000128

080077fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007800:	2200      	movs	r2, #0
 8007802:	4905      	ldr	r1, [pc, #20]	; (8007818 <CDC_Init_FS+0x1c>)
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <CDC_Init_FS+0x20>)
 8007806:	f7fe fda4 	bl	8006352 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800780a:	4905      	ldr	r1, [pc, #20]	; (8007820 <CDC_Init_FS+0x24>)
 800780c:	4803      	ldr	r0, [pc, #12]	; (800781c <CDC_Init_FS+0x20>)
 800780e:	f7fe fdbe 	bl	800638e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007812:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	2000105c 	.word	0x2000105c
 800781c:	2000058c 	.word	0x2000058c
 8007820:	2000085c 	.word	0x2000085c

08007824 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007828:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800782a:	4618      	mov	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	71fb      	strb	r3, [r7, #7]
 8007840:	4613      	mov	r3, r2
 8007842:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	2b23      	cmp	r3, #35	; 0x23
 8007848:	f200 8098 	bhi.w	800797c <CDC_Control_FS+0x148>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <CDC_Control_FS+0x20>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	0800797d 	.word	0x0800797d
 8007858:	0800797d 	.word	0x0800797d
 800785c:	0800797d 	.word	0x0800797d
 8007860:	0800797d 	.word	0x0800797d
 8007864:	0800797d 	.word	0x0800797d
 8007868:	0800797d 	.word	0x0800797d
 800786c:	0800797d 	.word	0x0800797d
 8007870:	0800797d 	.word	0x0800797d
 8007874:	0800797d 	.word	0x0800797d
 8007878:	0800797d 	.word	0x0800797d
 800787c:	0800797d 	.word	0x0800797d
 8007880:	0800797d 	.word	0x0800797d
 8007884:	0800797d 	.word	0x0800797d
 8007888:	0800797d 	.word	0x0800797d
 800788c:	0800797d 	.word	0x0800797d
 8007890:	0800797d 	.word	0x0800797d
 8007894:	0800797d 	.word	0x0800797d
 8007898:	0800797d 	.word	0x0800797d
 800789c:	0800797d 	.word	0x0800797d
 80078a0:	0800797d 	.word	0x0800797d
 80078a4:	0800797d 	.word	0x0800797d
 80078a8:	0800797d 	.word	0x0800797d
 80078ac:	0800797d 	.word	0x0800797d
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800797d 	.word	0x0800797d
 80078b8:	0800797d 	.word	0x0800797d
 80078bc:	0800797d 	.word	0x0800797d
 80078c0:	0800797d 	.word	0x0800797d
 80078c4:	0800797d 	.word	0x0800797d
 80078c8:	0800797d 	.word	0x0800797d
 80078cc:	0800797d 	.word	0x0800797d
 80078d0:	0800797d 	.word	0x0800797d
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	08007929 	.word	0x08007929
 80078dc:	0800797d 	.word	0x0800797d
 80078e0:	0800797d 	.word	0x0800797d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	3302      	adds	r3, #2
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	431a      	orrs	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	3303      	adds	r3, #3
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	061b      	lsls	r3, r3, #24
 8007906:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 8007908:	461a      	mov	r2, r3
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <CDC_Control_FS+0x158>)
 800790c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	791a      	ldrb	r2, [r3, #4]
 8007912:	4b1e      	ldr	r3, [pc, #120]	; (800798c <CDC_Control_FS+0x158>)
 8007914:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	795a      	ldrb	r2, [r3, #5]
 800791a:	4b1c      	ldr	r3, [pc, #112]	; (800798c <CDC_Control_FS+0x158>)
 800791c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	799a      	ldrb	r2, [r3, #6]
 8007922:	4b1a      	ldr	r3, [pc, #104]	; (800798c <CDC_Control_FS+0x158>)
 8007924:	719a      	strb	r2, [r3, #6]
		break;
 8007926:	e02a      	b.n	800797e <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8007928:	4b18      	ldr	r3, [pc, #96]	; (800798c <CDC_Control_FS+0x158>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8007932:	4b16      	ldr	r3, [pc, #88]	; (800798c <CDC_Control_FS+0x158>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	0a1a      	lsrs	r2, r3, #8
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <CDC_Control_FS+0x158>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	0c1a      	lsrs	r2, r3, #16
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	3302      	adds	r3, #2
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <CDC_Control_FS+0x158>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	0e1a      	lsrs	r2, r3, #24
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	3303      	adds	r3, #3
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	3304      	adds	r3, #4
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <CDC_Control_FS+0x158>)
 8007962:	7912      	ldrb	r2, [r2, #4]
 8007964:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	3305      	adds	r3, #5
 800796a:	4a08      	ldr	r2, [pc, #32]	; (800798c <CDC_Control_FS+0x158>)
 800796c:	7952      	ldrb	r2, [r2, #5]
 800796e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	3306      	adds	r3, #6
 8007974:	4a05      	ldr	r2, [pc, #20]	; (800798c <CDC_Control_FS+0x158>)
 8007976:	7992      	ldrb	r2, [r2, #6]
 8007978:	701a      	strb	r2, [r3, #0]
		break;
 800797a:	e000      	b.n	800797e <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800797c:	bf00      	nop
	}

  return (USBD_OK);
 800797e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	20000120 	.word	0x20000120

08007990 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4808      	ldr	r0, [pc, #32]	; (80079c0 <CDC_Receive_FS+0x30>)
 800799e:	f7fe fcf6 	bl	800638e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079a2:	4807      	ldr	r0, [pc, #28]	; (80079c0 <CDC_Receive_FS+0x30>)
 80079a4:	f7fe fd3c 	bl	8006420 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7f8 fff6 	bl	80009a0 <CDC_ReceiveCallback>
  return (USBD_OK);
 80079b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000058c 	.word	0x2000058c

080079c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079d4:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <CDC_Transmit_FS+0x48>)
 80079d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e00b      	b.n	8007a02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079ea:	887b      	ldrh	r3, [r7, #2]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4806      	ldr	r0, [pc, #24]	; (8007a0c <CDC_Transmit_FS+0x48>)
 80079f2:	f7fe fcae 	bl	8006352 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079f6:	4805      	ldr	r0, [pc, #20]	; (8007a0c <CDC_Transmit_FS+0x48>)
 80079f8:	f7fe fce2 	bl	80063c0 <USBD_CDC_TransmitPacket>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	2000058c 	.word	0x2000058c

08007a10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	371c      	adds	r7, #28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2212      	movs	r2, #18
 8007a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	2000015c 	.word	0x2000015c

08007a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2204      	movs	r2, #4
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	2000017c 	.word	0x2000017c

08007a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4907      	ldr	r1, [pc, #28]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a92:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a94:	f7ff fda1 	bl	80075da <USBD_GetString>
 8007a98:	e004      	b.n	8007aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4904      	ldr	r1, [pc, #16]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a9e:	4805      	ldr	r0, [pc, #20]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa0:	f7ff fd9b 	bl	80075da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	2000185c 	.word	0x2000185c
 8007ab4:	08008518 	.word	0x08008518

08007ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	4904      	ldr	r1, [pc, #16]	; (8007ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ac8:	4804      	ldr	r0, [pc, #16]	; (8007adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007aca:	f7ff fd86 	bl	80075da <USBD_GetString>
  return USBD_StrDesc;
 8007ace:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	2000185c 	.word	0x2000185c
 8007adc:	08008530 	.word	0x08008530

08007ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	221a      	movs	r2, #26
 8007af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007af2:	f000 f855 	bl	8007ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007af6:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20000180 	.word	0x20000180

08007b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d105      	bne.n	8007b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4907      	ldr	r1, [pc, #28]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b1a:	4808      	ldr	r0, [pc, #32]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b1c:	f7ff fd5d 	bl	80075da <USBD_GetString>
 8007b20:	e004      	b.n	8007b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4904      	ldr	r1, [pc, #16]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b28:	f7ff fd57 	bl	80075da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	2000185c 	.word	0x2000185c
 8007b3c:	08008544 	.word	0x08008544

08007b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4907      	ldr	r1, [pc, #28]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b56:	4808      	ldr	r0, [pc, #32]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b58:	f7ff fd3f 	bl	80075da <USBD_GetString>
 8007b5c:	e004      	b.n	8007b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4904      	ldr	r1, [pc, #16]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b62:	4805      	ldr	r0, [pc, #20]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b64:	f7ff fd39 	bl	80075da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2000185c 	.word	0x2000185c
 8007b78:	08008550 	.word	0x08008550

08007b7c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	220c      	movs	r2, #12
 8007b8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007b8e:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000170 	.word	0x20000170

08007ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ba6:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <Get_SerialNum+0x44>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <Get_SerialNum+0x48>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <Get_SerialNum+0x4c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	4909      	ldr	r1, [pc, #36]	; (8007bf0 <Get_SerialNum+0x50>)
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f814 	bl	8007bf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	4908      	ldr	r1, [pc, #32]	; (8007bf4 <Get_SerialNum+0x54>)
 8007bd4:	68b8      	ldr	r0, [r7, #8]
 8007bd6:	f000 f80f 	bl	8007bf8 <IntToUnicode>
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	1fff7590 	.word	0x1fff7590
 8007be8:	1fff7594 	.word	0x1fff7594
 8007bec:	1fff7598 	.word	0x1fff7598
 8007bf0:	20000182 	.word	0x20000182
 8007bf4:	20000192 	.word	0x20000192

08007bf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]
 8007c0e:	e027      	b.n	8007c60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	0f1b      	lsrs	r3, r3, #28
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d80b      	bhi.n	8007c30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0f1b      	lsrs	r3, r3, #28
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4619      	mov	r1, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	440b      	add	r3, r1
 8007c28:	3230      	adds	r2, #48	; 0x30
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e00a      	b.n	8007c46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	0f1b      	lsrs	r3, r3, #28
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	440b      	add	r3, r1
 8007c40:	3237      	adds	r2, #55	; 0x37
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	3301      	adds	r3, #1
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
 8007c60:	7dfa      	ldrb	r2, [r7, #23]
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d3d3      	bcc.n	8007c10 <IntToUnicode+0x18>
  }
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c98:	d14e      	bne.n	8007d38 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9a:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	4a28      	ldr	r2, [pc, #160]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ca6:	4b26      	ldr	r3, [pc, #152]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cc4:	230a      	movs	r3, #10
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cd2:	f7f9 facf 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ce2:	4b17      	ldr	r3, [pc, #92]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cee:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d114      	bne.n	8007d24 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfe:	4a10      	ldr	r2, [pc, #64]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d04:	6593      	str	r3, [r2, #88]	; 0x58
 8007d06:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007d12:	f7fa fddf 	bl	80028d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <HAL_PCD_MspInit+0xc8>)
 8007d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
 8007d22:	e001      	b.n	8007d28 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007d24:	f7fa fdd6 	bl	80028d4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	2043      	movs	r0, #67	; 0x43
 8007d2e:	f7f9 fa6a 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d32:	2043      	movs	r0, #67	; 0x43
 8007d34:	f7f9 fa83 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d38:	bf00      	nop
 8007d3a:	3728      	adds	r7, #40	; 0x28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	40021000 	.word	0x40021000

08007d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe fc2c 	bl	80065b8 <USBD_LL_SetupStage>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7fe fc66 	bl	8006662 <USBD_LL_DataOutStage>
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	4613      	mov	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	440b      	add	r3, r1
 8007dbe:	3348      	adds	r3, #72	; 0x48
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7fe fcaf 	bl	8006728 <USBD_LL_DataInStage>
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fdc3 	bl	800696c <USBD_LL_SOF>
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d001      	beq.n	8007e06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e02:	f7f8 fe05 	bl	8000a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fd6d 	bl	80068f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7fe fd19 	bl	8006854 <USBD_LL_Reset>
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fd5c 	bl	8006910 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <HAL_PCD_SuspendCallback+0x48>)
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	4a03      	ldr	r2, [pc, #12]	; (8007e74 <HAL_PCD_SuspendCallback+0x48>)
 8007e66:	f043 0306 	orr.w	r3, r3, #6
 8007e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	e000ed00 	.word	0xe000ed00

08007e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ea0:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <HAL_PCD_ResumeCallback+0x4c>)
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	4a07      	ldr	r2, [pc, #28]	; (8007ec4 <HAL_PCD_ResumeCallback+0x4c>)
 8007ea6:	f023 0306 	bic.w	r3, r3, #6
 8007eaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007eac:	f000 faf6 	bl	800849c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fd40 	bl	800693c <USBD_LL_Resume>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed00 	.word	0xe000ed00

08007ec8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fd8c 	bl	80069fc <USBD_LL_IsoOUTIncomplete>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fd54 	bl	80069b0 <USBD_LL_IsoINIncomplete>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fd92 	bl	8006a48 <USBD_LL_DevConnected>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fd8f 	bl	8006a5e <USBD_LL_DevDisconnected>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d13c      	bne.n	8007fd2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a1e      	ldr	r2, [pc, #120]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f68:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007f70:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f72:	2206      	movs	r2, #6
 8007f74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f76:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f78:	2202      	movs	r2, #2
 8007f7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f7c:	4b17      	ldr	r3, [pc, #92]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f7e:	2202      	movs	r2, #2
 8007f80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f82:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f88:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f9a:	4b10      	ldr	r3, [pc, #64]	; (8007fdc <USBD_LL_Init+0x94>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <USBD_LL_Init+0x94>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007fa6:	480d      	ldr	r0, [pc, #52]	; (8007fdc <USBD_LL_Init+0x94>)
 8007fa8:	f7f9 fb90 	bl	80016cc <HAL_PCD_Init>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fb2:	f7f8 fd2d 	bl	8000a10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	4808      	ldr	r0, [pc, #32]	; (8007fdc <USBD_LL_Init+0x94>)
 8007fba:	f7fa fbf2 	bl	80027a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fbe:	2240      	movs	r2, #64	; 0x40
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4806      	ldr	r0, [pc, #24]	; (8007fdc <USBD_LL_Init+0x94>)
 8007fc4:	f7fa fba6 	bl	8002714 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fc8:	2280      	movs	r2, #128	; 0x80
 8007fca:	2101      	movs	r1, #1
 8007fcc:	4803      	ldr	r0, [pc, #12]	; (8007fdc <USBD_LL_Init+0x94>)
 8007fce:	f7fa fba1 	bl	8002714 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20001a5c 	.word	0x20001a5c

08007fe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7f9 fc8c 	bl	8001914 <HAL_PCD_Start>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d816      	bhi.n	8008034 <USBD_LL_Start+0x54>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBD_LL_Start+0x2c>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	0800801d 	.word	0x0800801d
 8008010:	08008023 	.word	0x08008023
 8008014:	08008029 	.word	0x08008029
 8008018:	0800802f 	.word	0x0800802f
    case HAL_OK :
      usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
    break;
 8008020:	e00b      	b.n	800803a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008022:	2303      	movs	r3, #3
 8008024:	73fb      	strb	r3, [r7, #15]
    break;
 8008026:	e008      	b.n	800803a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
    break;
 800802c:	e005      	b.n	800803a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
    break;
 8008032:	e002      	b.n	800803a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008034:	2303      	movs	r3, #3
 8008036:	73fb      	strb	r3, [r7, #15]
    break;
 8008038:	bf00      	nop
  }
  return usb_status;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	4608      	mov	r0, r1
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	4603      	mov	r3, r0
 8008054:	70fb      	strb	r3, [r7, #3]
 8008056:	460b      	mov	r3, r1
 8008058:	70bb      	strb	r3, [r7, #2]
 800805a:	4613      	mov	r3, r2
 800805c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800806c:	78bb      	ldrb	r3, [r7, #2]
 800806e:	883a      	ldrh	r2, [r7, #0]
 8008070:	78f9      	ldrb	r1, [r7, #3]
 8008072:	f7fa f847 	bl	8002104 <HAL_PCD_EP_Open>
 8008076:	4603      	mov	r3, r0
 8008078:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b03      	cmp	r3, #3
 800807e:	d817      	bhi.n	80080b0 <USBD_LL_OpenEP+0x6c>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBD_LL_OpenEP+0x44>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	08008099 	.word	0x08008099
 800808c:	0800809f 	.word	0x0800809f
 8008090:	080080a5 	.word	0x080080a5
 8008094:	080080ab 	.word	0x080080ab
    case HAL_OK :
      usb_status = USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
    break;
 800809c:	e00b      	b.n	80080b6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800809e:	2303      	movs	r3, #3
 80080a0:	73fb      	strb	r3, [r7, #15]
    break;
 80080a2:	e008      	b.n	80080b6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080a4:	2301      	movs	r3, #1
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e005      	b.n	80080b6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	e002      	b.n	80080b6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	73fb      	strb	r3, [r7, #15]
    break;
 80080b4:	bf00      	nop
  }
  return usb_status;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080da:	78fa      	ldrb	r2, [r7, #3]
 80080dc:	4611      	mov	r1, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fa f878 	bl	80021d4 <HAL_PCD_EP_Close>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d816      	bhi.n	800811c <USBD_LL_CloseEP+0x5c>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <USBD_LL_CloseEP+0x34>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	08008105 	.word	0x08008105
 80080f8:	0800810b 	.word	0x0800810b
 80080fc:	08008111 	.word	0x08008111
 8008100:	08008117 	.word	0x08008117
    case HAL_OK :
      usb_status = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	e00b      	b.n	8008122 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
    break;
 800810e:	e008      	b.n	8008122 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
    break;
 8008114:	e005      	b.n	8008122 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
    break;
 800811a:	e002      	b.n	8008122 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	73fb      	strb	r3, [r7, #15]
    break;
 8008120:	bf00      	nop
  }
  return usb_status;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f7fa f91f 	bl	800238e <HAL_PCD_EP_SetStall>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d816      	bhi.n	8008188 <USBD_LL_StallEP+0x5c>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <USBD_LL_StallEP+0x34>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008171 	.word	0x08008171
 8008164:	08008177 	.word	0x08008177
 8008168:	0800817d 	.word	0x0800817d
 800816c:	08008183 	.word	0x08008183
    case HAL_OK :
      usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
    break;
 8008174:	e00b      	b.n	800818e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	73fb      	strb	r3, [r7, #15]
    break;
 800817a:	e008      	b.n	800818e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
    break;
 8008180:	e005      	b.n	800818e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]
    break;
 8008186:	e002      	b.n	800818e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008188:	2303      	movs	r3, #3
 800818a:	73fb      	strb	r3, [r7, #15]
    break;
 800818c:	bf00      	nop
  }
  return usb_status;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fa f94b 	bl	8002452 <HAL_PCD_EP_ClrStall>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d816      	bhi.n	80081f4 <USBD_LL_ClearStallEP+0x5c>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_LL_ClearStallEP+0x34>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081e3 	.word	0x080081e3
 80081d4:	080081e9 	.word	0x080081e9
 80081d8:	080081ef 	.word	0x080081ef
    case HAL_OK :
      usb_status = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
    break;
 80081e0:	e00b      	b.n	80081fa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081e2:	2303      	movs	r3, #3
 80081e4:	73fb      	strb	r3, [r7, #15]
    break;
 80081e6:	e008      	b.n	80081fa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
    break;
 80081ec:	e005      	b.n	80081fa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ee:	2303      	movs	r3, #3
 80081f0:	73fb      	strb	r3, [r7, #15]
    break;
 80081f2:	e002      	b.n	80081fa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
    break;
 80081f8:	bf00      	nop
  }
  return usb_status;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008216:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800821c:	2b00      	cmp	r3, #0
 800821e:	da0b      	bge.n	8008238 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	333e      	adds	r3, #62	; 0x3e
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	e00b      	b.n	8008250 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	4613      	mov	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800824e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	4611      	mov	r1, r2
 800827a:	4618      	mov	r0, r3
 800827c:	f7f9 ff1d 	bl	80020ba <HAL_PCD_SetAddress>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008284:	7bbb      	ldrb	r3, [r7, #14]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d816      	bhi.n	80082b8 <USBD_LL_SetUSBAddress+0x5c>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_LL_SetUSBAddress+0x34>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082a7 	.word	0x080082a7
 8008298:	080082ad 	.word	0x080082ad
 800829c:	080082b3 	.word	0x080082b3
    case HAL_OK :
      usb_status = USBD_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
    break;
 80082a4:	e00b      	b.n	80082be <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082a6:	2303      	movs	r3, #3
 80082a8:	73fb      	strb	r3, [r7, #15]
    break;
 80082aa:	e008      	b.n	80082be <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
    break;
 80082b0:	e005      	b.n	80082be <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082b2:	2303      	movs	r3, #3
 80082b4:	73fb      	strb	r3, [r7, #15]
    break;
 80082b6:	e002      	b.n	80082be <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80082b8:	2303      	movs	r3, #3
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	bf00      	nop
  }
  return usb_status;
 80082be:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	460b      	mov	r3, r1
 80082d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082e6:	7af9      	ldrb	r1, [r7, #11]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	f7fa f812 	bl	8002314 <HAL_PCD_EP_Transmit>
 80082f0:	4603      	mov	r3, r0
 80082f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80082f4:	7dbb      	ldrb	r3, [r7, #22]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d816      	bhi.n	8008328 <USBD_LL_Transmit+0x60>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <USBD_LL_Transmit+0x38>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008311 	.word	0x08008311
 8008304:	08008317 	.word	0x08008317
 8008308:	0800831d 	.word	0x0800831d
 800830c:	08008323 	.word	0x08008323
    case HAL_OK :
      usb_status = USBD_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	75fb      	strb	r3, [r7, #23]
    break;
 8008314:	e00b      	b.n	800832e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008316:	2303      	movs	r3, #3
 8008318:	75fb      	strb	r3, [r7, #23]
    break;
 800831a:	e008      	b.n	800832e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800831c:	2301      	movs	r3, #1
 800831e:	75fb      	strb	r3, [r7, #23]
    break;
 8008320:	e005      	b.n	800832e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	75fb      	strb	r3, [r7, #23]
    break;
 8008326:	e002      	b.n	800832e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	75fb      	strb	r3, [r7, #23]
    break;
 800832c:	bf00      	nop
  }
  return usb_status;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	460b      	mov	r3, r1
 8008346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008356:	7af9      	ldrb	r1, [r7, #11]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	f7f9 ff84 	bl	8002268 <HAL_PCD_EP_Receive>
 8008360:	4603      	mov	r3, r0
 8008362:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008364:	7dbb      	ldrb	r3, [r7, #22]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d816      	bhi.n	8008398 <USBD_LL_PrepareReceive+0x60>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <USBD_LL_PrepareReceive+0x38>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008381 	.word	0x08008381
 8008374:	08008387 	.word	0x08008387
 8008378:	0800838d 	.word	0x0800838d
 800837c:	08008393 	.word	0x08008393
    case HAL_OK :
      usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	75fb      	strb	r3, [r7, #23]
    break;
 8008384:	e00b      	b.n	800839e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	75fb      	strb	r3, [r7, #23]
    break;
 800838a:	e008      	b.n	800839e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800838c:	2301      	movs	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]
    break;
 8008390:	e005      	b.n	800839e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008392:	2303      	movs	r3, #3
 8008394:	75fb      	strb	r3, [r7, #23]
    break;
 8008396:	e002      	b.n	800839e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	75fb      	strb	r3, [r7, #23]
    break;
 800839c:	bf00      	nop
  }
  return usb_status;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f9 ff90 	bl	80022e4 <HAL_PCD_EP_GetRxCount>
 80083c4:	4603      	mov	r3, r0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_PCDEx_LPM_Callback+0x18>
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d01f      	beq.n	8008426 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80083e6:	e03b      	b.n	8008460 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80083f0:	f000 f854 	bl	800849c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083f4:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <HAL_PCDEx_LPM_Callback+0x98>)
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	4a1b      	ldr	r2, [pc, #108]	; (8008468 <HAL_PCDEx_LPM_Callback+0x98>)
 80083fa:	f023 0306 	bic.w	r3, r3, #6
 80083fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008412:	f023 0301 	bic.w	r3, r3, #1
 8008416:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fa8c 	bl	800693c <USBD_LL_Resume>
    break;
 8008424:	e01c      	b.n	8008460 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fa63 	bl	8006910 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008452:	4b05      	ldr	r3, [pc, #20]	; (8008468 <HAL_PCDEx_LPM_Callback+0x98>)
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	4a04      	ldr	r2, [pc, #16]	; (8008468 <HAL_PCDEx_LPM_Callback+0x98>)
 8008458:	f043 0306 	orr.w	r3, r3, #6
 800845c:	6113      	str	r3, [r2, #16]
    break;
 800845e:	bf00      	nop
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <USBD_static_malloc+0x18>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	200001cc 	.word	0x200001cc

08008488 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]

}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80084a0:	f7f7 ff74 	bl	800038c <SystemClock_Config>
}
 80084a4:	bf00      	nop
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <__libc_init_array>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4d0d      	ldr	r5, [pc, #52]	; (80084e0 <__libc_init_array+0x38>)
 80084ac:	4c0d      	ldr	r4, [pc, #52]	; (80084e4 <__libc_init_array+0x3c>)
 80084ae:	1b64      	subs	r4, r4, r5
 80084b0:	10a4      	asrs	r4, r4, #2
 80084b2:	2600      	movs	r6, #0
 80084b4:	42a6      	cmp	r6, r4
 80084b6:	d109      	bne.n	80084cc <__libc_init_array+0x24>
 80084b8:	4d0b      	ldr	r5, [pc, #44]	; (80084e8 <__libc_init_array+0x40>)
 80084ba:	4c0c      	ldr	r4, [pc, #48]	; (80084ec <__libc_init_array+0x44>)
 80084bc:	f000 f820 	bl	8008500 <_init>
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	2600      	movs	r6, #0
 80084c6:	42a6      	cmp	r6, r4
 80084c8:	d105      	bne.n	80084d6 <__libc_init_array+0x2e>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d0:	4798      	blx	r3
 80084d2:	3601      	adds	r6, #1
 80084d4:	e7ee      	b.n	80084b4 <__libc_init_array+0xc>
 80084d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084da:	4798      	blx	r3
 80084dc:	3601      	adds	r6, #1
 80084de:	e7f2      	b.n	80084c6 <__libc_init_array+0x1e>
 80084e0:	080085a0 	.word	0x080085a0
 80084e4:	080085a0 	.word	0x080085a0
 80084e8:	080085a0 	.word	0x080085a0
 80084ec:	080085a4 	.word	0x080085a4

080084f0 <memset>:
 80084f0:	4402      	add	r2, r0
 80084f2:	4603      	mov	r3, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <_init>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr

0800850c <_fini>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr
