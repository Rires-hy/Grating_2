
Grating_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b744  0800b744  0001b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b874  0800b874  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b874  0800b874  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b874  0800b874  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b874  0800b874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800b87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003098  200001a4  0800ba20  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000323c  0800ba20  0002323c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a921  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000510f  00000000  00000000  0004aaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  0004fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  000517e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e19  00000000  00000000  000531c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb2b  00000000  00000000  00059fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd654  00000000  00000000  00079b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000742c  00000000  00000000  001771ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b72c 	.word	0x0800b72c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800b72c 	.word	0x0800b72c

080001d0 <CRCcalc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned short CRCcalc(uint16_t* ptr, int len)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
 unsigned int i;
 unsigned short crc = 0xFFFF;  //crc16位寄存器初始值
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	817b      	strh	r3, [r7, #10]

 while (len--)
 80001e0:	e01e      	b.n	8000220 <CRCcalc+0x50>
 {
  crc ^= *ptr++;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	1c9a      	adds	r2, r3, #2
 80001e6:	607a      	str	r2, [r7, #4]
 80001e8:	881a      	ldrh	r2, [r3, #0]
 80001ea:	897b      	ldrh	r3, [r7, #10]
 80001ec:	4053      	eors	r3, r2
 80001ee:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < 8; ++i)
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e011      	b.n	800021a <CRCcalc+0x4a>
  {
   if (crc & 1)
 80001f6:	897b      	ldrh	r3, [r7, #10]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d006      	beq.n	800020e <CRCcalc+0x3e>
    crc = (crc >> 1) ^ 0xA001; //多项式 POLY（0x8005)的高低位交换值，这是由于其模型的一些参数决定的
 8000200:	897b      	ldrh	r3, [r7, #10]
 8000202:	085b      	lsrs	r3, r3, #1
 8000204:	b29a      	uxth	r2, r3
 8000206:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <CRCcalc+0x68>)
 8000208:	4053      	eors	r3, r2
 800020a:	817b      	strh	r3, [r7, #10]
 800020c:	e002      	b.n	8000214 <CRCcalc+0x44>
   else
    crc = (crc >> 1);
 800020e:	897b      	ldrh	r3, [r7, #10]
 8000210:	085b      	lsrs	r3, r3, #1
 8000212:	817b      	strh	r3, [r7, #10]
  for (i = 0; i < 8; ++i)
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2b07      	cmp	r3, #7
 800021e:	d9ea      	bls.n	80001f6 <CRCcalc+0x26>
 while (len--)
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	1e5a      	subs	r2, r3, #1
 8000224:	603a      	str	r2, [r7, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d1db      	bne.n	80001e2 <CRCcalc+0x12>
  }
 }

 return crc;
 800022a:	897b      	ldrh	r3, [r7, #10]
}
 800022c:	4618      	mov	r0, r3
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	ffffa001 	.word	0xffffa001

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f001 f9f1 	bl	8001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f86a 	bl	800031c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 fa9c 	bl	8000784 <MX_GPIO_Init>
  MX_TIM1_Init();
 800024c:	f000 f8ee 	bl	800042c <MX_TIM1_Init>
  MX_TIM5_Init();
 8000250:	f000 f9e8 	bl	8000624 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000254:	f000 f93c 	bl	80004d0 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000258:	f000 fa3a 	bl	80006d0 <MX_TIM8_Init>
  MX_TIM3_Init();
 800025c:	f000 f98c 	bl	8000578 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000260:	213c      	movs	r1, #60	; 0x3c
 8000262:	481d      	ldr	r0, [pc, #116]	; (80002d8 <main+0x9c>)
 8000264:	f004 fab4 	bl	80047d0 <HAL_TIM_Encoder_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2104      	movs	r1, #4
 800026c:	481b      	ldr	r0, [pc, #108]	; (80002dc <main+0xa0>)
 800026e:	f001 fd47 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <main+0xa4>)
 800027a:	f001 fd41 	bl	8001d00 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 800027e:	4819      	ldr	r0, [pc, #100]	; (80002e4 <main+0xa8>)
 8000280:	f004 f990 	bl	80045a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000284:	4818      	ldr	r0, [pc, #96]	; (80002e8 <main+0xac>)
 8000286:	f004 f98d 	bl	80045a4 <HAL_TIM_Base_Start_IT>

  TIM5->CNT=654321;
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <main+0xb0>)
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <main+0xb4>)
 800028e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CNT=123456;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000294:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <main+0xb8>)
 8000296:	625a      	str	r2, [r3, #36]	; 0x24

  //initiate USB
  MX_USB_DEVICE_Init();
 8000298:	f00a fb88 	bl	800a9ac <MX_USB_DEVICE_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800029c:	f007 fe36 	bl	8007f0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002a0:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <main+0xbc>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4815      	ldr	r0, [pc, #84]	; (80002fc <main+0xc0>)
 80002a6:	f007 fe7b 	bl	8007fa0 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a14      	ldr	r2, [pc, #80]	; (8000300 <main+0xc4>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80002b0:	4a14      	ldr	r2, [pc, #80]	; (8000304 <main+0xc8>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4814      	ldr	r0, [pc, #80]	; (8000308 <main+0xcc>)
 80002b6:	f007 fe73 	bl	8007fa0 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a13      	ldr	r2, [pc, #76]	; (800030c <main+0xd0>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80002c0:	4a13      	ldr	r2, [pc, #76]	; (8000310 <main+0xd4>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4813      	ldr	r0, [pc, #76]	; (8000314 <main+0xd8>)
 80002c6:	f007 fe6b 	bl	8007fa0 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a12      	ldr	r2, [pc, #72]	; (8000318 <main+0xdc>)
 80002ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002d0:	f007 fe40 	bl	8007f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80002d4:	e7fe      	b.n	80002d4 <main+0x98>
 80002d6:	bf00      	nop
 80002d8:	20001db0 	.word	0x20001db0
 80002dc:	48000400 	.word	0x48000400
 80002e0:	48001000 	.word	0x48001000
 80002e4:	20001e64 	.word	0x20001e64
 80002e8:	20001ec0 	.word	0x20001ec0
 80002ec:	40000c00 	.word	0x40000c00
 80002f0:	0009fbf1 	.word	0x0009fbf1
 80002f4:	0001e240 	.word	0x0001e240
 80002f8:	0800b7c8 	.word	0x0800b7c8
 80002fc:	08000a35 	.word	0x08000a35
 8000300:	20001d54 	.word	0x20001d54
 8000304:	0800b7ec 	.word	0x0800b7ec
 8000308:	08000bb9 	.word	0x08000bb9
 800030c:	20001e58 	.word	0x20001e58
 8000310:	0800b810 	.word	0x0800b810
 8000314:	0800109d 	.word	0x0800109d
 8000318:	20001eb8 	.word	0x20001eb8

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b0b8      	sub	sp, #224	; 0xe0
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000326:	2244      	movs	r2, #68	; 0x44
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f00b f9f6 	bl	800b71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2288      	movs	r2, #136	; 0x88
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f00b f9e8 	bl	800b71c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800034c:	2310      	movs	r3, #16
 800034e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800036a:	2301      	movs	r3, #1
 800036c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000370:	2301      	movs	r3, #1
 8000372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000376:	2328      	movs	r3, #40	; 0x28
 8000378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800037c:	2307      	movs	r3, #7
 800037e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000382:	2302      	movs	r3, #2
 8000384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000388:	2302      	movs	r3, #2
 800038a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fe32 	bl	8002ffc <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800039e:	f000 fe85 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2303      	movs	r3, #3
 80003aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003c4:	2104      	movs	r1, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f9fe 	bl	80037c8 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003d2:	f000 fe6b 	bl	80010ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80003e2:	2301      	movs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80003ea:	2318      	movs	r3, #24
 80003ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003ee:	2307      	movs	r3, #7
 80003f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80003fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fbba 	bl	8003b7c <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800040e:	f000 fe4d 	bl	80010ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000416:	f002 fd8b 	bl	8002f30 <HAL_PWREx_ControlVoltageScaling>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000420:	f000 fe44 	bl	80010ac <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	37e0      	adds	r7, #224	; 0xe0
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044a:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800044c:	4a1f      	ldr	r2, [pc, #124]	; (80004cc <MX_TIM1_Init+0xa0>)
 800044e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000452:	224f      	movs	r2, #79	; 0x4f
 8000454:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800045e:	2231      	movs	r2, #49	; 0x31
 8000460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_TIM1_Init+0x9c>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000474:	4814      	ldr	r0, [pc, #80]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000476:	f004 f83d 	bl	80044f4 <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000480:	f000 fe14 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <MX_TIM1_Init+0x9c>)
 8000492:	f004 fb4a 	bl	8004b2a <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800049c:	f000 fe06 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_TIM1_Init+0x9c>)
 80004b2:	f004 fd83 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80004bc:	f000 fdf6 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20001e64 	.word	0x20001e64
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2224      	movs	r2, #36	; 0x24
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f00b f91c 	bl	800b71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM2_Init+0xa4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33888;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000504:	f248 4260 	movw	r2, #33888	; 0x8460
 8000508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM2_Init+0xa4>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000516:	2303      	movs	r3, #3
 8000518:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800051e:	2301      	movs	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800052e:	2301      	movs	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM2_Init+0xa4>)
 8000542:	f004 f89f 	bl	8004684 <HAL_TIM_Encoder_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800054c:	f000 fdae 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM2_Init+0xa4>)
 800055e:	f004 fd2d 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000568:	f000 fda0 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3730      	adds	r7, #48	; 0x30
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20001ec0 	.word	0x20001ec0

08000578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2224      	movs	r2, #36	; 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00b f8c8 	bl	800b71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <MX_TIM3_Init+0xa4>)
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <MX_TIM3_Init+0xa8>)
 800059a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_TIM3_Init+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM3_Init+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM3_Init+0xa4>)
 80005aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM3_Init+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_TIM3_Init+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005bc:	2301      	movs	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM3_Init+0xa4>)
 80005e8:	f004 f84c 	bl	8004684 <HAL_TIM_Encoder_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80005f2:	f000 fd5b 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_TIM3_Init+0xa4>)
 8000604:	f004 fcda 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800060e:	f000 fd4d 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3730      	adds	r7, #48	; 0x30
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20001dfc 	.word	0x20001dfc
 8000620:	40000400 	.word	0x40000400

08000624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2224      	movs	r2, #36	; 0x24
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00b f872 	bl	800b71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_TIM5_Init+0xa8>)
 8000646:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_TIM5_Init+0xa4>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 33888;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000656:	f248 4260 	movw	r2, #33888	; 0x8460
 800065a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_TIM5_Init+0xa4>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000668:	2303      	movs	r3, #3
 800066a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000670:	2301      	movs	r3, #1
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000680:	2301      	movs	r3, #1
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_TIM5_Init+0xa4>)
 8000694:	f003 fff6 	bl	8004684 <HAL_TIM_Encoder_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800069e:	f000 fd05 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_TIM5_Init+0xa4>)
 80006b0:	f004 fc84 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80006ba:	f000 fcf7 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20001db0 	.word	0x20001db0
 80006cc:	40000c00 	.word	0x40000c00

080006d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2224      	movs	r2, #36	; 0x24
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f00b f81c 	bl	800b71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_TIM8_Init+0xac>)
 80006f0:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_TIM8_Init+0xb0>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_TIM8_Init+0xac>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_TIM8_Init+0xac>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM8_Init+0xac>)
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM8_Init+0xac>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM8_Init+0xac>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM8_Init+0xac>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000732:	2301      	movs	r3, #1
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM8_Init+0xac>)
 8000746:	f003 ff9d 	bl	8004684 <HAL_TIM_Encoder_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000750:	f000 fcac 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM8_Init+0xac>)
 8000766:	f004 fc29 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000770:	f000 fc9c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001d5c 	.word	0x20001d5c
 8000780:	40013400 	.word	0x40013400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <MX_GPIO_Init+0x1f0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a75      	ldr	r2, [pc, #468]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b73      	ldr	r3, [pc, #460]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b70      	ldr	r3, [pc, #448]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a6f      	ldr	r2, [pc, #444]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a69      	ldr	r2, [pc, #420]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b67      	ldr	r3, [pc, #412]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b64      	ldr	r3, [pc, #400]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a63      	ldr	r2, [pc, #396]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <MX_GPIO_Init+0x1f0>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a5d      	ldr	r2, [pc, #372]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b58      	ldr	r3, [pc, #352]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a57      	ldr	r2, [pc, #348]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b55      	ldr	r3, [pc, #340]	; (8000974 <MX_GPIO_Init+0x1f0>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XCLK_GPIO_Port, XCLK_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2104      	movs	r1, #4
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 fa65 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2104      	movs	r1, #4
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <MX_GPIO_Init+0x1f4>)
 800083c:	f001 fa60 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	484d      	ldr	r0, [pc, #308]	; (800097c <MX_GPIO_Init+0x1f8>)
 8000848:	f001 fa5a 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YCLK_GPIO_Port, YCLK_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	484b      	ldr	r0, [pc, #300]	; (8000980 <MX_GPIO_Init+0x1fc>)
 8000852:	f001 fa55 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : XCLK_Pin */
  GPIO_InitStruct.Pin = XCLK_Pin;
 8000856:	2304      	movs	r3, #4
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XCLK_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 f884 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f001 f877 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : XDIR_Pin */
  GPIO_InitStruct.Pin = XDIR_Pin;
 800088e:	2304      	movs	r3, #4
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XDIR_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4834      	ldr	r0, [pc, #208]	; (8000978 <MX_GPIO_Init+0x1f4>)
 80008a6:	f001 f869 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : YDIR_Pin */
  GPIO_InitStruct.Pin = YDIR_Pin;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YDIR_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	482e      	ldr	r0, [pc, #184]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008c4:	f001 f85a 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : Z__Pin Z_E11_Pin Y__Pin Y_E13_Pin */
  GPIO_InitStruct.Pin = Z__Pin|Z_E11_Pin|Y__Pin|Y_E13_Pin;
 80008c8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <MX_GPIO_Init+0x200>)
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008de:	f001 f84d 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : X__Pin */
  GPIO_InitStruct.Pin = X__Pin;
 80008e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_GPIO_Init+0x204>)
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X__GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_GPIO_Init+0x1f8>)
 80008f8:	f001 f840 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : X_E15_Pin */
  GPIO_InitStruct.Pin = X_E15_Pin;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000906:	2302      	movs	r3, #2
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_E15_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_GPIO_Init+0x1f8>)
 8000912:	f001 f833 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : YCLK_Pin */
  GPIO_InitStruct.Pin = YCLK_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YCLK_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <MX_GPIO_Init+0x1fc>)
 800092e:	f001 f825 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000932:	23c0      	movs	r3, #192	; 0xc0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000942:	2302      	movs	r3, #2
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <MX_GPIO_Init+0x1f4>)
 800094e:	f001 f815 	bl	800197c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8000952:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000956:	f001 fa1d 	bl	8001d94 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 ffd5 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f000 ffee 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400
 800097c:	48001000 	.word	0x48001000
 8000980:	48000c00 	.word	0x48000c00
 8000984:	10310000 	.word	0x10310000
 8000988:	10110000 	.word	0x10110000

0800098c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

		}



	if(htim->Instance == htim2.Instance){
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d115      	bne.n	80009cc <HAL_TIM_PeriodElapsedCallback+0x40>

		 cnt=__HAL_TIM_GET_COUNTER(&htim5)-750000;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f5a3 2337 	sub.w	r3, r3, #749568	; 0xb7000
 80009aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009b2:	601a      	str	r2, [r3, #0]
//		 	  laps--;
//		   }
//
//		   cnt_old=TIM5->CNT;

			 			 			feedback=(laps*htim5.Init.Period)+cnt;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009ca:	601a      	str	r2, [r3, #0]
	}

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20001ec0 	.word	0x20001ec0
 80009dc:	20001db0 	.word	0x20001db0
 80009e0:	20001da8 	.word	0x20001da8
 80009e4:	200001c0 	.word	0x200001c0
 80009e8:	20001e5c 	.word	0x20001e5c

080009ec <CDC_ReceiveCallback>:
//	  laps--;
//  }
//  cnt_old=TIM5->CNT;

void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	  for (int i=0;i<=16;i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e00b      	b.n	8000a14 <CDC_ReceiveCallback+0x28>
	  {
		 rxbuf[i]=buf[i];
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <CDC_ReceiveCallback+0x40>)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i=0;i<=16;i++)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	ddf0      	ble.n	80009fc <CDC_ReceiveCallback+0x10>
	  }
	  k=0;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <CDC_ReceiveCallback+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20001cd4 	.word	0x20001cd4
 8000a30:	20000000 	.word	0x20000000

08000a34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a3c:	f009 ffb6 	bl	800a9ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	484e      	ldr	r0, [pc, #312]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a46:	f001 f943 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <StartDefaultTask+0x24>
		  	  Xpos=0;
 8000a50:	4b4c      	ldr	r3, [pc, #304]	; (8000b84 <StartDefaultTask+0x150>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e002      	b.n	8000a5e <StartDefaultTask+0x2a>
	 	  }
	 	  else {
	 		  Xpos=1;
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <StartDefaultTask+0x150>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	 	  }
	 	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14)==GPIO_PIN_RESET){
 8000a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a62:	4847      	ldr	r0, [pc, #284]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a64:	f001 f934 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <StartDefaultTask+0x42>
	 		  Xneg=0;
 8000a6e:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <StartDefaultTask+0x154>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e002      	b.n	8000a7c <StartDefaultTask+0x48>
	 	  }
	 	  else  {
	 		  Xneg=1;
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <StartDefaultTask+0x154>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
	 	  }
		  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)==GPIO_PIN_RESET){
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	483f      	ldr	r0, [pc, #252]	; (8000b80 <StartDefaultTask+0x14c>)
 8000a82:	f001 f925 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <StartDefaultTask+0x60>
			  Ypos=0;
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <StartDefaultTask+0x158>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <StartDefaultTask+0x66>
		 	  }
		 	  else {
		 	 Ypos=1;
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <StartDefaultTask+0x158>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
		 	  }
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12)==GPIO_PIN_RESET){
 8000a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9e:	4838      	ldr	r0, [pc, #224]	; (8000b80 <StartDefaultTask+0x14c>)
 8000aa0:	f001 f916 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <StartDefaultTask+0x7e>
		 	 Yneg=0;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <StartDefaultTask+0x15c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e002      	b.n	8000ab8 <StartDefaultTask+0x84>
		 	  }
		 	  else  {
		 	 Yneg=1;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <StartDefaultTask+0x15c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
		 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10)==GPIO_PIN_RESET){
 8000ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abc:	4830      	ldr	r0, [pc, #192]	; (8000b80 <StartDefaultTask+0x14c>)
 8000abe:	f001 f907 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <StartDefaultTask+0x9c>
		  	 Zpos=0;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <StartDefaultTask+0x160>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e002      	b.n	8000ad6 <StartDefaultTask+0xa2>
	 	  }
	 	  else {
	 		 Zpos=1;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <StartDefaultTask+0x160>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
	 	  }

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11)==GPIO_PIN_RESET){
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <StartDefaultTask+0x14c>)
 8000adc:	f001 f8f8 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <StartDefaultTask+0xba>
		  	  Zneg=0;
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <StartDefaultTask+0x164>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e002      	b.n	8000af4 <StartDefaultTask+0xc0>
	 	  }
	 	  else  {
	 		 Zneg=1;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <StartDefaultTask+0x164>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
	 	  }


	 	  if(highMode>1) {
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <StartDefaultTask+0x168>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	dd0f      	ble.n	8000b1c <StartDefaultTask+0xe8>
		 	    xSpeed = 250U;
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <StartDefaultTask+0x16c>)
 8000afe:	22fa      	movs	r2, #250	; 0xfa
 8000b00:	701a      	strb	r2, [r3, #0]
		       ySpeed = 250U;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <StartDefaultTask+0x170>)
 8000b04:	22fa      	movs	r2, #250	; 0xfa
 8000b06:	701a      	strb	r2, [r3, #0]
		       xSen = 2U;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
		       ySen = 2U;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <StartDefaultTask+0x178>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
		       highMode = 1;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <StartDefaultTask+0x168>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e012      	b.n	8000b42 <StartDefaultTask+0x10e>
	 	  }else if (highMode < 1) {
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <StartDefaultTask+0x168>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dc0e      	bgt.n	8000b42 <StartDefaultTask+0x10e>


	 	    xSpeed = 50U;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <StartDefaultTask+0x16c>)
 8000b26:	2232      	movs	r2, #50	; 0x32
 8000b28:	701a      	strb	r2, [r3, #0]
	 	    ySpeed = 50U;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <StartDefaultTask+0x170>)
 8000b2c:	2232      	movs	r2, #50	; 0x32
 8000b2e:	701a      	strb	r2, [r3, #0]
	 	    xSen = 10U;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b32:	220a      	movs	r2, #10
 8000b34:	701a      	strb	r2, [r3, #0]
	 	    ySen = 10U;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <StartDefaultTask+0x178>)
 8000b38:	220a      	movs	r2, #10
 8000b3a:	701a      	strb	r2, [r3, #0]
	 	    highMode = 1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <StartDefaultTask+0x168>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if(HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000b42:	2108      	movs	r1, #8
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f001 f8c2 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d104      	bne.n	8000b5c <StartDefaultTask+0x128>
	 	      {
	 	  	    xPul = -(xSen);
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <StartDefaultTask+0x174>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	425b      	negs	r3, r3
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <StartDefaultTask+0x17c>)
 8000b5a:	6013      	str	r3, [r2, #0]
	 	      }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	      {
//	 	        xPul = (xSen);
//	 	      }
	 	  if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin) == GPIO_PIN_SET)
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f001 f8b5 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d104      	bne.n	8000b76 <StartDefaultTask+0x142>
	 	  {
	 		  yPul = ySen;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <StartDefaultTask+0x178>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <StartDefaultTask+0x180>)
 8000b74:	601a      	str	r2, [r3, #0]
	 	  }
//	 	  else if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin) == GPIO_PIN_SET)
//	 	  {
//	 		  yPul = -ySen;
//	 	  }
    osDelay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f007 faa4 	bl	80080c4 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)==GPIO_PIN_RESET){
 8000b7c:	e760      	b.n	8000a40 <StartDefaultTask+0xc>
 8000b7e:	bf00      	nop
 8000b80:	48001000 	.word	0x48001000
 8000b84:	20001eb0 	.word	0x20001eb0
 8000b88:	20001e4c 	.word	0x20001e4c
 8000b8c:	20001dac 	.word	0x20001dac
 8000b90:	20001e54 	.word	0x20001e54
 8000b94:	20001f0c 	.word	0x20001f0c
 8000b98:	20001d58 	.word	0x20001d58
 8000b9c:	200001c4 	.word	0x200001c4
 8000ba0:	20001f14 	.word	0x20001f14
 8000ba4:	20001f1c 	.word	0x20001f1c
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	20000005 	.word	0x20000005
 8000bb0:	20001f10 	.word	0x20001f10
 8000bb4:	20001f18 	.word	0x20001f18

08000bb8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int rec_state=0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
//	  }

  /* Infinite loop */
  for(;;)
  {
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8000bc4:	4bb6      	ldr	r3, [pc, #728]	; (8000ea0 <StartTask02+0x2e8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4bb5      	ldr	r3, [pc, #724]	; (8000ea4 <StartTask02+0x2ec>)
 8000bce:	601a      	str	r2, [r3, #0]
	  tim5Cnt=__HAL_TIM_GET_COUNTER(&htim5);
 8000bd0:	4bb5      	ldr	r3, [pc, #724]	; (8000ea8 <StartTask02+0x2f0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4bb4      	ldr	r3, [pc, #720]	; (8000eac <StartTask02+0x2f4>)
 8000bda:	601a      	str	r2, [r3, #0]

	  read=0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
	  control=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24

	  while (k < 16)
 8000be4:	e236      	b.n	8001054 <StartTask02+0x49c>
	  {
		  uint8_t ch = rxbuf[k];
 8000be6:	4bb2      	ldr	r3, [pc, #712]	; (8000eb0 <StartTask02+0x2f8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4ab2      	ldr	r2, [pc, #712]	; (8000eb4 <StartTask02+0x2fc>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	f200 8227 	bhi.w	800104a <StartTask02+0x492>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <StartTask02+0x4c>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c19 	.word	0x08000c19
 8000c08:	08000c29 	.word	0x08000c29
 8000c0c:	08000c53 	.word	0x08000c53
 8000c10:	08000cbd 	.word	0x08000cbd
 8000c14:	0800101d 	.word	0x0800101d
		  switch (rec_state)
		  {
		  case START:
			  if (ch==0x22)
 8000c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c1c:	2b22      	cmp	r3, #34	; 0x22
 8000c1e:	f040 8213 	bne.w	8001048 <StartTask02+0x490>
			  {
				  rec_state=CMD;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
			  break;
 8000c26:	e20f      	b.n	8001048 <StartTask02+0x490>
		  case CMD:
			  if (ch==0x30)
 8000c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c2c:	2b30      	cmp	r3, #48	; 0x30
 8000c2e:	d104      	bne.n	8000c3a <StartTask02+0x82>
			  {
				  rec_state=ADDRESS;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
				  read=1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000c38:	e207      	b.n	800104a <StartTask02+0x492>
			  else if (ch==0x66)
 8000c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c3e:	2b66      	cmp	r3, #102	; 0x66
 8000c40:	d104      	bne.n	8000c4c <StartTask02+0x94>
				  rec_state=ADDRESS;
 8000c42:	2302      	movs	r3, #2
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
				  control=1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000c4a:	e1fe      	b.n	800104a <StartTask02+0x492>
				  rec_state=START;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			  break;
 8000c50:	e1fb      	b.n	800104a <StartTask02+0x492>
		  case ADDRESS:
			  if(ch==0x00)
 8000c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d105      	bne.n	8000c66 <StartTask02+0xae>
			  {
				  rec_state=DATA;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
				  grating_scale_1=1;
 8000c5e:	4b96      	ldr	r3, [pc, #600]	; (8000eb8 <StartTask02+0x300>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
			  }
			  else
			  {
				  rec_state=START;
			  }
			  break;
 8000c64:	e1f1      	b.n	800104a <StartTask02+0x492>
			  else if (ch==0x01)
 8000c66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d105      	bne.n	8000c7a <StartTask02+0xc2>
				  rec_state=DATA;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
				  grating_scale_2=1;
 8000c72:	4b92      	ldr	r3, [pc, #584]	; (8000ebc <StartTask02+0x304>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
			  break;
 8000c78:	e1e7      	b.n	800104a <StartTask02+0x492>
			  else if (ch==0x02)
 8000c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d105      	bne.n	8000c8e <StartTask02+0xd6>
				  rec_state=DATA;
 8000c82:	2303      	movs	r3, #3
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
				  PGsend=1;
 8000c86:	4b8e      	ldr	r3, [pc, #568]	; (8000ec0 <StartTask02+0x308>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
			  break;
 8000c8c:	e1dd      	b.n	800104a <StartTask02+0x492>
			  else if (ch==0x03)
 8000c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d105      	bne.n	8000ca2 <StartTask02+0xea>
				  rec_state=DATA;
 8000c96:	2303      	movs	r3, #3
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
				  spin=1;
 8000c9a:	4b8a      	ldr	r3, [pc, #552]	; (8000ec4 <StartTask02+0x30c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
			  break;
 8000ca0:	e1d3      	b.n	800104a <StartTask02+0x492>
			  else if (ch==0x04)
 8000ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d105      	bne.n	8000cb6 <StartTask02+0xfe>
				  rec_state=DATA;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
				  solder_push=1;
 8000cae:	4b86      	ldr	r3, [pc, #536]	; (8000ec8 <StartTask02+0x310>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
			  break;
 8000cb4:	e1c9      	b.n	800104a <StartTask02+0x492>
				  rec_state=START;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  break;
 8000cba:	e1c6      	b.n	800104a <StartTask02+0x492>

		  case DATA:

			  if(	(read==1)	&&	(grating_scale_1==1)	)
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d124      	bne.n	8000d0c <StartTask02+0x154>
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <StartTask02+0x300>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d120      	bne.n	8000d0c <StartTask02+0x154>
			  {
				  opbuff[0]=0x22;
 8000cca:	2322      	movs	r3, #34	; 0x22
 8000ccc:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000cce:	2330      	movs	r3, #48	; 0x30
 8000cd0:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x00;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM5->CNT;
 8000cd6:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <StartTask02+0x314>)
 8000cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	3303      	adds	r3, #3
 8000ce0:	601a      	str	r2, [r3, #0]

				  unsigned short crc = CRCcalc(opbuff,6);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa71 	bl	80001d0 <CRCcalc>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	843b      	strh	r3, [r7, #32]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	3306      	adds	r3, #6
 8000cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000cfc:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2108      	movs	r1, #8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 ff65 	bl	800abd4 <CDC_Transmit_FS>
			  {
 8000d0a:	e184      	b.n	8001016 <StartTask02+0x45e>
			  }
			  else if(	(read==1)	&&	(grating_scale_2==1)	)
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d125      	bne.n	8000d5e <StartTask02+0x1a6>
 8000d12:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <StartTask02+0x304>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d121      	bne.n	8000d5e <StartTask02+0x1a6>
			  {
				  opbuff[0]=0x22;
 8000d1a:	2322      	movs	r3, #34	; 0x22
 8000d1c:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000d1e:	2330      	movs	r3, #48	; 0x30
 8000d20:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x01;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73bb      	strb	r3, [r7, #14]
				  *(int32_t*)&(opbuff[3]) = TIM2->CNT;
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	3303      	adds	r3, #3
 8000d32:	601a      	str	r2, [r3, #0]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2106      	movs	r1, #6
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa48 	bl	80001d0 <CRCcalc>
 8000d40:	4603      	mov	r3, r0
 8000d42:	83fb      	strh	r3, [r7, #30]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	3306      	adds	r3, #6
 8000d4a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000d4e:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2108      	movs	r1, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f009 ff3c 	bl	800abd4 <CDC_Transmit_FS>
			  {
 8000d5c:	e15b      	b.n	8001016 <StartTask02+0x45e>
			  }
			  else if(	(control==1)	&&	(grating_scale_1==1)	)
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d12b      	bne.n	8000dbc <StartTask02+0x204>
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <StartTask02+0x300>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d127      	bne.n	8000dbc <StartTask02+0x204>
			  {
				  TIM5->CNT=750000;
 8000d6c:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <StartTask02+0x314>)
 8000d6e:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <StartTask02+0x318>)
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
				  opbuff[0]=0x22;
 8000d72:	2322      	movs	r3, #34	; 0x22
 8000d74:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x66;
 8000d76:	2366      	movs	r3, #102	; 0x66
 8000d78:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73bb      	strb	r3, [r7, #14]
				  opbuff[3]=0x00; opbuff[4]=0x00; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	2300      	movs	r3, #0
 8000d84:	743b      	strb	r3, [r7, #16]
 8000d86:	2300      	movs	r3, #0
 8000d88:	747b      	strb	r3, [r7, #17]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	74bb      	strb	r3, [r7, #18]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	74fb      	strb	r3, [r7, #19]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2106      	movs	r1, #6
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa19 	bl	80001d0 <CRCcalc>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	83bb      	strh	r3, [r7, #28]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	3306      	adds	r3, #6
 8000da8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000dac:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2108      	movs	r1, #8
 8000db4:	4618      	mov	r0, r3
 8000db6:	f009 ff0d 	bl	800abd4 <CDC_Transmit_FS>
			  {
 8000dba:	e12c      	b.n	8001016 <StartTask02+0x45e>

			  }
			  else if(	(control==1)	&&	(grating_scale_2==1)	)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d12c      	bne.n	8000e1c <StartTask02+0x264>
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <StartTask02+0x304>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d128      	bne.n	8000e1c <StartTask02+0x264>
			  {
				  TIM2->CNT=750000;
 8000dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <StartTask02+0x318>)
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
				  opbuff[0]=0x22;
 8000dd2:	2322      	movs	r3, #34	; 0x22
 8000dd4:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x66;
 8000dd6:	2366      	movs	r3, #102	; 0x66
 8000dd8:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x01;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73bb      	strb	r3, [r7, #14]
				  opbuff[3]=0x00; opbuff[4]=0x00; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	2300      	movs	r3, #0
 8000de4:	743b      	strb	r3, [r7, #16]
 8000de6:	2300      	movs	r3, #0
 8000de8:	747b      	strb	r3, [r7, #17]
 8000dea:	2300      	movs	r3, #0
 8000dec:	74bb      	strb	r3, [r7, #18]
 8000dee:	2300      	movs	r3, #0
 8000df0:	74fb      	strb	r3, [r7, #19]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2106      	movs	r1, #6
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9e9 	bl	80001d0 <CRCcalc>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	837b      	strh	r3, [r7, #26]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	3306      	adds	r3, #6
 8000e08:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000e0c:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2108      	movs	r1, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f009 fedd 	bl	800abd4 <CDC_Transmit_FS>
			  {
 8000e1a:	e0fc      	b.n	8001016 <StartTask02+0x45e>

			  }
			  else if(PGsend==1)
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <StartTask02+0x308>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d163      	bne.n	8000eec <StartTask02+0x334>
			  {
				  opbuff[0]=0x22;
 8000e24:	2322      	movs	r3, #34	; 0x22
 8000e26:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x30;
 8000e28:	2330      	movs	r3, #48	; 0x30
 8000e2a:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x02;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	73bb      	strb	r3, [r7, #14]
				  opbuff[3] =(Xpos<<0)	+	(Xneg<<1)	+	(Ypos<<2)	+	(Yneg<<3)	+ 	(Zpos<<4)	+	(Zneg<<5);
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <StartTask02+0x31c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <StartTask02+0x320>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <StartTask02+0x324>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <StartTask02+0x328>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <StartTask02+0x32c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <StartTask02+0x330>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	015b      	lsls	r3, r3, #5
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	73fb      	strb	r3, [r7, #15]
				  unsigned short crc = CRCcalc(opbuff,6);
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2106      	movs	r1, #6
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f9a8 	bl	80001d0 <CRCcalc>
 8000e80:	4603      	mov	r3, r0
 8000e82:	82bb      	strh	r3, [r7, #20]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	3306      	adds	r3, #6
 8000e8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e8e:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2108      	movs	r1, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f009 fe9c 	bl	800abd4 <CDC_Transmit_FS>
 8000e9c:	e0bb      	b.n	8001016 <StartTask02+0x45e>
 8000e9e:	bf00      	nop
 8000ea0:	20001ec0 	.word	0x20001ec0
 8000ea4:	20001e48 	.word	0x20001e48
 8000ea8:	20001db0 	.word	0x20001db0
 8000eac:	20001eb4 	.word	0x20001eb4
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20001cd4 	.word	0x20001cd4
 8000eb8:	200001d8 	.word	0x200001d8
 8000ebc:	200001dc 	.word	0x200001dc
 8000ec0:	20001ebc 	.word	0x20001ebc
 8000ec4:	200001c8 	.word	0x200001c8
 8000ec8:	200001cc 	.word	0x200001cc
 8000ecc:	40000c00 	.word	0x40000c00
 8000ed0:	000b71b0 	.word	0x000b71b0
 8000ed4:	20001e4c 	.word	0x20001e4c
 8000ed8:	20001eb0 	.word	0x20001eb0
 8000edc:	20001dac 	.word	0x20001dac
 8000ee0:	20001e54 	.word	0x20001e54
 8000ee4:	20001f0c 	.word	0x20001f0c
 8000ee8:	20001d58 	.word	0x20001d58
			  }
			  else if(spin==1)
 8000eec:	4b5e      	ldr	r3, [pc, #376]	; (8001068 <StartTask02+0x4b0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d146      	bne.n	8000f82 <StartTask02+0x3ca>
			  {

				  spin_length=(rxbuf[k]) + (rxbuf[k+1]<<8);
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	; (800106c <StartTask02+0x4b4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a5d      	ldr	r2, [pc, #372]	; (8001070 <StartTask02+0x4b8>)
 8000efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efe:	4b5b      	ldr	r3, [pc, #364]	; (800106c <StartTask02+0x4b4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	495a      	ldr	r1, [pc, #360]	; (8001070 <StartTask02+0x4b8>)
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	4413      	add	r3, r2
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <StartTask02+0x4bc>)
 8000f12:	601a      	str	r2, [r3, #0]
				  xPul=spin_length;
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <StartTask02+0x4bc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <StartTask02+0x4c0>)
 8000f1a:	6013      	str	r3, [r2, #0]
				  xSpeed = 50U;
 8000f1c:	4b57      	ldr	r3, [pc, #348]	; (800107c <StartTask02+0x4c4>)
 8000f1e:	2232      	movs	r2, #50	; 0x32
 8000f20:	701a      	strb	r2, [r3, #0]
				  opbuff[0]=0x22;
 8000f22:	2322      	movs	r3, #34	; 0x22
 8000f24:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x66;
 8000f26:	2366      	movs	r3, #102	; 0x66
 8000f28:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x03;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	73bb      	strb	r3, [r7, #14]
				  opbuff[3]=rxbuf[k]; opbuff[4]=rxbuf[k+1]; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	; (800106c <StartTask02+0x4b4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <StartTask02+0x4b8>)
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	4b4b      	ldr	r3, [pc, #300]	; (800106c <StartTask02+0x4b4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <StartTask02+0x4b8>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	743b      	strb	r3, [r7, #16]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	747b      	strb	r3, [r7, #17]
 8000f50:	2300      	movs	r3, #0
 8000f52:	74bb      	strb	r3, [r7, #18]
 8000f54:	2300      	movs	r3, #0
 8000f56:	74fb      	strb	r3, [r7, #19]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2106      	movs	r1, #6
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f936 	bl	80001d0 <CRCcalc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	82fb      	strh	r3, [r7, #22]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f72:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 fe2a 	bl	800abd4 <CDC_Transmit_FS>
 8000f80:	e049      	b.n	8001016 <StartTask02+0x45e>

			  }
			  else if (solder_push==1)
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <StartTask02+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d145      	bne.n	8001016 <StartTask02+0x45e>
			  {

				 push_length= (	((rxbuf[k+1])<<8) 	+	(rxbuf[k]) 	) ;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <StartTask02+0x4b4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a37      	ldr	r2, [pc, #220]	; (8001070 <StartTask02+0x4b8>)
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	021a      	lsls	r2, r3, #8
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <StartTask02+0x4b4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4934      	ldr	r1, [pc, #208]	; (8001070 <StartTask02+0x4b8>)
 8000f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <StartTask02+0x4cc>)
 8000fa8:	601a      	str	r2, [r3, #0]
				  yPul=push_length;
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <StartTask02+0x4cc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a36      	ldr	r2, [pc, #216]	; (8001088 <StartTask02+0x4d0>)
 8000fb0:	6013      	str	r3, [r2, #0]
				  ySpeed = 50U;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <StartTask02+0x4d4>)
 8000fb4:	2232      	movs	r2, #50	; 0x32
 8000fb6:	701a      	strb	r2, [r3, #0]
				  opbuff[0]=0x22;
 8000fb8:	2322      	movs	r3, #34	; 0x22
 8000fba:	733b      	strb	r3, [r7, #12]
				  opbuff[1]=0x66;
 8000fbc:	2366      	movs	r3, #102	; 0x66
 8000fbe:	737b      	strb	r3, [r7, #13]
				  opbuff[2]=0x04;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	73bb      	strb	r3, [r7, #14]
				  opbuff[3]=rxbuf[k]; opbuff[4]=rxbuf[k+1]; opbuff[5]=0x00; opbuff[6]=0x00; opbuff[7]=0x00;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <StartTask02+0x4b4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <StartTask02+0x4b8>)
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <StartTask02+0x4b4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a25      	ldr	r2, [pc, #148]	; (8001070 <StartTask02+0x4b8>)
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	743b      	strb	r3, [r7, #16]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	747b      	strb	r3, [r7, #17]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	74bb      	strb	r3, [r7, #18]
 8000fea:	2300      	movs	r3, #0
 8000fec:	74fb      	strb	r3, [r7, #19]
				  unsigned short crc= CRCcalc(opbuff,6);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8eb 	bl	80001d0 <CRCcalc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	833b      	strh	r3, [r7, #24]
				 *(int16_t*)&(opbuff[6]) = crc;
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	3306      	adds	r3, #6
 8001004:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001008:	801a      	strh	r2, [r3, #0]
				  CDC_Transmit_FS(&opbuff[0], 8);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2108      	movs	r1, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f009 fddf 	bl	800abd4 <CDC_Transmit_FS>
			  }
			  rec_state=CRC8;
 8001016:	2304      	movs	r3, #4
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
			  break;
 800101a:	e016      	b.n	800104a <StartTask02+0x492>
		  case CRC8:
			  grating_scale_1=0;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <StartTask02+0x4d8>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
			  grating_scale_2=0;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <StartTask02+0x4dc>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
			  PGsend=0;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <StartTask02+0x4e0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
			  read=0;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
			  control=0;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
			  spin=0;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <StartTask02+0x4b0>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
			  solder_push=0;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <StartTask02+0x4c8>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

			  rec_state=START;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
			  break;
 8001046:	e000      	b.n	800104a <StartTask02+0x492>
			  break;
 8001048:	bf00      	nop
		  }
	  k++;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <StartTask02+0x4b4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <StartTask02+0x4b4>)
 8001052:	6013      	str	r3, [r2, #0]
	  while (k < 16)
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <StartTask02+0x4b4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	f67f adc4 	bls.w	8000be6 <StartTask02+0x2e>
	  }


    osDelay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f007 f830 	bl	80080c4 <osDelay>
	  tim2Cnt=__HAL_TIM_GET_COUNTER(&htim2);
 8001064:	e5ae      	b.n	8000bc4 <StartTask02+0xc>
 8001066:	bf00      	nop
 8001068:	200001c8 	.word	0x200001c8
 800106c:	20000000 	.word	0x20000000
 8001070:	20001cd4 	.word	0x20001cd4
 8001074:	200001d4 	.word	0x200001d4
 8001078:	20001f10 	.word	0x20001f10
 800107c:	20001f14 	.word	0x20001f14
 8001080:	200001cc 	.word	0x200001cc
 8001084:	200001d0 	.word	0x200001d0
 8001088:	20001f18 	.word	0x20001f18
 800108c:	20001f1c 	.word	0x20001f1c
 8001090:	200001d8 	.word	0x200001d8
 8001094:	200001dc 	.word	0x200001dc
 8001098:	20001ebc 	.word	0x20001ebc

0800109c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f007 f80d 	bl	80080c4 <osDelay>
 80010aa:	e7fb      	b.n	80010a4 <StartTask03+0x8>

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_MspInit+0x4c>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_MspInit+0x4c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_MspInit+0x4c>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_MspInit+0x4c>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_MspInit+0x4c>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	210f      	movs	r1, #15
 80010f2:	f06f 0001 	mvn.w	r0, #1
 80010f6:	f000 fc0a 	bl	800190e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <HAL_TIM_Base_MspInit+0x64>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d123      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_TIM_Base_MspInit+0x68>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2018      	movs	r0, #24
 8001138:	f000 fbe9 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800113c:	2018      	movs	r0, #24
 800113e:	f000 fc02 	bl	8001946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	2019      	movs	r0, #25
 8001148:	f000 fbe1 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800114c:	2019      	movs	r0, #25
 800114e:	f000 fbfa 	bl	8001946 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2105      	movs	r1, #5
 8001156:	201a      	movs	r0, #26
 8001158:	f000 fbd9 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800115c:	201a      	movs	r0, #26
 800115e:	f000 fbf2 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012c00 	.word	0x40012c00
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b090      	sub	sp, #64	; 0x40
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001194:	d14d      	bne.n	8001232 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	4b6e      	ldr	r3, [pc, #440]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6593      	str	r3, [r2, #88]	; 0x58
 80011a2:	4b6b      	ldr	r3, [pc, #428]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b68      	ldr	r3, [pc, #416]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a67      	ldr	r2, [pc, #412]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b65      	ldr	r3, [pc, #404]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b62      	ldr	r3, [pc, #392]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a61      	ldr	r2, [pc, #388]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	623b      	str	r3, [r7, #32]
 80011dc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011de:	2320      	movs	r3, #32
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ee:	2301      	movs	r3, #1
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f000 fbbe 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001200:	2308      	movs	r3, #8
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001210:	2301      	movs	r3, #1
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	484e      	ldr	r0, [pc, #312]	; (8001354 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800121c:	f000 fbae 	bl	800197c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2105      	movs	r1, #5
 8001224:	201c      	movs	r0, #28
 8001226:	f000 fb72 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800122a:	201c      	movs	r0, #28
 800122c:	f000 fb8b 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001230:	e089      	b.n	8001346 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a48      	ldr	r2, [pc, #288]	; (8001358 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d128      	bne.n	800128e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123c:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800126c:	2318      	movs	r3, #24
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127c:	2302      	movs	r3, #2
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4835      	ldr	r0, [pc, #212]	; (800135c <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001288:	f000 fb78 	bl	800197c <HAL_GPIO_Init>
}
 800128c:	e05b      	b.n	8001346 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM5)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d129      	bne.n	80012ec <HAL_TIM_Encoder_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6593      	str	r3, [r2, #88]	; 0x58
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c8:	2303      	movs	r3, #3
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012d8:	2302      	movs	r3, #2
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 fb49 	bl	800197c <HAL_GPIO_Init>
}
 80012ea:	e02c      	b.n	8001346 <HAL_TIM_Encoder_MspInit+0x1d2>
  else if(htim_encoder->Instance==TIM8)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d127      	bne.n	8001346 <HAL_TIM_Encoder_MspInit+0x1d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80012fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_TIM_Encoder_MspInit+0x1dc>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001326:	23c0      	movs	r3, #192	; 0xc0
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001336:	2303      	movs	r3, #3
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001342:	f000 fb1b 	bl	800197c <HAL_GPIO_Init>
}
 8001346:	bf00      	nop
 8001348:	3740      	adds	r7, #64	; 0x40
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	48000400 	.word	0x48000400
 8001358:	40000400 	.word	0x40000400
 800135c:	48001000 	.word	0x48001000
 8001360:	40000c00 	.word	0x40000c00
 8001364:	40013400 	.word	0x40013400
 8001368:	48000800 	.word	0x48000800

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f998 	bl	80016d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013a0:	f008 fa9e 	bl	80098e0 <xTaskGetSchedulerState>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d001      	beq.n	80013ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013aa:	f009 f885 	bl	800a4b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80013ba:	f003 fa97 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20001e64 	.word	0x20001e64

080013c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013cc:	483c      	ldr	r0, [pc, #240]	; (80014c0 <TIM1_UP_TIM16_IRQHandler+0xf8>)
 80013ce:	f003 fa8d 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
    static int xcnt = 0;
      static int ycnt = 0;

      if (xSpeed>1 && ((xcnt %xSpeed) == 0)) {
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d930      	bls.n	800143c <TIM1_UP_TIM16_IRQHandler+0x74>
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <TIM1_UP_TIM16_IRQHandler+0x100>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <TIM1_UP_TIM16_IRQHandler+0xfc>)
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80013e6:	fb02 f201 	mul.w	r2, r2, r1
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d125      	bne.n	800143c <TIM1_UP_TIM16_IRQHandler+0x74>
    	  if(spin_length!=0) {
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d021      	beq.n	800143c <TIM1_UP_TIM16_IRQHandler+0x74>
//    		  int i=0;
    	    if(spin_length>0) {
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd0a      	ble.n	8001416 <TIM1_UP_TIM16_IRQHandler+0x4e>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	4832      	ldr	r0, [pc, #200]	; (80014d0 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8001406:	f000 fc7b 	bl	8001d00 <HAL_GPIO_WritePin>
            spin_length--;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e00d      	b.n	8001432 <TIM1_UP_TIM16_IRQHandler+0x6a>
          }
    	    else if(spin_length<0) {
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da09      	bge.n	8001432 <TIM1_UP_TIM16_IRQHandler+0x6a>
            HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2104      	movs	r1, #4
 8001422:	482b      	ldr	r0, [pc, #172]	; (80014d0 <TIM1_UP_TIM16_IRQHandler+0x108>)
 8001424:	f000 fc6c 	bl	8001d00 <HAL_GPIO_WritePin>
           spin_length++;
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <TIM1_UP_TIM16_IRQHandler+0x104>)
 8001430:	6013      	str	r3, [r2, #0]
          }
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
    	    HAL_GPIO_TogglePin(XCLK_GPIO_Port, XCLK_Pin);
 8001432:	2104      	movs	r1, #4
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f000 fc7a 	bl	8001d30 <HAL_GPIO_TogglePin>
    	  }
    	  else {
    	  //  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
    	  }
      }
      xcnt++;
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <TIM1_UP_TIM16_IRQHandler+0x100>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <TIM1_UP_TIM16_IRQHandler+0x100>)
 8001444:	6013      	str	r3, [r2, #0]
      if (ySpeed>1 && ((ycnt %ySpeed) == 0)) {
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d931      	bls.n	80014b2 <TIM1_UP_TIM16_IRQHandler+0xea>
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x110>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a20      	ldr	r2, [pc, #128]	; (80014d4 <TIM1_UP_TIM16_IRQHandler+0x10c>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	fb93 f1f2 	sdiv	r1, r3, r2
 800145a:	fb02 f201 	mul.w	r2, r2, r1
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d126      	bne.n	80014b2 <TIM1_UP_TIM16_IRQHandler+0xea>
     	  if(push_length!=0) {
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d022      	beq.n	80014b2 <TIM1_UP_TIM16_IRQHandler+0xea>
     		// int i=0;
     	    if(push_length>0) {
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd0b      	ble.n	800148c <TIM1_UP_TIM16_IRQHandler+0xc4>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147a:	4819      	ldr	r0, [pc, #100]	; (80014e0 <TIM1_UP_TIM16_IRQHandler+0x118>)
 800147c:	f000 fc40 	bl	8001d00 <HAL_GPIO_WritePin>
     	      push_length--;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00e      	b.n	80014aa <TIM1_UP_TIM16_IRQHandler+0xe2>
     	    }else if(yPul<0) {
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <TIM1_UP_TIM16_IRQHandler+0x11c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da0a      	bge.n	80014aa <TIM1_UP_TIM16_IRQHandler+0xe2>
     	      HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149a:	4811      	ldr	r0, [pc, #68]	; (80014e0 <TIM1_UP_TIM16_IRQHandler+0x118>)
 800149c:	f000 fc30 	bl	8001d00 <HAL_GPIO_WritePin>
     	      push_length++;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <TIM1_UP_TIM16_IRQHandler+0x114>)
 80014a8:	6013      	str	r3, [r2, #0]
     	    }
     	   // HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_RESET:GPIO_PIN_SET);
     		  HAL_GPIO_TogglePin(YCLK_GPIO_Port, YCLK_Pin);
 80014aa:	2101      	movs	r1, #1
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <TIM1_UP_TIM16_IRQHandler+0x120>)
 80014ae:	f000 fc3f 	bl	8001d30 <HAL_GPIO_TogglePin>
//				}
     	  }else {
     	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
     	  }
       }
       ycnt++;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x110>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <TIM1_UP_TIM16_IRQHandler+0x110>)
 80014ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20001e64 	.word	0x20001e64
 80014c4:	20001f14 	.word	0x20001f14
 80014c8:	200001e0 	.word	0x200001e0
 80014cc:	200001d4 	.word	0x200001d4
 80014d0:	48000400 	.word	0x48000400
 80014d4:	20001f1c 	.word	0x20001f1c
 80014d8:	200001e4 	.word	0x200001e4
 80014dc:	200001d0 	.word	0x200001d0
 80014e0:	48001000 	.word	0x48001000
 80014e4:	20001f18 	.word	0x20001f18
 80014e8:	48000c00 	.word	0x48000c00

080014ec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014f2:	f003 f9fb 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20001e64 	.word	0x20001e64

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f003 f9f1 	bl	80048ec <HAL_TIM_IRQHandler>
//   	    //HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, (lastMode>0)?GPIO_PIN_SET:GPIO_PIN_RESET);
//   	  }
//     }
//     ycnt++;
  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20001ec0 	.word	0x20001ec0

08001514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001518:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800151c:	f000 fc22 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001520:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001524:	f000 fc1e 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001528:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800152c:	f000 fc1a 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001530:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001534:	f000 fc16 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001538:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800153c:	f000 fc12 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <OTG_FS_IRQHandler+0x10>)
 800154a:	f000 fd96 	bl	800207a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20002e34 	.word	0x20002e34

08001558 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
//      highMode = 2;
//    else if (lastMode > 1)
//      highMode = 0;
//    lastMode = 2 - lastMode;
//  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SystemInit+0x5c>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <SystemInit+0x5c>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <SystemInit+0x60>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <SystemInit+0x60>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <SystemInit+0x60>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <SystemInit+0x60>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <SystemInit+0x60>)
 800159c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <SystemInit+0x60>)
 80015a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <SystemInit+0x60>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <SystemInit+0x60>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SystemInit+0x60>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	40021000 	.word	0x40021000

080015d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d8:	f7ff ffca 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
	ldr	r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopForever+0x12>)
	b	LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LoopForever+0x16>)
	cmp	r2, r3
 80015fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001602:	f00a f859 	bl	800b6b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001606:	f7fe fe19 	bl	800023c <main>

0800160a <LoopForever>:

LoopForever:
    b LoopForever
 800160a:	e7fe      	b.n	800160a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800160c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001610:	0800b87c 	.word	0x0800b87c
	ldr	r0, =_sdata
 8001614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001618:	200001a4 	.word	0x200001a4
	ldr	r2, =_sbss
 800161c:	200001a4 	.word	0x200001a4
	ldr	r3, = _ebss
 8001620:	2000323c 	.word	0x2000323c

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>

08001626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f961 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f80e 	bl	8001658 <HAL_InitTick>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	e001      	b.n	800164c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001648:	f7ff fd36 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800164c:	79fb      	ldrb	r3, [r7, #7]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_InitTick+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_InitTick+0x70>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_InitTick+0x6c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f96d 	bl	8001962 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d809      	bhi.n	80016a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f937 	bl	800190e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e004      	b.n	80016b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e001      	b.n	80016b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000010 	.word	0x20000010
 80016c8:	20000008 	.word	0x20000008
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000010 	.word	0x20000010
 80016f4:	20001f20 	.word	0x20001f20

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20001f20 	.word	0x20001f20

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000010 	.word	0x20000010

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e17f      	b.n	8001c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8171 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d118      	bne.n	8001a64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x128>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	6939      	ldr	r1, [r7, #16]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ac 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd0:	4937      	ldr	r1, [pc, #220]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae78 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48000c00 	.word	0x48000c00
 8001cc0:	48001000 	.word	0x48001000
 8001cc4:	48001400 	.word	0x48001400
 8001cc8:	48001800 	.word	0x48001800
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43d9      	mvns	r1, r3
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	400b      	ands	r3, r1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fbe8 	bl	8001558 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4905      	ldr	r1, [pc, #20]	; (8001dd0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b08f      	sub	sp, #60	; 0x3c
 8001dd8:	af0a      	add	r7, sp, #40	; 0x28
 8001dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e116      	b.n	8002014 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f009 f841 	bl	800ae88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fa48 	bl	80052ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	687e      	ldr	r6, [r7, #4]
 8001e32:	466d      	mov	r5, sp
 8001e34:	f106 0410 	add.w	r4, r6, #16
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e48:	1d33      	adds	r3, r6, #4
 8001e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f003 f95b 	bl	8005108 <USB_CoreInit>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0d7      	b.n	8002014 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fa36 	bl	80052dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e04a      	b.n	8001f0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	333d      	adds	r3, #61	; 0x3d
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	333c      	adds	r3, #60	; 0x3c
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	b298      	uxth	r0, r3
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3342      	adds	r3, #66	; 0x42
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333f      	adds	r3, #63	; 0x3f
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3344      	adds	r3, #68	; 0x44
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	3348      	adds	r3, #72	; 0x48
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3350      	adds	r3, #80	; 0x50
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3af      	bcc.n	8001e76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e044      	b.n	8001fa6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3b5      	bcc.n	8001f1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	687e      	ldr	r6, [r7, #4]
 8001fb8:	466d      	mov	r5, sp
 8001fba:	f106 0410 	add.w	r4, r6, #16
 8001fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fce:	1d33      	adds	r3, r6, #4
 8001fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	f003 f9ac 	bl	8005330 <USB_DevInit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e014      	b.n	8002014 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 ff62 	bl	8002ecc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f004 f92e 	bl	800626e <USB_DevDisconnect>

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_PCD_Start+0x1c>
 8002034:	2302      	movs	r3, #2
 8002036:	e01c      	b.n	8002072 <HAL_PCD_Start+0x56>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f91d 	bl	8005298 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f8e2 	bl	800622c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800207a:	b590      	push	{r4, r7, lr}
 800207c:	b08d      	sub	sp, #52	; 0x34
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f9a0 	bl	80063d6 <USB_GetMode>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 838f 	bne.w	80027bc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f904 	bl	80062b0 <USB_ReadInterrupts>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8385 	beq.w	80027ba <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 f8fb 	bl	80062b0 <USB_ReadInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d107      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f002 0202 	and.w	r2, r2, #2
 80020d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f8e9 	bl	80062b0 <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d161      	bne.n	80021ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0210 	bic.w	r2, r2, #16
 80020f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 020f 	and.w	r2, r3, #15
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	0c5b      	lsrs	r3, r3, #17
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	2b02      	cmp	r3, #2
 8002122:	d124      	bne.n	800216e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d035      	beq.n	800219c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800213a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	6a38      	ldr	r0, [r7, #32]
 8002144:	f003 ff4f 	bl	8005fe6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002154:	441a      	add	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002166:	441a      	add	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	619a      	str	r2, [r3, #24]
 800216c:	e016      	b.n	800219c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	0c5b      	lsrs	r3, r3, #17
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	2b06      	cmp	r3, #6
 8002178:	d110      	bne.n	800219c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002180:	2208      	movs	r2, #8
 8002182:	4619      	mov	r1, r3
 8002184:	6a38      	ldr	r0, [r7, #32]
 8002186:	f003 ff2e 	bl	8005fe6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002196:	441a      	add	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0210 	orr.w	r2, r2, #16
 80021aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 f87d 	bl	80062b0 <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c0:	d16e      	bne.n	80022a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 f883 	bl	80062d6 <USB_ReadDevAllOutEpInterrupt>
 80021d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021d2:	e062      	b.n	800229a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d057      	beq.n	800228e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f8a8 	bl	800633e <USB_ReadDevOutEPInterrupt>
 80021ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2301      	movs	r3, #1
 800220a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800220c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fd82 	bl	8002d18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	2308      	movs	r3, #8
 800222e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fdbe 	bl	8002db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224e:	461a      	mov	r2, r3
 8002250:	2310      	movs	r3, #16
 8002252:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226a:	461a      	mov	r2, r3
 800226c:	2320      	movs	r3, #32
 800226e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002286:	461a      	mov	r2, r3
 8002288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d199      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 f803 	bl	80062b0 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022b4:	f040 8087 	bne.w	80023c6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f824 	bl	800630a <USB_ReadDevAllInEpInterrupt>
 80022c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022c8:	e07a      	b.n	80023c0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d06f      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 f84b 	bl	800637a <USB_ReadDevInEPInterrupt>
 80022e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	2201      	movs	r2, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	69f9      	ldr	r1, [r7, #28]
 800230c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002310:	4013      	ands	r3, r2
 8002312:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002320:	461a      	mov	r2, r3
 8002322:	2301      	movs	r3, #1
 8002324:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f008 fe3e 	bl	800afae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002348:	461a      	mov	r2, r3
 800234a:	2308      	movs	r3, #8
 800234c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002364:	461a      	mov	r2, r3
 8002366:	2310      	movs	r3, #16
 8002368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002380:	461a      	mov	r2, r3
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239c:	461a      	mov	r2, r3
 800239e:	2302      	movs	r3, #2
 80023a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fc29 	bl	8002c06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	3301      	adds	r3, #1
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d181      	bne.n	80022ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 ff70 	bl	80062b0 <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023da:	d122      	bne.n	8002422 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002402:	2100      	movs	r1, #0
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f009 f8eb 	bl	800b5e0 <HAL_PCDEx_LPM_Callback>
 800240a:	e002      	b.n	8002412 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f008 fe3b 	bl	800b088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 ff42 	bl	80062b0 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002436:	d112      	bne.n	800245e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d102      	bne.n	800244e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f008 fdf7 	bl	800b03c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800245c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ff24 	bl	80062b0 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002472:	d121      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002482:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d111      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	f003 020f 	and.w	r2, r3, #15
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024a8:	2101      	movs	r1, #1
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f009 f898 	bl	800b5e0 <HAL_PCDEx_LPM_Callback>
 80024b0:	e002      	b.n	80024b8 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f008 fdc2 	bl	800b03c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fef7 	bl	80062b0 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	f040 80c5 	bne.w	800265a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2110      	movs	r1, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f86c 	bl	80055c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f4:	e056      	b.n	80025a4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002502:	461a      	mov	r2, r3
 8002504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002508:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	0151      	lsls	r1, r2, #5
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	440a      	add	r2, r1
 8002520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002528:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253a:	0151      	lsls	r1, r2, #5
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	440a      	add	r2, r1
 8002540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002544:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002548:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002556:	461a      	mov	r2, r3
 8002558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800255c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256e:	0151      	lsls	r1, r2, #5
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	440a      	add	r2, r1
 8002574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002578:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800257c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258e:	0151      	lsls	r1, r2, #5
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	440a      	add	r2, r1
 8002594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800259c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	3301      	adds	r3, #1
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3a3      	bcc.n	80024f6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025da:	f043 030b 	orr.w	r3, r3, #11
 80025de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f0:	f043 030b 	orr.w	r3, r3, #11
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	e015      	b.n	8002624 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800260a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800260e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261e:	f043 030b 	orr.w	r3, r3, #11
 8002622:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002632:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002636:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f003 fef7 	bl	8006438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fe26 	bl	80062b0 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	d124      	bne.n	80026ba <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 febc 	bl	80063f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f803 	bl	800568a <USB_GetDevSpeed>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681c      	ldr	r4, [r3, #0]
 8002690:	f001 fa08 	bl	8003aa4 <HAL_RCC_GetHCLKFreq>
 8002694:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	4620      	mov	r0, r4
 80026a0:	f002 fd5e 	bl	8005160 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f008 fcaa 	bl	800affe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fdf6 	bl	80062b0 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d10a      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f008 fc87 	bl	800afe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f002 0208 	and.w	r2, r2, #8
 80026e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 fde1 	bl	80062b0 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f8:	d10f      	bne.n	800271a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	b2db      	uxtb	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f008 fcf9 	bl	800b0fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fdc6 	bl	80062b0 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800272e:	d10f      	bne.n	8002750 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f008 fccc 	bl	800b0d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800274e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fdab 	bl	80062b0 <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d10a      	bne.n	800277c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f008 fcda 	bl	800b120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800277a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fd95 	bl	80062b0 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d115      	bne.n	80027bc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f008 fcca 	bl	800b13c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	e000      	b.n	80027bc <HAL_PCD_IRQHandler+0x742>
      return;
 80027ba:	bf00      	nop
    }
  }
}
 80027bc:	3734      	adds	r7, #52	; 0x34
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_PCD_SetAddress+0x1a>
 80027d8:	2302      	movs	r3, #2
 80027da:	e013      	b.n	8002804 <HAL_PCD_SetAddress+0x42>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fcf3 	bl	80061e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	70fb      	strb	r3, [r7, #3]
 800281e:	460b      	mov	r3, r1
 8002820:	803b      	strh	r3, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0f      	bge.n	8002852 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3338      	adds	r3, #56	; 0x38
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	705a      	strb	r2, [r3, #1]
 8002850:	e00f      	b.n	8002872 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800287e:	883a      	ldrh	r2, [r7, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	78ba      	ldrb	r2, [r7, #2]
 8002888:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800289c:	78bb      	ldrb	r3, [r7, #2]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d102      	bne.n	80028a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_EP_Open+0xaa>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e00e      	b.n	80028d4 <HAL_PCD_EP_Open+0xc8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 feff 	bl	80056c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028d2:	7afb      	ldrb	r3, [r7, #11]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da0f      	bge.n	8002910 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3338      	adds	r3, #56	; 0x38
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	705a      	strb	r2, [r3, #1]
 800290e:	e00f      	b.n	8002930 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 020f 	and.w	r2, r3, #15
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_PCD_EP_Close+0x6e>
 8002946:	2302      	movs	r3, #2
 8002948:	e00e      	b.n	8002968 <HAL_PCD_EP_Close+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	4618      	mov	r0, r3
 800295a:	f002 ff3d 	bl	80057d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002980:	7afb      	ldrb	r3, [r7, #11]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 f9ba 	bl	8005d48 <USB_EP0StartXfer>
 80029d4:	e005      	b.n	80029e2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 ffd7 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	7afb      	ldrb	r3, [r7, #11]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3338      	adds	r3, #56	; 0x38
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6979      	ldr	r1, [r7, #20]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f965 	bl	8005d48 <USB_EP0StartXfer>
 8002a7e:	e005      	b.n	8002a8c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 ff82 	bl	8005990 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d901      	bls.n	8002ab4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04e      	b.n	8002b52 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da0f      	bge.n	8002adc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3338      	adds	r3, #56	; 0x38
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	705a      	strb	r2, [r3, #1]
 8002ada:	e00d      	b.n	8002af8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_EP_SetStall+0x82>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e01c      	b.n	8002b52 <HAL_PCD_EP_SetStall+0xbc>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fa86 	bl	8006038 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d108      	bne.n	8002b48 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f003 fc78 	bl	8006438 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d901      	bls.n	8002b78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e042      	b.n	8002bfe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0f      	bge.n	8002ba0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	3338      	adds	r3, #56	; 0x38
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	705a      	strb	r2, [r3, #1]
 8002b9e:	e00f      	b.n	8002bc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_PCD_EP_ClrStall+0x86>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e00e      	b.n	8002bfe <HAL_PCD_EP_ClrStall+0xa4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fa90 	bl	8006114 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b088      	sub	sp, #32
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	3338      	adds	r3, #56	; 0x38
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d901      	bls.n	8002c3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d902      	bls.n	8002c5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c62:	e026      	b.n	8002cb2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d902      	bls.n	8002c80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3303      	adds	r3, #3
 8002c84:	089b      	lsrs	r3, r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68d9      	ldr	r1, [r3, #12]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	6978      	ldr	r0, [r7, #20]
 8002c96:	f003 f975 	bl	8005f84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	441a      	add	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d809      	bhi.n	8002cdc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d203      	bcs.n	8002cdc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1c3      	bne.n	8002c64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d811      	bhi.n	8002d0c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	2201      	movs	r2, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	6939      	ldr	r1, [r7, #16]
 8002d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d08:	4013      	ands	r3, r2
 8002d0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	333c      	adds	r3, #60	; 0x3c
 8002d30:	3304      	adds	r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <PCD_EP_OutXfrComplete_int+0x98>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d124      	bne.n	8002d98 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	e01a      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d84:	461a      	mov	r2, r3
 8002d86:	2320      	movs	r3, #32
 8002d88:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f008 f8f1 	bl	800af78 <HAL_PCD_DataOutStageCallback>
 8002d96:	e005      	b.n	8002da4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f008 f8ea 	bl	800af78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	4f54310a 	.word	0x4f54310a

08002db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	333c      	adds	r3, #60	; 0x3c
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <PCD_EP_OutSetupPacket_int+0x64>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d90e      	bls.n	8002e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f008 f8a3 	bl	800af54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	4f54300a 	.word	0x4f54300a

08002e1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e3a:	883b      	ldrh	r3, [r7, #0]
 8002e3c:	0419      	lsls	r1, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
 8002e48:	e028      	b.n	8002e9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4413      	add	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e00d      	b.n	8002e7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3340      	adds	r3, #64	; 0x40
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	4413      	add	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	3301      	adds	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d3ec      	bcc.n	8002e5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e84:	883b      	ldrh	r3, [r7, #0]
 8002e86:	0418      	lsls	r0, r3, #16
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	4302      	orrs	r2, r0
 8002e94:	3340      	adds	r3, #64	; 0x40
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	f043 0303 	orr.w	r3, r3, #3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_PWREx_GetVoltageRange+0x18>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40007000 	.word	0x40007000

08002f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3e:	d130      	bne.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d038      	beq.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2232      	movs	r2, #50	; 0x32
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	4a1b      	ldr	r2, [pc, #108]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9b      	lsrs	r3, r3, #18
 8002f70:	3301      	adds	r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f74:	e002      	b.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f88:	d102      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f2      	bne.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d110      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d007      	beq.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb8:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fea:	6053      	str	r3, [r2, #4]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e3d4      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300e:	4ba1      	ldr	r3, [pc, #644]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80e4 	beq.w	80031f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_RCC_OscConfig+0x4a>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b0c      	cmp	r3, #12
 800303a:	f040 808b 	bne.w	8003154 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 8087 	bne.w	8003154 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003046:	4b93      	ldr	r3, [pc, #588]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x62>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e3ac      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	4b8c      	ldr	r3, [pc, #560]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_RCC_OscConfig+0x7c>
 800306e:	4b89      	ldr	r3, [pc, #548]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003076:	e005      	b.n	8003084 <HAL_RCC_OscConfig+0x88>
 8003078:	4b86      	ldr	r3, [pc, #536]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	4293      	cmp	r3, r2
 8003086:	d223      	bcs.n	80030d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fd15 	bl	8003abc <RCC_SetFlashLatencyFromMSIRange>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e38d      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309c:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4977      	ldr	r1, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4972      	ldr	r1, [pc, #456]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
 80030ce:	e025      	b.n	800311c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d0:	4b70      	ldr	r3, [pc, #448]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6f      	ldr	r2, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	496a      	ldr	r1, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ee:	4b69      	ldr	r3, [pc, #420]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fcd5 	bl	8003abc <RCC_SetFlashLatencyFromMSIRange>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e34d      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311c:	f000 fc36 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	495a      	ldr	r1, [pc, #360]	; (8003298 <HAL_RCC_OscConfig+0x29c>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_OscConfig+0x2a0>)
 800313a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <HAL_RCC_OscConfig+0x2a4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fa89 	bl	8001658 <HAL_InitTick>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d052      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	e331      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d032      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003168:	f7fe fac6 	bl	80016f8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003170:	f7fe fac2 	bl	80016f8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e31a      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003182:	4b44      	ldr	r3, [pc, #272]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a40      	ldr	r2, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	493b      	ldr	r1, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	4936      	ldr	r1, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e01a      	b.n	80031f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a33      	ldr	r2, [pc, #204]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fa93 	bl	80016f8 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d6:	f7fe fa8f 	bl	80016f8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e2e7      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f0      	bne.n	80031d6 <HAL_RCC_OscConfig+0x1da>
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d074      	beq.n	80032ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x21a>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d10e      	bne.n	800322e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d10b      	bne.n	800322e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003216:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d064      	beq.n	80032ec <HAL_RCC_OscConfig+0x2f0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d160      	bne.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e2c4      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x24a>
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e01d      	b.n	8003282 <HAL_RCC_OscConfig+0x286>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x26e>
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x286>
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a06      	ldr	r2, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x298>)
 800327c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fa35 	bl	80016f8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003290:	e011      	b.n	80032b6 <HAL_RCC_OscConfig+0x2ba>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	0800b834 	.word	0x0800b834
 800329c:	20000008 	.word	0x20000008
 80032a0:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fa28 	bl	80016f8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e280      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	4baf      	ldr	r3, [pc, #700]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x2a8>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fa18 	bl	80016f8 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fa14 	bl	80016f8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e26c      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032de:	4ba5      	ldr	r3, [pc, #660]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x2d0>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d060      	beq.n	80033bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d005      	beq.n	800330c <HAL_RCC_OscConfig+0x310>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d119      	bne.n	800333a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d116      	bne.n	800333a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800330c:	4b99      	ldr	r3, [pc, #612]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x328>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e249      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b93      	ldr	r3, [pc, #588]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	061b      	lsls	r3, r3, #24
 8003332:	4990      	ldr	r1, [pc, #576]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	e040      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d023      	beq.n	800338a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003342:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a8b      	ldr	r2, [pc, #556]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe f9d3 	bl	80016f8 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003356:	f7fe f9cf 	bl	80016f8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e227      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003368:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b7f      	ldr	r3, [pc, #508]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	497c      	ldr	r1, [pc, #496]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
 8003388:	e018      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b7a      	ldr	r3, [pc, #488]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a79      	ldr	r2, [pc, #484]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fe f9af 	bl	80016f8 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7fe f9ab 	bl	80016f8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e203      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d03c      	beq.n	8003442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01c      	beq.n	800340a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80033d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d6:	4a67      	ldr	r2, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe f98a 	bl	80016f8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe f986 	bl	80016f8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1de      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fa:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80033fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ef      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3ec>
 8003408:	e01b      	b.n	8003442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b5a      	ldr	r3, [pc, #360]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 800340c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003410:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7fe f96d 	bl	80016f8 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003422:	f7fe f969 	bl	80016f8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e1c1      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ef      	bne.n	8003422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80a6 	beq.w	800359c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003450:	2300      	movs	r3, #0
 8003452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003454:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10d      	bne.n	800347c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003460:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	4a43      	ldr	r2, [pc, #268]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	; 0x58
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003478:	2301      	movs	r3, #1
 800347a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347c:	4b3e      	ldr	r3, [pc, #248]	; (8003578 <HAL_RCC_OscConfig+0x57c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d118      	bne.n	80034ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_OscConfig+0x57c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_RCC_OscConfig+0x57c>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003494:	f7fe f930 	bl	80016f8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fe f92c 	bl	80016f8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e184      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x57c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4d8>
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d2:	e024      	b.n	800351e <HAL_RCC_OscConfig+0x522>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d110      	bne.n	80034fe <HAL_RCC_OscConfig+0x502>
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fc:	e00f      	b.n	800351e <HAL_RCC_OscConfig+0x522>
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003516:	f023 0304 	bic.w	r3, r3, #4
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe f8e7 	bl	80016f8 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe f8e3 	bl	80016f8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e139      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ed      	beq.n	800352e <HAL_RCC_OscConfig+0x532>
 8003552:	e01a      	b.n	800358a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe f8d0 	bl	80016f8 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800355a:	e00f      	b.n	800357c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe f8cc 	bl	80016f8 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d906      	bls.n	800357c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e122      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	4b90      	ldr	r3, [pc, #576]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e8      	bne.n	800355c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358a:	7ffb      	ldrb	r3, [r7, #31]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b8b      	ldr	r3, [pc, #556]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4a8a      	ldr	r2, [pc, #552]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8108 	beq.w	80037b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	f040 80d0 	bne.w	8003750 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035b0:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d130      	bne.n	8003626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	3b01      	subs	r3, #1
 80035d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d127      	bne.n	8003626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11f      	bne.n	8003626 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f0:	2a07      	cmp	r2, #7
 80035f2:	bf14      	ite	ne
 80035f4:	2201      	movne	r2, #1
 80035f6:	2200      	moveq	r2, #0
 80035f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d113      	bne.n	8003626 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d109      	bne.n	8003626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	3b01      	subs	r3, #1
 8003620:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d06e      	beq.n	8003704 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	d069      	beq.n	8003700 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b7      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003648:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800364e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003654:	f7fe f850 	bl	80016f8 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe f84c 	bl	80016f8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0a4      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366e:	4b54      	ldr	r3, [pc, #336]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <HAL_RCC_OscConfig+0x7c8>)
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800368a:	3a01      	subs	r2, #1
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003694:	0212      	lsls	r2, r2, #8
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800369c:	0852      	lsrs	r2, r2, #1
 800369e:	3a01      	subs	r2, #1
 80036a0:	0552      	lsls	r2, r2, #21
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0652      	lsls	r2, r2, #25
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b4:	0912      	lsrs	r2, r2, #4
 80036b6:	0452      	lsls	r2, r2, #17
 80036b8:	430a      	orrs	r2, r1
 80036ba:	4941      	ldr	r1, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036c0:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3e      	ldr	r2, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036cc:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d8:	f7fe f80e 	bl	80016f8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe f80a 	bl	80016f8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e062      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036fe:	e05a      	b.n	80037b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e059      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d152      	bne.n	80037b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003728:	f7fd ffe6 	bl	80016f8 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd ffe2 	bl	80016f8 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e03a      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x734>
 800374e:	e032      	b.n	80037b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d02d      	beq.n	80037b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800375c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003760:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003774:	f023 0303 	bic.w	r3, r3, #3
 8003778:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 8003780:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd ffb5 	bl	80016f8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd ffb1 	bl	80016f8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e009      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x7c4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x796>
 80037b0:	e001      	b.n	80037b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	f99d808c 	.word	0xf99d808c

080037c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0c8      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	4961      	ldr	r1, [pc, #388]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b5f      	ldr	r3, [pc, #380]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b0      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d04c      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003820:	4b56      	ldr	r3, [pc, #344]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d121      	bne.n	8003870 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e09e      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d115      	bne.n	8003870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e092      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003850:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e086      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e07e      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003870:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	493f      	ldr	r1, [pc, #252]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003882:	f7fd ff39 	bl	80016f8 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388a:	f7fd ff35 	bl	80016f8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e066      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a0:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 020c 	and.w	r2, r3, #12
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d1eb      	bne.n	800388a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038be:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	492c      	ldr	r1, [pc, #176]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d210      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4924      	ldr	r1, [pc, #144]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_RCC_ClockConfig+0x1b0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e036      	b.n	800396e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4918      	ldr	r1, [pc, #96]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4910      	ldr	r1, [pc, #64]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800393e:	f000 f825 	bl	800398c <HAL_RCC_GetSysClockFreq>
 8003942:	4602      	mov	r2, r0
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_RCC_ClockConfig+0x1b4>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	490c      	ldr	r1, [pc, #48]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	5ccb      	ldrb	r3, [r1, r3]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fe78 	bl	8001658 <HAL_InitTick>
 8003968:	4603      	mov	r3, r0
 800396a:	72fb      	strb	r3, [r7, #11]

  return status;
 800396c:	7afb      	ldrb	r3, [r7, #11]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40022000 	.word	0x40022000
 800397c:	40021000 	.word	0x40021000
 8003980:	0800b834 	.word	0x0800b834
 8003984:	20000008 	.word	0x20000008
 8003988:	2000000c 	.word	0x2000000c

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a4:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d121      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d11e      	bne.n	80039fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c0:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e005      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039e8:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e004      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a10:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d134      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xac>
 8003a30:	e005      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a34:	617b      	str	r3, [r7, #20]
      break;
 8003a36:	e005      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a3a:	617b      	str	r3, [r7, #20]
      break;
 8003a3c:	e002      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	617b      	str	r3, [r7, #20]
      break;
 8003a42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	3301      	adds	r3, #1
 8003a50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	fb02 f203 	mul.w	r2, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	0e5b      	lsrs	r3, r3, #25
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	3301      	adds	r3, #1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a84:	69bb      	ldr	r3, [r7, #24]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	0800b844 	.word	0x0800b844
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	007a1200 	.word	0x007a1200

08003aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000008 	.word	0x20000008

08003abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ad4:	f7ff fa1e 	bl	8002f14 <HAL_PWREx_GetVoltageRange>
 8003ad8:	6178      	str	r0, [r7, #20]
 8003ada:	e014      	b.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff fa0e 	bl	8002f14 <HAL_PWREx_GetVoltageRange>
 8003af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0c:	d10b      	bne.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b80      	cmp	r3, #128	; 0x80
 8003b12:	d919      	bls.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2ba0      	cmp	r3, #160	; 0xa0
 8003b18:	d902      	bls.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e013      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b20:	2301      	movs	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	e010      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d902      	bls.n	8003b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	e00a      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d102      	bne.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b38:	2302      	movs	r3, #2
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e004      	b.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d101      	bne.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b44:	2301      	movs	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 0207 	bic.w	r2, r3, #7
 8003b50:	4909      	ldr	r1, [pc, #36]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40022000 	.word	0x40022000

08003b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b84:	2300      	movs	r3, #0
 8003b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b88:	2300      	movs	r3, #0
 8003b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d041      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ba2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bb2:	d81e      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc0:	4b86      	ldr	r3, [pc, #536]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a85      	ldr	r2, [pc, #532]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bcc:	e015      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fabb 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bde:	e00c      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3320      	adds	r3, #32
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fba6 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c00:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c0e:	4973      	ldr	r1, [pc, #460]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c16:	e001      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d041      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c30:	d02a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c36:	d824      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c42:	d81e      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c4e:	e018      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c50:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a61      	ldr	r2, [pc, #388]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5c:	e015      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa73 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c6e:	e00c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3320      	adds	r3, #32
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fb5e 	bl	8004338 <RCCEx_PLLSAI2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	74fb      	strb	r3, [r7, #19]
      break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c90:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ca6:	e001      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a0 	beq.w	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a3a      	ldr	r2, [pc, #232]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fcfc 	bl	80016f8 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fd fcf8 	bl	80016f8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	74fb      	strb	r3, [r7, #19]
        break;
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d15c      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d019      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d74:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7fd fcb7 	bl	80016f8 <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd fcb3 	bl	80016f8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d902      	bls.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	74fb      	strb	r3, [r7, #19]
            break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ec      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	4904      	ldr	r1, [pc, #16]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de8:	7c7b      	ldrb	r3, [r7, #17]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b9e      	ldr	r3, [pc, #632]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	4a9d      	ldr	r2, [pc, #628]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e06:	4b98      	ldr	r3, [pc, #608]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f023 0203 	bic.w	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	4994      	ldr	r1, [pc, #592]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 020c 	bic.w	r2, r3, #12
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	498c      	ldr	r1, [pc, #560]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4a:	4b87      	ldr	r3, [pc, #540]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4983      	ldr	r1, [pc, #524]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e6c:	4b7e      	ldr	r3, [pc, #504]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	497b      	ldr	r1, [pc, #492]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	4972      	ldr	r1, [pc, #456]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	496a      	ldr	r1, [pc, #424]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed2:	4b65      	ldr	r3, [pc, #404]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	4961      	ldr	r1, [pc, #388]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	4959      	ldr	r1, [pc, #356]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f16:	4b54      	ldr	r3, [pc, #336]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	4950      	ldr	r1, [pc, #320]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f38:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	4948      	ldr	r1, [pc, #288]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	493f      	ldr	r1, [pc, #252]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d028      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8a:	4937      	ldr	r1, [pc, #220]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b32      	ldr	r3, [pc, #200]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]
 8003fa8:	e011      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb2:	d10c      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f8c8 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d028      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	491f      	ldr	r1, [pc, #124]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004004:	60d3      	str	r3, [r2, #12]
 8004006:	e011      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004010:	d10c      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f899 	bl	8004150 <RCCEx_PLLSAI1_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004056:	d109      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a02      	ldr	r2, [pc, #8]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004062:	60d3      	str	r3, [r2, #12]
 8004064:	e014      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f867 	bl	8004150 <RCCEx_PLLSAI1_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	4928      	ldr	r1, [pc, #160]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f844 	bl	8004150 <RCCEx_PLLSAI1_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	74bb      	strb	r3, [r7, #18]
 80040d6:	e011      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3320      	adds	r3, #32
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f925 	bl	8004338 <RCCEx_PLLSAI2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004116:	490d      	ldr	r1, [pc, #52]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413a:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004142:	7cbb      	ldrb	r3, [r7, #18]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000

08004150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800415e:	4b75      	ldr	r3, [pc, #468]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d018      	beq.n	800419c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800416a:	4b72      	ldr	r3, [pc, #456]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0203 	and.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d10d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
       ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
       ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d047      	beq.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	e044      	b.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d018      	beq.n	80041d6 <RCCEx_PLLSAI1_Config+0x86>
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d825      	bhi.n	80041f4 <RCCEx_PLLSAI1_Config+0xa4>
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d002      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x62>
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d009      	beq.n	80041c4 <RCCEx_PLLSAI1_Config+0x74>
 80041b0:	e020      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041b2:	4b60      	ldr	r3, [pc, #384]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c2:	e01a      	b.n	80041fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041c4:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d4:	e013      	b.n	80041fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041d6:	4b57      	ldr	r3, [pc, #348]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041e2:	4b54      	ldr	r3, [pc, #336]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041f2:	e006      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e004      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004202:	bf00      	nop
    }

    if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	430b      	orrs	r3, r1
 8004220:	4944      	ldr	r1, [pc, #272]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d17d      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800422c:	4b41      	ldr	r3, [pc, #260]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a40      	ldr	r2, [pc, #256]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fd fa5e 	bl	80016f8 <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800423e:	e009      	b.n	8004254 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004240:	f7fd fa5a 	bl	80016f8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	73fb      	strb	r3, [r7, #15]
        break;
 8004252:	e005      	b.n	8004260 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004254:	4b37      	ldr	r3, [pc, #220]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d160      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	0912      	lsrs	r2, r2, #4
 8004284:	0452      	lsls	r2, r2, #17
 8004286:	430a      	orrs	r2, r1
 8004288:	492a      	ldr	r1, [pc, #168]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
 800428e:	e027      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d112      	bne.n	80042bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800429e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6892      	ldr	r2, [r2, #8]
 80042a6:	0211      	lsls	r1, r2, #8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6912      	ldr	r2, [r2, #16]
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0552      	lsls	r2, r2, #21
 80042b2:	430a      	orrs	r2, r1
 80042b4:	491f      	ldr	r1, [pc, #124]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
 80042ba:	e011      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6892      	ldr	r2, [r2, #8]
 80042cc:	0211      	lsls	r1, r2, #8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6952      	ldr	r2, [r2, #20]
 80042d2:	0852      	lsrs	r2, r2, #1
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0652      	lsls	r2, r2, #25
 80042d8:	430a      	orrs	r2, r1
 80042da:	4916      	ldr	r1, [pc, #88]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd fa04 	bl	80016f8 <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f4:	f7fd fa00 	bl	80016f8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
          break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ef      	beq.n	80042f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	4904      	ldr	r1, [pc, #16]	; (8004334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004352:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d10d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
       ||
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800436a:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
       ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d047      	beq.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e044      	b.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d018      	beq.n	80043be <RCCEx_PLLSAI2_Config+0x86>
 800438c:	2b03      	cmp	r3, #3
 800438e:	d825      	bhi.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
 8004390:	2b01      	cmp	r3, #1
 8004392:	d002      	beq.n	800439a <RCCEx_PLLSAI2_Config+0x62>
 8004394:	2b02      	cmp	r3, #2
 8004396:	d009      	beq.n	80043ac <RCCEx_PLLSAI2_Config+0x74>
 8004398:	e020      	b.n	80043dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043aa:	e01a      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ac:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d116      	bne.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043bc:	e013      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043da:	e006      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
      break;
 80043e0:	e004      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	430b      	orrs	r3, r1
 8004408:	4939      	ldr	r1, [pc, #228]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d167      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fd f96a 	bl	80016f8 <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004426:	e009      	b.n	800443c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004428:	f7fd f966 	bl	80016f8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d902      	bls.n	800443c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	73fb      	strb	r3, [r7, #15]
        break;
 800443a:	e005      	b.n	8004448 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800443c:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ef      	bne.n	8004428 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14a      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d111      	bne.n	8004478 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
 8004464:	0211      	lsls	r1, r2, #8
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	0912      	lsrs	r2, r2, #4
 800446c:	0452      	lsls	r2, r2, #17
 800446e:	430a      	orrs	r2, r1
 8004470:	491f      	ldr	r1, [pc, #124]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	614b      	str	r3, [r1, #20]
 8004476:	e011      	b.n	800449c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004478:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6912      	ldr	r2, [r2, #16]
 800448e:	0852      	lsrs	r2, r2, #1
 8004490:	3a01      	subs	r2, #1
 8004492:	0652      	lsls	r2, r2, #25
 8004494:	430a      	orrs	r2, r1
 8004496:	4916      	ldr	r1, [pc, #88]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fd f926 	bl	80016f8 <HAL_GetTick>
 80044ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ae:	e009      	b.n	80044c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b0:	f7fd f922 	bl	80016f8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	73fb      	strb	r3, [r7, #15]
          break;
 80044c2:	e005      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4904      	ldr	r1, [pc, #16]	; (80044f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e049      	b.n	800459a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fdf4 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 fbe8 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e04f      	b.n	800465c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a23      	ldr	r2, [pc, #140]	; (8004668 <HAL_TIM_Base_Start_IT+0xc4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01d      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d018      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_TIM_Base_Start_IT+0xc8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_TIM_Base_Start_IT+0xcc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_TIM_Base_Start_IT+0xd0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_TIM_Base_Start_IT+0xd4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIM_Base_Start_IT+0x76>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_TIM_Base_Start_IT+0xd8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d115      	bne.n	8004646 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <HAL_TIM_Base_Start_IT+0xdc>)
 8004622:	4013      	ands	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b06      	cmp	r3, #6
 800462a:	d015      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0xb4>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d011      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004644:	e008      	b.n	8004658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e000      	b.n	800465a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	00010007 	.word	0x00010007

08004684 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e097      	b.n	80047c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc fd61 	bl	8001174 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f000 fb15 	bl	8004d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	4313      	orrs	r3, r2
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004724:	f023 030c 	bic.w	r3, r3, #12
 8004728:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	4313      	orrs	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	4313      	orrs	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4313      	orrs	r3, r2
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d110      	bne.n	8004822 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004806:	7b7b      	ldrb	r3, [r7, #13]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e069      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004820:	e031      	b.n	8004886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d110      	bne.n	800484a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004828:	7bbb      	ldrb	r3, [r7, #14]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800482e:	7b3b      	ldrb	r3, [r7, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e055      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004848:	e01d      	b.n	8004886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d108      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004856:	7b7b      	ldrb	r3, [r7, #13]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d102      	bne.n	8004862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800485c:	7b3b      	ldrb	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d001      	beq.n	8004866 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e03e      	b.n	80048e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_TIM_Encoder_Start+0xc4>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d008      	beq.n	80048a4 <HAL_TIM_Encoder_Start+0xd4>
 8004892:	e00f      	b.n	80048b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb67 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 80048a2:	e016      	b.n	80048d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	2104      	movs	r1, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fb5f 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 80048b2:	e00e      	b.n	80048d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fb57 	bl	8004f70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	2104      	movs	r1, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb50 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 80048d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0202 	mvn.w	r2, #2
 8004918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9cb 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f9bd 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f9ce 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0204 	mvn.w	r2, #4
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9a1 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f993 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9a4 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0208 	mvn.w	r2, #8
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f977 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f969 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f97a 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d122      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d11b      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f94d 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f93f 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f950 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fb ff8e 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b80      	cmp	r3, #128	; 0x80
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fb22 	bl	80050e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d10e      	bne.n	8004aca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fb15 	bl	80050f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d10e      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8fe 	bl	8004cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d10e      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d107      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0220 	mvn.w	r2, #32
 8004b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fad5 	bl	80050cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_ConfigClockSource+0x18>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0b5      	b.n	8004cae <HAL_TIM_ConfigClockSource+0x184>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7e:	d03e      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xd4>
 8004b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b84:	f200 8087 	bhi.w	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	f000 8085 	beq.w	8004c9a <HAL_TIM_ConfigClockSource+0x170>
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b94:	d87f      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004b96:	2b70      	cmp	r3, #112	; 0x70
 8004b98:	d01a      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9a:	2b70      	cmp	r3, #112	; 0x70
 8004b9c:	d87b      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9e:	2b60      	cmp	r3, #96	; 0x60
 8004ba0:	d050      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba2:	2b60      	cmp	r3, #96	; 0x60
 8004ba4:	d877      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba6:	2b50      	cmp	r3, #80	; 0x50
 8004ba8:	d03c      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xfa>
 8004baa:	2b50      	cmp	r3, #80	; 0x50
 8004bac:	d873      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d058      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d86f      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	2b30      	cmp	r3, #48	; 0x30
 8004bb8:	d064      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x15a>
 8004bba:	2b30      	cmp	r3, #48	; 0x30
 8004bbc:	d86b      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d060      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d867      	bhi.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d05c      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x15a>
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d05a      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bce:	e062      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6899      	ldr	r1, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f000 f9a6 	bl	8004f30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bf2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
      break;
 8004bfc:	e04e      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f000 f98f 	bl	8004f30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e03b      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6859      	ldr	r1, [r3, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f000 f903 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2150      	movs	r1, #80	; 0x50
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f95c 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c42:	e02b      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	461a      	mov	r2, r3
 8004c52:	f000 f922 	bl	8004e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2160      	movs	r1, #96	; 0x60
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f94c 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c62:	e01b      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f000 f8e3 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2140      	movs	r1, #64	; 0x40
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f93c 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004c82:	e00b      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f000 f933 	bl	8004efa <TIM_ITRx_SetConfig>
        break;
 8004c94:	e002      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d00f      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a3d      	ldr	r2, [pc, #244]	; (8004e20 <TIM_Base_SetConfig+0x118>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3c      	ldr	r2, [pc, #240]	; (8004e24 <TIM_Base_SetConfig+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3b      	ldr	r2, [pc, #236]	; (8004e28 <TIM_Base_SetConfig+0x120>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3a      	ldr	r2, [pc, #232]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01f      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d01b      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <TIM_Base_SetConfig+0x118>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d017      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <TIM_Base_SetConfig+0x11c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <TIM_Base_SetConfig+0x120>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <TIM_Base_SetConfig+0x128>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <TIM_Base_SetConfig+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a12      	ldr	r2, [pc, #72]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <TIM_Base_SetConfig+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <TIM_Base_SetConfig+0x130>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d103      	bne.n	8004e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800

08004e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 030a 	bic.w	r3, r3, #10
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0210 	bic.w	r2, r3, #16
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f043 0307 	orr.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2201      	movs	r2, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e068      	b.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800500e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01d      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d018      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40014000 	.word	0x40014000

080050cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	f107 001c 	add.w	r0, r7, #28
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 f9ce 	bl	80064c8 <USB_CoreReset>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
 8005142:	e005      	b.n	8005150 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr

08005160 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d165      	bne.n	8005240 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a3e      	ldr	r2, [pc, #248]	; (8005270 <USB_SetTurnaroundTime+0x110>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d906      	bls.n	800518a <USB_SetTurnaroundTime+0x2a>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4a3d      	ldr	r2, [pc, #244]	; (8005274 <USB_SetTurnaroundTime+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d202      	bcs.n	800518a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005184:	230f      	movs	r3, #15
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	e05c      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4a39      	ldr	r2, [pc, #228]	; (8005274 <USB_SetTurnaroundTime+0x114>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d306      	bcc.n	80051a0 <USB_SetTurnaroundTime+0x40>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	4a38      	ldr	r2, [pc, #224]	; (8005278 <USB_SetTurnaroundTime+0x118>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d202      	bcs.n	80051a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800519a:	230e      	movs	r3, #14
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e051      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a35      	ldr	r2, [pc, #212]	; (8005278 <USB_SetTurnaroundTime+0x118>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d306      	bcc.n	80051b6 <USB_SetTurnaroundTime+0x56>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4a34      	ldr	r2, [pc, #208]	; (800527c <USB_SetTurnaroundTime+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d202      	bcs.n	80051b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051b0:	230d      	movs	r3, #13
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e046      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <USB_SetTurnaroundTime+0x11c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d306      	bcc.n	80051cc <USB_SetTurnaroundTime+0x6c>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <USB_SetTurnaroundTime+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d802      	bhi.n	80051cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051c6:	230c      	movs	r3, #12
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e03b      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a2c      	ldr	r2, [pc, #176]	; (8005280 <USB_SetTurnaroundTime+0x120>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d906      	bls.n	80051e2 <USB_SetTurnaroundTime+0x82>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <USB_SetTurnaroundTime+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d802      	bhi.n	80051e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051dc:	230b      	movs	r3, #11
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	e030      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a27      	ldr	r2, [pc, #156]	; (8005284 <USB_SetTurnaroundTime+0x124>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d906      	bls.n	80051f8 <USB_SetTurnaroundTime+0x98>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4a26      	ldr	r2, [pc, #152]	; (8005288 <USB_SetTurnaroundTime+0x128>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d802      	bhi.n	80051f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051f2:	230a      	movs	r3, #10
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e025      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a23      	ldr	r2, [pc, #140]	; (8005288 <USB_SetTurnaroundTime+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d906      	bls.n	800520e <USB_SetTurnaroundTime+0xae>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a22      	ldr	r2, [pc, #136]	; (800528c <USB_SetTurnaroundTime+0x12c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d202      	bcs.n	800520e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005208:	2309      	movs	r3, #9
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e01a      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a1e      	ldr	r2, [pc, #120]	; (800528c <USB_SetTurnaroundTime+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d306      	bcc.n	8005224 <USB_SetTurnaroundTime+0xc4>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <USB_SetTurnaroundTime+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d802      	bhi.n	8005224 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800521e:	2308      	movs	r3, #8
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e00f      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <USB_SetTurnaroundTime+0x130>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d906      	bls.n	800523a <USB_SetTurnaroundTime+0xda>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a19      	ldr	r2, [pc, #100]	; (8005294 <USB_SetTurnaroundTime+0x134>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d202      	bcs.n	800523a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005234:	2307      	movs	r3, #7
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e004      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800523a:	2306      	movs	r3, #6
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e001      	b.n	8005244 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005240:	2309      	movs	r3, #9
 8005242:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800525c:	431a      	orrs	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	00d8acbf 	.word	0x00d8acbf
 8005274:	00e4e1c0 	.word	0x00e4e1c0
 8005278:	00f42400 	.word	0x00f42400
 800527c:	01067380 	.word	0x01067380
 8005280:	011a499f 	.word	0x011a499f
 8005284:	01312cff 	.word	0x01312cff
 8005288:	014ca43f 	.word	0x014ca43f
 800528c:	016e3600 	.word	0x016e3600
 8005290:	01a6ab1f 	.word	0x01a6ab1f
 8005294:	01e84800 	.word	0x01e84800

08005298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f043 0201 	orr.w	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d106      	bne.n	8005308 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e00b      	b.n	8005320 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e001      	b.n	8005320 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e003      	b.n	8005328 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005320:	2032      	movs	r0, #50	; 0x32
 8005322:	f7fc f9f5 	bl	8001710 <HAL_Delay>

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005330:	b084      	sub	sp, #16
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800533e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e009      	b.n	8005364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3340      	adds	r3, #64	; 0x40
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3301      	adds	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b0e      	cmp	r3, #14
 8005368:	d9f2      	bls.n	8005350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800536a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11c      	bne.n	80053aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e005      	b.n	80053b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053bc:	461a      	mov	r2, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	4619      	mov	r1, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	461a      	mov	r2, r3
 80053d2:	680b      	ldr	r3, [r1, #0]
 80053d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053d6:	2103      	movs	r1, #3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f93d 	bl	8005658 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053de:	2110      	movs	r1, #16
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8f1 	bl	80055c8 <USB_FlushTxFifo>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f90f 	bl	8005614 <USB_FlushRxFifo>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	461a      	mov	r2, r3
 8005408:	2300      	movs	r3, #0
 800540a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	461a      	mov	r2, r3
 8005414:	2300      	movs	r3, #0
 8005416:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e043      	b.n	80054b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005440:	d118      	bne.n	8005474 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e013      	b.n	8005486 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	461a      	mov	r2, r3
 800546c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e008      	b.n	8005486 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	461a      	mov	r2, r3
 80054a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3301      	adds	r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3b7      	bcc.n	800542a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e043      	b.n	8005548 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d6:	d118      	bne.n	800550a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ea:	461a      	mov	r2, r3
 80054ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e013      	b.n	800551c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	461a      	mov	r2, r3
 8005502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	e008      	b.n	800551c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	2300      	movs	r3, #0
 800552c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	461a      	mov	r2, r3
 800553c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005540:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d3b7      	bcc.n	80054c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005562:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f043 0210 	orr.w	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <USB_DevInit+0x294>)
 8005584:	4313      	orrs	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f043 0208 	orr.w	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055aa:	f043 0304 	orr.w	r3, r3, #4
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055be:	b004      	add	sp, #16
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	803c3800 	.word	0x803c3800

080055c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3301      	adds	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a09      	ldr	r2, [pc, #36]	; (8005610 <USB_FlushTxFifo+0x48>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e006      	b.n	8005602 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d0f0      	beq.n	80055e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	00030d40 	.word	0x00030d40

08005614 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2210      	movs	r2, #16
 8005624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <USB_FlushRxFifo+0x40>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e006      	b.n	8005646 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d0f0      	beq.n	8005626 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	00030d40 	.word	0x00030d40

08005658 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005678:	4313      	orrs	r3, r2
 800567a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0306 	and.w	r3, r3, #6
 80056a2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d002      	beq.n	80056b0 <USB_GetDevSpeed+0x26>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d102      	bne.n	80056b6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056b0:	2302      	movs	r3, #2
 80056b2:	75fb      	strb	r3, [r7, #23]
 80056b4:	e001      	b.n	80056ba <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80056b6:	230f      	movs	r3, #15
 80056b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13a      	bne.n	800575a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005702:	4313      	orrs	r3, r2
 8005704:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d155      	bne.n	80057c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	78db      	ldrb	r3, [r3, #3]
 8005736:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005738:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005740:	4313      	orrs	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e036      	b.n	80057c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005778:	4313      	orrs	r3, r2
 800577a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11a      	bne.n	80057c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	78db      	ldrb	r3, [r3, #3]
 80057ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057ae:	430b      	orrs	r3, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d161      	bne.n	80058b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580a:	d11f      	bne.n	800584c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800582a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800584a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	2101      	movs	r1, #1
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800586c:	4013      	ands	r3, r2
 800586e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	2101      	movs	r1, #1
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	b29b      	uxth	r3, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005890:	4013      	ands	r3, r2
 8005892:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	0159      	lsls	r1, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	440b      	add	r3, r1
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	4619      	mov	r1, r3
 80058b0:	4b35      	ldr	r3, [pc, #212]	; (8005988 <USB_DeactivateEndpoint+0x1b0>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
 80058b6:	e060      	b.n	800597a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ce:	d11f      	bne.n	8005910 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800590e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	2101      	movs	r1, #1
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	43db      	mvns	r3, r3
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005930:	4013      	ands	r3, r2
 8005932:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	43db      	mvns	r3, r3
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4013      	ands	r3, r2
 8005956:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	0159      	lsls	r1, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	440b      	add	r3, r1
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	4619      	mov	r1, r3
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <USB_DeactivateEndpoint+0x1b4>)
 8005976:	4013      	ands	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	ec337800 	.word	0xec337800
 800598c:	eff37800 	.word	0xeff37800

08005990 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	f040 810a 	bne.w	8005bc2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d132      	bne.n	8005a1c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a14:	0cdb      	lsrs	r3, r3, #19
 8005a16:	04db      	lsls	r3, r3, #19
 8005a18:	6113      	str	r3, [r2, #16]
 8005a1a:	e074      	b.n	8005b06 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	0cdb      	lsrs	r3, r3, #19
 8005a38:	04db      	lsls	r3, r3, #19
 8005a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6959      	ldr	r1, [r3, #20]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	440b      	add	r3, r1
 8005a78:	1e59      	subs	r1, r3, #1
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a82:	04d9      	lsls	r1, r3, #19
 8005a84:	4baf      	ldr	r3, [pc, #700]	; (8005d44 <USB_EPStartXfer+0x3b4>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	6939      	ldr	r1, [r7, #16]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	6979      	ldr	r1, [r7, #20]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	0148      	lsls	r0, r1, #5
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	4401      	add	r1, r0
 8005ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d11f      	bne.n	8005b06 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b04:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b24:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d015      	beq.n	8005b5a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8100 	beq.w	8005d38 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	6979      	ldr	r1, [r7, #20]
 8005b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b54:	4313      	orrs	r3, r2
 8005b56:	634b      	str	r3, [r1, #52]	; 0x34
 8005b58:	e0ee      	b.n	8005d38 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d110      	bne.n	8005b8c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e00f      	b.n	8005bac <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005baa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68d9      	ldr	r1, [r3, #12]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9e2 	bl	8005f84 <USB_WritePacket>
 8005bc0:	e0ba      	b.n	8005d38 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	0cdb      	lsrs	r3, r3, #19
 8005bde:	04db      	lsls	r3, r3, #19
 8005be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d123      	bne.n	8005c56 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c24:	6939      	ldr	r1, [r7, #16]
 8005c26:	0148      	lsls	r0, r1, #5
 8005c28:	6979      	ldr	r1, [r7, #20]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c30:	4313      	orrs	r3, r2
 8005c32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c52:	6113      	str	r3, [r2, #16]
 8005c54:	e033      	b.n	8005cbe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4413      	add	r3, r2
 8005c60:	1e5a      	subs	r2, r3, #1
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	89fb      	ldrh	r3, [r7, #14]
 8005c7c:	04d9      	lsls	r1, r3, #19
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <USB_EPStartXfer+0x3b4>)
 8005c80:	400b      	ands	r3, r1
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	89f9      	ldrh	r1, [r7, #14]
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	6939      	ldr	r1, [r7, #16]
 8005cb0:	0148      	lsls	r0, r1, #5
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	4401      	add	r1, r0
 8005cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	78db      	ldrb	r3, [r3, #3]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d128      	bne.n	8005d18 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d110      	bne.n	8005cf8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e00f      	b.n	8005d18 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	1ff80000 	.word	0x1ff80000

08005d48 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f040 80ab 	bne.w	8005ebc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d132      	bne.n	8005dd4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dcc:	0cdb      	lsrs	r3, r3, #19
 8005dce:	04db      	lsls	r3, r3, #19
 8005dd0:	6113      	str	r3, [r2, #16]
 8005dd2:	e04e      	b.n	8005e72 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	0cdb      	lsrs	r3, r3, #19
 8005df0:	04db      	lsls	r3, r3, #19
 8005df2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d903      	bls.n	8005e2c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	0148      	lsls	r0, r1, #5
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	4401      	add	r1, r0
 8005e6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e90:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d06d      	beq.n	8005f76 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	2101      	movs	r1, #1
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	634b      	str	r3, [r1, #52]	; 0x34
 8005eba:	e05c      	b.n	8005f76 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	0cdb      	lsrs	r3, r3, #19
 8005ed8:	04db      	lsls	r3, r3, #19
 8005eda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005efe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	0148      	lsls	r0, r1, #5
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	4401      	add	r1, r0
 8005f4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	460b      	mov	r3, r1
 8005f94:	71fb      	strb	r3, [r7, #7]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005fa2:	88bb      	ldrh	r3, [r7, #4]
 8005fa4:	3303      	adds	r3, #3
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e00f      	b.n	8005fd0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	031a      	lsls	r2, r3, #12
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3eb      	bcc.n	8005fb0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3724      	adds	r7, #36	; 0x24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b089      	sub	sp, #36	; 0x24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	3303      	adds	r3, #3
 8006000:	089b      	lsrs	r3, r3, #2
 8006002:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e00b      	b.n	8006022 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	601a      	str	r2, [r3, #0]
    pDest++;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3304      	adds	r3, #4
 800601a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	3301      	adds	r3, #1
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	d3ef      	bcc.n	800600a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800602a:	69fb      	ldr	r3, [r7, #28]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3724      	adds	r7, #36	; 0x24
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d12c      	bne.n	80060ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	db12      	blt.n	800608c <USB_EPSetStall+0x54>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00f      	beq.n	800608c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800608a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e02b      	b.n	8006106 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db12      	blt.n	80060e6 <USB_EPSetStall+0xae>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00f      	beq.n	80060e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006104:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d128      	bne.n	8006182 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	78db      	ldrb	r3, [r3, #3]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d003      	beq.n	8006160 <USB_EPClearStall+0x4c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d138      	bne.n	80061d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e027      	b.n	80061d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d003      	beq.n	80061b2 <USB_EPClearStall+0x9e>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d10f      	bne.n	80061d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006202:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625a:	f023 0302 	bic.w	r3, r3, #2
 800625e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006288:	f023 0303 	bic.w	r3, r3, #3
 800628c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	0c1b      	lsrs	r3, r3, #16
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	b29b      	uxth	r3, r3
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4013      	ands	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800636c:	68bb      	ldr	r3, [r7, #8]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b087      	sub	sp, #28
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	01db      	lsls	r3, r3, #7
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4013      	ands	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063c8:	68bb      	ldr	r3, [r7, #8]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0301 	and.w	r3, r3, #1
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006410:	f023 0307 	bic.w	r3, r3, #7
 8006414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	333c      	adds	r3, #60	; 0x3c
 800644a:	3304      	adds	r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <USB_EP0_OutStart+0x8c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d90a      	bls.n	800646e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006468:	d101      	bne.n	800646e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e024      	b.n	80064b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	461a      	mov	r2, r3
 8006476:	2300      	movs	r3, #0
 8006478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649c:	f043 0318 	orr.w	r3, r3, #24
 80064a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	4f54300a 	.word	0x4f54300a

080064c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a13      	ldr	r2, [pc, #76]	; (800652c <USB_CoreReset+0x64>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e01b      	b.n	800651e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	daf2      	bge.n	80064d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <USB_CoreReset+0x64>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e006      	b.n	800651e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d0f0      	beq.n	80064fe <USB_CoreReset+0x36>

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	00030d40 	.word	0x00030d40

08006530 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800653c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006540:	f005 f89c 	bl	800b67c <USBD_static_malloc>
 8006544:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006554:	2302      	movs	r3, #2
 8006556:	e066      	b.n	8006626 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7c1b      	ldrb	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d119      	bne.n	800659c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800656c:	2202      	movs	r2, #2
 800656e:	2181      	movs	r1, #129	; 0x81
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f004 fe6f 	bl	800b254 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800657c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006580:	2202      	movs	r2, #2
 8006582:	2101      	movs	r1, #1
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f004 fe65 	bl	800b254 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2210      	movs	r2, #16
 8006596:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800659a:	e016      	b.n	80065ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	2202      	movs	r2, #2
 80065a0:	2181      	movs	r1, #129	; 0x81
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f004 fe56 	bl	800b254 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f004 fe4d 	bl	800b254 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2210      	movs	r2, #16
 80065c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ca:	2308      	movs	r3, #8
 80065cc:	2203      	movs	r2, #3
 80065ce:	2182      	movs	r1, #130	; 0x82
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f004 fe3f 	bl	800b254 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7c1b      	ldrb	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800660a:	2101      	movs	r1, #1
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f004 ff9b 	bl	800b548 <USBD_LL_PrepareReceive>
 8006612:	e007      	b.n	8006624 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	2101      	movs	r1, #1
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f004 ff92 	bl	800b548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800663a:	2181      	movs	r1, #129	; 0x81
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f004 fe47 	bl	800b2d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f004 fe40 	bl	800b2d0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006658:	2182      	movs	r1, #130	; 0x82
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f004 fe38 	bl	800b2d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668a:	4618      	mov	r0, r3
 800668c:	f005 f804 	bl	800b698 <USBD_static_free>
    pdev->pClassData = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0af      	b.n	800682c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d03f      	beq.n	8006758 <USBD_CDC_Setup+0xb4>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	f040 809f 	bne.w	800681c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	88db      	ldrh	r3, [r3, #6]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02e      	beq.n	8006744 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da16      	bge.n	800671e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80066fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	88d2      	ldrh	r2, [r2, #6]
 8006702:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	88db      	ldrh	r3, [r3, #6]
 8006708:	2b07      	cmp	r3, #7
 800670a:	bf28      	it	cs
 800670c:	2307      	movcs	r3, #7
 800670e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	89fa      	ldrh	r2, [r7, #14]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fb43 	bl	8007da2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800671c:	e085      	b.n	800682a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	785a      	ldrb	r2, [r3, #1]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006734:	6939      	ldr	r1, [r7, #16]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	88db      	ldrh	r3, [r3, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fb5c 	bl	8007dfa <USBD_CtlPrepareRx>
      break;
 8006742:	e072      	b.n	800682a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	7850      	ldrb	r0, [r2, #1]
 8006750:	2200      	movs	r2, #0
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	4798      	blx	r3
      break;
 8006756:	e068      	b.n	800682a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b0b      	cmp	r3, #11
 800675e:	d852      	bhi.n	8006806 <USBD_CDC_Setup+0x162>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBD_CDC_Setup+0xc4>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006799 	.word	0x08006799
 800676c:	08006815 	.word	0x08006815
 8006770:	08006807 	.word	0x08006807
 8006774:	08006807 	.word	0x08006807
 8006778:	08006807 	.word	0x08006807
 800677c:	08006807 	.word	0x08006807
 8006780:	08006807 	.word	0x08006807
 8006784:	08006807 	.word	0x08006807
 8006788:	08006807 	.word	0x08006807
 800678c:	08006807 	.word	0x08006807
 8006790:	080067c3 	.word	0x080067c3
 8006794:	080067ed 	.word	0x080067ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d107      	bne.n	80067b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067a4:	f107 030a 	add.w	r3, r7, #10
 80067a8:	2202      	movs	r2, #2
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 faf8 	bl	8007da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067b2:	e032      	b.n	800681a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fa82 	bl	8007cc0 <USBD_CtlError>
            ret = USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	75fb      	strb	r3, [r7, #23]
          break;
 80067c0:	e02b      	b.n	800681a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d107      	bne.n	80067de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ce:	f107 030d 	add.w	r3, r7, #13
 80067d2:	2201      	movs	r2, #1
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fae3 	bl	8007da2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067dc:	e01d      	b.n	800681a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fa6d 	bl	8007cc0 <USBD_CtlError>
            ret = USBD_FAIL;
 80067e6:	2303      	movs	r3, #3
 80067e8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ea:	e016      	b.n	800681a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d00f      	beq.n	8006818 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 fa60 	bl	8007cc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006804:	e008      	b.n	8006818 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fa59 	bl	8007cc0 <USBD_CtlError>
          ret = USBD_FAIL;
 800680e:	2303      	movs	r3, #3
 8006810:	75fb      	strb	r3, [r7, #23]
          break;
 8006812:	e002      	b.n	800681a <USBD_CDC_Setup+0x176>
          break;
 8006814:	bf00      	nop
 8006816:	e008      	b.n	800682a <USBD_CDC_Setup+0x186>
          break;
 8006818:	bf00      	nop
      }
      break;
 800681a:	e006      	b.n	800682a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fa4e 	bl	8007cc0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	bf00      	nop
  }

  return (uint8_t)ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006846:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e04f      	b.n	80068f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	3318      	adds	r3, #24
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d029      	beq.n	80068c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	3318      	adds	r3, #24
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	78f9      	ldrb	r1, [r7, #3]
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	460b      	mov	r3, r1
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	1a5b      	subs	r3, r3, r1
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4403      	add	r3, r0
 8006894:	3344      	adds	r3, #68	; 0x44
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	fbb2 f1f3 	udiv	r1, r2, r3
 800689c:	fb03 f301 	mul.w	r3, r3, r1
 80068a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d110      	bne.n	80068c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	3318      	adds	r3, #24
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068ba:	78f9      	ldrb	r1, [r7, #3]
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 fe09 	bl	800b4d8 <USBD_LL_Transmit>
 80068c6:	e015      	b.n	80068f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e015      	b.n	800694c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f004 fe47 	bl	800b5b8 <USBD_LL_GetRxDataSize>
 800692a:	4602      	mov	r2, r0
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006946:	4611      	mov	r1, r2
 8006948:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006962:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800696a:	2303      	movs	r3, #3
 800696c:	e01b      	b.n	80069a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d015      	beq.n	80069a4 <USBD_CDC_EP0_RxReady+0x50>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800697e:	2bff      	cmp	r3, #255	; 0xff
 8006980:	d010      	beq.n	80069a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006990:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006998:	b292      	uxth	r2, r2
 800699a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	22ff      	movs	r2, #255	; 0xff
 80069a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2243      	movs	r2, #67	; 0x43
 80069bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069be:	4b03      	ldr	r3, [pc, #12]	; (80069cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	2000009c 	.word	0x2000009c

080069d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2243      	movs	r2, #67	; 0x43
 80069dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069de:	4b03      	ldr	r3, [pc, #12]	; (80069ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20000058 	.word	0x20000058

080069f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2243      	movs	r2, #67	; 0x43
 80069fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80069fe:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	200000e0 	.word	0x200000e0

08006a10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a1e:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	20000014 	.word	0x20000014

08006a30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e004      	b.n	8006a4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e008      	b.n	8006a8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e004      	b.n	8006abc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e01a      	b.n	8006b20 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d114      	bne.n	8006b1e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b12:	2181      	movs	r1, #129	; 0x81
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f004 fcdf 	bl	800b4d8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e016      	b.n	8006b74 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b58:	2101      	movs	r1, #1
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f004 fcf4 	bl	800b548 <USBD_LL_PrepareReceive>
 8006b60:	e007      	b.n	8006b72 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f004 fceb 	bl	800b548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e01f      	b.n	8006bd4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	79fa      	ldrb	r2, [r7, #7]
 8006bc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f004 fac5 	bl	800b158 <USBD_LL_Init>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e016      	b.n	8006c22 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	f107 020e 	add.w	r2, r7, #14
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f004 fadc 	bl	800b1f0 <USBD_LL_Start>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
  }

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 ffba 	bl	8007c4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d01a      	beq.n	8006d32 <USBD_LL_SetupStage+0x72>
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d822      	bhi.n	8006d46 <USBD_LL_SetupStage+0x86>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <USBD_LL_SetupStage+0x4a>
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d00a      	beq.n	8006d1e <USBD_LL_SetupStage+0x5e>
 8006d08:	e01d      	b.n	8006d46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa62 	bl	80071dc <USBD_StdDevReq>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1c:	e020      	b.n	8006d60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fac6 	bl	80072b8 <USBD_StdItfReq>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d30:	e016      	b.n	8006d60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fb05 	bl	800734a <USBD_StdEPReq>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e00c      	b.n	8006d60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f004 faf1 	bl	800b33c <USBD_LL_StallEP>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5e:	bf00      	nop
  }

  return ret;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	460b      	mov	r3, r1
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d138      	bne.n	8006df0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d14a      	bne.n	8006e26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d913      	bls.n	8006dc4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf28      	it	cs
 8006db6:	4613      	movcs	r3, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 f839 	bl	8007e34 <USBD_CtlContinueRx>
 8006dc2:	e030      	b.n	8006e26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d10b      	bne.n	8006de8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 f834 	bl	8007e56 <USBD_CtlSendStatus>
 8006dee:	e01a      	b.n	8006e26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d114      	bne.n	8006e26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	7afa      	ldrb	r2, [r7, #11]
 8006e12:	4611      	mov	r1, r2
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	4798      	blx	r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	e000      	b.n	8006e28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d16b      	bne.n	8006f1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3314      	adds	r3, #20
 8006e48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d156      	bne.n	8006f02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d914      	bls.n	8006e8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 ffae 	bl	8007dd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f004 fb60 	bl	800b548 <USBD_LL_PrepareReceive>
 8006e88:	e03b      	b.n	8006f02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d11c      	bne.n	8006ed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d316      	bcc.n	8006ed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d20f      	bcs.n	8006ed0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 ff8f 	bl	8007dd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f004 fb3d 	bl	800b548 <USBD_LL_PrepareReceive>
 8006ece:	e018      	b.n	8006f02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d10b      	bne.n	8006ef4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f004 fa20 	bl	800b33c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 ffbd 	bl	8007e7c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d122      	bne.n	8006f52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fe98 	bl	8006c42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f1a:	e01a      	b.n	8006f52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d114      	bne.n	8006f52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	7afa      	ldrb	r2, [r7, #11]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	4798      	blx	r3
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	e000      	b.n	8006f54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e02f      	b.n	8006ff0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00f      	beq.n	8006fba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6852      	ldr	r2, [r2, #4]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	4611      	mov	r1, r2
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f004 f947 	bl	800b254 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2240      	movs	r2, #64	; 0x40
 8006fd2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f004 f939 	bl	800b254 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2da      	uxtb	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b04      	cmp	r3, #4
 8007056:	d106      	bne.n	8007066 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800705e:	b2da      	uxtb	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e012      	b.n	80070b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d10b      	bne.n	80070ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e014      	b.n	80070fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d10d      	bne.n	80070fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	78fa      	ldrb	r2, [r7, #3]
 80070f4:	4611      	mov	r1, r2
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	e014      	b.n	8007148 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d10d      	bne.n	8007146 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	4611      	mov	r1, r2
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	4611      	mov	r1, r2
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
  }

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071bc:	8a3b      	ldrh	r3, [r7, #16]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	b21a      	sxth	r2, r3
 80071c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b21b      	sxth	r3, r3
 80071ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071cc:	89fb      	ldrh	r3, [r7, #14]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d005      	beq.n	8007202 <USBD_StdDevReq+0x26>
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d853      	bhi.n	80072a2 <USBD_StdDevReq+0xc6>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <USBD_StdDevReq+0x3a>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d14f      	bne.n	80072a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]
      break;
 8007214:	e04a      	b.n	80072ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b09      	cmp	r3, #9
 800721c:	d83b      	bhi.n	8007296 <USBD_StdDevReq+0xba>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <USBD_StdDevReq+0x48>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007279 	.word	0x08007279
 8007228:	0800728d 	.word	0x0800728d
 800722c:	08007297 	.word	0x08007297
 8007230:	08007283 	.word	0x08007283
 8007234:	08007297 	.word	0x08007297
 8007238:	08007257 	.word	0x08007257
 800723c:	0800724d 	.word	0x0800724d
 8007240:	08007297 	.word	0x08007297
 8007244:	0800726f 	.word	0x0800726f
 8007248:	08007261 	.word	0x08007261
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9de 	bl	8007610 <USBD_GetDescriptor>
          break;
 8007254:	e024      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fb6d 	bl	8007938 <USBD_SetAddress>
          break;
 800725e:	e01f      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbac 	bl	80079c0 <USBD_SetConfig>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
          break;
 800726c:	e018      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc4b 	bl	8007b0c <USBD_GetConfig>
          break;
 8007276:	e013      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fc7c 	bl	8007b78 <USBD_GetStatus>
          break;
 8007280:	e00e      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fcab 	bl	8007be0 <USBD_SetFeature>
          break;
 800728a:	e009      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fcba 	bl	8007c08 <USBD_ClrFeature>
          break;
 8007294:	e004      	b.n	80072a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd11 	bl	8007cc0 <USBD_CtlError>
          break;
 800729e:	bf00      	nop
      }
      break;
 80072a0:	e004      	b.n	80072ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fd0b 	bl	8007cc0 <USBD_CtlError>
      break;
 80072aa:	bf00      	nop
  }

  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop

080072b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d005      	beq.n	80072de <USBD_StdItfReq+0x26>
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d82f      	bhi.n	8007336 <USBD_StdItfReq+0x7e>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <USBD_StdItfReq+0x26>
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d12b      	bne.n	8007336 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d81d      	bhi.n	8007328 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	889b      	ldrh	r3, [r3, #4]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d813      	bhi.n	800731e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d110      	bne.n	8007332 <USBD_StdItfReq+0x7a>
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fd9d 	bl	8007e56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800731c:	e009      	b.n	8007332 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fccd 	bl	8007cc0 <USBD_CtlError>
          break;
 8007326:	e004      	b.n	8007332 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fcc8 	bl	8007cc0 <USBD_CtlError>
          break;
 8007330:	e000      	b.n	8007334 <USBD_StdItfReq+0x7c>
          break;
 8007332:	bf00      	nop
      }
      break;
 8007334:	e004      	b.n	8007340 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fcc1 	bl	8007cc0 <USBD_CtlError>
      break;
 800733e:	bf00      	nop
  }

  return ret;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	889b      	ldrh	r3, [r3, #4]
 800735c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d007      	beq.n	800737a <USBD_StdEPReq+0x30>
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	f200 8145 	bhi.w	80075fa <USBD_StdEPReq+0x2b0>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <USBD_StdEPReq+0x44>
 8007374:	2b20      	cmp	r3, #32
 8007376:	f040 8140 	bne.w	80075fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]
      break;
 800738c:	e13a      	b.n	8007604 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d007      	beq.n	80073a6 <USBD_StdEPReq+0x5c>
 8007396:	2b03      	cmp	r3, #3
 8007398:	f300 8129 	bgt.w	80075ee <USBD_StdEPReq+0x2a4>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d07f      	beq.n	80074a0 <USBD_StdEPReq+0x156>
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d03c      	beq.n	800741e <USBD_StdEPReq+0xd4>
 80073a4:	e123      	b.n	80075ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d002      	beq.n	80073b8 <USBD_StdEPReq+0x6e>
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d016      	beq.n	80073e4 <USBD_StdEPReq+0x9a>
 80073b6:	e02c      	b.n	8007412 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00d      	beq.n	80073da <USBD_StdEPReq+0x90>
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b80      	cmp	r3, #128	; 0x80
 80073c2:	d00a      	beq.n	80073da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f003 ffb7 	bl	800b33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ce:	2180      	movs	r1, #128	; 0x80
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f003 ffb3 	bl	800b33c <USBD_LL_StallEP>
 80073d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073d8:	e020      	b.n	800741c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc6f 	bl	8007cc0 <USBD_CtlError>
              break;
 80073e2:	e01b      	b.n	800741c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	885b      	ldrh	r3, [r3, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10e      	bne.n	800740a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <USBD_StdEPReq+0xc0>
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d008      	beq.n	800740a <USBD_StdEPReq+0xc0>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f003 ff99 	bl	800b33c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fd23 	bl	8007e56 <USBD_CtlSendStatus>

              break;
 8007410:	e004      	b.n	800741c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc53 	bl	8007cc0 <USBD_CtlError>
              break;
 800741a:	bf00      	nop
          }
          break;
 800741c:	e0ec      	b.n	80075f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d002      	beq.n	8007430 <USBD_StdEPReq+0xe6>
 800742a:	2b03      	cmp	r3, #3
 800742c:	d016      	beq.n	800745c <USBD_StdEPReq+0x112>
 800742e:	e030      	b.n	8007492 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00d      	beq.n	8007452 <USBD_StdEPReq+0x108>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d00a      	beq.n	8007452 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f003 ff7b 	bl	800b33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f003 ff77 	bl	800b33c <USBD_LL_StallEP>
 800744e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007450:	e025      	b.n	800749e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc33 	bl	8007cc0 <USBD_CtlError>
              break;
 800745a:	e020      	b.n	800749e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11b      	bne.n	800749c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f003 ff98 	bl	800b3a8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fcec 	bl	8007e56 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007490:	e004      	b.n	800749c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc13 	bl	8007cc0 <USBD_CtlError>
              break;
 800749a:	e000      	b.n	800749e <USBD_StdEPReq+0x154>
              break;
 800749c:	bf00      	nop
          }
          break;
 800749e:	e0ab      	b.n	80075f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d002      	beq.n	80074b2 <USBD_StdEPReq+0x168>
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d032      	beq.n	8007516 <USBD_StdEPReq+0x1cc>
 80074b0:	e097      	b.n	80075e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <USBD_StdEPReq+0x17e>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d004      	beq.n	80074c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fbfd 	bl	8007cc0 <USBD_CtlError>
                break;
 80074c6:	e091      	b.n	80075ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da0b      	bge.n	80074e8 <USBD_StdEPReq+0x19e>
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	3310      	adds	r3, #16
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	3304      	adds	r3, #4
 80074e6:	e00b      	b.n	8007500 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	3304      	adds	r3, #4
 8007500:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2202      	movs	r2, #2
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc47 	bl	8007da2 <USBD_CtlSendData>
              break;
 8007514:	e06a      	b.n	80075ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da11      	bge.n	8007542 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	f003 020f 	and.w	r2, r3, #15
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3324      	adds	r3, #36	; 0x24
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d117      	bne.n	8007568 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fbc0 	bl	8007cc0 <USBD_CtlError>
                  break;
 8007540:	e054      	b.n	80075ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	f003 020f 	and.w	r2, r3, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fbad 	bl	8007cc0 <USBD_CtlError>
                  break;
 8007566:	e041      	b.n	80075ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	da0b      	bge.n	8007588 <USBD_StdEPReq+0x23e>
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	3310      	adds	r3, #16
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	3304      	adds	r3, #4
 8007586:	e00b      	b.n	80075a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <USBD_StdEPReq+0x264>
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b80      	cmp	r3, #128	; 0x80
 80075ac:	d103      	bne.n	80075b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e00e      	b.n	80075d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f003 ff2a 	bl	800b414 <USBD_LL_IsStallEP>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2201      	movs	r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e002      	b.n	80075d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2202      	movs	r2, #2
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fbe1 	bl	8007da2 <USBD_CtlSendData>
              break;
 80075e0:	e004      	b.n	80075ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb6b 	bl	8007cc0 <USBD_CtlError>
              break;
 80075ea:	bf00      	nop
          }
          break;
 80075ec:	e004      	b.n	80075f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb65 	bl	8007cc0 <USBD_CtlError>
          break;
 80075f6:	bf00      	nop
      }
      break;
 80075f8:	e004      	b.n	8007604 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb5f 	bl	8007cc0 <USBD_CtlError>
      break;
 8007602:	bf00      	nop
  }

  return ret;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	0a1b      	lsrs	r3, r3, #8
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	2b0e      	cmp	r3, #14
 8007632:	f200 8152 	bhi.w	80078da <USBD_GetDescriptor+0x2ca>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <USBD_GetDescriptor+0x2c>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	080076ad 	.word	0x080076ad
 8007640:	080076c5 	.word	0x080076c5
 8007644:	08007705 	.word	0x08007705
 8007648:	080078db 	.word	0x080078db
 800764c:	080078db 	.word	0x080078db
 8007650:	0800787b 	.word	0x0800787b
 8007654:	080078a7 	.word	0x080078a7
 8007658:	080078db 	.word	0x080078db
 800765c:	080078db 	.word	0x080078db
 8007660:	080078db 	.word	0x080078db
 8007664:	080078db 	.word	0x080078db
 8007668:	080078db 	.word	0x080078db
 800766c:	080078db 	.word	0x080078db
 8007670:	080078db 	.word	0x080078db
 8007674:	08007679 	.word	0x08007679
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800769a:	e126      	b.n	80078ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb0e 	bl	8007cc0 <USBD_CtlError>
        err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
      break;
 80076aa:	e11e      	b.n	80078ea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	7c12      	ldrb	r2, [r2, #16]
 80076b8:	f107 0108 	add.w	r1, r7, #8
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	60f8      	str	r0, [r7, #12]
      break;
 80076c2:	e112      	b.n	80078ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7c1b      	ldrb	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f107 0208 	add.w	r2, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	2202      	movs	r2, #2
 80076e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076e6:	e100      	b.n	80078ea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	f107 0208 	add.w	r2, r7, #8
 80076f4:	4610      	mov	r0, r2
 80076f6:	4798      	blx	r3
 80076f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3301      	adds	r3, #1
 80076fe:	2202      	movs	r2, #2
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	e0f2      	b.n	80078ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b05      	cmp	r3, #5
 800770c:	f200 80ac 	bhi.w	8007868 <USBD_GetDescriptor+0x258>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_GetDescriptor+0x108>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007731 	.word	0x08007731
 800771c:	08007765 	.word	0x08007765
 8007720:	08007799 	.word	0x08007799
 8007724:	080077cd 	.word	0x080077cd
 8007728:	08007801 	.word	0x08007801
 800772c:	08007835 	.word	0x08007835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e091      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fab2 	bl	8007cc0 <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e089      	b.n	8007878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e077      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa98 	bl	8007cc0 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e06f      	b.n	8007878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e05d      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa7e 	bl	8007cc0 <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e055      	b.n	8007878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	f107 0108 	add.w	r1, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ee:	e043      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa64 	bl	8007cc0 <USBD_CtlError>
            err++;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	3301      	adds	r3, #1
 80077fc:	72fb      	strb	r3, [r7, #11]
          break;
 80077fe:	e03b      	b.n	8007878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	7c12      	ldrb	r2, [r2, #16]
 8007818:	f107 0108 	add.w	r1, r7, #8
 800781c:	4610      	mov	r0, r2
 800781e:	4798      	blx	r3
 8007820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007822:	e029      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa4a 	bl	8007cc0 <USBD_CtlError>
            err++;
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	3301      	adds	r3, #1
 8007830:	72fb      	strb	r3, [r7, #11]
          break;
 8007832:	e021      	b.n	8007878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7c12      	ldrb	r2, [r2, #16]
 800784c:	f107 0108 	add.w	r1, r7, #8
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007856:	e00f      	b.n	8007878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa30 	bl	8007cc0 <USBD_CtlError>
            err++;
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	3301      	adds	r3, #1
 8007864:	72fb      	strb	r3, [r7, #11]
          break;
 8007866:	e007      	b.n	8007878 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa28 	bl	8007cc0 <USBD_CtlError>
          err++;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	3301      	adds	r3, #1
 8007874:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007876:	bf00      	nop
      }
      break;
 8007878:	e037      	b.n	80078ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7c1b      	ldrb	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	f107 0208 	add.w	r2, r7, #8
 800788e:	4610      	mov	r0, r2
 8007890:	4798      	blx	r3
 8007892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007894:	e029      	b.n	80078ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa11 	bl	8007cc0 <USBD_CtlError>
        err++;
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	3301      	adds	r3, #1
 80078a2:	72fb      	strb	r3, [r7, #11]
      break;
 80078a4:	e021      	b.n	80078ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7c1b      	ldrb	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10d      	bne.n	80078ca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f107 0208 	add.w	r2, r7, #8
 80078ba:	4610      	mov	r0, r2
 80078bc:	4798      	blx	r3
 80078be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3301      	adds	r3, #1
 80078c4:	2207      	movs	r2, #7
 80078c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078c8:	e00f      	b.n	80078ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9f7 	bl	8007cc0 <USBD_CtlError>
        err++;
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	3301      	adds	r3, #1
 80078d6:	72fb      	strb	r3, [r7, #11]
      break;
 80078d8:	e007      	b.n	80078ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f9ef 	bl	8007cc0 <USBD_CtlError>
      err++;
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	3301      	adds	r3, #1
 80078e6:	72fb      	strb	r3, [r7, #11]
      break;
 80078e8:	bf00      	nop
  }

  if (err != 0U)
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11e      	bne.n	800792e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	88db      	ldrh	r3, [r3, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d016      	beq.n	8007926 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078f8:	893b      	ldrh	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	88da      	ldrh	r2, [r3, #6]
 8007902:	893b      	ldrh	r3, [r7, #8]
 8007904:	4293      	cmp	r3, r2
 8007906:	bf28      	it	cs
 8007908:	4613      	movcs	r3, r2
 800790a:	b29b      	uxth	r3, r3
 800790c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800790e:	893b      	ldrh	r3, [r7, #8]
 8007910:	461a      	mov	r2, r3
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa44 	bl	8007da2 <USBD_CtlSendData>
 800791a:	e009      	b.n	8007930 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9ce 	bl	8007cc0 <USBD_CtlError>
 8007924:	e004      	b.n	8007930 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa95 	bl	8007e56 <USBD_CtlSendStatus>
 800792c:	e000      	b.n	8007930 <USBD_GetDescriptor+0x320>
    return;
 800792e:	bf00      	nop
  }
}
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop

08007938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	889b      	ldrh	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d131      	bne.n	80079ae <USBD_SetAddress+0x76>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88db      	ldrh	r3, [r3, #6]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d12d      	bne.n	80079ae <USBD_SetAddress+0x76>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	2b7f      	cmp	r3, #127	; 0x7f
 8007958:	d829      	bhi.n	80079ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b03      	cmp	r3, #3
 8007970:	d104      	bne.n	800797c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f9a3 	bl	8007cc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	e01d      	b.n	80079b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	7bfa      	ldrb	r2, [r7, #15]
 8007980:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f003 fd6f 	bl	800b46c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa61 	bl	8007e56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d004      	beq.n	80079a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a2:	e009      	b.n	80079b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ac:	e004      	b.n	80079b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f985 	bl	8007cc0 <USBD_CtlError>
  }
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	4b4c      	ldr	r3, [pc, #304]	; (8007b08 <USBD_SetConfig+0x148>)
 80079d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079d8:	4b4b      	ldr	r3, [pc, #300]	; (8007b08 <USBD_SetConfig+0x148>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d905      	bls.n	80079ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f96c 	bl	8007cc0 <USBD_CtlError>
    return USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e088      	b.n	8007afe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d002      	beq.n	80079fe <USBD_SetConfig+0x3e>
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d025      	beq.n	8007a48 <USBD_SetConfig+0x88>
 80079fc:	e071      	b.n	8007ae2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079fe:	4b42      	ldr	r3, [pc, #264]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01c      	beq.n	8007a40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007a06:	4b40      	ldr	r3, [pc, #256]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a10:	4b3d      	ldr	r3, [pc, #244]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff f91e 	bl	8006c58 <USBD_SetClassConfig>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f949 	bl	8007cc0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a2e:	e065      	b.n	8007afc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa10 	bl	8007e56 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2203      	movs	r2, #3
 8007a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a3e:	e05d      	b.n	8007afc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fa08 	bl	8007e56 <USBD_CtlSendStatus>
      break;
 8007a46:	e059      	b.n	8007afc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a48:	4b2f      	ldr	r3, [pc, #188]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d112      	bne.n	8007a76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a58:	4b2b      	ldr	r3, [pc, #172]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a62:	4b29      	ldr	r3, [pc, #164]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff f911 	bl	8006c90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9f1 	bl	8007e56 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a74:	e042      	b.n	8007afc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a76:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d02a      	beq.n	8007ada <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff f8ff 	bl	8006c90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a92:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a9c:	4b1a      	ldr	r3, [pc, #104]	; (8007b08 <USBD_SetConfig+0x148>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff f8d8 	bl	8006c58 <USBD_SetClassConfig>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00f      	beq.n	8007ad2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f903 	bl	8007cc0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff f8e4 	bl	8006c90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ad0:	e014      	b.n	8007afc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9bf 	bl	8007e56 <USBD_CtlSendStatus>
      break;
 8007ad8:	e010      	b.n	8007afc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9bb 	bl	8007e56 <USBD_CtlSendStatus>
      break;
 8007ae0:	e00c      	b.n	8007afc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8eb 	bl	8007cc0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <USBD_SetConfig+0x148>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f8cd 	bl	8006c90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007af6:	2303      	movs	r3, #3
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	bf00      	nop
  }

  return ret;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200001e8 	.word	0x200001e8

08007b0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	88db      	ldrh	r3, [r3, #6]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d004      	beq.n	8007b28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f8cd 	bl	8007cc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b26:	e023      	b.n	8007b70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	dc02      	bgt.n	8007b3a <USBD_GetConfig+0x2e>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dc03      	bgt.n	8007b40 <USBD_GetConfig+0x34>
 8007b38:	e015      	b.n	8007b66 <USBD_GetConfig+0x5a>
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d00b      	beq.n	8007b56 <USBD_GetConfig+0x4a>
 8007b3e:	e012      	b.n	8007b66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f927 	bl	8007da2 <USBD_CtlSendData>
        break;
 8007b54:	e00c      	b.n	8007b70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f91f 	bl	8007da2 <USBD_CtlSendData>
        break;
 8007b64:	e004      	b.n	8007b70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8a9 	bl	8007cc0 <USBD_CtlError>
        break;
 8007b6e:	bf00      	nop
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d81e      	bhi.n	8007bce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	88db      	ldrh	r3, [r3, #6]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d004      	beq.n	8007ba2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f890 	bl	8007cc0 <USBD_CtlError>
        break;
 8007ba0:	e01a      	b.n	8007bd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f043 0202 	orr.w	r2, r3, #2
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8eb 	bl	8007da2 <USBD_CtlSendData>
      break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f875 	bl	8007cc0 <USBD_CtlError>
      break;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	885b      	ldrh	r3, [r3, #2]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d106      	bne.n	8007c00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f92b 	bl	8007e56 <USBD_CtlSendStatus>
  }
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d80b      	bhi.n	8007c38 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	885b      	ldrh	r3, [r3, #2]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d10c      	bne.n	8007c42 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f910 	bl	8007e56 <USBD_CtlSendStatus>
      }
      break;
 8007c36:	e004      	b.n	8007c42 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f840 	bl	8007cc0 <USBD_CtlError>
      break;
 8007c40:	e000      	b.n	8007c44 <USBD_ClrFeature+0x3c>
      break;
 8007c42:	bf00      	nop
  }
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	781a      	ldrb	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fa91 	bl	800719e <SWAPBYTE>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff fa84 	bl	800719e <SWAPBYTE>
 8007c96:	4603      	mov	r3, r0
 8007c98:	461a      	mov	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fa77 	bl	800719e <SWAPBYTE>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	80da      	strh	r2, [r3, #6]
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cca:	2180      	movs	r1, #128	; 0x80
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f003 fb35 	bl	800b33c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f003 fb31 	bl	800b33c <USBD_LL_StallEP>
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d036      	beq.n	8007d66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cfc:	6938      	ldr	r0, [r7, #16]
 8007cfe:	f000 f836 	bl	8007d6e <USBD_GetLen>
 8007d02:	4603      	mov	r3, r0
 8007d04:	3301      	adds	r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	4413      	add	r3, r2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4413      	add	r3, r2
 8007d28:	2203      	movs	r2, #3
 8007d2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d32:	e013      	b.n	8007d5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	4413      	add	r3, r2
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	3301      	adds	r3, #1
 8007d44:	613b      	str	r3, [r7, #16]
    idx++;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e7      	bne.n	8007d34 <USBD_GetString+0x52>
 8007d64:	e000      	b.n	8007d68 <USBD_GetString+0x86>
    return;
 8007d66:	bf00      	nop
  }
}
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d7e:	e005      	b.n	8007d8c <USBD_GetLen+0x1e>
  {
    len++;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	3301      	adds	r3, #1
 8007d84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f5      	bne.n	8007d80 <USBD_GetLen+0x12>
  }

  return len;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2202      	movs	r2, #2
 8007db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f003 fb85 	bl	800b4d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f003 fb74 	bl	800b4d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	2100      	movs	r1, #0
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f003 fb8f 	bl	800b548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f003 fb7e 	bl	800b548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2204      	movs	r2, #4
 8007e62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e66:	2300      	movs	r3, #0
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f003 fb33 	bl	800b4d8 <USBD_LL_Transmit>

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2205      	movs	r2, #5
 8007e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f003 fb58 	bl	800b548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <__NVIC_SetPriority>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6039      	str	r1, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	db0a      	blt.n	8007ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	490c      	ldr	r1, [pc, #48]	; (8007ef0 <__NVIC_SetPriority+0x4c>)
 8007ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec2:	0112      	lsls	r2, r2, #4
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ecc:	e00a      	b.n	8007ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4908      	ldr	r1, [pc, #32]	; (8007ef4 <__NVIC_SetPriority+0x50>)
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	3b04      	subs	r3, #4
 8007edc:	0112      	lsls	r2, r2, #4
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	761a      	strb	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	e000e100 	.word	0xe000e100
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007efc:	2100      	movs	r1, #0
 8007efe:	f06f 0004 	mvn.w	r0, #4
 8007f02:	f7ff ffcf 	bl	8007ea4 <__NVIC_SetPriority>
#endif
}
 8007f06:	bf00      	nop
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f12:	f3ef 8305 	mrs	r3, IPSR
 8007f16:	603b      	str	r3, [r7, #0]
  return(result);
 8007f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f1e:	f06f 0305 	mvn.w	r3, #5
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	e00c      	b.n	8007f40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <osKernelInitialize+0x44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d105      	bne.n	8007f3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f2e:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <osKernelInitialize+0x44>)
 8007f30:	2201      	movs	r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	e002      	b.n	8007f40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f40:	687b      	ldr	r3, [r7, #4]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	200001ec 	.word	0x200001ec

08007f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5a:	f3ef 8305 	mrs	r3, IPSR
 8007f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f66:	f06f 0305 	mvn.w	r3, #5
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	e010      	b.n	8007f90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <osKernelStart+0x48>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d109      	bne.n	8007f8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f76:	f7ff ffbf 	bl	8007ef8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <osKernelStart+0x48>)
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f80:	f001 f866 	bl	8009050 <vTaskStartScheduler>
      stat = osOK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e002      	b.n	8007f90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f90:	687b      	ldr	r3, [r7, #4]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200001ec 	.word	0x200001ec

08007fa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	; 0x38
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fb0:	f3ef 8305 	mrs	r3, IPSR
 8007fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d17e      	bne.n	80080ba <osThreadNew+0x11a>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d07b      	beq.n	80080ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fc2:	2380      	movs	r3, #128	; 0x80
 8007fc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fc6:	2318      	movs	r3, #24
 8007fc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d045      	beq.n	8008066 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <osThreadNew+0x48>
        name = attr->name;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <osThreadNew+0x6e>
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2b38      	cmp	r3, #56	; 0x38
 8008000:	d805      	bhi.n	800800e <osThreadNew+0x6e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <osThreadNew+0x72>
        return (NULL);
 800800e:	2300      	movs	r3, #0
 8008010:	e054      	b.n	80080bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	089b      	lsrs	r3, r3, #2
 8008020:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <osThreadNew+0xa8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b5b      	cmp	r3, #91	; 0x5b
 8008030:	d90a      	bls.n	8008048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <osThreadNew+0xa8>
        mem = 1;
 8008042:	2301      	movs	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	e010      	b.n	800806a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10c      	bne.n	800806a <osThreadNew+0xca>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <osThreadNew+0xca>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d104      	bne.n	800806a <osThreadNew+0xca>
          mem = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e001      	b.n	800806a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d110      	bne.n	8008092 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008078:	9202      	str	r2, [sp, #8]
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fe0c 	bl	8008ca4 <xTaskCreateStatic>
 800808c:	4603      	mov	r3, r0
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	e013      	b.n	80080ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d110      	bne.n	80080ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	b29a      	uxth	r2, r3
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fe57 	bl	8008d5e <xTaskCreate>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d001      	beq.n	80080ba <osThreadNew+0x11a>
            hTask = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080ba:	693b      	ldr	r3, [r7, #16]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	; 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080cc:	f3ef 8305 	mrs	r3, IPSR
 80080d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <osDelay+0x1c>
    stat = osErrorISR;
 80080d8:	f06f 0305 	mvn.w	r3, #5
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e007      	b.n	80080f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 ff7c 	bl	8008fe8 <vTaskDelay>
    }
  }

  return (stat);
 80080f0:	68fb      	ldr	r3, [r7, #12]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4a07      	ldr	r2, [pc, #28]	; (8008128 <vApplicationGetIdleTaskMemory+0x2c>)
 800810c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4a06      	ldr	r2, [pc, #24]	; (800812c <vApplicationGetIdleTaskMemory+0x30>)
 8008112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	601a      	str	r2, [r3, #0]
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	200001f0 	.word	0x200001f0
 800812c:	2000024c 	.word	0x2000024c

08008130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4a07      	ldr	r2, [pc, #28]	; (800815c <vApplicationGetTimerTaskMemory+0x2c>)
 8008140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	4a06      	ldr	r2, [pc, #24]	; (8008160 <vApplicationGetTimerTaskMemory+0x30>)
 8008146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800814e:	601a      	str	r2, [r3, #0]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000044c 	.word	0x2000044c
 8008160:	200004a8 	.word	0x200004a8

08008164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f103 0208 	add.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f103 0208 	add.w	r2, r3, #8
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0208 	add.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d103      	bne.n	8008226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e00c      	b.n	8008240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3308      	adds	r3, #8
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e002      	b.n	8008234 <vListInsert+0x2e>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	429a      	cmp	r2, r3
 800823e:	d2f6      	bcs.n	800822e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6892      	ldr	r2, [r2, #8]
 800828e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6852      	ldr	r2, [r2, #4]
 8008298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d103      	bne.n	80082ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1e5a      	subs	r2, r3, #1
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082f6:	f002 f84d 	bl	800a394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008326:	3b01      	subs	r3, #1
 8008328:	68f9      	ldr	r1, [r7, #12]
 800832a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800832c:	fb01 f303 	mul.w	r3, r1, r3
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	22ff      	movs	r2, #255	; 0xff
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	22ff      	movs	r2, #255	; 0xff
 8008342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d114      	bne.n	8008376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01a      	beq.n	800838a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3310      	adds	r3, #16
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f903 	bl	8009564 <xTaskRemoveFromEventList>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <xQueueGenericReset+0xcc>)
 8008366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	e009      	b.n	800838a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3310      	adds	r3, #16
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fef2 	bl	8008164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3324      	adds	r3, #36	; 0x24
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff feed 	bl	8008164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800838a:	f002 f833 	bl	800a3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800838e:	2301      	movs	r3, #1
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08e      	sub	sp, #56	; 0x38
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <xQueueGenericCreateStatic+0x52>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <xQueueGenericCreateStatic+0x56>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xQueueGenericCreateStatic+0x58>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	623b      	str	r3, [r7, #32]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <xQueueGenericCreateStatic+0x7e>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <xQueueGenericCreateStatic+0x82>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <xQueueGenericCreateStatic+0x84>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	61fb      	str	r3, [r7, #28]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800843a:	2350      	movs	r3, #80	; 0x50
 800843c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b50      	cmp	r3, #80	; 0x50
 8008442:	d00a      	beq.n	800845a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	61bb      	str	r3, [r7, #24]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800845a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00d      	beq.n	8008482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800846e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f805 	bl	800848c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008484:	4618      	mov	r0, r3
 8008486:	3730      	adds	r7, #48	; 0x30
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e002      	b.n	80084ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084ba:	2101      	movs	r1, #1
 80084bc:	69b8      	ldr	r0, [r7, #24]
 80084be:	f7ff ff05 	bl	80082cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	; 0x38
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xQueueGenericSend+0x32>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <xQueueGenericSend+0x40>
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <xQueueGenericSend+0x44>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <xQueueGenericSend+0x46>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <xQueueGenericSend+0x60>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x6e>
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <xQueueGenericSend+0x72>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericSend+0x74>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xQueueGenericSend+0x8e>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	623b      	str	r3, [r7, #32]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008562:	f001 f9bd 	bl	80098e0 <xTaskGetSchedulerState>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xQueueGenericSend+0x9e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueGenericSend+0xa2>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGenericSend+0xa4>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGenericSend+0xbe>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61fb      	str	r3, [r7, #28]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008592:	f001 feff 	bl	800a394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <xQueueGenericSend+0xd4>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d129      	bne.n	80085fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ae:	f000 fa0b 	bl	80089c8 <prvCopyDataToQueue>
 80085b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 ffcf 	bl	8009564 <xTaskRemoveFromEventList>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085cc:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <xQueueGenericSend+0x1f8>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	e00a      	b.n	80085f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085e4:	4b39      	ldr	r3, [pc, #228]	; (80086cc <xQueueGenericSend+0x1f8>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085f4:	f001 fefe 	bl	800a3f4 <vPortExitCritical>
				return pdPASS;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e063      	b.n	80086c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d103      	bne.n	800860a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008602:	f001 fef7 	bl	800a3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008606:	2300      	movs	r3, #0
 8008608:	e05c      	b.n	80086c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f809 	bl	800962c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861e:	f001 fee9 	bl	800a3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008622:	f000 fd7b 	bl	800911c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008626:	f001 feb5 	bl	800a394 <vPortEnterCritical>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008630:	b25b      	sxtb	r3, r3
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d103      	bne.n	8008640 <xQueueGenericSend+0x16c>
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d103      	bne.n	8008656 <xQueueGenericSend+0x182>
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008656:	f001 fecd 	bl	800a3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800865a:	1d3a      	adds	r2, r7, #4
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fff8 	bl	8009658 <xTaskCheckForTimeOut>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d124      	bne.n	80086b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800866e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008670:	f000 faa2 	bl	8008bb8 <prvIsQueueFull>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	3310      	adds	r3, #16
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f000 ff1e 	bl	80094c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800868a:	f000 fa2d 	bl	8008ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800868e:	f000 fd53 	bl	8009138 <xTaskResumeAll>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	f47f af7c 	bne.w	8008592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <xQueueGenericSend+0x1f8>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	e772      	b.n	8008592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ae:	f000 fa1b 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086b2:	f000 fd41 	bl	8009138 <xTaskResumeAll>
 80086b6:	e76c      	b.n	8008592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ba:	f000 fa15 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086be:	f000 fd3b 	bl	8009138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3738      	adds	r7, #56	; 0x38
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b090      	sub	sp, #64	; 0x40
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <xQueueGenericSendFromISR+0x3c>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <xQueueGenericSendFromISR+0x40>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <xQueueGenericSendFromISR+0x42>
 8008710:	2300      	movs	r3, #0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008728:	bf00      	nop
 800872a:	e7fe      	b.n	800872a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d103      	bne.n	800873a <xQueueGenericSendFromISR+0x6a>
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <xQueueGenericSendFromISR+0x6e>
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <xQueueGenericSendFromISR+0x70>
 800873e:	2300      	movs	r3, #0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	623b      	str	r3, [r7, #32]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800875a:	f001 fefd 	bl	800a558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800875e:	f3ef 8211 	mrs	r2, BASEPRI
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	61fa      	str	r2, [r7, #28]
 8008774:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008776:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008782:	429a      	cmp	r2, r3
 8008784:	d302      	bcc.n	800878c <xQueueGenericSendFromISR+0xbc>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d12f      	bne.n	80087ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087a2:	f000 f911 	bl	80089c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d112      	bne.n	80087d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d016      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	3324      	adds	r3, #36	; 0x24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fed1 	bl	8009564 <xTaskRemoveFromEventList>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
 80087d4:	e007      	b.n	80087e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087da:	3301      	adds	r3, #1
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	b25a      	sxtb	r2, r3
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087e6:	2301      	movs	r3, #1
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087ea:	e001      	b.n	80087f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3740      	adds	r7, #64	; 0x40
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	; 0x30
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008814:	2300      	movs	r3, #0
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xQueueReceive+0x30>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	623b      	str	r3, [r7, #32]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueReceive+0x3e>
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <xQueueReceive+0x42>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <xQueueReceive+0x44>
 800884a:	2300      	movs	r3, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueReceive+0x5e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008866:	f001 f83b 	bl	80098e0 <xTaskGetSchedulerState>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <xQueueReceive+0x6e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <xQueueReceive+0x72>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <xQueueReceive+0x74>
 800887a:	2300      	movs	r3, #0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xQueueReceive+0x8e>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	61bb      	str	r3, [r7, #24]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008896:	f001 fd7d 	bl	800a394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01f      	beq.n	80088e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088aa:	f000 f8f7 	bl	8008a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	3310      	adds	r3, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fe4e 	bl	8009564 <xTaskRemoveFromEventList>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ce:	4b3d      	ldr	r3, [pc, #244]	; (80089c4 <xQueueReceive+0x1bc>)
 80088d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088de:	f001 fd89 	bl	800a3f4 <vPortExitCritical>
				return pdPASS;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e069      	b.n	80089ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d103      	bne.n	80088f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088ec:	f001 fd82 	bl	800a3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088f0:	2300      	movs	r3, #0
 80088f2:	e062      	b.n	80089ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fe94 	bl	800962c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008908:	f001 fd74 	bl	800a3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800890c:	f000 fc06 	bl	800911c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008910:	f001 fd40 	bl	800a394 <vPortEnterCritical>
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891a:	b25b      	sxtb	r3, r3
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d103      	bne.n	800892a <xQueueReceive+0x122>
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008930:	b25b      	sxtb	r3, r3
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d103      	bne.n	8008940 <xQueueReceive+0x138>
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008940:	f001 fd58 	bl	800a3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008944:	1d3a      	adds	r2, r7, #4
 8008946:	f107 0310 	add.w	r3, r7, #16
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fe83 	bl	8009658 <xTaskCheckForTimeOut>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d123      	bne.n	80089a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895a:	f000 f917 	bl	8008b8c <prvIsQueueEmpty>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d017      	beq.n	8008994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	3324      	adds	r3, #36	; 0x24
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fda9 	bl	80094c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008974:	f000 f8b8 	bl	8008ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008978:	f000 fbde 	bl	8009138 <xTaskResumeAll>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d189      	bne.n	8008896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <xQueueReceive+0x1bc>)
 8008984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	e780      	b.n	8008896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008996:	f000 f8a7 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800899a:	f000 fbcd 	bl	8009138 <xTaskResumeAll>
 800899e:	e77a      	b.n	8008896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a2:	f000 f8a1 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a6:	f000 fbc7 	bl	8009138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ac:	f000 f8ee 	bl	8008b8c <prvIsQueueEmpty>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f43f af6f 	beq.w	8008896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3730      	adds	r7, #48	; 0x30
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d14d      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 ff92 	bl	800991c <xTaskPriorityDisinherit>
 80089f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	e043      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d119      	bne.n	8008a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6858      	ldr	r0, [r3, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	461a      	mov	r2, r3
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f002 fe74 	bl	800b700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d32b      	bcc.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	e026      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68d8      	ldr	r0, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	461a      	mov	r2, r3
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	f002 fe5a 	bl	800b700 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	425b      	negs	r3, r3
 8008a56:	441a      	add	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d207      	bcs.n	8008a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	425b      	negs	r3, r3
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d105      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a92:	697b      	ldr	r3, [r7, #20]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	441a      	add	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d303      	bcc.n	8008ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f002 fe10 	bl	800b700 <memcpy>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008af0:	f001 fc50 	bl	800a394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008afc:	e011      	b.n	8008b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d012      	beq.n	8008b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fd2a 	bl	8009564 <xTaskRemoveFromEventList>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b16:	f000 fe01 	bl	800971c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	dce9      	bgt.n	8008afe <prvUnlockQueue+0x16>
 8008b2a:	e000      	b.n	8008b2e <prvUnlockQueue+0x46>
					break;
 8008b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	22ff      	movs	r2, #255	; 0xff
 8008b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b36:	f001 fc5d 	bl	800a3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b3a:	f001 fc2b 	bl	800a394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b46:	e011      	b.n	8008b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d012      	beq.n	8008b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3310      	adds	r3, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fd05 	bl	8009564 <xTaskRemoveFromEventList>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b60:	f000 fddc 	bl	800971c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dce9      	bgt.n	8008b48 <prvUnlockQueue+0x60>
 8008b74:	e000      	b.n	8008b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	22ff      	movs	r2, #255	; 0xff
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b80:	f001 fc38 	bl	800a3f4 <vPortExitCritical>
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b94:	f001 fbfe 	bl	800a394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e001      	b.n	8008baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008baa:	f001 fc23 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc0:	f001 fbe8 	bl	800a394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d102      	bne.n	8008bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e001      	b.n	8008bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f001 fc0b 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e014      	b.n	8008c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bf8:	4a0f      	ldr	r2, [pc, #60]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c04:	490c      	ldr	r1, [pc, #48]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c1a:	e006      	b.n	8008c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	d9e7      	bls.n	8008bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20001f24 	.word	0x20001f24

08008c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c4c:	f001 fba2 	bl	800a394 <vPortEnterCritical>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d103      	bne.n	8008c66 <vQueueWaitForMessageRestricted+0x2a>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d103      	bne.n	8008c7c <vQueueWaitForMessageRestricted+0x40>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c7c:	f001 fbba 	bl	800a3f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3324      	adds	r3, #36	; 0x24
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc3b 	bl	800950c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff ff26 	bl	8008ae8 <prvUnlockQueue>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af04      	add	r7, sp, #16
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTaskCreateStatic+0x46>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	61fb      	str	r3, [r7, #28]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cea:	235c      	movs	r3, #92	; 0x5c
 8008cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b5c      	cmp	r3, #92	; 0x5c
 8008cf2:	d00a      	beq.n	8008d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	61bb      	str	r3, [r7, #24]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01e      	beq.n	8008d50 <xTaskCreateStatic+0xac>
 8008d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	9302      	str	r3, [sp, #8]
 8008d32:	f107 0314 	add.w	r3, r7, #20
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f850 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d4a:	f000 f8dd 	bl	8008f08 <prvAddNewTaskToReadyList>
 8008d4e:	e001      	b.n	8008d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d54:	697b      	ldr	r3, [r7, #20]
	}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b08c      	sub	sp, #48	; 0x30
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fc30 	bl	800a5d8 <pvPortMalloc>
 8008d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00e      	beq.n	8008d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d80:	205c      	movs	r0, #92	; 0x5c
 8008d82:	f001 fc29 	bl	800a5d8 <pvPortMalloc>
 8008d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
 8008d94:	e005      	b.n	8008da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f001 fcea 	bl	800a770 <vPortFree>
 8008d9c:	e001      	b.n	8008da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f80e 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dcc:	69f8      	ldr	r0, [r7, #28]
 8008dce:	f000 f89b 	bl	8008f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e002      	b.n	8008dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dde:	69bb      	ldr	r3, [r7, #24]
	}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	21a5      	movs	r1, #165	; 0xa5
 8008e02:	f002 fc8b 	bl	800b71c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e10:	3b01      	subs	r3, #1
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	617b      	str	r3, [r7, #20]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01f      	beq.n	8008e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e012      	b.n	8008e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	7819      	ldrb	r1, [r3, #0]
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3334      	adds	r3, #52	; 0x34
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b0f      	cmp	r3, #15
 8008e76:	d9e9      	bls.n	8008e4c <prvInitialiseNewTask+0x64>
 8008e78:	e000      	b.n	8008e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8008e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e84:	e003      	b.n	8008e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	2b37      	cmp	r3, #55	; 0x37
 8008e92:	d901      	bls.n	8008e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e94:	2337      	movs	r3, #55	; 0x37
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f978 	bl	80081a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff f973 	bl	80081a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	69b8      	ldr	r0, [r7, #24]
 8008ee8:	f001 f928 	bl	800a13c <pxPortInitialiseStack>
 8008eec:	4602      	mov	r2, r0
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efe:	bf00      	nop
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f10:	f001 fa40 	bl	800a394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f14:	4b2d      	ldr	r3, [pc, #180]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	4a2c      	ldr	r2, [pc, #176]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f1e:	4b2c      	ldr	r3, [pc, #176]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f26:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f2c:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d110      	bne.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f34:	f000 fc16 	bl	8009764 <prvInitialiseTaskLists>
 8008f38:	e00d      	b.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f3a:	4b26      	ldr	r3, [pc, #152]	; (8008fd4 <prvAddNewTaskToReadyList+0xcc>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f42:	4b23      	ldr	r3, [pc, #140]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d802      	bhi.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f56:	4b20      	ldr	r3, [pc, #128]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <prvAddNewTaskToReadyList+0xd4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d903      	bls.n	8008f7c <prvAddNewTaskToReadyList+0x74>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <prvAddNewTaskToReadyList+0xd4>)
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <prvAddNewTaskToReadyList+0xd8>)
 8008f8a:	441a      	add	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7ff f913 	bl	80081be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f98:	f001 fa2c 	bl	800a3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <prvAddNewTaskToReadyList+0xcc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d207      	bcs.n	8008fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <prvAddNewTaskToReadyList+0xdc>)
 8008fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000d7c 	.word	0x20000d7c
 8008fd0:	200008a8 	.word	0x200008a8
 8008fd4:	20000d88 	.word	0x20000d88
 8008fd8:	20000d98 	.word	0x20000d98
 8008fdc:	20000d84 	.word	0x20000d84
 8008fe0:	200008ac 	.word	0x200008ac
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d017      	beq.n	800902a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <vTaskDelay+0x60>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <vTaskDelay+0x30>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60bb      	str	r3, [r7, #8]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009018:	f000 f880 	bl	800911c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fcea 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009024:	f000 f888 	bl	8009138 <xTaskResumeAll>
 8009028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <vTaskDelay+0x64>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000da4 	.word	0x20000da4
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800905e:	463a      	mov	r2, r7
 8009060:	1d39      	adds	r1, r7, #4
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff f848 	bl	80080fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	9202      	str	r2, [sp, #8]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	2300      	movs	r3, #0
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	460a      	mov	r2, r1
 800907e:	4921      	ldr	r1, [pc, #132]	; (8009104 <vTaskStartScheduler+0xb4>)
 8009080:	4821      	ldr	r0, [pc, #132]	; (8009108 <vTaskStartScheduler+0xb8>)
 8009082:	f7ff fe0f 	bl	8008ca4 <xTaskCreateStatic>
 8009086:	4603      	mov	r3, r0
 8009088:	4a20      	ldr	r2, [pc, #128]	; (800910c <vTaskStartScheduler+0xbc>)
 800908a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800908c:	4b1f      	ldr	r3, [pc, #124]	; (800910c <vTaskStartScheduler+0xbc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e001      	b.n	800909e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d102      	bne.n	80090aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090a4:	f000 fcfc 	bl	8009aa0 <xTimerCreateTimerTask>
 80090a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d116      	bne.n	80090de <vTaskStartScheduler+0x8e>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	613b      	str	r3, [r7, #16]
}
 80090c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090c4:	4b12      	ldr	r3, [pc, #72]	; (8009110 <vTaskStartScheduler+0xc0>)
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <vTaskStartScheduler+0xc4>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090d2:	4b11      	ldr	r3, [pc, #68]	; (8009118 <vTaskStartScheduler+0xc8>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090d8:	f001 f8ba 	bl	800a250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090dc:	e00e      	b.n	80090fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d10a      	bne.n	80090fc <vTaskStartScheduler+0xac>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <vTaskStartScheduler+0xaa>
}
 80090fc:	bf00      	nop
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	0800b768 	.word	0x0800b768
 8009108:	08009735 	.word	0x08009735
 800910c:	20000da0 	.word	0x20000da0
 8009110:	20000d9c 	.word	0x20000d9c
 8009114:	20000d88 	.word	0x20000d88
 8009118:	20000d80 	.word	0x20000d80

0800911c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <vTaskSuspendAll+0x18>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	4a03      	ldr	r2, [pc, #12]	; (8009134 <vTaskSuspendAll+0x18>)
 8009128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800912a:	bf00      	nop
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20000da4 	.word	0x20000da4

08009138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009146:	4b42      	ldr	r3, [pc, #264]	; (8009250 <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <xTaskResumeAll+0x2c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	603b      	str	r3, [r7, #0]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009164:	f001 f916 	bl	800a394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009168:	4b39      	ldr	r3, [pc, #228]	; (8009250 <xTaskResumeAll+0x118>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	4a38      	ldr	r2, [pc, #224]	; (8009250 <xTaskResumeAll+0x118>)
 8009170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009172:	4b37      	ldr	r3, [pc, #220]	; (8009250 <xTaskResumeAll+0x118>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d162      	bne.n	8009240 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800917a:	4b36      	ldr	r3, [pc, #216]	; (8009254 <xTaskResumeAll+0x11c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d05e      	beq.n	8009240 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009182:	e02f      	b.n	80091e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009184:	4b34      	ldr	r3, [pc, #208]	; (8009258 <xTaskResumeAll+0x120>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff f871 	bl	8008278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3304      	adds	r3, #4
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff f86c 	bl	8008278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	4b2d      	ldr	r3, [pc, #180]	; (800925c <xTaskResumeAll+0x124>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d903      	bls.n	80091b4 <xTaskResumeAll+0x7c>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	4a2a      	ldr	r2, [pc, #168]	; (800925c <xTaskResumeAll+0x124>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a27      	ldr	r2, [pc, #156]	; (8009260 <xTaskResumeAll+0x128>)
 80091c2:	441a      	add	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe fff7 	bl	80081be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	4b23      	ldr	r3, [pc, #140]	; (8009264 <xTaskResumeAll+0x12c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d302      	bcc.n	80091e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091de:	4b22      	ldr	r3, [pc, #136]	; (8009268 <xTaskResumeAll+0x130>)
 80091e0:	2201      	movs	r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091e4:	4b1c      	ldr	r3, [pc, #112]	; (8009258 <xTaskResumeAll+0x120>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1cb      	bne.n	8009184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091f2:	f000 fb55 	bl	80098a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091f6:	4b1d      	ldr	r3, [pc, #116]	; (800926c <xTaskResumeAll+0x134>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009202:	f000 f847 	bl	8009294 <xTaskIncrementTick>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <xTaskResumeAll+0x130>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f1      	bne.n	8009202 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <xTaskResumeAll+0x134>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009224:	4b10      	ldr	r3, [pc, #64]	; (8009268 <xTaskResumeAll+0x130>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d009      	beq.n	8009240 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <xTaskResumeAll+0x138>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009240:	f001 f8d8 	bl	800a3f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009244:	68bb      	ldr	r3, [r7, #8]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20000da4 	.word	0x20000da4
 8009254:	20000d7c 	.word	0x20000d7c
 8009258:	20000d3c 	.word	0x20000d3c
 800925c:	20000d84 	.word	0x20000d84
 8009260:	200008ac 	.word	0x200008ac
 8009264:	200008a8 	.word	0x200008a8
 8009268:	20000d90 	.word	0x20000d90
 800926c:	20000d8c 	.word	0x20000d8c
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <xTaskGetTickCount+0x1c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009280:	687b      	ldr	r3, [r7, #4]
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000d80 	.word	0x20000d80

08009294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929e:	4b4f      	ldr	r3, [pc, #316]	; (80093dc <xTaskIncrementTick+0x148>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f040 808f 	bne.w	80093c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092a8:	4b4d      	ldr	r3, [pc, #308]	; (80093e0 <xTaskIncrementTick+0x14c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092b0:	4a4b      	ldr	r2, [pc, #300]	; (80093e0 <xTaskIncrementTick+0x14c>)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d120      	bne.n	80092fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092bc:	4b49      	ldr	r3, [pc, #292]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <xTaskIncrementTick+0x48>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	603b      	str	r3, [r7, #0]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xTaskIncrementTick+0x46>
 80092dc:	4b41      	ldr	r3, [pc, #260]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	4b41      	ldr	r3, [pc, #260]	; (80093e8 <xTaskIncrementTick+0x154>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3f      	ldr	r2, [pc, #252]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4a3f      	ldr	r2, [pc, #252]	; (80093e8 <xTaskIncrementTick+0x154>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	4b3e      	ldr	r3, [pc, #248]	; (80093ec <xTaskIncrementTick+0x158>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a3d      	ldr	r2, [pc, #244]	; (80093ec <xTaskIncrementTick+0x158>)
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	f000 fad1 	bl	80098a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092fe:	4b3c      	ldr	r3, [pc, #240]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	d349      	bcc.n	800939c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009312:	4b37      	ldr	r3, [pc, #220]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	601a      	str	r2, [r3, #0]
					break;
 800931a:	e03f      	b.n	800939c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	4b31      	ldr	r3, [pc, #196]	; (80093e4 <xTaskIncrementTick+0x150>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d203      	bcs.n	800933c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009334:	4a2e      	ldr	r2, [pc, #184]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800933a:	e02f      	b.n	800939c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe ff99 	bl	8008278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	3318      	adds	r3, #24
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe ff90 	bl	8008278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <xTaskIncrementTick+0x160>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <xTaskIncrementTick+0xd8>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <xTaskIncrementTick+0x160>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <xTaskIncrementTick+0x164>)
 800937a:	441a      	add	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fe ff1b 	bl	80081be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <xTaskIncrementTick+0x168>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	429a      	cmp	r2, r3
 8009394:	d3b8      	bcc.n	8009308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009396:	2301      	movs	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800939a:	e7b5      	b.n	8009308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <xTaskIncrementTick+0x168>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	4915      	ldr	r1, [pc, #84]	; (80093f8 <xTaskIncrementTick+0x164>)
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d901      	bls.n	80093b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093b8:	4b11      	ldr	r3, [pc, #68]	; (8009400 <xTaskIncrementTick+0x16c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e004      	b.n	80093d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <xTaskIncrementTick+0x170>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <xTaskIncrementTick+0x170>)
 80093ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093d0:	697b      	ldr	r3, [r7, #20]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000da4 	.word	0x20000da4
 80093e0:	20000d80 	.word	0x20000d80
 80093e4:	20000d34 	.word	0x20000d34
 80093e8:	20000d38 	.word	0x20000d38
 80093ec:	20000d94 	.word	0x20000d94
 80093f0:	20000d9c 	.word	0x20000d9c
 80093f4:	20000d84 	.word	0x20000d84
 80093f8:	200008ac 	.word	0x200008ac
 80093fc:	200008a8 	.word	0x200008a8
 8009400:	20000d90 	.word	0x20000d90
 8009404:	20000d8c 	.word	0x20000d8c

08009408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800940e:	4b28      	ldr	r3, [pc, #160]	; (80094b0 <vTaskSwitchContext+0xa8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <vTaskSwitchContext+0xac>)
 8009418:	2201      	movs	r2, #1
 800941a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800941c:	e041      	b.n	80094a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800941e:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <vTaskSwitchContext+0xac>)
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009424:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <vTaskSwitchContext+0xb0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	e010      	b.n	800944e <vTaskSwitchContext+0x46>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <vTaskSwitchContext+0x40>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	607b      	str	r3, [r7, #4]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vTaskSwitchContext+0x3e>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3b01      	subs	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	491b      	ldr	r1, [pc, #108]	; (80094bc <vTaskSwitchContext+0xb4>)
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0e4      	beq.n	800942c <vTaskSwitchContext+0x24>
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a13      	ldr	r2, [pc, #76]	; (80094bc <vTaskSwitchContext+0xb4>)
 800946e:	4413      	add	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	605a      	str	r2, [r3, #4]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	3308      	adds	r3, #8
 8009484:	429a      	cmp	r2, r3
 8009486:	d104      	bne.n	8009492 <vTaskSwitchContext+0x8a>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <vTaskSwitchContext+0xb8>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	4a06      	ldr	r2, [pc, #24]	; (80094b8 <vTaskSwitchContext+0xb0>)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6013      	str	r3, [r2, #0]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000da4 	.word	0x20000da4
 80094b4:	20000d90 	.word	0x20000d90
 80094b8:	20000d84 	.word	0x20000d84
 80094bc:	200008ac 	.word	0x200008ac
 80094c0:	200008a8 	.word	0x200008a8

080094c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	60fb      	str	r3, [r7, #12]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094ea:	4b07      	ldr	r3, [pc, #28]	; (8009508 <vTaskPlaceOnEventList+0x44>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3318      	adds	r3, #24
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe fe87 	bl	8008206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094f8:	2101      	movs	r1, #1
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	f000 fa7c 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
}
 8009500:	bf00      	nop
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	200008a8 	.word	0x200008a8

0800950c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	617b      	str	r3, [r7, #20]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <vTaskPlaceOnEventListRestricted+0x54>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3318      	adds	r3, #24
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7fe fe3e 	bl	80081be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f000 fa51 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
	}
 8009556:	bf00      	nop
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	200008a8 	.word	0x200008a8

08009564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60fb      	str	r3, [r7, #12]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3318      	adds	r3, #24
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fe6f 	bl	8008278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959a:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <xTaskRemoveFromEventList+0xb0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d11d      	bne.n	80095de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fe66 	bl	8008278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b0:	4b19      	ldr	r3, [pc, #100]	; (8009618 <xTaskRemoveFromEventList+0xb4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d903      	bls.n	80095c0 <xTaskRemoveFromEventList+0x5c>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <xTaskRemoveFromEventList+0xb4>)
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4a13      	ldr	r2, [pc, #76]	; (800961c <xTaskRemoveFromEventList+0xb8>)
 80095ce:	441a      	add	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	4610      	mov	r0, r2
 80095d8:	f7fe fdf1 	bl	80081be <vListInsertEnd>
 80095dc:	e005      	b.n	80095ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3318      	adds	r3, #24
 80095e2:	4619      	mov	r1, r3
 80095e4:	480e      	ldr	r0, [pc, #56]	; (8009620 <xTaskRemoveFromEventList+0xbc>)
 80095e6:	f7fe fdea 	bl	80081be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <xTaskRemoveFromEventList+0xc0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d905      	bls.n	8009604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <xTaskRemoveFromEventList+0xc4>)
 80095fe:	2201      	movs	r2, #1
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e001      	b.n	8009608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009608:	697b      	ldr	r3, [r7, #20]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20000da4 	.word	0x20000da4
 8009618:	20000d84 	.word	0x20000d84
 800961c:	200008ac 	.word	0x200008ac
 8009620:	20000d3c 	.word	0x20000d3c
 8009624:	200008a8 	.word	0x200008a8
 8009628:	20000d90 	.word	0x20000d90

0800962c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <vTaskInternalSetTimeOutState+0x24>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <vTaskInternalSetTimeOutState+0x28>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	605a      	str	r2, [r3, #4]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20000d94 	.word	0x20000d94
 8009654:	20000d80 	.word	0x20000d80

08009658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	613b      	str	r3, [r7, #16]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800969a:	f000 fe7b 	bl	800a394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <xTaskCheckForTimeOut+0xbc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b6:	d102      	bne.n	80096be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	e023      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <xTaskCheckForTimeOut+0xc0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d007      	beq.n	80096da <xTaskCheckForTimeOut+0x82>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	e015      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d20b      	bcs.n	80096fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff ff9b 	bl	800962c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	e004      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009702:	2301      	movs	r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f000 fe75 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 800970a:	69fb      	ldr	r3, [r7, #28]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000d80 	.word	0x20000d80
 8009718:	20000d94 	.word	0x20000d94

0800971c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009720:	4b03      	ldr	r3, [pc, #12]	; (8009730 <vTaskMissedYield+0x14>)
 8009722:	2201      	movs	r2, #1
 8009724:	601a      	str	r2, [r3, #0]
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	20000d90 	.word	0x20000d90

08009734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800973c:	f000 f852 	bl	80097e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <prvIdleTask+0x28>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d9f9      	bls.n	800973c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <prvIdleTask+0x2c>)
 800974a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009758:	e7f0      	b.n	800973c <prvIdleTask+0x8>
 800975a:	bf00      	nop
 800975c:	200008ac 	.word	0x200008ac
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	e00c      	b.n	800978a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4a12      	ldr	r2, [pc, #72]	; (80097c4 <prvInitialiseTaskLists+0x60>)
 800977c:	4413      	add	r3, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fcf0 	bl	8008164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3301      	adds	r3, #1
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b37      	cmp	r3, #55	; 0x37
 800978e:	d9ef      	bls.n	8009770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009790:	480d      	ldr	r0, [pc, #52]	; (80097c8 <prvInitialiseTaskLists+0x64>)
 8009792:	f7fe fce7 	bl	8008164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009796:	480d      	ldr	r0, [pc, #52]	; (80097cc <prvInitialiseTaskLists+0x68>)
 8009798:	f7fe fce4 	bl	8008164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800979c:	480c      	ldr	r0, [pc, #48]	; (80097d0 <prvInitialiseTaskLists+0x6c>)
 800979e:	f7fe fce1 	bl	8008164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097a2:	480c      	ldr	r0, [pc, #48]	; (80097d4 <prvInitialiseTaskLists+0x70>)
 80097a4:	f7fe fcde 	bl	8008164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097a8:	480b      	ldr	r0, [pc, #44]	; (80097d8 <prvInitialiseTaskLists+0x74>)
 80097aa:	f7fe fcdb 	bl	8008164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097ae:	4b0b      	ldr	r3, [pc, #44]	; (80097dc <prvInitialiseTaskLists+0x78>)
 80097b0:	4a05      	ldr	r2, [pc, #20]	; (80097c8 <prvInitialiseTaskLists+0x64>)
 80097b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvInitialiseTaskLists+0x7c>)
 80097b6:	4a05      	ldr	r2, [pc, #20]	; (80097cc <prvInitialiseTaskLists+0x68>)
 80097b8:	601a      	str	r2, [r3, #0]
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	200008ac 	.word	0x200008ac
 80097c8:	20000d0c 	.word	0x20000d0c
 80097cc:	20000d20 	.word	0x20000d20
 80097d0:	20000d3c 	.word	0x20000d3c
 80097d4:	20000d50 	.word	0x20000d50
 80097d8:	20000d68 	.word	0x20000d68
 80097dc:	20000d34 	.word	0x20000d34
 80097e0:	20000d38 	.word	0x20000d38

080097e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ea:	e019      	b.n	8009820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097ec:	f000 fdd2 	bl	800a394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f0:	4b10      	ldr	r3, [pc, #64]	; (8009834 <prvCheckTasksWaitingTermination+0x50>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fd3b 	bl	8008278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <prvCheckTasksWaitingTermination+0x54>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3b01      	subs	r3, #1
 8009808:	4a0b      	ldr	r2, [pc, #44]	; (8009838 <prvCheckTasksWaitingTermination+0x54>)
 800980a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	4a0a      	ldr	r2, [pc, #40]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 8009814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009816:	f000 fded 	bl	800a3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f810 	bl	8009840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e1      	bne.n	80097ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000d50 	.word	0x20000d50
 8009838:	20000d7c 	.word	0x20000d7c
 800983c:	20000d64 	.word	0x20000d64

08009840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	4618      	mov	r0, r3
 8009858:	f000 ff8a 	bl	800a770 <vPortFree>
				vPortFree( pxTCB );
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 ff87 	bl	800a770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009862:	e018      	b.n	8009896 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800986a:	2b01      	cmp	r3, #1
 800986c:	d103      	bne.n	8009876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 ff7e 	bl	800a770 <vPortFree>
	}
 8009874:	e00f      	b.n	8009896 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800987c:	2b02      	cmp	r3, #2
 800987e:	d00a      	beq.n	8009896 <prvDeleteTCB+0x56>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <prvDeleteTCB+0x54>
	}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvResetNextTaskUnblockTime+0x38>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <prvResetNextTaskUnblockTime+0x3c>)
 80098b2:	f04f 32ff 	mov.w	r2, #4294967295
 80098b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098b8:	e008      	b.n	80098cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <prvResetNextTaskUnblockTime+0x38>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <prvResetNextTaskUnblockTime+0x3c>)
 80098ca:	6013      	str	r3, [r2, #0]
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	20000d34 	.word	0x20000d34
 80098dc:	20000d9c 	.word	0x20000d9c

080098e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <xTaskGetSchedulerState+0x34>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ee:	2301      	movs	r3, #1
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	e008      	b.n	8009906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f4:	4b08      	ldr	r3, [pc, #32]	; (8009918 <xTaskGetSchedulerState+0x38>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098fc:	2302      	movs	r3, #2
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	e001      	b.n	8009906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009906:	687b      	ldr	r3, [r7, #4]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	20000d88 	.word	0x20000d88
 8009918:	20000da4 	.word	0x20000da4

0800991c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d056      	beq.n	80099e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <xTaskPriorityDisinherit+0xd0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	429a      	cmp	r2, r3
 800993a:	d00a      	beq.n	8009952 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	60bb      	str	r3, [r7, #8]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	1e5a      	subs	r2, r3, #1
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	429a      	cmp	r2, r3
 8009984:	d02c      	beq.n	80099e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998a:	2b00      	cmp	r3, #0
 800998c:	d128      	bne.n	80099e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3304      	adds	r3, #4
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fc70 	bl	8008278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <xTaskPriorityDisinherit+0xd4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d903      	bls.n	80099c0 <xTaskPriorityDisinherit+0xa4>
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <xTaskPriorityDisinherit+0xd4>)
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <xTaskPriorityDisinherit+0xd8>)
 80099ce:	441a      	add	r2, r3
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7fe fbf1 	bl	80081be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099dc:	2301      	movs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099e0:	697b      	ldr	r3, [r7, #20]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	200008a8 	.word	0x200008a8
 80099f0:	20000d84 	.word	0x20000d84
 80099f4:	200008ac 	.word	0x200008ac

080099f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a02:	4b21      	ldr	r3, [pc, #132]	; (8009a88 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a08:	4b20      	ldr	r3, [pc, #128]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fc32 	bl	8008278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d10a      	bne.n	8009a32 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4819      	ldr	r0, [pc, #100]	; (8009a90 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a2c:	f7fe fbc7 	bl	80081be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a30:	e026      	b.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d209      	bcs.n	8009a5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a4a:	4b12      	ldr	r3, [pc, #72]	; (8009a94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7fe fbd5 	bl	8008206 <vListInsert>
}
 8009a5c:	e010      	b.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f7fe fbcb 	bl	8008206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d202      	bcs.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a7a:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20000d80 	.word	0x20000d80
 8009a8c:	200008a8 	.word	0x200008a8
 8009a90:	20000d68 	.word	0x20000d68
 8009a94:	20000d38 	.word	0x20000d38
 8009a98:	20000d34 	.word	0x20000d34
 8009a9c:	20000d9c 	.word	0x20000d9c

08009aa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aaa:	f000 fb07 	bl	800a0bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aae:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <xTimerCreateTimerTask+0x80>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d021      	beq.n	8009afa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009abe:	1d3a      	adds	r2, r7, #4
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	f107 030c 	add.w	r3, r7, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fb31 	bl	8008130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	9202      	str	r2, [sp, #8]
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	2302      	movs	r3, #2
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	2300      	movs	r3, #0
 8009ade:	460a      	mov	r2, r1
 8009ae0:	4910      	ldr	r1, [pc, #64]	; (8009b24 <xTimerCreateTimerTask+0x84>)
 8009ae2:	4811      	ldr	r0, [pc, #68]	; (8009b28 <xTimerCreateTimerTask+0x88>)
 8009ae4:	f7ff f8de 	bl	8008ca4 <xTaskCreateStatic>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4a10      	ldr	r2, [pc, #64]	; (8009b2c <xTimerCreateTimerTask+0x8c>)
 8009aec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <xTimerCreateTimerTask+0x8c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009af6:	2301      	movs	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20000dd8 	.word	0x20000dd8
 8009b24:	0800b770 	.word	0x0800b770
 8009b28:	08009c65 	.word	0x08009c65
 8009b2c:	20000ddc 	.word	0x20000ddc

08009b30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	; 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	623b      	str	r3, [r7, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b5e:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d02a      	beq.n	8009bbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	dc18      	bgt.n	8009baa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b78:	f7ff feb2 	bl	80098e0 <xTaskGetSchedulerState>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d109      	bne.n	8009b96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b82:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	f107 0110 	add.w	r1, r7, #16
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8e:	f7fe fca1 	bl	80084d4 <xQueueGenericSend>
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24
 8009b94:	e012      	b.n	8009bbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f107 0110 	add.w	r1, r7, #16
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7fe fc97 	bl	80084d4 <xQueueGenericSend>
 8009ba6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ba8:	e008      	b.n	8009bbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009baa:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	f107 0110 	add.w	r1, r7, #16
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	f7fe fd8b 	bl	80086d0 <xQueueGenericSendFromISR>
 8009bba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3728      	adds	r7, #40	; 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000dd8 	.word	0x20000dd8

08009bcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd6:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <prvProcessExpiredTimer+0x94>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fb47 	bl	8008278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d022      	beq.n	8009c3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	18d1      	adds	r1, r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	6978      	ldr	r0, [r7, #20]
 8009c06:	f000 f8d1 	bl	8009dac <prvInsertTimerInActiveList>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01f      	beq.n	8009c50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c10:	2300      	movs	r3, #0
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2300      	movs	r3, #0
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	2100      	movs	r1, #0
 8009c1a:	6978      	ldr	r0, [r7, #20]
 8009c1c:	f7ff ff88 	bl	8009b30 <xTimerGenericCommand>
 8009c20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d113      	bne.n	8009c50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	60fb      	str	r3, [r7, #12]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	6978      	ldr	r0, [r7, #20]
 8009c56:	4798      	blx	r3
}
 8009c58:	bf00      	nop
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20000dd0 	.word	0x20000dd0

08009c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f857 	bl	8009d24 <prvGetNextExpireTime>
 8009c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f803 	bl	8009c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c82:	f000 f8d5 	bl	8009e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c86:	e7f1      	b.n	8009c6c <prvTimerTask+0x8>

08009c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c92:	f7ff fa43 	bl	800911c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f866 	bl	8009d6c <prvSampleTimeNow>
 8009ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d130      	bne.n	8009d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d806      	bhi.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cb6:	f7ff fa3f 	bl	8009138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff85 	bl	8009bcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cc2:	e024      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <prvProcessTimerOrBlockTask+0x90>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <prvProcessTimerOrBlockTask+0x50>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <prvProcessTimerOrBlockTask+0x52>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <prvProcessTimerOrBlockTask+0x94>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f7fe ffa7 	bl	8008c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cee:	f7ff fa23 	bl	8009138 <xTaskResumeAll>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cf8:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <prvProcessTimerOrBlockTask+0x98>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
}
 8009d08:	e001      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d0a:	f7ff fa15 	bl	8009138 <xTaskResumeAll>
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000dd4 	.word	0x20000dd4
 8009d1c:	20000dd8 	.word	0x20000dd8
 8009d20:	e000ed04 	.word	0xe000ed04

08009d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <prvGetNextExpireTime+0x16>
 8009d36:	2201      	movs	r2, #1
 8009d38:	e000      	b.n	8009d3c <prvGetNextExpireTime+0x18>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d48:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e001      	b.n	8009d58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000dd0 	.word	0x20000dd0

08009d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d74:	f7ff fa7e 	bl	8009274 <xTaskGetTickCount>
 8009d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d205      	bcs.n	8009d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d84:	f000 f936 	bl	8009ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	e002      	b.n	8009d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d96:	4a04      	ldr	r2, [pc, #16]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20000de0 	.word	0x20000de0

08009dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d812      	bhi.n	8009df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	1ad2      	subs	r2, r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e01b      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <prvInsertTimerInActiveList+0x7c>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7fe fa08 	bl	8008206 <vListInsert>
 8009df6:	e012      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d206      	bcs.n	8009e0e <prvInsertTimerInActiveList+0x62>
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d302      	bcc.n	8009e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e007      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <prvInsertTimerInActiveList+0x80>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe f9f4 	bl	8008206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e1e:	697b      	ldr	r3, [r7, #20]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000dd4 	.word	0x20000dd4
 8009e2c:	20000dd0 	.word	0x20000dd0

08009e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08e      	sub	sp, #56	; 0x38
 8009e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e36:	e0ca      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da18      	bge.n	8009e70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e3e:	1d3b      	adds	r3, r7, #4
 8009e40:	3304      	adds	r3, #4
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	61fb      	str	r3, [r7, #28]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e66:	6850      	ldr	r0, [r2, #4]
 8009e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e6a:	6892      	ldr	r2, [r2, #8]
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f2c0 80aa 	blt.w	8009fcc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	3304      	adds	r3, #4
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe f9f5 	bl	8008278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e8e:	463b      	mov	r3, r7
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ff6b 	bl	8009d6c <prvSampleTimeNow>
 8009e96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	f200 8097 	bhi.w	8009fce <prvProcessReceivedCommands+0x19e>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <prvProcessReceivedCommands+0x78>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed1 	.word	0x08009ed1
 8009eb0:	08009ed1 	.word	0x08009ed1
 8009eb4:	08009f45 	.word	0x08009f45
 8009eb8:	08009f59 	.word	0x08009f59
 8009ebc:	08009fa3 	.word	0x08009fa3
 8009ec0:	08009ed1 	.word	0x08009ed1
 8009ec4:	08009ed1 	.word	0x08009ed1
 8009ec8:	08009f45 	.word	0x08009f45
 8009ecc:	08009f59 	.word	0x08009f59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed6:	f043 0301 	orr.w	r3, r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	18d1      	adds	r1, r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef0:	f7ff ff5c 	bl	8009dac <prvInsertTimerInActiveList>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d069      	beq.n	8009fce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d05e      	beq.n	8009fce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	441a      	add	r2, r3
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f22:	f7ff fe05 	bl	8009b30 <xTimerGenericCommand>
 8009f26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d14f      	bne.n	8009fce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	61bb      	str	r3, [r7, #24]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f4a:	f023 0301 	bic.w	r3, r3, #1
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f56:	e03a      	b.n	8009fce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	617b      	str	r3, [r7, #20]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9c:	f7ff ff06 	bl	8009dac <prvInsertTimerInActiveList>
					break;
 8009fa0:	e015      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d103      	bne.n	8009fb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb2:	f000 fbdd 	bl	800a770 <vPortFree>
 8009fb6:	e00a      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fca:	e000      	b.n	8009fce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <prvProcessReceivedCommands+0x1c0>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	1d39      	adds	r1, r7, #4
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fc16 	bl	8008808 <xQueueReceive>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f47f af2a 	bne.w	8009e38 <prvProcessReceivedCommands+0x8>
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	3730      	adds	r7, #48	; 0x30
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000dd8 	.word	0x20000dd8

08009ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ffa:	e048      	b.n	800a08e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ffc:	4b2d      	ldr	r3, [pc, #180]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a006:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe f92f 	bl	8008278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d02e      	beq.n	800a08e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d90e      	bls.n	800a060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3304      	adds	r3, #4
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f7fe f8d4 	bl	8008206 <vListInsert>
 800a05e:	e016      	b.n	800a08e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	2100      	movs	r1, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fd60 	bl	8009b30 <xTimerGenericCommand>
 800a070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	603b      	str	r3, [r7, #0]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a08e:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1b1      	bne.n	8009ffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <prvSwitchTimerLists+0xc4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a04      	ldr	r2, [pc, #16]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a0a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0a6:	4a04      	ldr	r2, [pc, #16]	; (800a0b8 <prvSwitchTimerLists+0xc4>)
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	6013      	str	r3, [r2, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000dd0 	.word	0x20000dd0
 800a0b8:	20000dd4 	.word	0x20000dd4

0800a0bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0c2:	f000 f967 	bl	800a394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0c6:	4b15      	ldr	r3, [pc, #84]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d120      	bne.n	800a110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0ce:	4814      	ldr	r0, [pc, #80]	; (800a120 <prvCheckForValidListAndQueue+0x64>)
 800a0d0:	f7fe f848 	bl	8008164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0d4:	4813      	ldr	r0, [pc, #76]	; (800a124 <prvCheckForValidListAndQueue+0x68>)
 800a0d6:	f7fe f845 	bl	8008164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0da:	4b13      	ldr	r3, [pc, #76]	; (800a128 <prvCheckForValidListAndQueue+0x6c>)
 800a0dc:	4a10      	ldr	r2, [pc, #64]	; (800a120 <prvCheckForValidListAndQueue+0x64>)
 800a0de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0e0:	4b12      	ldr	r3, [pc, #72]	; (800a12c <prvCheckForValidListAndQueue+0x70>)
 800a0e2:	4a10      	ldr	r2, [pc, #64]	; (800a124 <prvCheckForValidListAndQueue+0x68>)
 800a0e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4b11      	ldr	r3, [pc, #68]	; (800a130 <prvCheckForValidListAndQueue+0x74>)
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <prvCheckForValidListAndQueue+0x78>)
 800a0ee:	2110      	movs	r1, #16
 800a0f0:	200a      	movs	r0, #10
 800a0f2:	f7fe f953 	bl	800839c <xQueueGenericCreateStatic>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	490b      	ldr	r1, [pc, #44]	; (800a138 <prvCheckForValidListAndQueue+0x7c>)
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fd6c 	bl	8008be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a110:	f000 f970 	bl	800a3f4 <vPortExitCritical>
}
 800a114:	bf00      	nop
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000dd8 	.word	0x20000dd8
 800a120:	20000da8 	.word	0x20000da8
 800a124:	20000dbc 	.word	0x20000dbc
 800a128:	20000dd0 	.word	0x20000dd0
 800a12c:	20000dd4 	.word	0x20000dd4
 800a130:	20000e84 	.word	0x20000e84
 800a134:	20000de4 	.word	0x20000de4
 800a138:	0800b778 	.word	0x0800b778

0800a13c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3b04      	subs	r3, #4
 800a14c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3b04      	subs	r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f023 0201 	bic.w	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3b04      	subs	r3, #4
 800a16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a16c:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <pxPortInitialiseStack+0x64>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3b14      	subs	r3, #20
 800a176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3b04      	subs	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f06f 0202 	mvn.w	r2, #2
 800a18a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3b20      	subs	r3, #32
 800a190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a192:	68fb      	ldr	r3, [r7, #12]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	0800a1a5 	.word	0x0800a1a5

0800a1a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <prvTaskExitError+0x54>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d00a      	beq.n	800a1ce <prvTaskExitError+0x2a>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	60fb      	str	r3, [r7, #12]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <prvTaskExitError+0x28>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60bb      	str	r3, [r7, #8]
}
 800a1e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1e2:	bf00      	nop
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0fc      	beq.n	800a1e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	20000124 	.word	0x20000124
 800a1fc:	00000000 	.word	0x00000000

0800a200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a200:	4b07      	ldr	r3, [pc, #28]	; (800a220 <pxCurrentTCBConst2>)
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	6808      	ldr	r0, [r1, #0]
 800a206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20a:	f380 8809 	msr	PSP, r0
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f04f 0000 	mov.w	r0, #0
 800a216:	f380 8811 	msr	BASEPRI, r0
 800a21a:	4770      	bx	lr
 800a21c:	f3af 8000 	nop.w

0800a220 <pxCurrentTCBConst2>:
 800a220:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop

0800a228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a228:	4808      	ldr	r0, [pc, #32]	; (800a24c <prvPortStartFirstTask+0x24>)
 800a22a:	6800      	ldr	r0, [r0, #0]
 800a22c:	6800      	ldr	r0, [r0, #0]
 800a22e:	f380 8808 	msr	MSP, r0
 800a232:	f04f 0000 	mov.w	r0, #0
 800a236:	f380 8814 	msr	CONTROL, r0
 800a23a:	b662      	cpsie	i
 800a23c:	b661      	cpsie	f
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	df00      	svc	0
 800a248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a24a:	bf00      	nop
 800a24c:	e000ed08 	.word	0xe000ed08

0800a250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a256:	4b46      	ldr	r3, [pc, #280]	; (800a370 <xPortStartScheduler+0x120>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a46      	ldr	r2, [pc, #280]	; (800a374 <xPortStartScheduler+0x124>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d10a      	bne.n	800a276 <xPortStartScheduler+0x26>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a276:	4b3e      	ldr	r3, [pc, #248]	; (800a370 <xPortStartScheduler+0x120>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a3f      	ldr	r2, [pc, #252]	; (800a378 <xPortStartScheduler+0x128>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d10a      	bne.n	800a296 <xPortStartScheduler+0x46>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	60fb      	str	r3, [r7, #12]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a296:	4b39      	ldr	r3, [pc, #228]	; (800a37c <xPortStartScheduler+0x12c>)
 800a298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	22ff      	movs	r2, #255	; 0xff
 800a2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	4b31      	ldr	r3, [pc, #196]	; (800a380 <xPortStartScheduler+0x130>)
 800a2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2be:	4b31      	ldr	r3, [pc, #196]	; (800a384 <xPortStartScheduler+0x134>)
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2c4:	e009      	b.n	800a2da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a2c6:	4b2f      	ldr	r3, [pc, #188]	; (800a384 <xPortStartScheduler+0x134>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	4a2d      	ldr	r2, [pc, #180]	; (800a384 <xPortStartScheduler+0x134>)
 800a2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d0ef      	beq.n	800a2c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2e6:	4b27      	ldr	r3, [pc, #156]	; (800a384 <xPortStartScheduler+0x134>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f1c3 0307 	rsb	r3, r3, #7
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d00a      	beq.n	800a308 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a308:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <xPortStartScheduler+0x134>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	021b      	lsls	r3, r3, #8
 800a30e:	4a1d      	ldr	r2, [pc, #116]	; (800a384 <xPortStartScheduler+0x134>)
 800a310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a312:	4b1c      	ldr	r3, [pc, #112]	; (800a384 <xPortStartScheduler+0x134>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a31a:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <xPortStartScheduler+0x134>)
 800a31c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a326:	4b18      	ldr	r3, [pc, #96]	; (800a388 <xPortStartScheduler+0x138>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <xPortStartScheduler+0x138>)
 800a32c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <xPortStartScheduler+0x138>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a14      	ldr	r2, [pc, #80]	; (800a388 <xPortStartScheduler+0x138>)
 800a338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a33c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a33e:	f000 f8dd 	bl	800a4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a342:	4b12      	ldr	r3, [pc, #72]	; (800a38c <xPortStartScheduler+0x13c>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a348:	f000 f8fc 	bl	800a544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a34c:	4b10      	ldr	r3, [pc, #64]	; (800a390 <xPortStartScheduler+0x140>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <xPortStartScheduler+0x140>)
 800a352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a358:	f7ff ff66 	bl	800a228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a35c:	f7ff f854 	bl	8009408 <vTaskSwitchContext>
	prvTaskExitError();
 800a360:	f7ff ff20 	bl	800a1a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	e000ed00 	.word	0xe000ed00
 800a374:	410fc271 	.word	0x410fc271
 800a378:	410fc270 	.word	0x410fc270
 800a37c:	e000e400 	.word	0xe000e400
 800a380:	20000ed4 	.word	0x20000ed4
 800a384:	20000ed8 	.word	0x20000ed8
 800a388:	e000ed20 	.word	0xe000ed20
 800a38c:	20000124 	.word	0x20000124
 800a390:	e000ef34 	.word	0xe000ef34

0800a394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	607b      	str	r3, [r7, #4]
}
 800a3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10f      	bne.n	800a3e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <vPortEnterCritical+0x5c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	603b      	str	r3, [r7, #0]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <vPortEnterCritical+0x4a>
	}
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	20000124 	.word	0x20000124
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3fa:	4b12      	ldr	r3, [pc, #72]	; (800a444 <vPortExitCritical+0x50>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <vPortExitCritical+0x24>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	607b      	str	r3, [r7, #4]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a418:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <vPortExitCritical+0x50>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	4a09      	ldr	r2, [pc, #36]	; (800a444 <vPortExitCritical+0x50>)
 800a420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a422:	4b08      	ldr	r3, [pc, #32]	; (800a444 <vPortExitCritical+0x50>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <vPortExitCritical+0x42>
 800a42a:	2300      	movs	r3, #0
 800a42c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f383 8811 	msr	BASEPRI, r3
}
 800a434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000124 	.word	0x20000124
	...

0800a450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a450:	f3ef 8009 	mrs	r0, PSP
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <pxCurrentTCBConst>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	f01e 0f10 	tst.w	lr, #16
 800a460:	bf08      	it	eq
 800a462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	6010      	str	r0, [r2, #0]
 800a46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a474:	f380 8811 	msr	BASEPRI, r0
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f7fe ffc2 	bl	8009408 <vTaskSwitchContext>
 800a484:	f04f 0000 	mov.w	r0, #0
 800a488:	f380 8811 	msr	BASEPRI, r0
 800a48c:	bc09      	pop	{r0, r3}
 800a48e:	6819      	ldr	r1, [r3, #0]
 800a490:	6808      	ldr	r0, [r1, #0]
 800a492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a496:	f01e 0f10 	tst.w	lr, #16
 800a49a:	bf08      	it	eq
 800a49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4a0:	f380 8809 	msr	PSP, r0
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	f3af 8000 	nop.w

0800a4b0 <pxCurrentTCBConst>:
 800a4b0:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop

0800a4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	607b      	str	r3, [r7, #4]
}
 800a4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4d2:	f7fe fedf 	bl	8009294 <xTaskIncrementTick>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <xPortSysTickHandler+0x40>)
 800a4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
}
 800a4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <vPortSetupTimerInterrupt+0x34>)
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <vPortSetupTimerInterrupt+0x38>)
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <vPortSetupTimerInterrupt+0x3c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0a      	ldr	r2, [pc, #40]	; (800a53c <vPortSetupTimerInterrupt+0x40>)
 800a512:	fba2 2303 	umull	r2, r3, r2, r3
 800a516:	099b      	lsrs	r3, r3, #6
 800a518:	4a09      	ldr	r2, [pc, #36]	; (800a540 <vPortSetupTimerInterrupt+0x44>)
 800a51a:	3b01      	subs	r3, #1
 800a51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <vPortSetupTimerInterrupt+0x34>)
 800a520:	2207      	movs	r2, #7
 800a522:	601a      	str	r2, [r3, #0]
}
 800a524:	bf00      	nop
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	e000e010 	.word	0xe000e010
 800a534:	e000e018 	.word	0xe000e018
 800a538:	20000008 	.word	0x20000008
 800a53c:	10624dd3 	.word	0x10624dd3
 800a540:	e000e014 	.word	0xe000e014

0800a544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a554 <vPortEnableVFP+0x10>
 800a548:	6801      	ldr	r1, [r0, #0]
 800a54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a54e:	6001      	str	r1, [r0, #0]
 800a550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a552:	bf00      	nop
 800a554:	e000ed88 	.word	0xe000ed88

0800a558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a55e:	f3ef 8305 	mrs	r3, IPSR
 800a562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b0f      	cmp	r3, #15
 800a568:	d914      	bls.n	800a594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a56a:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <vPortValidateInterruptPriority+0x70>)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a574:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <vPortValidateInterruptPriority+0x74>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	7afa      	ldrb	r2, [r7, #11]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d20a      	bcs.n	800a594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	607b      	str	r3, [r7, #4]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <vPortValidateInterruptPriority+0x78>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a59c:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <vPortValidateInterruptPriority+0x7c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d90a      	bls.n	800a5ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	603b      	str	r3, [r7, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <vPortValidateInterruptPriority+0x60>
	}
 800a5ba:	bf00      	nop
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	e000e3f0 	.word	0xe000e3f0
 800a5cc:	20000ed4 	.word	0x20000ed4
 800a5d0:	e000ed0c 	.word	0xe000ed0c
 800a5d4:	20000ed8 	.word	0x20000ed8

0800a5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	; 0x28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5e4:	f7fe fd9a 	bl	800911c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5e8:	4b5b      	ldr	r3, [pc, #364]	; (800a758 <pvPortMalloc+0x180>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5f0:	f000 f920 	bl	800a834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5f4:	4b59      	ldr	r3, [pc, #356]	; (800a75c <pvPortMalloc+0x184>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 8093 	bne.w	800a728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01d      	beq.n	800a644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a608:	2208      	movs	r2, #8
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2b00      	cmp	r3, #0
 800a618:	d014      	beq.n	800a644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f023 0307 	bic.w	r3, r3, #7
 800a620:	3308      	adds	r3, #8
 800a622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <pvPortMalloc+0x6c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	617b      	str	r3, [r7, #20]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d06e      	beq.n	800a728 <pvPortMalloc+0x150>
 800a64a:	4b45      	ldr	r3, [pc, #276]	; (800a760 <pvPortMalloc+0x188>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d869      	bhi.n	800a728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a654:	4b43      	ldr	r3, [pc, #268]	; (800a764 <pvPortMalloc+0x18c>)
 800a656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a658:	4b42      	ldr	r3, [pc, #264]	; (800a764 <pvPortMalloc+0x18c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	e004      	b.n	800a66a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <pvPortMalloc+0xa4>
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f1      	bne.n	800a660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a67c:	4b36      	ldr	r3, [pc, #216]	; (800a758 <pvPortMalloc+0x180>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a682:	429a      	cmp	r2, r3
 800a684:	d050      	beq.n	800a728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2208      	movs	r2, #8
 800a68c:	4413      	add	r3, r2
 800a68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d91f      	bls.n	800a6e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	613b      	str	r3, [r7, #16]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1ad2      	subs	r2, r2, r3
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e2:	69b8      	ldr	r0, [r7, #24]
 800a6e4:	f000 f908 	bl	800a8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <pvPortMalloc+0x188>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <pvPortMalloc+0x188>)
 800a6f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <pvPortMalloc+0x188>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <pvPortMalloc+0x190>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d203      	bcs.n	800a70a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <pvPortMalloc+0x188>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <pvPortMalloc+0x190>)
 800a708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	4b13      	ldr	r3, [pc, #76]	; (800a75c <pvPortMalloc+0x184>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	431a      	orrs	r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <pvPortMalloc+0x194>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	4a11      	ldr	r2, [pc, #68]	; (800a76c <pvPortMalloc+0x194>)
 800a726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a728:	f7fe fd06 	bl	8009138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <pvPortMalloc+0x174>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <pvPortMalloc+0x172>
	return pvReturn;
 800a74c:	69fb      	ldr	r3, [r7, #28]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20001a9c 	.word	0x20001a9c
 800a75c:	20001ab0 	.word	0x20001ab0
 800a760:	20001aa0 	.word	0x20001aa0
 800a764:	20001a94 	.word	0x20001a94
 800a768:	20001aa4 	.word	0x20001aa4
 800a76c:	20001aa8 	.word	0x20001aa8

0800a770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d04d      	beq.n	800a81e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a782:	2308      	movs	r3, #8
 800a784:	425b      	negs	r3, r3
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	4413      	add	r3, r2
 800a78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	4b24      	ldr	r3, [pc, #144]	; (800a828 <vPortFree+0xb8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4013      	ands	r3, r2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <vPortFree+0x44>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00a      	beq.n	800a7d2 <vPortFree+0x62>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	60bb      	str	r3, [r7, #8]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <vPortFree+0xb8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01e      	beq.n	800a81e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11a      	bne.n	800a81e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <vPortFree+0xb8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	401a      	ands	r2, r3
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7f8:	f7fe fc90 	bl	800911c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	4b0a      	ldr	r3, [pc, #40]	; (800a82c <vPortFree+0xbc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4413      	add	r3, r2
 800a806:	4a09      	ldr	r2, [pc, #36]	; (800a82c <vPortFree+0xbc>)
 800a808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a80a:	6938      	ldr	r0, [r7, #16]
 800a80c:	f000 f874 	bl	800a8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <vPortFree+0xc0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3301      	adds	r3, #1
 800a816:	4a06      	ldr	r2, [pc, #24]	; (800a830 <vPortFree+0xc0>)
 800a818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a81a:	f7fe fc8d 	bl	8009138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a81e:	bf00      	nop
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001ab0 	.word	0x20001ab0
 800a82c:	20001aa0 	.word	0x20001aa0
 800a830:	20001aac 	.word	0x20001aac

0800a834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a83a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a840:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <prvHeapInit+0xac>)
 800a842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00c      	beq.n	800a868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3307      	adds	r3, #7
 800a852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <prvHeapInit+0xac>)
 800a864:	4413      	add	r3, r2
 800a866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a86c:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <prvHeapInit+0xb0>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <prvHeapInit+0xb0>)
 800a874:	2200      	movs	r2, #0
 800a876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4413      	add	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a880:	2208      	movs	r2, #8
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <prvHeapInit+0xb4>)
 800a894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <prvHeapInit+0xb4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a89e:	4b12      	ldr	r3, [pc, #72]	; (800a8e8 <prvHeapInit+0xb4>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvHeapInit+0xb4>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <prvHeapInit+0xb8>)
 800a8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <prvHeapInit+0xbc>)
 800a8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <prvHeapInit+0xc0>)
 800a8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	20000edc 	.word	0x20000edc
 800a8e4:	20001a94 	.word	0x20001a94
 800a8e8:	20001a9c 	.word	0x20001a9c
 800a8ec:	20001aa4 	.word	0x20001aa4
 800a8f0:	20001aa0 	.word	0x20001aa0
 800a8f4:	20001ab0 	.word	0x20001ab0

0800a8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a900:	4b28      	ldr	r3, [pc, #160]	; (800a9a4 <prvInsertBlockIntoFreeList+0xac>)
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	e002      	b.n	800a90c <prvInsertBlockIntoFreeList+0x14>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d8f7      	bhi.n	800a906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	4413      	add	r3, r2
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d108      	bne.n	800a93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	441a      	add	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	441a      	add	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d118      	bne.n	800a980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d00d      	beq.n	800a976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	441a      	add	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e008      	b.n	800a988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	e003      	b.n	800a988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d002      	beq.n	800a996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a996:	bf00      	nop
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20001a94 	.word	0x20001a94
 800a9a8:	20001a9c 	.word	0x20001a9c

0800a9ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	4912      	ldr	r1, [pc, #72]	; (800a9fc <MX_USB_DEVICE_Init+0x50>)
 800a9b4:	4812      	ldr	r0, [pc, #72]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9b6:	f7fc f8e1 	bl	8006b7c <USBD_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9c0:	f7f6 fb74 	bl	80010ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9c4:	490f      	ldr	r1, [pc, #60]	; (800aa04 <MX_USB_DEVICE_Init+0x58>)
 800a9c6:	480e      	ldr	r0, [pc, #56]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9c8:	f7fc f908 	bl	8006bdc <USBD_RegisterClass>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9d2:	f7f6 fb6b 	bl	80010ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9d6:	490c      	ldr	r1, [pc, #48]	; (800aa08 <MX_USB_DEVICE_Init+0x5c>)
 800a9d8:	4809      	ldr	r0, [pc, #36]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9da:	f7fc f829 	bl	8006a30 <USBD_CDC_RegisterInterface>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9e4:	f7f6 fb62 	bl	80010ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9e8:	4805      	ldr	r0, [pc, #20]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9ea:	f7fc f91e 	bl	8006c2a <USBD_Start>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9f4:	f7f6 fb5a 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9f8:	bf00      	nop
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20000144 	.word	0x20000144
 800aa00:	20001f64 	.word	0x20001f64
 800aa04:	20000020 	.word	0x20000020
 800aa08:	20000130 	.word	0x20000130

0800aa0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa10:	2200      	movs	r2, #0
 800aa12:	4905      	ldr	r1, [pc, #20]	; (800aa28 <CDC_Init_FS+0x1c>)
 800aa14:	4805      	ldr	r0, [pc, #20]	; (800aa2c <CDC_Init_FS+0x20>)
 800aa16:	f7fc f820 	bl	8006a5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa1a:	4905      	ldr	r1, [pc, #20]	; (800aa30 <CDC_Init_FS+0x24>)
 800aa1c:	4803      	ldr	r0, [pc, #12]	; (800aa2c <CDC_Init_FS+0x20>)
 800aa1e:	f7fc f83a 	bl	8006a96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20002434 	.word	0x20002434
 800aa2c:	20001f64 	.word	0x20001f64
 800aa30:	20002234 	.word	0x20002234

0800aa34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b23      	cmp	r3, #35	; 0x23
 800aa58:	f200 8098 	bhi.w	800ab8c <CDC_Control_FS+0x148>
 800aa5c:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <CDC_Control_FS+0x20>)
 800aa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa62:	bf00      	nop
 800aa64:	0800ab8d 	.word	0x0800ab8d
 800aa68:	0800ab8d 	.word	0x0800ab8d
 800aa6c:	0800ab8d 	.word	0x0800ab8d
 800aa70:	0800ab8d 	.word	0x0800ab8d
 800aa74:	0800ab8d 	.word	0x0800ab8d
 800aa78:	0800ab8d 	.word	0x0800ab8d
 800aa7c:	0800ab8d 	.word	0x0800ab8d
 800aa80:	0800ab8d 	.word	0x0800ab8d
 800aa84:	0800ab8d 	.word	0x0800ab8d
 800aa88:	0800ab8d 	.word	0x0800ab8d
 800aa8c:	0800ab8d 	.word	0x0800ab8d
 800aa90:	0800ab8d 	.word	0x0800ab8d
 800aa94:	0800ab8d 	.word	0x0800ab8d
 800aa98:	0800ab8d 	.word	0x0800ab8d
 800aa9c:	0800ab8d 	.word	0x0800ab8d
 800aaa0:	0800ab8d 	.word	0x0800ab8d
 800aaa4:	0800ab8d 	.word	0x0800ab8d
 800aaa8:	0800ab8d 	.word	0x0800ab8d
 800aaac:	0800ab8d 	.word	0x0800ab8d
 800aab0:	0800ab8d 	.word	0x0800ab8d
 800aab4:	0800ab8d 	.word	0x0800ab8d
 800aab8:	0800ab8d 	.word	0x0800ab8d
 800aabc:	0800ab8d 	.word	0x0800ab8d
 800aac0:	0800ab8d 	.word	0x0800ab8d
 800aac4:	0800ab8d 	.word	0x0800ab8d
 800aac8:	0800ab8d 	.word	0x0800ab8d
 800aacc:	0800ab8d 	.word	0x0800ab8d
 800aad0:	0800ab8d 	.word	0x0800ab8d
 800aad4:	0800ab8d 	.word	0x0800ab8d
 800aad8:	0800ab8d 	.word	0x0800ab8d
 800aadc:	0800ab8d 	.word	0x0800ab8d
 800aae0:	0800ab8d 	.word	0x0800ab8d
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800ab39 	.word	0x0800ab39
 800aaec:	0800ab8d 	.word	0x0800ab8d
 800aaf0:	0800ab8d 	.word	0x0800ab8d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	431a      	orrs	r2, r3
				| (pbuf[2] << 16) | (pbuf[3] << 24));
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	3302      	adds	r3, #2
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	041b      	lsls	r3, r3, #16
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	3303      	adds	r3, #3
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	061b      	lsls	r3, r3, #24
 800ab16:	4313      	orrs	r3, r2
		LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8)
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4b20      	ldr	r3, [pc, #128]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab1c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	791a      	ldrb	r2, [r3, #4]
 800ab22:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab24:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	795a      	ldrb	r2, [r3, #5]
 800ab2a:	4b1c      	ldr	r3, [pc, #112]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab2c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	799a      	ldrb	r2, [r3, #6]
 800ab32:	4b1a      	ldr	r3, [pc, #104]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab34:	719a      	strb	r2, [r3, #6]
		break;
 800ab36:	e02a      	b.n	800ab8e <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (LineCoding.bitrate);
 800ab38:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 800ab42:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	0a1a      	lsrs	r2, r3, #8
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 800ab50:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	0c1a      	lsrs	r2, r3, #16
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	3302      	adds	r3, #2
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	0e1a      	lsrs	r2, r3, #24
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	3303      	adds	r3, #3
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab72:	7912      	ldrb	r2, [r2, #4]
 800ab74:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	3305      	adds	r3, #5
 800ab7a:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab7c:	7952      	ldrb	r2, [r2, #5]
 800ab7e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	3306      	adds	r3, #6
 800ab84:	4a05      	ldr	r2, [pc, #20]	; (800ab9c <CDC_Control_FS+0x158>)
 800ab86:	7992      	ldrb	r2, [r2, #6]
 800ab88:	701a      	strb	r2, [r3, #0]
		break;
 800ab8a:	e000      	b.n	800ab8e <CDC_Control_FS+0x14a>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800ab8c:	bf00      	nop
	}

  return (USBD_OK);
 800ab8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	20000128 	.word	0x20000128

0800aba0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4808      	ldr	r0, [pc, #32]	; (800abd0 <CDC_Receive_FS+0x30>)
 800abae:	f7fb ff72 	bl	8006a96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800abb2:	4807      	ldr	r0, [pc, #28]	; (800abd0 <CDC_Receive_FS+0x30>)
 800abb4:	f7fb ffb8 	bl	8006b28 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf,Len[0]);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f5 ff14 	bl	80009ec <CDC_ReceiveCallback>
  return (USBD_OK);
 800abc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	20001f64 	.word	0x20001f64

0800abd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800abe4:	4b0d      	ldr	r3, [pc, #52]	; (800ac1c <CDC_Transmit_FS+0x48>)
 800abe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e00b      	b.n	800ac12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800abfa:	887b      	ldrh	r3, [r7, #2]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4806      	ldr	r0, [pc, #24]	; (800ac1c <CDC_Transmit_FS+0x48>)
 800ac02:	f7fb ff2a 	bl	8006a5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac06:	4805      	ldr	r0, [pc, #20]	; (800ac1c <CDC_Transmit_FS+0x48>)
 800ac08:	f7fb ff5e 	bl	8006ac8 <USBD_CDC_TransmitPacket>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20001f64 	.word	0x20001f64

0800ac20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
	...

0800ac44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	6039      	str	r1, [r7, #0]
 800ac4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2212      	movs	r2, #18
 800ac54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac56:	4b03      	ldr	r3, [pc, #12]	; (800ac64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20000164 	.word	0x20000164

0800ac68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2204      	movs	r2, #4
 800ac78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac7a:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20000184 	.word	0x20000184

0800ac8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	4907      	ldr	r1, [pc, #28]	; (800acc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800aca2:	4808      	ldr	r0, [pc, #32]	; (800acc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aca4:	f7fd f81d 	bl	8007ce2 <USBD_GetString>
 800aca8:	e004      	b.n	800acb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	4904      	ldr	r1, [pc, #16]	; (800acc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800acae:	4805      	ldr	r0, [pc, #20]	; (800acc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800acb0:	f7fd f817 	bl	8007ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20002c34 	.word	0x20002c34
 800acc4:	0800b780 	.word	0x0800b780

0800acc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	4603      	mov	r3, r0
 800acd0:	6039      	str	r1, [r7, #0]
 800acd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	4904      	ldr	r1, [pc, #16]	; (800ace8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acd8:	4804      	ldr	r0, [pc, #16]	; (800acec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acda:	f7fd f802 	bl	8007ce2 <USBD_GetString>
  return USBD_StrDesc;
 800acde:	4b02      	ldr	r3, [pc, #8]	; (800ace8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20002c34 	.word	0x20002c34
 800acec:	0800b798 	.word	0x0800b798

0800acf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	6039      	str	r1, [r7, #0]
 800acfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	221a      	movs	r2, #26
 800ad00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad02:	f000 f855 	bl	800adb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad06:	4b02      	ldr	r3, [pc, #8]	; (800ad10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20000188 	.word	0x20000188

0800ad14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	6039      	str	r1, [r7, #0]
 800ad1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	4907      	ldr	r1, [pc, #28]	; (800ad48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad2a:	4808      	ldr	r0, [pc, #32]	; (800ad4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad2c:	f7fc ffd9 	bl	8007ce2 <USBD_GetString>
 800ad30:	e004      	b.n	800ad3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	4904      	ldr	r1, [pc, #16]	; (800ad48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad36:	4805      	ldr	r0, [pc, #20]	; (800ad4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad38:	f7fc ffd3 	bl	8007ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad3c:	4b02      	ldr	r3, [pc, #8]	; (800ad48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20002c34 	.word	0x20002c34
 800ad4c:	0800b7ac 	.word	0x0800b7ac

0800ad50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	6039      	str	r1, [r7, #0]
 800ad5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d105      	bne.n	800ad6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4907      	ldr	r1, [pc, #28]	; (800ad84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad66:	4808      	ldr	r0, [pc, #32]	; (800ad88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad68:	f7fc ffbb 	bl	8007ce2 <USBD_GetString>
 800ad6c:	e004      	b.n	800ad78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	4904      	ldr	r1, [pc, #16]	; (800ad84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad72:	4805      	ldr	r0, [pc, #20]	; (800ad88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad74:	f7fc ffb5 	bl	8007ce2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad78:	4b02      	ldr	r3, [pc, #8]	; (800ad84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20002c34 	.word	0x20002c34
 800ad88:	0800b7b8 	.word	0x0800b7b8

0800ad8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	220c      	movs	r2, #12
 800ad9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20000178 	.word	0x20000178

0800adb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adb6:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <Get_SerialNum+0x44>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <Get_SerialNum+0x48>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adc2:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <Get_SerialNum+0x4c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4413      	add	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800add6:	2208      	movs	r2, #8
 800add8:	4909      	ldr	r1, [pc, #36]	; (800ae00 <Get_SerialNum+0x50>)
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 f814 	bl	800ae08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ade0:	2204      	movs	r2, #4
 800ade2:	4908      	ldr	r1, [pc, #32]	; (800ae04 <Get_SerialNum+0x54>)
 800ade4:	68b8      	ldr	r0, [r7, #8]
 800ade6:	f000 f80f 	bl	800ae08 <IntToUnicode>
  }
}
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	1fff7590 	.word	0x1fff7590
 800adf8:	1fff7594 	.word	0x1fff7594
 800adfc:	1fff7598 	.word	0x1fff7598
 800ae00:	2000018a 	.word	0x2000018a
 800ae04:	2000019a 	.word	0x2000019a

0800ae08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	4613      	mov	r3, r2
 800ae14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
 800ae1e:	e027      	b.n	800ae70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	0f1b      	lsrs	r3, r3, #28
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d80b      	bhi.n	800ae40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	0f1b      	lsrs	r3, r3, #28
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	4619      	mov	r1, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	440b      	add	r3, r1
 800ae38:	3230      	adds	r2, #48	; 0x30
 800ae3a:	b2d2      	uxtb	r2, r2
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	e00a      	b.n	800ae56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	0f1b      	lsrs	r3, r3, #28
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	440b      	add	r3, r1
 800ae50:	3237      	adds	r2, #55	; 0x37
 800ae52:	b2d2      	uxtb	r2, r2
 800ae54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	3301      	adds	r3, #1
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	4413      	add	r3, r2
 800ae66:	2200      	movs	r2, #0
 800ae68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	75fb      	strb	r3, [r7, #23]
 800ae70:	7dfa      	ldrb	r2, [r7, #23]
 800ae72:	79fb      	ldrb	r3, [r7, #7]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d3d3      	bcc.n	800ae20 <IntToUnicode+0x18>
  }
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	371c      	adds	r7, #28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	605a      	str	r2, [r3, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
 800ae9c:	60da      	str	r2, [r3, #12]
 800ae9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aea8:	d14e      	bne.n	800af48 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aeaa:	4b29      	ldr	r3, [pc, #164]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aeac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeae:	4a28      	ldr	r2, [pc, #160]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aeb0:	f043 0301 	orr.w	r3, r3, #1
 800aeb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeb6:	4b26      	ldr	r3, [pc, #152]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aeb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec8:	2302      	movs	r3, #2
 800aeca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aed0:	2303      	movs	r3, #3
 800aed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aed4:	230a      	movs	r3, #10
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aed8:	f107 0314 	add.w	r3, r7, #20
 800aedc:	4619      	mov	r1, r3
 800aede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aee2:	f7f6 fd4b 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aee6:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeea:	4a19      	ldr	r2, [pc, #100]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aeec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aef2:	4b17      	ldr	r3, [pc, #92]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800aef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aefe:	4b14      	ldr	r3, [pc, #80]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d114      	bne.n	800af34 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af0e:	4a10      	ldr	r2, [pc, #64]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af14:	6593      	str	r3, [r2, #88]	; 0x58
 800af16:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1e:	60bb      	str	r3, [r7, #8]
 800af20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800af22:	f7f8 f85b 	bl	8002fdc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800af26:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <HAL_PCD_MspInit+0xc8>)
 800af2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af30:	6593      	str	r3, [r2, #88]	; 0x58
 800af32:	e001      	b.n	800af38 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800af34:	f7f8 f852 	bl	8002fdc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800af38:	2200      	movs	r2, #0
 800af3a:	2105      	movs	r1, #5
 800af3c:	2043      	movs	r0, #67	; 0x43
 800af3e:	f7f6 fce6 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af42:	2043      	movs	r0, #67	; 0x43
 800af44:	f7f6 fcff 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af48:	bf00      	nop
 800af4a:	3728      	adds	r7, #40	; 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	40021000 	.word	0x40021000

0800af54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af68:	4619      	mov	r1, r3
 800af6a:	4610      	mov	r0, r2
 800af6c:	f7fb fea8 	bl	8006cc0 <USBD_LL_SetupStage>
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800af8a:	78fa      	ldrb	r2, [r7, #3]
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	4613      	mov	r3, r2
 800af90:	00db      	lsls	r3, r3, #3
 800af92:	1a9b      	subs	r3, r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	440b      	add	r3, r1
 800af98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	4619      	mov	r1, r3
 800afa2:	f7fb fee2 	bl	8006d6a <USBD_LL_DataOutStage>
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	460b      	mov	r3, r1
 800afb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800afc0:	78fa      	ldrb	r2, [r7, #3]
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	4613      	mov	r3, r2
 800afc6:	00db      	lsls	r3, r3, #3
 800afc8:	1a9b      	subs	r3, r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	440b      	add	r3, r1
 800afce:	3348      	adds	r3, #72	; 0x48
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	4619      	mov	r1, r3
 800afd6:	f7fb ff2b 	bl	8006e30 <USBD_LL_DataInStage>
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fc f83f 	bl	8007074 <USBD_LL_SOF>
}
 800aff6:	bf00      	nop
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b084      	sub	sp, #16
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b006:	2301      	movs	r3, #1
 800b008:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d001      	beq.n	800b016 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b012:	f7f6 f84b 	bl	80010ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b01c:	7bfa      	ldrb	r2, [r7, #15]
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb ffe9 	bl	8006ff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fb ff95 	bl	8006f5c <USBD_LL_Reset>
}
 800b032:	bf00      	nop
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6812      	ldr	r2, [r2, #0]
 800b052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b056:	f043 0301 	orr.w	r3, r3, #1
 800b05a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b062:	4618      	mov	r0, r3
 800b064:	f7fb ffd8 	bl	8007018 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d005      	beq.n	800b07c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <HAL_PCD_SuspendCallback+0x48>)
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	4a03      	ldr	r2, [pc, #12]	; (800b084 <HAL_PCD_SuspendCallback+0x48>)
 800b076:	f043 0306 	orr.w	r3, r3, #6
 800b07a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	e000ed00 	.word	0xe000ed00

0800b088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6812      	ldr	r2, [r2, #0]
 800b09e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0a2:	f023 0301 	bic.w	r3, r3, #1
 800b0a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0b0:	4b08      	ldr	r3, [pc, #32]	; (800b0d4 <HAL_PCD_ResumeCallback+0x4c>)
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	4a07      	ldr	r2, [pc, #28]	; (800b0d4 <HAL_PCD_ResumeCallback+0x4c>)
 800b0b6:	f023 0306 	bic.w	r3, r3, #6
 800b0ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b0bc:	f000 faf6 	bl	800b6ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fb ffbc 	bl	8007044 <USBD_LL_Resume>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	e000ed00 	.word	0xe000ed00

0800b0d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fc f808 	bl	8007104 <USBD_LL_IsoOUTIncomplete>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b10e:	78fa      	ldrb	r2, [r7, #3]
 800b110:	4611      	mov	r1, r2
 800b112:	4618      	mov	r0, r3
 800b114:	f7fb ffd0 	bl	80070b8 <USBD_LL_IsoINIncomplete>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fc f80e 	bl	8007150 <USBD_LL_DevConnected>
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fc f80b 	bl	8007166 <USBD_LL_DevDisconnected>
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d13c      	bne.n	800b1e2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b168:	4a20      	ldr	r2, [pc, #128]	; (800b1ec <USBD_LL_Init+0x94>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a1e      	ldr	r2, [pc, #120]	; (800b1ec <USBD_LL_Init+0x94>)
 800b174:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b178:	4b1c      	ldr	r3, [pc, #112]	; (800b1ec <USBD_LL_Init+0x94>)
 800b17a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b17e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b180:	4b1a      	ldr	r3, [pc, #104]	; (800b1ec <USBD_LL_Init+0x94>)
 800b182:	2206      	movs	r2, #6
 800b184:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b186:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <USBD_LL_Init+0x94>)
 800b188:	2202      	movs	r2, #2
 800b18a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b18c:	4b17      	ldr	r3, [pc, #92]	; (800b1ec <USBD_LL_Init+0x94>)
 800b18e:	2202      	movs	r2, #2
 800b190:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b192:	4b16      	ldr	r3, [pc, #88]	; (800b1ec <USBD_LL_Init+0x94>)
 800b194:	2200      	movs	r2, #0
 800b196:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b198:	4b14      	ldr	r3, [pc, #80]	; (800b1ec <USBD_LL_Init+0x94>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1aa:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1b6:	480d      	ldr	r0, [pc, #52]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1b8:	f7f6 fe0c 	bl	8001dd4 <HAL_PCD_Init>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b1c2:	f7f5 ff73 	bl	80010ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b1c6:	2180      	movs	r1, #128	; 0x80
 800b1c8:	4808      	ldr	r0, [pc, #32]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1ca:	f7f7 fe6e 	bl	8002eaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b1ce:	2240      	movs	r2, #64	; 0x40
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4806      	ldr	r0, [pc, #24]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1d4:	f7f7 fe22 	bl	8002e1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b1d8:	2280      	movs	r2, #128	; 0x80
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4803      	ldr	r0, [pc, #12]	; (800b1ec <USBD_LL_Init+0x94>)
 800b1de:	f7f7 fe1d 	bl	8002e1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20002e34 	.word	0x20002e34

0800b1f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b206:	4618      	mov	r0, r3
 800b208:	f7f6 ff08 	bl	800201c <HAL_PCD_Start>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	2b03      	cmp	r3, #3
 800b214:	d816      	bhi.n	800b244 <USBD_LL_Start+0x54>
 800b216:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <USBD_LL_Start+0x2c>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b22d 	.word	0x0800b22d
 800b220:	0800b233 	.word	0x0800b233
 800b224:	0800b239 	.word	0x0800b239
 800b228:	0800b23f 	.word	0x0800b23f
    case HAL_OK :
      usb_status = USBD_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]
    break;
 800b230:	e00b      	b.n	800b24a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b232:	2303      	movs	r3, #3
 800b234:	73fb      	strb	r3, [r7, #15]
    break;
 800b236:	e008      	b.n	800b24a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b238:	2301      	movs	r3, #1
 800b23a:	73fb      	strb	r3, [r7, #15]
    break;
 800b23c:	e005      	b.n	800b24a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b23e:	2303      	movs	r3, #3
 800b240:	73fb      	strb	r3, [r7, #15]
    break;
 800b242:	e002      	b.n	800b24a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b244:	2303      	movs	r3, #3
 800b246:	73fb      	strb	r3, [r7, #15]
    break;
 800b248:	bf00      	nop
  }
  return usb_status;
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	461a      	mov	r2, r3
 800b262:	4603      	mov	r3, r0
 800b264:	70fb      	strb	r3, [r7, #3]
 800b266:	460b      	mov	r3, r1
 800b268:	70bb      	strb	r3, [r7, #2]
 800b26a:	4613      	mov	r3, r2
 800b26c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b27c:	78bb      	ldrb	r3, [r7, #2]
 800b27e:	883a      	ldrh	r2, [r7, #0]
 800b280:	78f9      	ldrb	r1, [r7, #3]
 800b282:	f7f7 fac3 	bl	800280c <HAL_PCD_EP_Open>
 800b286:	4603      	mov	r3, r0
 800b288:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d817      	bhi.n	800b2c0 <USBD_LL_OpenEP+0x6c>
 800b290:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <USBD_LL_OpenEP+0x44>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2a9 	.word	0x0800b2a9
 800b29c:	0800b2af 	.word	0x0800b2af
 800b2a0:	0800b2b5 	.word	0x0800b2b5
 800b2a4:	0800b2bb 	.word	0x0800b2bb
    case HAL_OK :
      usb_status = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ac:	e00b      	b.n	800b2c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b2:	e008      	b.n	800b2c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2b8:	e005      	b.n	800b2c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b2be:	e002      	b.n	800b2c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c4:	bf00      	nop
  }
  return usb_status;
 800b2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2ea:	78fa      	ldrb	r2, [r7, #3]
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f7 faf4 	bl	80028dc <HAL_PCD_EP_Close>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d816      	bhi.n	800b32c <USBD_LL_CloseEP+0x5c>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <USBD_LL_CloseEP+0x34>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b31b 	.word	0x0800b31b
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b327 	.word	0x0800b327
    case HAL_OK :
      usb_status = USBD_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
    break;
 800b318:	e00b      	b.n	800b332 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b31a:	2303      	movs	r3, #3
 800b31c:	73fb      	strb	r3, [r7, #15]
    break;
 800b31e:	e008      	b.n	800b332 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]
    break;
 800b324:	e005      	b.n	800b332 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	73fb      	strb	r3, [r7, #15]
    break;
 800b32a:	e002      	b.n	800b332 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	73fb      	strb	r3, [r7, #15]
    break;
 800b330:	bf00      	nop
  }
  return usb_status;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f7 fb9b 	bl	8002a96 <HAL_PCD_EP_SetStall>
 800b360:	4603      	mov	r3, r0
 800b362:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d816      	bhi.n	800b398 <USBD_LL_StallEP+0x5c>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <USBD_LL_StallEP+0x34>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b387 	.word	0x0800b387
 800b378:	0800b38d 	.word	0x0800b38d
 800b37c:	0800b393 	.word	0x0800b393
    case HAL_OK :
      usb_status = USBD_OK;
 800b380:	2300      	movs	r3, #0
 800b382:	73fb      	strb	r3, [r7, #15]
    break;
 800b384:	e00b      	b.n	800b39e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	73fb      	strb	r3, [r7, #15]
    break;
 800b38a:	e008      	b.n	800b39e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
    break;
 800b390:	e005      	b.n	800b39e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b392:	2303      	movs	r3, #3
 800b394:	73fb      	strb	r3, [r7, #15]
    break;
 800b396:	e002      	b.n	800b39e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b398:	2303      	movs	r3, #3
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	bf00      	nop
  }
  return usb_status;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3c2:	78fa      	ldrb	r2, [r7, #3]
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7f7 fbc7 	bl	8002b5a <HAL_PCD_EP_ClrStall>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d816      	bhi.n	800b404 <USBD_LL_ClearStallEP+0x5c>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <USBD_LL_ClearStallEP+0x34>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b3f3 	.word	0x0800b3f3
 800b3e4:	0800b3f9 	.word	0x0800b3f9
 800b3e8:	0800b3ff 	.word	0x0800b3ff
    case HAL_OK :
      usb_status = USBD_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f0:	e00b      	b.n	800b40a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f6:	e008      	b.n	800b40a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fc:	e005      	b.n	800b40a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3fe:	2303      	movs	r3, #3
 800b400:	73fb      	strb	r3, [r7, #15]
    break;
 800b402:	e002      	b.n	800b40a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b404:	2303      	movs	r3, #3
 800b406:	73fb      	strb	r3, [r7, #15]
    break;
 800b408:	bf00      	nop
  }
  return usb_status;
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da0b      	bge.n	800b448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b436:	68f9      	ldr	r1, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	333e      	adds	r3, #62	; 0x3e
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	e00b      	b.n	800b460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	4613      	mov	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b45e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b486:	78fa      	ldrb	r2, [r7, #3]
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7f7 f999 	bl	80027c2 <HAL_PCD_SetAddress>
 800b490:	4603      	mov	r3, r0
 800b492:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	2b03      	cmp	r3, #3
 800b498:	d816      	bhi.n	800b4c8 <USBD_LL_SetUSBAddress+0x5c>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <USBD_LL_SetUSBAddress+0x34>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4b1 	.word	0x0800b4b1
 800b4a4:	0800b4b7 	.word	0x0800b4b7
 800b4a8:	0800b4bd 	.word	0x0800b4bd
 800b4ac:	0800b4c3 	.word	0x0800b4c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4b4:	e00b      	b.n	800b4ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ba:	e008      	b.n	800b4ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c0:	e005      	b.n	800b4ce <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c6:	e002      	b.n	800b4ce <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b4cc:	bf00      	nop
  }
  return usb_status;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	607a      	str	r2, [r7, #4]
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4f6:	7af9      	ldrb	r1, [r7, #11]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	f7f7 fa8e 	bl	8002a1c <HAL_PCD_EP_Transmit>
 800b500:	4603      	mov	r3, r0
 800b502:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b504:	7dbb      	ldrb	r3, [r7, #22]
 800b506:	2b03      	cmp	r3, #3
 800b508:	d816      	bhi.n	800b538 <USBD_LL_Transmit+0x60>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <USBD_LL_Transmit+0x38>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b521 	.word	0x0800b521
 800b514:	0800b527 	.word	0x0800b527
 800b518:	0800b52d 	.word	0x0800b52d
 800b51c:	0800b533 	.word	0x0800b533
    case HAL_OK :
      usb_status = USBD_OK;
 800b520:	2300      	movs	r3, #0
 800b522:	75fb      	strb	r3, [r7, #23]
    break;
 800b524:	e00b      	b.n	800b53e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b526:	2303      	movs	r3, #3
 800b528:	75fb      	strb	r3, [r7, #23]
    break;
 800b52a:	e008      	b.n	800b53e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b52c:	2301      	movs	r3, #1
 800b52e:	75fb      	strb	r3, [r7, #23]
    break;
 800b530:	e005      	b.n	800b53e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b532:	2303      	movs	r3, #3
 800b534:	75fb      	strb	r3, [r7, #23]
    break;
 800b536:	e002      	b.n	800b53e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b538:	2303      	movs	r3, #3
 800b53a:	75fb      	strb	r3, [r7, #23]
    break;
 800b53c:	bf00      	nop
  }
  return usb_status;
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	460b      	mov	r3, r1
 800b556:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b566:	7af9      	ldrb	r1, [r7, #11]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	f7f7 fa00 	bl	8002970 <HAL_PCD_EP_Receive>
 800b570:	4603      	mov	r3, r0
 800b572:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b574:	7dbb      	ldrb	r3, [r7, #22]
 800b576:	2b03      	cmp	r3, #3
 800b578:	d816      	bhi.n	800b5a8 <USBD_LL_PrepareReceive+0x60>
 800b57a:	a201      	add	r2, pc, #4	; (adr r2, 800b580 <USBD_LL_PrepareReceive+0x38>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b591 	.word	0x0800b591
 800b584:	0800b597 	.word	0x0800b597
 800b588:	0800b59d 	.word	0x0800b59d
 800b58c:	0800b5a3 	.word	0x0800b5a3
    case HAL_OK :
      usb_status = USBD_OK;
 800b590:	2300      	movs	r3, #0
 800b592:	75fb      	strb	r3, [r7, #23]
    break;
 800b594:	e00b      	b.n	800b5ae <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b596:	2303      	movs	r3, #3
 800b598:	75fb      	strb	r3, [r7, #23]
    break;
 800b59a:	e008      	b.n	800b5ae <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b59c:	2301      	movs	r3, #1
 800b59e:	75fb      	strb	r3, [r7, #23]
    break;
 800b5a0:	e005      	b.n	800b5ae <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	75fb      	strb	r3, [r7, #23]
    break;
 800b5a6:	e002      	b.n	800b5ae <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	75fb      	strb	r3, [r7, #23]
    break;
 800b5ac:	bf00      	nop
  }
  return usb_status;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f7 fa0c 	bl	80029ec <HAL_PCD_EP_GetRxCount>
 800b5d4:	4603      	mov	r3, r0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_PCDEx_LPM_Callback+0x18>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d01f      	beq.n	800b636 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b5f6:	e03b      	b.n	800b670 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b600:	f000 f854 	bl	800b6ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b604:	4b1c      	ldr	r3, [pc, #112]	; (800b678 <HAL_PCDEx_LPM_Callback+0x98>)
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4a1b      	ldr	r2, [pc, #108]	; (800b678 <HAL_PCDEx_LPM_Callback+0x98>)
 800b60a:	f023 0306 	bic.w	r3, r3, #6
 800b60e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6812      	ldr	r2, [r2, #0]
 800b61e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b622:	f023 0301 	bic.w	r3, r3, #1
 800b626:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fb fd08 	bl	8007044 <USBD_LL_Resume>
    break;
 800b634:	e01c      	b.n	800b670 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b648:	f043 0301 	orr.w	r3, r3, #1
 800b64c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b654:	4618      	mov	r0, r3
 800b656:	f7fb fcdf 	bl	8007018 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d005      	beq.n	800b66e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <HAL_PCDEx_LPM_Callback+0x98>)
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	4a04      	ldr	r2, [pc, #16]	; (800b678 <HAL_PCDEx_LPM_Callback+0x98>)
 800b668:	f043 0306 	orr.w	r3, r3, #6
 800b66c:	6113      	str	r3, [r2, #16]
    break;
 800b66e:	bf00      	nop
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	e000ed00 	.word	0xe000ed00

0800b67c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b684:	4b03      	ldr	r3, [pc, #12]	; (800b694 <USBD_static_malloc+0x18>)
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20001ab4 	.word	0x20001ab4

0800b698 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b6b0:	f7f4 fe34 	bl	800031c <SystemClock_Config>
}
 800b6b4:	bf00      	nop
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <__libc_init_array>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	4d0d      	ldr	r5, [pc, #52]	; (800b6f0 <__libc_init_array+0x38>)
 800b6bc:	4c0d      	ldr	r4, [pc, #52]	; (800b6f4 <__libc_init_array+0x3c>)
 800b6be:	1b64      	subs	r4, r4, r5
 800b6c0:	10a4      	asrs	r4, r4, #2
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	42a6      	cmp	r6, r4
 800b6c6:	d109      	bne.n	800b6dc <__libc_init_array+0x24>
 800b6c8:	4d0b      	ldr	r5, [pc, #44]	; (800b6f8 <__libc_init_array+0x40>)
 800b6ca:	4c0c      	ldr	r4, [pc, #48]	; (800b6fc <__libc_init_array+0x44>)
 800b6cc:	f000 f82e 	bl	800b72c <_init>
 800b6d0:	1b64      	subs	r4, r4, r5
 800b6d2:	10a4      	asrs	r4, r4, #2
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	42a6      	cmp	r6, r4
 800b6d8:	d105      	bne.n	800b6e6 <__libc_init_array+0x2e>
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e0:	4798      	blx	r3
 800b6e2:	3601      	adds	r6, #1
 800b6e4:	e7ee      	b.n	800b6c4 <__libc_init_array+0xc>
 800b6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ea:	4798      	blx	r3
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	e7f2      	b.n	800b6d6 <__libc_init_array+0x1e>
 800b6f0:	0800b874 	.word	0x0800b874
 800b6f4:	0800b874 	.word	0x0800b874
 800b6f8:	0800b874 	.word	0x0800b874
 800b6fc:	0800b878 	.word	0x0800b878

0800b700 <memcpy>:
 800b700:	440a      	add	r2, r1
 800b702:	4291      	cmp	r1, r2
 800b704:	f100 33ff 	add.w	r3, r0, #4294967295
 800b708:	d100      	bne.n	800b70c <memcpy+0xc>
 800b70a:	4770      	bx	lr
 800b70c:	b510      	push	{r4, lr}
 800b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b716:	4291      	cmp	r1, r2
 800b718:	d1f9      	bne.n	800b70e <memcpy+0xe>
 800b71a:	bd10      	pop	{r4, pc}

0800b71c <memset>:
 800b71c:	4402      	add	r2, r0
 800b71e:	4603      	mov	r3, r0
 800b720:	4293      	cmp	r3, r2
 800b722:	d100      	bne.n	800b726 <memset+0xa>
 800b724:	4770      	bx	lr
 800b726:	f803 1b01 	strb.w	r1, [r3], #1
 800b72a:	e7f9      	b.n	800b720 <memset+0x4>

0800b72c <_init>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	bf00      	nop
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr

0800b738 <_fini>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	bf00      	nop
 800b73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73e:	bc08      	pop	{r3}
 800b740:	469e      	mov	lr, r3
 800b742:	4770      	bx	lr
